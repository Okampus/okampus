import type { ValueTypes } from '@okampus/shared/graphql';

export type Insert<%= className %>ArgsType = {
  objects: Array<ValueTypes['<%= className %>InsertInput']>;
  onConflict?: ValueTypes['<%= className %>OnConflict'];
};

export type InsertOne<%= className %>ArgsType = {
  object: ValueTypes['<%= className %>InsertInput'];
  onConflict?: ValueTypes['<%= className %>OnConflict'];
};

export type Update<%= className %>ArgsType = {
  where: ValueTypes['<%= className %>BoolExp'];
  _set: ValueTypes['<%= className %>SetInput'];
};

export type UpdateByPk<%= className %>ArgsType = {
  pkColumns: ValueTypes['<%= className %>PkColumnsInput'];
  _set: ValueTypes['<%= className %>SetInput'];
};

export type Find<%= className %>ArgsType = {
  where: ValueTypes['<%= className %>BoolExp'];
  orderBy?: Array<ValueTypes['<%= className %>OrderBy']>;
  distinctOn?: Array<ValueTypes['<%= className %>SelectColumn']>;
  limit?: number;
  offset?: number;
};

export type FindByPk<%= className %>ArgsType = {
  <% for(const pk of pkColumns) { %> <%= pk %>: string; <% } %>
};

export type Aggregate<%= className %>ArgsType = {
  where: ValueTypes['<%= className %>BoolExp'];
  orderBy?: Array<ValueTypes['<%= className %>OrderBy']>;
  distinctOn?: Array<ValueTypes['<%= className %>SelectColumn']>;
  limit?: number;
  offset?: number;
};
