import { RequestContext } from '<% for(const _ of Array.from({ length: subfolder.split('/').length-1 })) { %>../<% } %>../../shards/abstract/request-context';
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import { HasuraService } from '<% for(const _ of Array.from({ length: subfolder.split('/').length-1 })) { %>../<% } %>../../global/graphql/hasura.service';
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import { LogsService } from '<% for(const _ of Array.from({ length: subfolder.split('/').length-1 })) { %>../<% } %>../logs/logs.service';
import { BadRequestException, ForbiddenException, Injectable, NotFoundException, Logger } from '@nestjs/common';
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import { <%= className %>Repository, <%= className %> } from '@okampus/api/dal';
import { EntityName, ScopeRole } from '@okampus/shared/enums';

// eslint-disable-next-line @typescript-eslint/consistent-type-imports
import { EntityManager } from '@mikro-orm/core';

import type { ValueTypes } from '@okampus/shared/graphql';

@Injectable()
export class <%= pluralClassName %>Service extends RequestContext {
  private readonly logger = new Logger(<%= pluralClassName %>Service.name);

  constructor(
    private readonly em: EntityManager,
    private readonly hasuraService: HasuraService,
    private readonly logsService: LogsService,
    private readonly <%= propertyName %>Repository: <%= className %>Repository,
  ) { 
    super(); 
  }

  checkPermsCreate(props: ValueTypes['<%= className %>InsertInput']) {
    if (Object.keys(props).length === 0) throw new BadRequestException('Create props cannot be empty.');

    // Custom logic
    return true;
  }

  checkPermsDelete(<%= propertyName %>: <%= className %>) {
    if (<%= propertyName %>.deletedAt) throw new NotFoundException(`<%= className %> was deleted on ${<%= propertyName %>.deletedAt}.`);
    if (this.requester().scopeRole === ScopeRole.Admin) return true;

    // Custom logic
    return false;
  }

  checkPermsUpdate(props: ValueTypes['<%= className %>SetInput'], <%= propertyName %>: <%= className %>) {
    if (Object.keys(props).length === 0) throw new BadRequestException('Update props cannot be empty.');

    if (<%= propertyName %>.deletedAt) throw new NotFoundException(`<%= className %> was deleted on ${<%= propertyName %>.deletedAt}.`);
    if (<%= propertyName %>.hiddenAt) throw new NotFoundException('<%= className %> must be unhidden before it can be updated.');

    if (this.requester().scopeRole === ScopeRole.Admin) return true;

    // Custom logic
    return <%= propertyName %>.createdBy?.id === this.requester().id;
  }

  checkPropsConstraints(props: ValueTypes['<%= className %>SetInput']) {
    this.hasuraService.checkForbiddenFields(props);

    props.tenantId = this.tenant().id
    props.createdById = this.requester().id
    // Custom logic
    return true;
  }

  checkCreateRelationships(props: ValueTypes['<%= className %>InsertInput']) {
    // Custom logic
    return true;
  }

  async insert<%= className %>One(
    selectionSet: string[],
    object: ValueTypes['<%= className %>InsertInput'],
    onConflict?: ValueTypes['<%= className %>OnConflict'],
  ) {
    const canCreate = this.checkPermsCreate(object);
    if (!canCreate) throw new ForbiddenException('You are not allowed to insert <%= className %>.');

    const arePropsValid = this.checkPropsConstraints(object);
    if (!arePropsValid) throw new BadRequestException('Props are not valid.');

    const areRelationshipsValid = this.checkCreateRelationships(object);
    if (!areRelationshipsValid) throw new BadRequestException('Relationships are not valid.');

    selectionSet = [...selectionSet.filter((field) => field !== 'id'), 'id'];
    const data = await this.hasuraService.insertOne('insert<%= className %>One', selectionSet, object, onConflict);
  
    const <%= propertyName %> = await this.<%= propertyName %>Repository.findOneOrFail(data.insert<%= className %>One.id);
    await this.logsService.createLog(EntityName.<%= className %>, <%= propertyName %>);
    
    // Custom logic
    return data.insert<%= className %>One;
  }

  async find<%= className %>(
    selectionSet: string[],
    where: ValueTypes['<%= className %>BoolExp'],
    orderBy?: Array<ValueTypes['<%= className %>OrderBy']>,
    distinctOn?: Array<ValueTypes['<%= className %>SelectColumn']>,
    limit?: number,
    offset?: number,
  ) {
    // Custom logic
    const data = await this.hasuraService.find('<%= propertyName %>', selectionSet, where, orderBy, distinctOn, limit, offset);
    return data.<%= propertyName %>;
  }

  async find<%= className %>ByPk(
    selectionSet: string[],
    <% for(const pk of pkColumns) { %> <%= pk %>: string, <% } %>
  ) {
    // Custom logic
    const data = await this.hasuraService.findByPk('<%= propertyName %>ByPk', selectionSet, { <% for(const pk of pkColumns) { %> <%= pk %>, <% } %> });
    return data.<%= propertyName %>ByPk;
  }

  async insert<%= className %>(
    selectionSet: string[],
    objects: Array<ValueTypes['<%= className %>InsertInput']>,
    onConflict?: ValueTypes['<%= className %>OnConflict'],
  ) {
    for (const object of objects) {
      const canCreate = await this.checkPermsCreate(object);
      if (!canCreate) throw new ForbiddenException('You are not allowed to insert <%= className %>.');

      const arePropsValid = await this.checkPropsConstraints(object);
      if (!arePropsValid) throw new BadRequestException('Props are not valid.');

      const areRelationshipsValid = this.checkCreateRelationships(object);
      if (!areRelationshipsValid) throw new BadRequestException('Create relationships are not valid.');
    }

    selectionSet = [...selectionSet.filter((field) => field !== 'returning.id'), 'returning.id'];
    const data = await this.hasuraService.insert('insert<%= className %>', selectionSet, objects, onConflict);

    for (const inserted of data.insert<%= className %>.returning) {
      const <%= propertyName %> = await this.<%= propertyName %>Repository.findOneOrFail(inserted.id);
      await this.logsService.createLog(EntityName.<%= className %>, <%= propertyName %>);
    }

    // Custom logic
    return data.insert<%= className %>;
  }

  async update<%= className %>Many(
    selectionSet: string[],
    updates: Array<ValueTypes['<%= className %>Updates']>,
  ) {
    const areWheresCorrect = this.hasuraService.checkUpdates(updates);
    if (!areWheresCorrect) throw new BadRequestException('Where must only contain { id: { _eq: <id> } } in updates.');

    const <%= pluralPropertyName %> = await this.<%= propertyName %>Repository.findByIds(updates.map((update) => update.where.id._eq));
    for (const update of updates) {
      const <%= propertyName %> = <%= pluralPropertyName %>.find((<%= propertyName %>) => <%= propertyName %>.id === update.where.id._eq);
      if (!<%= propertyName %>) throw new NotFoundException(`<%= className %> (${update.where.id._eq}) was not found.`);

      const canUpdate = this.checkPermsUpdate(update._set, <%= propertyName %>);
      if (!canUpdate) throw new ForbiddenException(`You are not allowed to update <%= className %> (${update.where.id._eq}).`);

      const arePropsValid = this.checkPropsConstraints(update._set);
      if (!arePropsValid) throw new BadRequestException(`Props are not valid in ${JSON.stringify(update._set)}.`);
    }

    const data = await this.hasuraService.updateMany('update<%= className %>Many', selectionSet, updates);

    await Promise.all(<%= pluralPropertyName %>.map(async (<%= propertyName %>) => {
      const update = updates.find((update) => update.where.id._eq === <%= propertyName %>.id)
      if (!update) return;
      await this.logsService.updateLog(EntityName.<%= className %>, <%= propertyName %>, update._set);
    }));

    // Custom logic
    return data.update<%= className %>Many;
  }

  async update<%= className %>ByPk(
    selectionSet: string[],
    pkColumns: ValueTypes['<%= className %>PkColumnsInput'],
    _set: ValueTypes['<%= className %>SetInput'],
  ) {
    const <%= propertyName %> = await this.<%= propertyName %>Repository.findOneOrFail(pkColumns.id);

    const canUpdate = this.checkPermsUpdate(_set, <%= propertyName %>);
    if (!canUpdate) throw new ForbiddenException(`You are not allowed to update <%= className %> (${pkColumns.id}).`);

    const arePropsValid = this.checkPropsConstraints(_set);
    if (!arePropsValid) throw new BadRequestException(`Props are not valid in ${JSON.stringify(_set)}.`);

    const data = await this.hasuraService.updateByPk('update<%= className %>ByPk', selectionSet, pkColumns, _set);

    await this.logsService.updateLog(EntityName.<%= className %>, <%= propertyName %>, _set);

    // Custom logic
    return data.update<%= className %>ByPk;
  }

  async delete<%= className %>(
    selectionSet: string[],
    where: ValueTypes['<%= className %>BoolExp'],
  ) {
    const isWhereCorrect = this.hasuraService.checkDeleteWhere(where);
    if (!isWhereCorrect) throw new BadRequestException('Where must only contain { id: { _in: <Array<id>> } } in delete.');

    const <%= pluralPropertyName %> = await this.<%= propertyName %>Repository.findByIds(where.id._in);
    for (const <%= propertyName %> of <%= pluralPropertyName %>) {
      const canDelete = this.checkPermsDelete(<%= propertyName %>);
      if (!canDelete) throw new ForbiddenException(`You are not allowed to delete <%= className %> (${<%= propertyName %>.id}).`);
    }
  
    const data = await this.hasuraService.update('update<%= className %>', selectionSet, where, { deletedAt: new Date().toISOString() });

    await Promise.all(<%= pluralPropertyName %>.map(async (<%= propertyName %>) => {
      await this.logsService.deleteLog(EntityName.<%= className %>, <%= propertyName %>.id);
    }));

    // Custom logic
    return data.update<%= className %>;
  }

  async delete<%= className %>ByPk(
    selectionSet: string[],
    pkColumns: ValueTypes['<%= className %>PkColumnsInput'],
  ) {
    const <%= propertyName %> = await this.<%= propertyName %>Repository.findOneOrFail(pkColumns.id);

    const canDelete = this.checkPermsDelete(<%= propertyName %>);
    if (!canDelete) throw new ForbiddenException(`You are not allowed to delete <%= className %> (${pkColumns.id}).`);

    const data = await this.hasuraService.updateByPk('update<%= className %>ByPk', selectionSet, pkColumns, {
      deletedAt: new Date().toISOString(),
    });

    await this.logsService.deleteLog(EntityName.<%= className %>, pkColumns.id);
    // Custom logic
    return data.update<%= className %>ByPk;
  }

  async aggregate<%= className %>(
    selectionSet: string[],
    where: ValueTypes['<%= className %>BoolExp'],
    orderBy?: Array<ValueTypes['<%= className %>OrderBy']>,
    distinctOn?: Array<ValueTypes['<%= className %>SelectColumn']>,
    limit?: number,
    offset?: number
  ) {
    // Custom logic
    const data = await this.hasuraService.aggregate('<%= propertyName %>Aggregate', selectionSet, where, orderBy, distinctOn, limit, offset);
    return data.<%= propertyName %>Aggregate;
  }
}