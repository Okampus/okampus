directive @cached(ttl: Int! = 60, refresh: Boolean! = false) on QUERY

scalar _text

input _textComparisonExp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _isNull: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

type Action {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: Event
  eventId: bigint
  eventJoin: EventJoin
  eventJoinId: bigint
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  individualByValidatedById: Individual
  name: String!
  project: Project
  projectId: bigint
  score: Int!
  state: String!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!
  userInfo: UserInfo!
  validatedById: bigint
}

type ActionAggregate {
  aggregate: ActionAggregateFields
  nodes: [Action!]!
}

input ActionAggregateBoolExp {
  count: actionAggregateBoolExpCount
}

input actionAggregateBoolExpCount {
  arguments: [ActionSelectColumn!]
  distinct: Boolean
  filter: ActionBoolExp
  predicate: IntComparisonExp!
}

type ActionAggregateFields {
  avg: ActionAvgFields
  count(columns: [ActionSelectColumn!], distinct: Boolean): Int!
  max: ActionMaxFields
  min: ActionMinFields
  stddev: ActionStddevFields
  stddevPop: ActionStddevPopFields
  stddevSamp: ActionStddevSampFields
  sum: ActionSumFields
  varPop: ActionVarPopFields
  varSamp: ActionVarSampFields
  variance: ActionVarianceFields
}

input ActionAggregateOrderBy {
  avg: ActionAvgOrderBy
  count: OrderBy
  max: ActionMaxOrderBy
  min: ActionMinOrderBy
  stddev: ActionStddevOrderBy
  stddevPop: ActionStddevPopOrderBy
  stddevSamp: ActionStddevSampOrderBy
  sum: ActionSumOrderBy
  varPop: ActionVarPopOrderBy
  varSamp: ActionVarSampOrderBy
  variance: ActionVarianceOrderBy
}

input ActionArrRelInsertInput {
  data: [ActionInsertInput!]!
  onConflict: ActionOnConflict
}

type ActionAvgFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

input ActionAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

input ActionBoolExp {
  _and: [ActionBoolExp!]
  _not: ActionBoolExp
  _or: [ActionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualByValidatedById: IndividualBoolExp
  name: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  score: IntComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
  validatedById: BigintComparisonExp
}

enum ActionConstraint {
  action_pkey
}

input ActionIncInput {
  createdById: bigint
  eventId: bigint
  eventJoinId: bigint
  id: bigint
  projectId: bigint
  score: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

input ActionInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualByValidatedById: IndividualObjRelInsertInput
  name: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  score: Int
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
  validatedById: bigint
}

type ActionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

input ActionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  score: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

type ActionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

input ActionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  score: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

type ActionMutationResponse {
  affectedRows: Int!
  returning: [Action!]!
}

input ActionObjRelInsertInput {
  data: ActionInsertInput!
  onConflict: ActionOnConflict
}

input ActionOnConflict {
  constraint: ActionConstraint!
  updateColumns: [ActionUpdateColumn!]! = []
  where: ActionBoolExp
}

input ActionOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualByValidatedById: IndividualOrderBy
  name: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  score: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
  validatedById: OrderBy
}

input ActionPkColumnsInput {
  id: bigint!
}

enum ActionSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  eventId
  eventJoinId
  hiddenAt
  id
  name
  projectId
  score
  state
  teamId
  tenantId
  userId
  validatedById
}

input ActionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

type ActionStddevFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

input ActionStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

type ActionStddevPopFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

input ActionStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

type ActionStddevSampFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

input ActionStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

input ActionStreamCursorInput {
  initialValue: ActionStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

type ActionSumFields {
  createdById: bigint
  eventId: bigint
  eventJoinId: bigint
  id: bigint
  projectId: bigint
  score: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

input ActionSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

enum ActionUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  eventId
  eventJoinId
  hiddenAt
  id
  name
  projectId
  score
  state
  teamId
  tenantId
  userId
  validatedById
}

input ActionUpdates {
  _inc: ActionIncInput
  _set: ActionSetInput
  where: ActionBoolExp!
}

type ActionVarianceFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

input ActionVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

type ActionVarPopFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

input ActionVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

type ActionVarSampFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

input ActionVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

type Actor {
  actorAddresses(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): [ActorAddress!]!
  actorAddressesAggregate(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): ActorAddressAggregate!
  actorBankInfos(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): [ActorBankInfo!]!
  actorBankInfosAggregate(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): ActorBankInfoAggregate!
  actorFinances(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinancesAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  actorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  bio: String!
  botInfos(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): [BotInfo!]!
  botInfosAggregate(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): BotInfoAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  email: String!
  favorites(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoritesAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  follows(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followsAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  hiddenAt: timestamptz
  ical: String!
  id: bigint!
  individual: Individual
  individualByIndividualId: Individual
  individualId: bigint
  name: String!
  reports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  shortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  slug: String!
  socials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  status: String!
  team: Team
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teamId: bigint
  tenant: Tenant!
  tenantId: bigint!
  website: String!
}

type ActorAddress {
  actor: Actor!
  actorBankInfos(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): [ActorBankInfo!]!
  actorBankInfosAggregate(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): ActorBankInfoAggregate!
  actorFinances(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinancesAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  actorId: bigint!
  campus: Campus
  campusId: bigint
  city: String!
  country: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint
  individual: Individual
  latitude: Float
  longitude: Float
  name: String!
  public: Boolean!
  state: String!
  street: String!
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  tenant: Tenant!
  tenantId: bigint!
  zip: String!
}

type ActorAddressAggregate {
  aggregate: ActorAddressAggregateFields
  nodes: [ActorAddress!]!
}

input ActorAddressAggregateBoolExp {
  bool_and: actorAddressAggregateBoolExpBool_and
  bool_or: actorAddressAggregateBoolExpBool_or
  count: actorAddressAggregateBoolExpCount
}

input actorAddressAggregateBoolExpBool_and {
  arguments: ActorAddressSelectColumnActorAddressAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: BooleanComparisonExp!
}

input actorAddressAggregateBoolExpBool_or {
  arguments: ActorAddressSelectColumnActorAddressAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: BooleanComparisonExp!
}

input actorAddressAggregateBoolExpCount {
  arguments: [ActorAddressSelectColumn!]
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: IntComparisonExp!
}

type ActorAddressAggregateFields {
  avg: ActorAddressAvgFields
  count(columns: [ActorAddressSelectColumn!], distinct: Boolean): Int!
  max: ActorAddressMaxFields
  min: ActorAddressMinFields
  stddev: ActorAddressStddevFields
  stddevPop: ActorAddressStddevPopFields
  stddevSamp: ActorAddressStddevSampFields
  sum: ActorAddressSumFields
  varPop: ActorAddressVarPopFields
  varSamp: ActorAddressVarSampFields
  variance: ActorAddressVarianceFields
}

input ActorAddressAggregateOrderBy {
  avg: ActorAddressAvgOrderBy
  count: OrderBy
  max: ActorAddressMaxOrderBy
  min: ActorAddressMinOrderBy
  stddev: ActorAddressStddevOrderBy
  stddevPop: ActorAddressStddevPopOrderBy
  stddevSamp: ActorAddressStddevSampOrderBy
  sum: ActorAddressSumOrderBy
  varPop: ActorAddressVarPopOrderBy
  varSamp: ActorAddressVarSampOrderBy
  variance: ActorAddressVarianceOrderBy
}

input ActorAddressArrRelInsertInput {
  data: [ActorAddressInsertInput!]!
  onConflict: ActorAddressOnConflict
}

type ActorAddressAvgFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

input ActorAddressAvgOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

input ActorAddressBoolExp {
  _and: [ActorAddressBoolExp!]
  _not: ActorAddressBoolExp
  _or: [ActorAddressBoolExp!]
  actor: ActorBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorId: BigintComparisonExp
  campus: CampusBoolExp
  campusId: BigintComparisonExp
  city: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  latitude: FloatComparisonExp
  longitude: FloatComparisonExp
  name: StringComparisonExp
  public: BooleanComparisonExp
  state: StringComparisonExp
  street: StringComparisonExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  zip: StringComparisonExp
}

enum ActorAddressConstraint {
  actor_address_campus_id_unique
  actor_address_image_id_unique
  actor_address_pkey
}

input ActorAddressIncInput {
  actorId: bigint
  campusId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  tenantId: bigint
}

input ActorAddressInsertInput {
  actor: ActorObjRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorId: bigint
  campus: CampusObjRelInsertInput
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  teamFinances: TeamFinanceArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  zip: String
}

type ActorAddressMaxFields {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  tenantId: bigint
  zip: String
}

input ActorAddressMaxOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  tenantId: OrderBy
  zip: OrderBy
}

type ActorAddressMinFields {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  tenantId: bigint
  zip: String
}

input ActorAddressMinOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  tenantId: OrderBy
  zip: OrderBy
}

type ActorAddressMutationResponse {
  affectedRows: Int!
  returning: [ActorAddress!]!
}

input ActorAddressObjRelInsertInput {
  data: ActorAddressInsertInput!
  onConflict: ActorAddressOnConflict
}

input ActorAddressOnConflict {
  constraint: ActorAddressConstraint!
  updateColumns: [ActorAddressUpdateColumn!]! = []
  where: ActorAddressBoolExp
}

input ActorAddressOrderBy {
  actor: ActorOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorId: OrderBy
  campus: CampusOrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  public: OrderBy
  state: OrderBy
  street: OrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  zip: OrderBy
}

input ActorAddressPkColumnsInput {
  id: bigint!
}

enum ActorAddressSelectColumn {
  actorId
  campusId
  city
  country
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  latitude
  longitude
  name
  public
  state
  street
  tenantId
  zip
}

enum ActorAddressSelectColumnActorAddressAggregateBoolExpBool_andArgumentsColumns {
  public
}

enum ActorAddressSelectColumnActorAddressAggregateBoolExpBool_orArgumentsColumns {
  public
}

input ActorAddressSetInput {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  tenantId: bigint
  zip: String
}

type ActorAddressStddevFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

input ActorAddressStddevOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

type ActorAddressStddevPopFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

input ActorAddressStddevPopOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

type ActorAddressStddevSampFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

input ActorAddressStddevSampOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

input ActorAddressStreamCursorInput {
  initialValue: ActorAddressStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorAddressStreamCursorValueInput {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  tenantId: bigint
  zip: String
}

type ActorAddressSumFields {
  actorId: bigint
  campusId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  tenantId: bigint
}

input ActorAddressSumOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

enum ActorAddressUpdateColumn {
  actorId
  campusId
  city
  country
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  latitude
  longitude
  name
  public
  state
  street
  tenantId
  zip
}

input ActorAddressUpdates {
  _inc: ActorAddressIncInput
  _set: ActorAddressSetInput
  where: ActorAddressBoolExp!
}

type ActorAddressVarianceFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

input ActorAddressVarianceOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

type ActorAddressVarPopFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

input ActorAddressVarPopOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

type ActorAddressVarSampFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

input ActorAddressVarSampOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

type ActorAggregate {
  aggregate: ActorAggregateFields
  nodes: [Actor!]!
}

input ActorAggregateBoolExp {
  count: actorAggregateBoolExpCount
}

input actorAggregateBoolExpCount {
  arguments: [ActorSelectColumn!]
  distinct: Boolean
  filter: ActorBoolExp
  predicate: IntComparisonExp!
}

type ActorAggregateFields {
  avg: ActorAvgFields
  count(columns: [ActorSelectColumn!], distinct: Boolean): Int!
  max: ActorMaxFields
  min: ActorMinFields
  stddev: ActorStddevFields
  stddevPop: ActorStddevPopFields
  stddevSamp: ActorStddevSampFields
  sum: ActorSumFields
  varPop: ActorVarPopFields
  varSamp: ActorVarSampFields
  variance: ActorVarianceFields
}

input ActorAggregateOrderBy {
  avg: ActorAvgOrderBy
  count: OrderBy
  max: ActorMaxOrderBy
  min: ActorMinOrderBy
  stddev: ActorStddevOrderBy
  stddevPop: ActorStddevPopOrderBy
  stddevSamp: ActorStddevSampOrderBy
  sum: ActorSumOrderBy
  varPop: ActorVarPopOrderBy
  varSamp: ActorVarSampOrderBy
  variance: ActorVarianceOrderBy
}

input ActorArrRelInsertInput {
  data: [ActorInsertInput!]!
  onConflict: ActorOnConflict
}

type ActorAvgFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

input ActorAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ActorBankInfo {
  accountCode: String!
  actor: Actor!
  actorAddress: ActorAddress!
  actorId: bigint!
  addressId: bigint!
  agencyCode: String!
  bankCode: String!
  bankCodeBic: String!
  checksum: String!
  country: String!
  countryCode: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  fullAcount: String!
  hiddenAt: timestamptz
  holderName: String!
  id: bigint!
  individual: Individual
  tenant: Tenant!
  tenantId: bigint!
}

type ActorBankInfoAggregate {
  aggregate: ActorBankInfoAggregateFields
  nodes: [ActorBankInfo!]!
}

input ActorBankInfoAggregateBoolExp {
  count: actorBankInfoAggregateBoolExpCount
}

input actorBankInfoAggregateBoolExpCount {
  arguments: [ActorBankInfoSelectColumn!]
  distinct: Boolean
  filter: ActorBankInfoBoolExp
  predicate: IntComparisonExp!
}

type ActorBankInfoAggregateFields {
  avg: ActorBankInfoAvgFields
  count(columns: [ActorBankInfoSelectColumn!], distinct: Boolean): Int!
  max: ActorBankInfoMaxFields
  min: ActorBankInfoMinFields
  stddev: ActorBankInfoStddevFields
  stddevPop: ActorBankInfoStddevPopFields
  stddevSamp: ActorBankInfoStddevSampFields
  sum: ActorBankInfoSumFields
  varPop: ActorBankInfoVarPopFields
  varSamp: ActorBankInfoVarSampFields
  variance: ActorBankInfoVarianceFields
}

input ActorBankInfoAggregateOrderBy {
  avg: ActorBankInfoAvgOrderBy
  count: OrderBy
  max: ActorBankInfoMaxOrderBy
  min: ActorBankInfoMinOrderBy
  stddev: ActorBankInfoStddevOrderBy
  stddevPop: ActorBankInfoStddevPopOrderBy
  stddevSamp: ActorBankInfoStddevSampOrderBy
  sum: ActorBankInfoSumOrderBy
  varPop: ActorBankInfoVarPopOrderBy
  varSamp: ActorBankInfoVarSampOrderBy
  variance: ActorBankInfoVarianceOrderBy
}

input ActorBankInfoArrRelInsertInput {
  data: [ActorBankInfoInsertInput!]!
  onConflict: ActorBankInfoOnConflict
}

type ActorBankInfoAvgFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorBankInfoAvgOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ActorBankInfoBoolExp {
  _and: [ActorBankInfoBoolExp!]
  _not: ActorBankInfoBoolExp
  _or: [ActorBankInfoBoolExp!]
  accountCode: StringComparisonExp
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  actorId: BigintComparisonExp
  addressId: BigintComparisonExp
  agencyCode: StringComparisonExp
  bankCode: StringComparisonExp
  bankCodeBic: StringComparisonExp
  checksum: StringComparisonExp
  country: StringComparisonExp
  countryCode: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fullAcount: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  holderName: StringComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ActorBankInfoConstraint {
  actor_bank_info_pkey
}

input ActorBankInfoIncInput {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ActorBankInfoInsertInput {
  accountCode: String
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expenses: ExpenseArrRelInsertInput
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ActorBankInfoMaxFields {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

input ActorBankInfoMaxOrderBy {
  accountCode: OrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorBankInfoMinFields {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

input ActorBankInfoMinOrderBy {
  accountCode: OrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorBankInfoMutationResponse {
  affectedRows: Int!
  returning: [ActorBankInfo!]!
}

input ActorBankInfoObjRelInsertInput {
  data: ActorBankInfoInsertInput!
  onConflict: ActorBankInfoOnConflict
}

input ActorBankInfoOnConflict {
  constraint: ActorBankInfoConstraint!
  updateColumns: [ActorBankInfoUpdateColumn!]! = []
  where: ActorBankInfoBoolExp
}

input ActorBankInfoOrderBy {
  accountCode: OrderBy
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ActorBankInfoPkColumnsInput {
  id: bigint!
}

enum ActorBankInfoSelectColumn {
  accountCode
  actorId
  addressId
  agencyCode
  bankCode
  bankCodeBic
  checksum
  country
  countryCode
  createdAt
  createdById
  deletedAt
  fullAcount
  hiddenAt
  holderName
  id
  tenantId
}

input ActorBankInfoSetInput {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

type ActorBankInfoStddevFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorBankInfoStddevOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorBankInfoStddevPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorBankInfoStddevPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorBankInfoStddevSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorBankInfoStddevSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ActorBankInfoStreamCursorInput {
  initialValue: ActorBankInfoStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorBankInfoStreamCursorValueInput {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

type ActorBankInfoSumFields {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ActorBankInfoSumOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ActorBankInfoUpdateColumn {
  accountCode
  actorId
  addressId
  agencyCode
  bankCode
  bankCodeBic
  checksum
  country
  countryCode
  createdAt
  createdById
  deletedAt
  fullAcount
  hiddenAt
  holderName
  id
  tenantId
}

input ActorBankInfoUpdates {
  _inc: ActorBankInfoIncInput
  _set: ActorBankInfoSetInput
  where: ActorBankInfoBoolExp!
}

type ActorBankInfoVarianceFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorBankInfoVarianceOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorBankInfoVarPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorBankInfoVarPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorBankInfoVarSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorBankInfoVarSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ActorBoolExp {
  _and: [ActorBoolExp!]
  _not: ActorBoolExp
  _or: [ActorBoolExp!]
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  bio: StringComparisonExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  email: StringComparisonExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  ical: StringComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualByIndividualId: IndividualBoolExp
  individualId: BigintComparisonExp
  name: StringComparisonExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  slug: StringComparisonExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  status: StringComparisonExp
  team: TeamBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  website: StringComparisonExp
}

enum ActorConstraint {
  actor_ical_unique
  actor_individual_id_unique
  actor_pkey
  actor_team_id_unique
}

type ActorFinance {
  actor: Actor
  actorAddress: ActorAddress
  addressId: bigint
  amount: Float!
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  expense: Expense
  expenseId: bigint
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  payedAt: timestamptz!
  payedById: bigint
  receiptId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type ActorFinanceAggregate {
  aggregate: ActorFinanceAggregateFields
  nodes: [ActorFinance!]!
}

input ActorFinanceAggregateBoolExp {
  count: actorFinanceAggregateBoolExpCount
}

input actorFinanceAggregateBoolExpCount {
  arguments: [ActorFinanceSelectColumn!]
  distinct: Boolean
  filter: ActorFinanceBoolExp
  predicate: IntComparisonExp!
}

type ActorFinanceAggregateFields {
  avg: ActorFinanceAvgFields
  count(columns: [ActorFinanceSelectColumn!], distinct: Boolean): Int!
  max: ActorFinanceMaxFields
  min: ActorFinanceMinFields
  stddev: ActorFinanceStddevFields
  stddevPop: ActorFinanceStddevPopFields
  stddevSamp: ActorFinanceStddevSampFields
  sum: ActorFinanceSumFields
  varPop: ActorFinanceVarPopFields
  varSamp: ActorFinanceVarSampFields
  variance: ActorFinanceVarianceFields
}

input ActorFinanceAggregateOrderBy {
  avg: ActorFinanceAvgOrderBy
  count: OrderBy
  max: ActorFinanceMaxOrderBy
  min: ActorFinanceMinOrderBy
  stddev: ActorFinanceStddevOrderBy
  stddevPop: ActorFinanceStddevPopOrderBy
  stddevSamp: ActorFinanceStddevSampOrderBy
  sum: ActorFinanceSumOrderBy
  varPop: ActorFinanceVarPopOrderBy
  varSamp: ActorFinanceVarSampOrderBy
  variance: ActorFinanceVarianceOrderBy
}

input ActorFinanceArrRelInsertInput {
  data: [ActorFinanceInsertInput!]!
  onConflict: ActorFinanceOnConflict
}

type ActorFinanceAvgFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

input ActorFinanceAvgOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

input ActorFinanceBoolExp {
  _and: [ActorFinanceBoolExp!]
  _not: ActorFinanceBoolExp
  _or: [ActorFinanceBoolExp!]
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  amount: FloatComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedById: BigintComparisonExp
  receiptId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ActorFinanceConstraint {
  actor_finance_pkey
}

input ActorFinanceIncInput {
  addressId: bigint
  amount: Float
  createdById: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

input ActorFinanceInsertInput {
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ActorFinanceMaxFields {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

input ActorFinanceMaxOrderBy {
  addressId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

type ActorFinanceMinFields {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

input ActorFinanceMinOrderBy {
  addressId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

type ActorFinanceMutationResponse {
  affectedRows: Int!
  returning: [ActorFinance!]!
}

input ActorFinanceOnConflict {
  constraint: ActorFinanceConstraint!
  updateColumns: [ActorFinanceUpdateColumn!]! = []
  where: ActorFinanceBoolExp
}

input ActorFinanceOrderBy {
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ActorFinancePkColumnsInput {
  id: bigint!
}

enum ActorFinanceSelectColumn {
  addressId
  amount
  category
  createdAt
  createdById
  deletedAt
  description
  expenseId
  hiddenAt
  id
  name
  payedAt
  payedById
  receiptId
  tenantId
}

input ActorFinanceSetInput {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

type ActorFinanceStddevFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

input ActorFinanceStddevOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

type ActorFinanceStddevPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

input ActorFinanceStddevPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

type ActorFinanceStddevSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

input ActorFinanceStddevSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

input ActorFinanceStreamCursorInput {
  initialValue: ActorFinanceStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorFinanceStreamCursorValueInput {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

type ActorFinanceSumFields {
  addressId: bigint
  amount: Float
  createdById: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

input ActorFinanceSumOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

enum ActorFinanceUpdateColumn {
  addressId
  amount
  category
  createdAt
  createdById
  deletedAt
  description
  expenseId
  hiddenAt
  id
  name
  payedAt
  payedById
  receiptId
  tenantId
}

input ActorFinanceUpdates {
  _inc: ActorFinanceIncInput
  _set: ActorFinanceSetInput
  where: ActorFinanceBoolExp!
}

type ActorFinanceVarianceFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

input ActorFinanceVarianceOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

type ActorFinanceVarPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

input ActorFinanceVarPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

type ActorFinanceVarSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

input ActorFinanceVarSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

type ActorImage {
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint!
  individual: Individual
  lastActiveDate: timestamptz
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ActorImageAggregate {
  aggregate: ActorImageAggregateFields
  nodes: [ActorImage!]!
}

input ActorImageAggregateBoolExp {
  count: actorImageAggregateBoolExpCount
}

input actorImageAggregateBoolExpCount {
  arguments: [ActorImageSelectColumn!]
  distinct: Boolean
  filter: ActorImageBoolExp
  predicate: IntComparisonExp!
}

type ActorImageAggregateFields {
  avg: ActorImageAvgFields
  count(columns: [ActorImageSelectColumn!], distinct: Boolean): Int!
  max: ActorImageMaxFields
  min: ActorImageMinFields
  stddev: ActorImageStddevFields
  stddevPop: ActorImageStddevPopFields
  stddevSamp: ActorImageStddevSampFields
  sum: ActorImageSumFields
  varPop: ActorImageVarPopFields
  varSamp: ActorImageVarSampFields
  variance: ActorImageVarianceFields
}

input ActorImageAggregateOrderBy {
  avg: ActorImageAvgOrderBy
  count: OrderBy
  max: ActorImageMaxOrderBy
  min: ActorImageMinOrderBy
  stddev: ActorImageStddevOrderBy
  stddevPop: ActorImageStddevPopOrderBy
  stddevSamp: ActorImageStddevSampOrderBy
  sum: ActorImageSumOrderBy
  varPop: ActorImageVarPopOrderBy
  varSamp: ActorImageVarSampOrderBy
  variance: ActorImageVarianceOrderBy
}

input ActorImageArrRelInsertInput {
  data: [ActorImageInsertInput!]!
  onConflict: ActorImageOnConflict
}

type ActorImageAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input ActorImageBoolExp {
  _and: [ActorImageBoolExp!]
  _not: ActorImageBoolExp
  _or: [ActorImageBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ActorImageConstraint {
  actor_image_image_id_unique
  actor_image_pkey
}

input ActorImageIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input ActorImageInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ActorImageMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

input ActorImageMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ActorImageMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

input ActorImageMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ActorImageMutationResponse {
  affectedRows: Int!
  returning: [ActorImage!]!
}

input ActorImageObjRelInsertInput {
  data: ActorImageInsertInput!
  onConflict: ActorImageOnConflict
}

input ActorImageOnConflict {
  constraint: ActorImageConstraint!
  updateColumns: [ActorImageUpdateColumn!]! = []
  where: ActorImageBoolExp
}

input ActorImageOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ActorImagePkColumnsInput {
  id: bigint!
}

enum ActorImageSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  lastActiveDate
  tenantId
  type
}

input ActorImageSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

type ActorImageStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input ActorImageStreamCursorInput {
  initialValue: ActorImageStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorImageStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

type ActorImageSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input ActorImageSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

enum ActorImageUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  lastActiveDate
  tenantId
  type
}

input ActorImageUpdates {
  _inc: ActorImageIncInput
  _set: ActorImageSetInput
  where: ActorImageBoolExp!
}

type ActorImageVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input ActorIncInput {
  createdById: bigint
  id: bigint
  individualId: bigint
  teamId: bigint
  tenantId: bigint
}

input ActorInsertInput {
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actorTags: ActorTagsArrRelInsertInput
  bio: String
  botInfos: BotInfoArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  favorites: FavoriteArrRelInsertInput
  follows: FollowArrRelInsertInput
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individual: IndividualObjRelInsertInput
  individualByIndividualId: IndividualObjRelInsertInput
  individualId: bigint
  name: String
  reports: ReportArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  slug: String
  socials: SocialArrRelInsertInput
  status: String
  team: TeamObjRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  website: String
}

type ActorMaxFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

input ActorMaxOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individualId: OrderBy
  name: OrderBy
  slug: OrderBy
  status: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  website: OrderBy
}

type ActorMinFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

input ActorMinOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individualId: OrderBy
  name: OrderBy
  slug: OrderBy
  status: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  website: OrderBy
}

type ActorMutationResponse {
  affectedRows: Int!
  returning: [Actor!]!
}

input ActorObjRelInsertInput {
  data: ActorInsertInput!
  onConflict: ActorOnConflict
}

input ActorOnConflict {
  constraint: ActorConstraint!
  updateColumns: [ActorUpdateColumn!]! = []
  where: ActorBoolExp
}

input ActorOrderBy {
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorTagsAggregate: ActorTagsAggregateOrderBy
  bio: OrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualByIndividualId: IndividualOrderBy
  individualId: OrderBy
  name: OrderBy
  reportsAggregate: ReportAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  slug: OrderBy
  socialsAggregate: SocialAggregateOrderBy
  status: OrderBy
  team: TeamOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  website: OrderBy
}

input ActorPkColumnsInput {
  id: bigint!
}

enum ActorSelectColumn {
  bio
  createdAt
  createdById
  deletedAt
  email
  hiddenAt
  ical
  id
  individualId
  name
  slug
  status
  teamId
  tenantId
  website
}

input ActorSetInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

type ActorStddevFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

input ActorStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ActorStddevPopFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

input ActorStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ActorStddevSampFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

input ActorStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input ActorStreamCursorInput {
  initialValue: ActorStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorStreamCursorValueInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

type ActorSumFields {
  createdById: bigint
  id: bigint
  individualId: bigint
  teamId: bigint
  tenantId: bigint
}

input ActorSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ActorTags {
  actor: Actor!
  actorId: bigint!
  tag: Tag!
  tagId: bigint!
}

type ActorTagsAggregate {
  aggregate: ActorTagsAggregateFields
  nodes: [ActorTags!]!
}

input ActorTagsAggregateBoolExp {
  count: actorTagsAggregateBoolExpCount
}

input actorTagsAggregateBoolExpCount {
  arguments: [ActorTagsSelectColumn!]
  distinct: Boolean
  filter: ActorTagsBoolExp
  predicate: IntComparisonExp!
}

type ActorTagsAggregateFields {
  avg: ActorTagsAvgFields
  count(columns: [ActorTagsSelectColumn!], distinct: Boolean): Int!
  max: ActorTagsMaxFields
  min: ActorTagsMinFields
  stddev: ActorTagsStddevFields
  stddevPop: ActorTagsStddevPopFields
  stddevSamp: ActorTagsStddevSampFields
  sum: ActorTagsSumFields
  varPop: ActorTagsVarPopFields
  varSamp: ActorTagsVarSampFields
  variance: ActorTagsVarianceFields
}

input ActorTagsAggregateOrderBy {
  avg: ActorTagsAvgOrderBy
  count: OrderBy
  max: ActorTagsMaxOrderBy
  min: ActorTagsMinOrderBy
  stddev: ActorTagsStddevOrderBy
  stddevPop: ActorTagsStddevPopOrderBy
  stddevSamp: ActorTagsStddevSampOrderBy
  sum: ActorTagsSumOrderBy
  varPop: ActorTagsVarPopOrderBy
  varSamp: ActorTagsVarSampOrderBy
  variance: ActorTagsVarianceOrderBy
}

input ActorTagsArrRelInsertInput {
  data: [ActorTagsInsertInput!]!
  onConflict: ActorTagsOnConflict
}

type ActorTagsAvgFields {
  actorId: Float
  tagId: Float
}

input ActorTagsAvgOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

input ActorTagsBoolExp {
  _and: [ActorTagsBoolExp!]
  _not: ActorTagsBoolExp
  _or: [ActorTagsBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum ActorTagsConstraint {
  actor_tags_pkey
}

input ActorTagsIncInput {
  actorId: bigint
  tagId: bigint
}

input ActorTagsInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type ActorTagsMaxFields {
  actorId: bigint
  tagId: bigint
}

input ActorTagsMaxOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsMinFields {
  actorId: bigint
  tagId: bigint
}

input ActorTagsMinOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsMutationResponse {
  affectedRows: Int!
  returning: [ActorTags!]!
}

input ActorTagsOnConflict {
  constraint: ActorTagsConstraint!
  updateColumns: [ActorTagsUpdateColumn!]! = []
  where: ActorTagsBoolExp
}

input ActorTagsOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input ActorTagsPkColumnsInput {
  actorId: bigint!
  tagId: bigint!
}

enum ActorTagsSelectColumn {
  actorId
  tagId
}

input ActorTagsSetInput {
  actorId: bigint
  tagId: bigint
}

type ActorTagsStddevFields {
  actorId: Float
  tagId: Float
}

input ActorTagsStddevOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsStddevPopFields {
  actorId: Float
  tagId: Float
}

input ActorTagsStddevPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsStddevSampFields {
  actorId: Float
  tagId: Float
}

input ActorTagsStddevSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

input ActorTagsStreamCursorInput {
  initialValue: ActorTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorTagsStreamCursorValueInput {
  actorId: bigint
  tagId: bigint
}

type ActorTagsSumFields {
  actorId: bigint
  tagId: bigint
}

input ActorTagsSumOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

enum ActorTagsUpdateColumn {
  actorId
  tagId
}

input ActorTagsUpdates {
  _inc: ActorTagsIncInput
  _set: ActorTagsSetInput
  where: ActorTagsBoolExp!
}

type ActorTagsVarianceFields {
  actorId: Float
  tagId: Float
}

input ActorTagsVarianceOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsVarPopFields {
  actorId: Float
  tagId: Float
}

input ActorTagsVarPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsVarSampFields {
  actorId: Float
  tagId: Float
}

input ActorTagsVarSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

enum ActorUpdateColumn {
  bio
  createdAt
  createdById
  deletedAt
  email
  hiddenAt
  ical
  id
  individualId
  name
  slug
  status
  teamId
  tenantId
  website
}

input ActorUpdates {
  _inc: ActorIncInput
  _set: ActorSetInput
  where: ActorBoolExp!
}

type ActorVarianceFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

input ActorVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ActorVarPopFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

input ActorVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ActorVarSampFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

input ActorVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

scalar bigint

input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type BotInfo {
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  individualById: Individual
  ownerId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type BotInfoAggregate {
  aggregate: BotInfoAggregateFields
  nodes: [BotInfo!]!
}

input BotInfoAggregateBoolExp {
  count: botInfoAggregateBoolExpCount
}

input botInfoAggregateBoolExpCount {
  arguments: [BotInfoSelectColumn!]
  distinct: Boolean
  filter: BotInfoBoolExp
  predicate: IntComparisonExp!
}

type BotInfoAggregateFields {
  avg: BotInfoAvgFields
  count(columns: [BotInfoSelectColumn!], distinct: Boolean): Int!
  max: BotInfoMaxFields
  min: BotInfoMinFields
  stddev: BotInfoStddevFields
  stddevPop: BotInfoStddevPopFields
  stddevSamp: BotInfoStddevSampFields
  sum: BotInfoSumFields
  varPop: BotInfoVarPopFields
  varSamp: BotInfoVarSampFields
  variance: BotInfoVarianceFields
}

input BotInfoAggregateOrderBy {
  avg: BotInfoAvgOrderBy
  count: OrderBy
  max: BotInfoMaxOrderBy
  min: BotInfoMinOrderBy
  stddev: BotInfoStddevOrderBy
  stddevPop: BotInfoStddevPopOrderBy
  stddevSamp: BotInfoStddevSampOrderBy
  sum: BotInfoSumOrderBy
  varPop: BotInfoVarPopOrderBy
  varSamp: BotInfoVarSampOrderBy
  variance: BotInfoVarianceOrderBy
}

input BotInfoArrRelInsertInput {
  data: [BotInfoInsertInput!]!
  onConflict: BotInfoOnConflict
}

type BotInfoAvgFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

input BotInfoAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

input BotInfoBoolExp {
  _and: [BotInfoBoolExp!]
  _not: BotInfoBoolExp
  _or: [BotInfoBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualById: IndividualBoolExp
  ownerId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum BotInfoConstraint {
  bot_info_pkey
}

input BotInfoIncInput {
  createdById: bigint
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotInfoInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualById: IndividualObjRelInsertInput
  ownerId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type BotInfoMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotInfoMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotInfoMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotInfoMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotInfoMutationResponse {
  affectedRows: Int!
  returning: [BotInfo!]!
}

input BotInfoObjRelInsertInput {
  data: BotInfoInsertInput!
  onConflict: BotInfoOnConflict
}

input BotInfoOnConflict {
  constraint: BotInfoConstraint!
  updateColumns: [BotInfoUpdateColumn!]! = []
  where: BotInfoBoolExp
}

input BotInfoOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualById: IndividualOrderBy
  ownerId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input BotInfoPkColumnsInput {
  id: bigint!
}

enum BotInfoSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  ownerId
  tenantId
}

input BotInfoSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

type BotInfoStddevFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

input BotInfoStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotInfoStddevPopFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

input BotInfoStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotInfoStddevSampFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

input BotInfoStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

input BotInfoStreamCursorInput {
  initialValue: BotInfoStreamCursorValueInput!
  ordering: CursorOrdering
}

input BotInfoStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

type BotInfoSumFields {
  createdById: bigint
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotInfoSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

enum BotInfoUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  ownerId
  tenantId
}

input BotInfoUpdates {
  _inc: BotInfoIncInput
  _set: BotInfoSetInput
  where: BotInfoBoolExp!
}

type BotInfoVarianceFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

input BotInfoVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotInfoVarPopFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

input BotInfoVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotInfoVarSampFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

input BotInfoVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type Campus {
  actorAddress: ActorAddress
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  tenant: Tenant!
  tenantId: bigint!
}

type CampusAggregate {
  aggregate: CampusAggregateFields
  nodes: [Campus!]!
}

input CampusAggregateBoolExp {
  count: campusAggregateBoolExpCount
}

input campusAggregateBoolExpCount {
  arguments: [CampusSelectColumn!]
  distinct: Boolean
  filter: CampusBoolExp
  predicate: IntComparisonExp!
}

type CampusAggregateFields {
  avg: CampusAvgFields
  count(columns: [CampusSelectColumn!], distinct: Boolean): Int!
  max: CampusMaxFields
  min: CampusMinFields
  stddev: CampusStddevFields
  stddevPop: CampusStddevPopFields
  stddevSamp: CampusStddevSampFields
  sum: CampusSumFields
  varPop: CampusVarPopFields
  varSamp: CampusVarSampFields
  variance: CampusVarianceFields
}

input CampusAggregateOrderBy {
  avg: CampusAvgOrderBy
  count: OrderBy
  max: CampusMaxOrderBy
  min: CampusMinOrderBy
  stddev: CampusStddevOrderBy
  stddevPop: CampusStddevPopOrderBy
  stddevSamp: CampusStddevSampOrderBy
  sum: CampusSumOrderBy
  varPop: CampusVarPopOrderBy
  varSamp: CampusVarSampOrderBy
  variance: CampusVarianceOrderBy
}

input CampusArrRelInsertInput {
  data: [CampusInsertInput!]!
  onConflict: CampusOnConflict
}

type CampusAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CampusBoolExp {
  _and: [CampusBoolExp!]
  _not: CampusBoolExp
  _or: [CampusBoolExp!]
  actorAddress: ActorAddressBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum CampusConstraint {
  campus_pkey
}

input CampusIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CampusInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CampusMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

input CampusMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

type CampusMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

input CampusMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

type CampusMutationResponse {
  affectedRows: Int!
  returning: [Campus!]!
}

input CampusObjRelInsertInput {
  data: CampusInsertInput!
  onConflict: CampusOnConflict
}

input CampusOnConflict {
  constraint: CampusConstraint!
  updateColumns: [CampusUpdateColumn!]! = []
  where: CampusBoolExp
}

input CampusOrderBy {
  actorAddress: ActorAddressOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CampusPkColumnsInput {
  id: bigint!
}

enum CampusSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  tenantId
}

input CampusSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

type CampusStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CampusStreamCursorInput {
  initialValue: CampusStreamCursorValueInput!
  ordering: CursorOrdering
}

input CampusStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

type CampusSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CampusSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CampusUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  tenantId
}

input CampusUpdates {
  _inc: CampusIncInput
  _set: CampusSetInput
  where: CampusBoolExp!
}

type CampusVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Canteen {
  canteenFoods(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodsAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenMenus(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenusAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  team: Team
  tenant: Tenant!
  tenantId: bigint!
}

type CanteenAggregate {
  aggregate: CanteenAggregateFields
  nodes: [Canteen!]!
}

input CanteenAggregateBoolExp {
  count: canteenAggregateBoolExpCount
}

input canteenAggregateBoolExpCount {
  arguments: [CanteenSelectColumn!]
  distinct: Boolean
  filter: CanteenBoolExp
  predicate: IntComparisonExp!
}

type CanteenAggregateFields {
  avg: CanteenAvgFields
  count(columns: [CanteenSelectColumn!], distinct: Boolean): Int!
  max: CanteenMaxFields
  min: CanteenMinFields
  stddev: CanteenStddevFields
  stddevPop: CanteenStddevPopFields
  stddevSamp: CanteenStddevSampFields
  sum: CanteenSumFields
  varPop: CanteenVarPopFields
  varSamp: CanteenVarSampFields
  variance: CanteenVarianceFields
}

input CanteenAggregateOrderBy {
  avg: CanteenAvgOrderBy
  count: OrderBy
  max: CanteenMaxOrderBy
  min: CanteenMinOrderBy
  stddev: CanteenStddevOrderBy
  stddevPop: CanteenStddevPopOrderBy
  stddevSamp: CanteenStddevSampOrderBy
  sum: CanteenSumOrderBy
  varPop: CanteenVarPopOrderBy
  varSamp: CanteenVarSampOrderBy
  variance: CanteenVarianceOrderBy
}

input CanteenArrRelInsertInput {
  data: [CanteenInsertInput!]!
  onConflict: CanteenOnConflict
}

type CanteenAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenBoolExp {
  _and: [CanteenBoolExp!]
  _not: CanteenBoolExp
  _or: [CanteenBoolExp!]
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum CanteenConstraint {
  canteen_pkey
}

type CanteenFood {
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  tenant: Tenant!
  tenantId: bigint!
}

type CanteenFoodAggregate {
  aggregate: CanteenFoodAggregateFields
  nodes: [CanteenFood!]!
}

input CanteenFoodAggregateBoolExp {
  count: canteenFoodAggregateBoolExpCount
}

input canteenFoodAggregateBoolExpCount {
  arguments: [CanteenFoodSelectColumn!]
  distinct: Boolean
  filter: CanteenFoodBoolExp
  predicate: IntComparisonExp!
}

type CanteenFoodAggregateFields {
  avg: CanteenFoodAvgFields
  count(columns: [CanteenFoodSelectColumn!], distinct: Boolean): Int!
  max: CanteenFoodMaxFields
  min: CanteenFoodMinFields
  stddev: CanteenFoodStddevFields
  stddevPop: CanteenFoodStddevPopFields
  stddevSamp: CanteenFoodStddevSampFields
  sum: CanteenFoodSumFields
  varPop: CanteenFoodVarPopFields
  varSamp: CanteenFoodVarSampFields
  variance: CanteenFoodVarianceFields
}

input CanteenFoodAggregateOrderBy {
  avg: CanteenFoodAvgOrderBy
  count: OrderBy
  max: CanteenFoodMaxOrderBy
  min: CanteenFoodMinOrderBy
  stddev: CanteenFoodStddevOrderBy
  stddevPop: CanteenFoodStddevPopOrderBy
  stddevSamp: CanteenFoodStddevSampOrderBy
  sum: CanteenFoodSumOrderBy
  varPop: CanteenFoodVarPopOrderBy
  varSamp: CanteenFoodVarSampOrderBy
  variance: CanteenFoodVarianceOrderBy
}

input CanteenFoodArrRelInsertInput {
  data: [CanteenFoodInsertInput!]!
  onConflict: CanteenFoodOnConflict
}

type CanteenFoodAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenFoodBoolExp {
  _and: [CanteenFoodBoolExp!]
  _not: CanteenFoodBoolExp
  _or: [CanteenFoodBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum CanteenFoodConstraint {
  canteen_food_pkey
}

input CanteenFoodIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenFoodInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CanteenFoodMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenFoodMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenFoodMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodMutationResponse {
  affectedRows: Int!
  returning: [CanteenFood!]!
}

input CanteenFoodOnConflict {
  constraint: CanteenFoodConstraint!
  updateColumns: [CanteenFoodUpdateColumn!]! = []
  where: CanteenFoodBoolExp
}

input CanteenFoodOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CanteenFoodPkColumnsInput {
  id: bigint!
}

enum CanteenFoodSelectColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenFoodSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenFoodStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenFoodStreamCursorInput {
  initialValue: CanteenFoodStreamCursorValueInput!
  ordering: CursorOrdering
}

input CanteenFoodStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenFoodSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenFoodSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CanteenFoodUpdateColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenFoodUpdates {
  _inc: CanteenFoodIncInput
  _set: CanteenFoodSetInput
  where: CanteenFoodBoolExp!
}

type CanteenFoodVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenInsertInput {
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CanteenMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenu {
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  tenant: Tenant!
  tenantId: bigint!
}

type CanteenMenuAggregate {
  aggregate: CanteenMenuAggregateFields
  nodes: [CanteenMenu!]!
}

input CanteenMenuAggregateBoolExp {
  count: canteenMenuAggregateBoolExpCount
}

input canteenMenuAggregateBoolExpCount {
  arguments: [CanteenMenuSelectColumn!]
  distinct: Boolean
  filter: CanteenMenuBoolExp
  predicate: IntComparisonExp!
}

type CanteenMenuAggregateFields {
  avg: CanteenMenuAvgFields
  count(columns: [CanteenMenuSelectColumn!], distinct: Boolean): Int!
  max: CanteenMenuMaxFields
  min: CanteenMenuMinFields
  stddev: CanteenMenuStddevFields
  stddevPop: CanteenMenuStddevPopFields
  stddevSamp: CanteenMenuStddevSampFields
  sum: CanteenMenuSumFields
  varPop: CanteenMenuVarPopFields
  varSamp: CanteenMenuVarSampFields
  variance: CanteenMenuVarianceFields
}

input CanteenMenuAggregateOrderBy {
  avg: CanteenMenuAvgOrderBy
  count: OrderBy
  max: CanteenMenuMaxOrderBy
  min: CanteenMenuMinOrderBy
  stddev: CanteenMenuStddevOrderBy
  stddevPop: CanteenMenuStddevPopOrderBy
  stddevSamp: CanteenMenuStddevSampOrderBy
  sum: CanteenMenuSumOrderBy
  varPop: CanteenMenuVarPopOrderBy
  varSamp: CanteenMenuVarSampOrderBy
  variance: CanteenMenuVarianceOrderBy
}

input CanteenMenuArrRelInsertInput {
  data: [CanteenMenuInsertInput!]!
  onConflict: CanteenMenuOnConflict
}

type CanteenMenuAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenMenuBoolExp {
  _and: [CanteenMenuBoolExp!]
  _not: CanteenMenuBoolExp
  _or: [CanteenMenuBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum CanteenMenuConstraint {
  canteen_menu_pkey
}

input CanteenMenuIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenMenuInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CanteenMenuMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMenuMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMenuMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuMutationResponse {
  affectedRows: Int!
  returning: [CanteenMenu!]!
}

input CanteenMenuOnConflict {
  constraint: CanteenMenuConstraint!
  updateColumns: [CanteenMenuUpdateColumn!]! = []
  where: CanteenMenuBoolExp
}

input CanteenMenuOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CanteenMenuPkColumnsInput {
  id: bigint!
}

enum CanteenMenuSelectColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenMenuSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenMenuStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenMenuStreamCursorInput {
  initialValue: CanteenMenuStreamCursorValueInput!
  ordering: CursorOrdering
}

input CanteenMenuStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenMenuSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenMenuSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CanteenMenuUpdateColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenMenuUpdates {
  _inc: CanteenMenuIncInput
  _set: CanteenMenuSetInput
  where: CanteenMenuBoolExp!
}

type CanteenMenuVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMutationResponse {
  affectedRows: Int!
  returning: [Canteen!]!
}

input CanteenObjRelInsertInput {
  data: CanteenInsertInput!
  onConflict: CanteenOnConflict
}

input CanteenOnConflict {
  constraint: CanteenConstraint!
  updateColumns: [CanteenUpdateColumn!]! = []
  where: CanteenBoolExp
}

input CanteenOrderBy {
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CanteenPkColumnsInput {
  id: bigint!
}

enum CanteenSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
}

input CanteenSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenStreamCursorInput {
  initialValue: CanteenStreamCursorValueInput!
  ordering: CursorOrdering
}

input CanteenStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CanteenUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
}

input CanteenUpdates {
  _inc: CanteenIncInput
  _set: CanteenSetInput
  where: CanteenBoolExp!
}

type CanteenVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ChangeRole {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  note: String!
  pole: Pole
  receivedPoleId: bigint
  receivedRoleId: bigint
  role: Role
  team: Team!
  teamId: bigint!
  teamJoin: TeamJoin
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!
  userInfo: UserInfo!
}

type ChangeRoleAggregate {
  aggregate: ChangeRoleAggregateFields
  nodes: [ChangeRole!]!
}

input ChangeRoleAggregateBoolExp {
  count: changeRoleAggregateBoolExpCount
}

input changeRoleAggregateBoolExpCount {
  arguments: [ChangeRoleSelectColumn!]
  distinct: Boolean
  filter: ChangeRoleBoolExp
  predicate: IntComparisonExp!
}

type ChangeRoleAggregateFields {
  avg: ChangeRoleAvgFields
  count(columns: [ChangeRoleSelectColumn!], distinct: Boolean): Int!
  max: ChangeRoleMaxFields
  min: ChangeRoleMinFields
  stddev: ChangeRoleStddevFields
  stddevPop: ChangeRoleStddevPopFields
  stddevSamp: ChangeRoleStddevSampFields
  sum: ChangeRoleSumFields
  varPop: ChangeRoleVarPopFields
  varSamp: ChangeRoleVarSampFields
  variance: ChangeRoleVarianceFields
}

input ChangeRoleAggregateOrderBy {
  avg: ChangeRoleAvgOrderBy
  count: OrderBy
  max: ChangeRoleMaxOrderBy
  min: ChangeRoleMinOrderBy
  stddev: ChangeRoleStddevOrderBy
  stddevPop: ChangeRoleStddevPopOrderBy
  stddevSamp: ChangeRoleStddevSampOrderBy
  sum: ChangeRoleSumOrderBy
  varPop: ChangeRoleVarPopOrderBy
  varSamp: ChangeRoleVarSampOrderBy
  variance: ChangeRoleVarianceOrderBy
}

input ChangeRoleArrRelInsertInput {
  data: [ChangeRoleInsertInput!]!
  onConflict: ChangeRoleOnConflict
}

type ChangeRoleAvgFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ChangeRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ChangeRoleBoolExp {
  _and: [ChangeRoleBoolExp!]
  _not: ChangeRoleBoolExp
  _or: [ChangeRoleBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  note: StringComparisonExp
  pole: PoleBoolExp
  receivedPoleId: BigintComparisonExp
  receivedRoleId: BigintComparisonExp
  role: RoleBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoin: TeamJoinBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum ChangeRoleConstraint {
  change_role_pkey
}

input ChangeRoleIncInput {
  createdById: bigint
  id: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ChangeRoleInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  note: String
  pole: PoleObjRelInsertInput
  receivedPoleId: bigint
  receivedRoleId: bigint
  role: RoleObjRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoin: TeamJoinObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type ChangeRoleMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ChangeRoleMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ChangeRoleMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ChangeRoleMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ChangeRoleMutationResponse {
  affectedRows: Int!
  returning: [ChangeRole!]!
}

input ChangeRoleObjRelInsertInput {
  data: ChangeRoleInsertInput!
  onConflict: ChangeRoleOnConflict
}

input ChangeRoleOnConflict {
  constraint: ChangeRoleConstraint!
  updateColumns: [ChangeRoleUpdateColumn!]! = []
  where: ChangeRoleBoolExp
}

input ChangeRoleOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  note: OrderBy
  pole: PoleOrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  role: RoleOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoin: TeamJoinOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

input ChangeRolePkColumnsInput {
  id: bigint!
}

enum ChangeRoleSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  note
  receivedPoleId
  receivedRoleId
  teamId
  tenantId
  userId
}

input ChangeRoleSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type ChangeRoleStddevFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ChangeRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ChangeRoleStddevPopFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ChangeRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ChangeRoleStddevSampFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ChangeRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ChangeRoleStreamCursorInput {
  initialValue: ChangeRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input ChangeRoleStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type ChangeRoleSumFields {
  createdById: bigint
  id: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ChangeRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ChangeRoleUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  note
  receivedPoleId
  receivedRoleId
  teamId
  tenantId
  userId
}

input ChangeRoleUpdates {
  _inc: ChangeRoleIncInput
  _set: ChangeRoleSetInput
  where: ChangeRoleBoolExp!
}

type ChangeRoleVarianceFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ChangeRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ChangeRoleVarPopFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ChangeRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ChangeRoleVarSampFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ChangeRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroup {
  classGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  team: Team
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ClassGroupAggregate {
  aggregate: ClassGroupAggregateFields
  nodes: [ClassGroup!]!
}

input ClassGroupAggregateBoolExp {
  count: classGroupAggregateBoolExpCount
}

input classGroupAggregateBoolExpCount {
  arguments: [ClassGroupSelectColumn!]
  distinct: Boolean
  filter: ClassGroupBoolExp
  predicate: IntComparisonExp!
}

type ClassGroupAggregateFields {
  avg: ClassGroupAvgFields
  count(columns: [ClassGroupSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupMaxFields
  min: ClassGroupMinFields
  stddev: ClassGroupStddevFields
  stddevPop: ClassGroupStddevPopFields
  stddevSamp: ClassGroupStddevSampFields
  sum: ClassGroupSumFields
  varPop: ClassGroupVarPopFields
  varSamp: ClassGroupVarSampFields
  variance: ClassGroupVarianceFields
}

input ClassGroupAggregateOrderBy {
  avg: ClassGroupAvgOrderBy
  count: OrderBy
  max: ClassGroupMaxOrderBy
  min: ClassGroupMinOrderBy
  stddev: ClassGroupStddevOrderBy
  stddevPop: ClassGroupStddevPopOrderBy
  stddevSamp: ClassGroupStddevSampOrderBy
  sum: ClassGroupSumOrderBy
  varPop: ClassGroupVarPopOrderBy
  varSamp: ClassGroupVarSampOrderBy
  variance: ClassGroupVarianceOrderBy
}

input ClassGroupArrRelInsertInput {
  data: [ClassGroupInsertInput!]!
  onConflict: ClassGroupOnConflict
}

type ClassGroupAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ClassGroupBoolExp {
  _and: [ClassGroupBoolExp!]
  _not: ClassGroupBoolExp
  _or: [ClassGroupBoolExp!]
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ClassGroupConstraint {
  class_group_pkey
}

input ClassGroupIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ClassGroupInsertInput {
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ClassGroupMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

input ClassGroupMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ClassGroupMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

input ClassGroupMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ClassGroupMutationResponse {
  affectedRows: Int!
  returning: [ClassGroup!]!
}

input ClassGroupObjRelInsertInput {
  data: ClassGroupInsertInput!
  onConflict: ClassGroupOnConflict
}

input ClassGroupOnConflict {
  constraint: ClassGroupConstraint!
  updateColumns: [ClassGroupUpdateColumn!]! = []
  where: ClassGroupBoolExp
}

input ClassGroupOrderBy {
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ClassGroupPkColumnsInput {
  id: bigint!
}

enum ClassGroupSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
  type
}

input ClassGroupSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

type ClassGroupStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ClassGroupStreamCursorInput {
  initialValue: ClassGroupStreamCursorValueInput!
  ordering: CursorOrdering
}

input ClassGroupStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

type ClassGroupSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ClassGroupSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupTeacher {
  classGroup: ClassGroup!
  classGroupId: bigint!
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  startDate: timestamptz!
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!
  userInfo: UserInfo!
}

type ClassGroupTeacherAggregate {
  aggregate: ClassGroupTeacherAggregateFields
  nodes: [ClassGroupTeacher!]!
}

input ClassGroupTeacherAggregateBoolExp {
  count: classGroupTeacherAggregateBoolExpCount
}

input classGroupTeacherAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherBoolExp
  predicate: IntComparisonExp!
}

type ClassGroupTeacherAggregateFields {
  avg: ClassGroupTeacherAvgFields
  count(columns: [ClassGroupTeacherSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherMaxFields
  min: ClassGroupTeacherMinFields
  stddev: ClassGroupTeacherStddevFields
  stddevPop: ClassGroupTeacherStddevPopFields
  stddevSamp: ClassGroupTeacherStddevSampFields
  sum: ClassGroupTeacherSumFields
  varPop: ClassGroupTeacherVarPopFields
  varSamp: ClassGroupTeacherVarSampFields
  variance: ClassGroupTeacherVarianceFields
}

input ClassGroupTeacherAggregateOrderBy {
  avg: ClassGroupTeacherAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherMaxOrderBy
  min: ClassGroupTeacherMinOrderBy
  stddev: ClassGroupTeacherStddevOrderBy
  stddevPop: ClassGroupTeacherStddevPopOrderBy
  stddevSamp: ClassGroupTeacherStddevSampOrderBy
  sum: ClassGroupTeacherSumOrderBy
  varPop: ClassGroupTeacherVarPopOrderBy
  varSamp: ClassGroupTeacherVarSampOrderBy
  variance: ClassGroupTeacherVarianceOrderBy
}

input ClassGroupTeacherArrRelInsertInput {
  data: [ClassGroupTeacherInsertInput!]!
  onConflict: ClassGroupTeacherOnConflict
}

type ClassGroupTeacherAvgFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherAvgOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ClassGroupTeacherBoolExp {
  _and: [ClassGroupTeacherBoolExp!]
  _not: ClassGroupTeacherBoolExp
  _or: [ClassGroupTeacherBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  startDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum ClassGroupTeacherConstraint {
  class_group_teacher_pkey
}

input ClassGroupTeacherIncInput {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  startDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type ClassGroupTeacherMaxFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherMaxOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherMinFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherMinOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherMutationResponse {
  affectedRows: Int!
  returning: [ClassGroupTeacher!]!
}

input ClassGroupTeacherObjRelInsertInput {
  data: ClassGroupTeacherInsertInput!
  onConflict: ClassGroupTeacherOnConflict
}

input ClassGroupTeacherOnConflict {
  constraint: ClassGroupTeacherConstraint!
  updateColumns: [ClassGroupTeacherUpdateColumn!]! = []
  where: ClassGroupTeacherBoolExp
}

input ClassGroupTeacherOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  startDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

input ClassGroupTeacherPkColumnsInput {
  id: bigint!
}

enum ClassGroupTeacherSelectColumn {
  classGroupId
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  startDate
  tenantId
  userId
}

input ClassGroupTeacherSetInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

type ClassGroupTeacherStddevFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherStddevOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherStddevPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherStddevPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherStddevSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherStddevSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ClassGroupTeacherStreamCursorInput {
  initialValue: ClassGroupTeacherStreamCursorValueInput!
  ordering: CursorOrdering
}

input ClassGroupTeacherStreamCursorValueInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

type ClassGroupTeacherSubjects {
  classGroupTeacher: ClassGroupTeacher!
  classGroupTeacherId: bigint!
  subject: Subject!
  subjectId: bigint!
}

type ClassGroupTeacherSubjectsAggregate {
  aggregate: ClassGroupTeacherSubjectsAggregateFields
  nodes: [ClassGroupTeacherSubjects!]!
}

input ClassGroupTeacherSubjectsAggregateBoolExp {
  count: classGroupTeacherSubjectsAggregateBoolExpCount
}

input classGroupTeacherSubjectsAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSubjectsSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherSubjectsBoolExp
  predicate: IntComparisonExp!
}

type ClassGroupTeacherSubjectsAggregateFields {
  avg: ClassGroupTeacherSubjectsAvgFields
  count(columns: [ClassGroupTeacherSubjectsSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherSubjectsMaxFields
  min: ClassGroupTeacherSubjectsMinFields
  stddev: ClassGroupTeacherSubjectsStddevFields
  stddevPop: ClassGroupTeacherSubjectsStddevPopFields
  stddevSamp: ClassGroupTeacherSubjectsStddevSampFields
  sum: ClassGroupTeacherSubjectsSumFields
  varPop: ClassGroupTeacherSubjectsVarPopFields
  varSamp: ClassGroupTeacherSubjectsVarSampFields
  variance: ClassGroupTeacherSubjectsVarianceFields
}

input ClassGroupTeacherSubjectsAggregateOrderBy {
  avg: ClassGroupTeacherSubjectsAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherSubjectsMaxOrderBy
  min: ClassGroupTeacherSubjectsMinOrderBy
  stddev: ClassGroupTeacherSubjectsStddevOrderBy
  stddevPop: ClassGroupTeacherSubjectsStddevPopOrderBy
  stddevSamp: ClassGroupTeacherSubjectsStddevSampOrderBy
  sum: ClassGroupTeacherSubjectsSumOrderBy
  varPop: ClassGroupTeacherSubjectsVarPopOrderBy
  varSamp: ClassGroupTeacherSubjectsVarSampOrderBy
  variance: ClassGroupTeacherSubjectsVarianceOrderBy
}

input ClassGroupTeacherSubjectsArrRelInsertInput {
  data: [ClassGroupTeacherSubjectsInsertInput!]!
  onConflict: ClassGroupTeacherSubjectsOnConflict
}

type ClassGroupTeacherSubjectsAvgFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsAvgOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

input ClassGroupTeacherSubjectsBoolExp {
  _and: [ClassGroupTeacherSubjectsBoolExp!]
  _not: ClassGroupTeacherSubjectsBoolExp
  _or: [ClassGroupTeacherSubjectsBoolExp!]
  classGroupTeacher: ClassGroupTeacherBoolExp
  classGroupTeacherId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

enum ClassGroupTeacherSubjectsConstraint {
  class_group_teacher_subjects_pkey
}

input ClassGroupTeacherSubjectsIncInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsInsertInput {
  classGroupTeacher: ClassGroupTeacherObjRelInsertInput
  classGroupTeacherId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

type ClassGroupTeacherSubjectsMaxFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsMaxOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsMinFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsMinOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsMutationResponse {
  affectedRows: Int!
  returning: [ClassGroupTeacherSubjects!]!
}

input ClassGroupTeacherSubjectsOnConflict {
  constraint: ClassGroupTeacherSubjectsConstraint!
  updateColumns: [ClassGroupTeacherSubjectsUpdateColumn!]! = []
  where: ClassGroupTeacherSubjectsBoolExp
}

input ClassGroupTeacherSubjectsOrderBy {
  classGroupTeacher: ClassGroupTeacherOrderBy
  classGroupTeacherId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

input ClassGroupTeacherSubjectsPkColumnsInput {
  classGroupTeacherId: bigint!
  subjectId: bigint!
}

enum ClassGroupTeacherSubjectsSelectColumn {
  classGroupTeacherId
  subjectId
}

input ClassGroupTeacherSubjectsSetInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

type ClassGroupTeacherSubjectsStddevFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsStddevOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsStddevPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsStddevPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsStddevSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsStddevSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

input ClassGroupTeacherSubjectsStreamCursorInput {
  initialValue: ClassGroupTeacherSubjectsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ClassGroupTeacherSubjectsStreamCursorValueInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

type ClassGroupTeacherSubjectsSumFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsSumOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

enum ClassGroupTeacherSubjectsUpdateColumn {
  classGroupTeacherId
  subjectId
}

input ClassGroupTeacherSubjectsUpdates {
  _inc: ClassGroupTeacherSubjectsIncInput
  _set: ClassGroupTeacherSubjectsSetInput
  where: ClassGroupTeacherSubjectsBoolExp!
}

type ClassGroupTeacherSubjectsVarianceFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsVarianceOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsVarPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsVarPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsVarSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsVarSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSumFields {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherSumOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ClassGroupTeacherUpdateColumn {
  classGroupId
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  startDate
  tenantId
  userId
}

input ClassGroupTeacherUpdates {
  _inc: ClassGroupTeacherIncInput
  _set: ClassGroupTeacherSetInput
  where: ClassGroupTeacherBoolExp!
}

type ClassGroupTeacherVarianceFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherVarianceOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherVarPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherVarPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherVarSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherVarSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ClassGroupUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
  type
}

input ClassGroupUpdates {
  _inc: ClassGroupIncInput
  _set: ClassGroupSetInput
  where: ClassGroupBoolExp!
}

type ClassGroupVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Cohort {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  team: Team
  tenant: Tenant!
  tenantId: bigint!
  year: smallint!
}

type CohortAggregate {
  aggregate: CohortAggregateFields
  nodes: [Cohort!]!
}

input CohortAggregateBoolExp {
  count: cohortAggregateBoolExpCount
}

input cohortAggregateBoolExpCount {
  arguments: [CohortSelectColumn!]
  distinct: Boolean
  filter: CohortBoolExp
  predicate: IntComparisonExp!
}

type CohortAggregateFields {
  avg: CohortAvgFields
  count(columns: [CohortSelectColumn!], distinct: Boolean): Int!
  max: CohortMaxFields
  min: CohortMinFields
  stddev: CohortStddevFields
  stddevPop: CohortStddevPopFields
  stddevSamp: CohortStddevSampFields
  sum: CohortSumFields
  varPop: CohortVarPopFields
  varSamp: CohortVarSampFields
  variance: CohortVarianceFields
}

input CohortAggregateOrderBy {
  avg: CohortAvgOrderBy
  count: OrderBy
  max: CohortMaxOrderBy
  min: CohortMinOrderBy
  stddev: CohortStddevOrderBy
  stddevPop: CohortStddevPopOrderBy
  stddevSamp: CohortStddevSampOrderBy
  sum: CohortSumOrderBy
  varPop: CohortVarPopOrderBy
  varSamp: CohortVarSampOrderBy
  variance: CohortVarianceOrderBy
}

input CohortArrRelInsertInput {
  data: [CohortInsertInput!]!
  onConflict: CohortOnConflict
}

type CohortAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

input CohortBoolExp {
  _and: [CohortBoolExp!]
  _not: CohortBoolExp
  _or: [CohortBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  year: SmallintComparisonExp
}

enum CohortConstraint {
  cohort_pkey
}

input CohortIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  year: smallint
}

type CohortMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortMutationResponse {
  affectedRows: Int!
  returning: [Cohort!]!
}

input CohortObjRelInsertInput {
  data: CohortInsertInput!
  onConflict: CohortOnConflict
}

input CohortOnConflict {
  constraint: CohortConstraint!
  updateColumns: [CohortUpdateColumn!]! = []
  where: CohortBoolExp
}

input CohortOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  year: OrderBy
}

input CohortPkColumnsInput {
  id: bigint!
}

enum CohortSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  year
}

input CohortSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

type CohortStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

input CohortStreamCursorInput {
  initialValue: CohortStreamCursorValueInput!
  ordering: CursorOrdering
}

input CohortStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

type CohortSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

enum CohortUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  year
}

input CohortUpdates {
  _inc: CohortIncInput
  _set: CohortSetInput
  where: CohortBoolExp!
}

type CohortVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type Content {
  content: Content
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  contentMaster: ContentMaster
  contentTeams(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): [ContentTeams!]!
  contentTeamsAggregate(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): ContentTeamsAggregate!
  contents(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentsAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  favorites(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoritesAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  isAnonymous: Boolean!
  parentId: bigint
  reactions(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionsAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  tenant: Tenant!
  tenantId: bigint!
  text: String!
  validations(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationsAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  votes(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  votesAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
}

type ContentAggregate {
  aggregate: ContentAggregateFields
  nodes: [Content!]!
}

input ContentAggregateBoolExp {
  bool_and: contentAggregateBoolExpBool_and
  bool_or: contentAggregateBoolExpBool_or
  count: contentAggregateBoolExpCount
}

input contentAggregateBoolExpBool_and {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpBool_or {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpCount {
  arguments: [ContentSelectColumn!]
  distinct: Boolean
  filter: ContentBoolExp
  predicate: IntComparisonExp!
}

type ContentAggregateFields {
  avg: ContentAvgFields
  count(columns: [ContentSelectColumn!], distinct: Boolean): Int!
  max: ContentMaxFields
  min: ContentMinFields
  stddev: ContentStddevFields
  stddevPop: ContentStddevPopFields
  stddevSamp: ContentStddevSampFields
  sum: ContentSumFields
  varPop: ContentVarPopFields
  varSamp: ContentVarSampFields
  variance: ContentVarianceFields
}

input ContentAggregateOrderBy {
  avg: ContentAvgOrderBy
  count: OrderBy
  max: ContentMaxOrderBy
  min: ContentMinOrderBy
  stddev: ContentStddevOrderBy
  stddevPop: ContentStddevPopOrderBy
  stddevSamp: ContentStddevSampOrderBy
  sum: ContentSumOrderBy
  varPop: ContentVarPopOrderBy
  varSamp: ContentVarSampOrderBy
  variance: ContentVarianceOrderBy
}

input ContentArrRelInsertInput {
  data: [ContentInsertInput!]!
  onConflict: ContentOnConflict
}

type ContentAttachments {
  content: Content!
  contentId: bigint!
  fileUpload: FileUpload!
  fileUploadId: bigint!
}

type ContentAttachmentsAggregate {
  aggregate: ContentAttachmentsAggregateFields
  nodes: [ContentAttachments!]!
}

input ContentAttachmentsAggregateBoolExp {
  count: contentAttachmentsAggregateBoolExpCount
}

input contentAttachmentsAggregateBoolExpCount {
  arguments: [ContentAttachmentsSelectColumn!]
  distinct: Boolean
  filter: ContentAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type ContentAttachmentsAggregateFields {
  avg: ContentAttachmentsAvgFields
  count(columns: [ContentAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: ContentAttachmentsMaxFields
  min: ContentAttachmentsMinFields
  stddev: ContentAttachmentsStddevFields
  stddevPop: ContentAttachmentsStddevPopFields
  stddevSamp: ContentAttachmentsStddevSampFields
  sum: ContentAttachmentsSumFields
  varPop: ContentAttachmentsVarPopFields
  varSamp: ContentAttachmentsVarSampFields
  variance: ContentAttachmentsVarianceFields
}

input ContentAttachmentsAggregateOrderBy {
  avg: ContentAttachmentsAvgOrderBy
  count: OrderBy
  max: ContentAttachmentsMaxOrderBy
  min: ContentAttachmentsMinOrderBy
  stddev: ContentAttachmentsStddevOrderBy
  stddevPop: ContentAttachmentsStddevPopOrderBy
  stddevSamp: ContentAttachmentsStddevSampOrderBy
  sum: ContentAttachmentsSumOrderBy
  varPop: ContentAttachmentsVarPopOrderBy
  varSamp: ContentAttachmentsVarSampOrderBy
  variance: ContentAttachmentsVarianceOrderBy
}

input ContentAttachmentsArrRelInsertInput {
  data: [ContentAttachmentsInsertInput!]!
  onConflict: ContentAttachmentsOnConflict
}

type ContentAttachmentsAvgFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsAvgOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

input ContentAttachmentsBoolExp {
  _and: [ContentAttachmentsBoolExp!]
  _not: ContentAttachmentsBoolExp
  _or: [ContentAttachmentsBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
}

enum ContentAttachmentsConstraint {
  content_attachments_pkey
}

input ContentAttachmentsIncInput {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
}

type ContentAttachmentsMaxFields {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsMaxOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsMinFields {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsMinOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [ContentAttachments!]!
}

input ContentAttachmentsOnConflict {
  constraint: ContentAttachmentsConstraint!
  updateColumns: [ContentAttachmentsUpdateColumn!]! = []
  where: ContentAttachmentsBoolExp
}

input ContentAttachmentsOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
}

input ContentAttachmentsPkColumnsInput {
  contentId: bigint!
  fileUploadId: bigint!
}

enum ContentAttachmentsSelectColumn {
  contentId
  fileUploadId
}

input ContentAttachmentsSetInput {
  contentId: bigint
  fileUploadId: bigint
}

type ContentAttachmentsStddevFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsStddevOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsStddevPopFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsStddevPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsStddevSampFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsStddevSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

input ContentAttachmentsStreamCursorInput {
  initialValue: ContentAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentAttachmentsStreamCursorValueInput {
  contentId: bigint
  fileUploadId: bigint
}

type ContentAttachmentsSumFields {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsSumOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

enum ContentAttachmentsUpdateColumn {
  contentId
  fileUploadId
}

input ContentAttachmentsUpdates {
  _inc: ContentAttachmentsIncInput
  _set: ContentAttachmentsSetInput
  where: ContentAttachmentsBoolExp!
}

type ContentAttachmentsVarianceFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsVarianceOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsVarPopFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsVarPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsVarSampFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsVarSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAvgFields {
  createdById: Float
  id: Float
  parentId: Float
  tenantId: Float
}

input ContentAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

input ContentBoolExp {
  _and: [ContentBoolExp!]
  _not: ContentBoolExp
  _or: [ContentBoolExp!]
  content: ContentBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  contentMaster: ContentMasterBoolExp
  contentTeams: ContentTeamsBoolExp
  contentTeamsAggregate: ContentTeamsAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isAnonymous: BooleanComparisonExp
  parentId: BigintComparisonExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  text: StringComparisonExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

enum ContentConstraint {
  content_pkey
}

input ContentIncInput {
  createdById: bigint
  id: bigint
  parentId: bigint
  tenantId: bigint
}

input ContentInsertInput {
  content: ContentObjRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  contentMaster: ContentMasterObjRelInsertInput
  contentTeams: ContentTeamsArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  favorites: FavoriteArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isAnonymous: Boolean
  parentId: bigint
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  text: String
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

type ContentMaster {
  content: Content!
  contentMasterContributors(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): [ContentMasterContributors!]!
  contentMasterContributorsAggregate(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): ContentMasterContributorsAggregate!
  contentMasterTags(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): [ContentMasterTags!]!
  contentMasterTagsAggregate(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): ContentMasterTagsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  event: Event
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  issue: Issue
  name: String!
  rootContentId: bigint!
  slug: String!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ContentMasterAggregate {
  aggregate: ContentMasterAggregateFields
  nodes: [ContentMaster!]!
}

input ContentMasterAggregateBoolExp {
  count: contentMasterAggregateBoolExpCount
}

input contentMasterAggregateBoolExpCount {
  arguments: [ContentMasterSelectColumn!]
  distinct: Boolean
  filter: ContentMasterBoolExp
  predicate: IntComparisonExp!
}

type ContentMasterAggregateFields {
  avg: ContentMasterAvgFields
  count(columns: [ContentMasterSelectColumn!], distinct: Boolean): Int!
  max: ContentMasterMaxFields
  min: ContentMasterMinFields
  stddev: ContentMasterStddevFields
  stddevPop: ContentMasterStddevPopFields
  stddevSamp: ContentMasterStddevSampFields
  sum: ContentMasterSumFields
  varPop: ContentMasterVarPopFields
  varSamp: ContentMasterVarSampFields
  variance: ContentMasterVarianceFields
}

input ContentMasterAggregateOrderBy {
  avg: ContentMasterAvgOrderBy
  count: OrderBy
  max: ContentMasterMaxOrderBy
  min: ContentMasterMinOrderBy
  stddev: ContentMasterStddevOrderBy
  stddevPop: ContentMasterStddevPopOrderBy
  stddevSamp: ContentMasterStddevSampOrderBy
  sum: ContentMasterSumOrderBy
  varPop: ContentMasterVarPopOrderBy
  varSamp: ContentMasterVarSampOrderBy
  variance: ContentMasterVarianceOrderBy
}

input ContentMasterArrRelInsertInput {
  data: [ContentMasterInsertInput!]!
  onConflict: ContentMasterOnConflict
}

type ContentMasterAvgFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

input ContentMasterAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

input ContentMasterBoolExp {
  _and: [ContentMasterBoolExp!]
  _not: ContentMasterBoolExp
  _or: [ContentMasterBoolExp!]
  content: ContentBoolExp
  contentMasterContributors: ContentMasterContributorsBoolExp
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateBoolExp
  contentMasterTags: ContentMasterTagsBoolExp
  contentMasterTagsAggregate: ContentMasterTagsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  issue: IssueBoolExp
  name: StringComparisonExp
  rootContentId: BigintComparisonExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ContentMasterConstraint {
  content_master_pkey
  content_master_root_content_id_unique
}

type ContentMasterContributors {
  contentMaster: ContentMaster!
  contentMasterId: bigint!
  individual: Individual!
  individualId: bigint!
}

type ContentMasterContributorsAggregate {
  aggregate: ContentMasterContributorsAggregateFields
  nodes: [ContentMasterContributors!]!
}

input ContentMasterContributorsAggregateBoolExp {
  count: contentMasterContributorsAggregateBoolExpCount
}

input contentMasterContributorsAggregateBoolExpCount {
  arguments: [ContentMasterContributorsSelectColumn!]
  distinct: Boolean
  filter: ContentMasterContributorsBoolExp
  predicate: IntComparisonExp!
}

type ContentMasterContributorsAggregateFields {
  avg: ContentMasterContributorsAvgFields
  count(columns: [ContentMasterContributorsSelectColumn!], distinct: Boolean): Int!
  max: ContentMasterContributorsMaxFields
  min: ContentMasterContributorsMinFields
  stddev: ContentMasterContributorsStddevFields
  stddevPop: ContentMasterContributorsStddevPopFields
  stddevSamp: ContentMasterContributorsStddevSampFields
  sum: ContentMasterContributorsSumFields
  varPop: ContentMasterContributorsVarPopFields
  varSamp: ContentMasterContributorsVarSampFields
  variance: ContentMasterContributorsVarianceFields
}

input ContentMasterContributorsAggregateOrderBy {
  avg: ContentMasterContributorsAvgOrderBy
  count: OrderBy
  max: ContentMasterContributorsMaxOrderBy
  min: ContentMasterContributorsMinOrderBy
  stddev: ContentMasterContributorsStddevOrderBy
  stddevPop: ContentMasterContributorsStddevPopOrderBy
  stddevSamp: ContentMasterContributorsStddevSampOrderBy
  sum: ContentMasterContributorsSumOrderBy
  varPop: ContentMasterContributorsVarPopOrderBy
  varSamp: ContentMasterContributorsVarSampOrderBy
  variance: ContentMasterContributorsVarianceOrderBy
}

input ContentMasterContributorsArrRelInsertInput {
  data: [ContentMasterContributorsInsertInput!]!
  onConflict: ContentMasterContributorsOnConflict
}

type ContentMasterContributorsAvgFields {
  contentMasterId: Float
  individualId: Float
}

input ContentMasterContributorsAvgOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

input ContentMasterContributorsBoolExp {
  _and: [ContentMasterContributorsBoolExp!]
  _not: ContentMasterContributorsBoolExp
  _or: [ContentMasterContributorsBoolExp!]
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

enum ContentMasterContributorsConstraint {
  content_master_contributors_pkey
}

input ContentMasterContributorsIncInput {
  contentMasterId: bigint
  individualId: bigint
}

input ContentMasterContributorsInsertInput {
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

type ContentMasterContributorsMaxFields {
  contentMasterId: bigint
  individualId: bigint
}

input ContentMasterContributorsMaxOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

type ContentMasterContributorsMinFields {
  contentMasterId: bigint
  individualId: bigint
}

input ContentMasterContributorsMinOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

type ContentMasterContributorsMutationResponse {
  affectedRows: Int!
  returning: [ContentMasterContributors!]!
}

input ContentMasterContributorsOnConflict {
  constraint: ContentMasterContributorsConstraint!
  updateColumns: [ContentMasterContributorsUpdateColumn!]! = []
  where: ContentMasterContributorsBoolExp
}

input ContentMasterContributorsOrderBy {
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

input ContentMasterContributorsPkColumnsInput {
  contentMasterId: bigint!
  individualId: bigint!
}

enum ContentMasterContributorsSelectColumn {
  contentMasterId
  individualId
}

input ContentMasterContributorsSetInput {
  contentMasterId: bigint
  individualId: bigint
}

type ContentMasterContributorsStddevFields {
  contentMasterId: Float
  individualId: Float
}

input ContentMasterContributorsStddevOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

type ContentMasterContributorsStddevPopFields {
  contentMasterId: Float
  individualId: Float
}

input ContentMasterContributorsStddevPopOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

type ContentMasterContributorsStddevSampFields {
  contentMasterId: Float
  individualId: Float
}

input ContentMasterContributorsStddevSampOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

input ContentMasterContributorsStreamCursorInput {
  initialValue: ContentMasterContributorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentMasterContributorsStreamCursorValueInput {
  contentMasterId: bigint
  individualId: bigint
}

type ContentMasterContributorsSumFields {
  contentMasterId: bigint
  individualId: bigint
}

input ContentMasterContributorsSumOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

enum ContentMasterContributorsUpdateColumn {
  contentMasterId
  individualId
}

input ContentMasterContributorsUpdates {
  _inc: ContentMasterContributorsIncInput
  _set: ContentMasterContributorsSetInput
  where: ContentMasterContributorsBoolExp!
}

type ContentMasterContributorsVarianceFields {
  contentMasterId: Float
  individualId: Float
}

input ContentMasterContributorsVarianceOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

type ContentMasterContributorsVarPopFields {
  contentMasterId: Float
  individualId: Float
}

input ContentMasterContributorsVarPopOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

type ContentMasterContributorsVarSampFields {
  contentMasterId: Float
  individualId: Float
}

input ContentMasterContributorsVarSampOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

input ContentMasterIncInput {
  createdById: bigint
  id: bigint
  rootContentId: bigint
  tenantId: bigint
}

input ContentMasterInsertInput {
  content: ContentObjRelInsertInput
  contentMasterContributors: ContentMasterContributorsArrRelInsertInput
  contentMasterTags: ContentMasterTagsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  issue: IssueObjRelInsertInput
  name: String
  rootContentId: bigint
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ContentMasterMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

input ContentMasterMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  rootContentId: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ContentMasterMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

input ContentMasterMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  rootContentId: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ContentMasterMutationResponse {
  affectedRows: Int!
  returning: [ContentMaster!]!
}

input ContentMasterObjRelInsertInput {
  data: ContentMasterInsertInput!
  onConflict: ContentMasterOnConflict
}

input ContentMasterOnConflict {
  constraint: ContentMasterConstraint!
  updateColumns: [ContentMasterUpdateColumn!]! = []
  where: ContentMasterBoolExp
}

input ContentMasterOrderBy {
  content: ContentOrderBy
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateOrderBy
  contentMasterTagsAggregate: ContentMasterTagsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  issue: IssueOrderBy
  name: OrderBy
  rootContentId: OrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ContentMasterPkColumnsInput {
  id: bigint!
}

enum ContentMasterSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  rootContentId
  slug
  tenantId
  type
}

input ContentMasterSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

type ContentMasterStddevFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

input ContentMasterStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

type ContentMasterStddevPopFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

input ContentMasterStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

type ContentMasterStddevSampFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

input ContentMasterStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

input ContentMasterStreamCursorInput {
  initialValue: ContentMasterStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentMasterStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

type ContentMasterSumFields {
  createdById: bigint
  id: bigint
  rootContentId: bigint
  tenantId: bigint
}

input ContentMasterSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

type ContentMasterTags {
  contentMaster: ContentMaster!
  contentMasterId: bigint!
  tag: Tag!
  tagId: bigint!
}

type ContentMasterTagsAggregate {
  aggregate: ContentMasterTagsAggregateFields
  nodes: [ContentMasterTags!]!
}

input ContentMasterTagsAggregateBoolExp {
  count: contentMasterTagsAggregateBoolExpCount
}

input contentMasterTagsAggregateBoolExpCount {
  arguments: [ContentMasterTagsSelectColumn!]
  distinct: Boolean
  filter: ContentMasterTagsBoolExp
  predicate: IntComparisonExp!
}

type ContentMasterTagsAggregateFields {
  avg: ContentMasterTagsAvgFields
  count(columns: [ContentMasterTagsSelectColumn!], distinct: Boolean): Int!
  max: ContentMasterTagsMaxFields
  min: ContentMasterTagsMinFields
  stddev: ContentMasterTagsStddevFields
  stddevPop: ContentMasterTagsStddevPopFields
  stddevSamp: ContentMasterTagsStddevSampFields
  sum: ContentMasterTagsSumFields
  varPop: ContentMasterTagsVarPopFields
  varSamp: ContentMasterTagsVarSampFields
  variance: ContentMasterTagsVarianceFields
}

input ContentMasterTagsAggregateOrderBy {
  avg: ContentMasterTagsAvgOrderBy
  count: OrderBy
  max: ContentMasterTagsMaxOrderBy
  min: ContentMasterTagsMinOrderBy
  stddev: ContentMasterTagsStddevOrderBy
  stddevPop: ContentMasterTagsStddevPopOrderBy
  stddevSamp: ContentMasterTagsStddevSampOrderBy
  sum: ContentMasterTagsSumOrderBy
  varPop: ContentMasterTagsVarPopOrderBy
  varSamp: ContentMasterTagsVarSampOrderBy
  variance: ContentMasterTagsVarianceOrderBy
}

input ContentMasterTagsArrRelInsertInput {
  data: [ContentMasterTagsInsertInput!]!
  onConflict: ContentMasterTagsOnConflict
}

type ContentMasterTagsAvgFields {
  contentMasterId: Float
  tagId: Float
}

input ContentMasterTagsAvgOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

input ContentMasterTagsBoolExp {
  _and: [ContentMasterTagsBoolExp!]
  _not: ContentMasterTagsBoolExp
  _or: [ContentMasterTagsBoolExp!]
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum ContentMasterTagsConstraint {
  content_master_tags_pkey
}

input ContentMasterTagsIncInput {
  contentMasterId: bigint
  tagId: bigint
}

input ContentMasterTagsInsertInput {
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type ContentMasterTagsMaxFields {
  contentMasterId: bigint
  tagId: bigint
}

input ContentMasterTagsMaxOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

type ContentMasterTagsMinFields {
  contentMasterId: bigint
  tagId: bigint
}

input ContentMasterTagsMinOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

type ContentMasterTagsMutationResponse {
  affectedRows: Int!
  returning: [ContentMasterTags!]!
}

input ContentMasterTagsOnConflict {
  constraint: ContentMasterTagsConstraint!
  updateColumns: [ContentMasterTagsUpdateColumn!]! = []
  where: ContentMasterTagsBoolExp
}

input ContentMasterTagsOrderBy {
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input ContentMasterTagsPkColumnsInput {
  contentMasterId: bigint!
  tagId: bigint!
}

enum ContentMasterTagsSelectColumn {
  contentMasterId
  tagId
}

input ContentMasterTagsSetInput {
  contentMasterId: bigint
  tagId: bigint
}

type ContentMasterTagsStddevFields {
  contentMasterId: Float
  tagId: Float
}

input ContentMasterTagsStddevOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

type ContentMasterTagsStddevPopFields {
  contentMasterId: Float
  tagId: Float
}

input ContentMasterTagsStddevPopOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

type ContentMasterTagsStddevSampFields {
  contentMasterId: Float
  tagId: Float
}

input ContentMasterTagsStddevSampOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

input ContentMasterTagsStreamCursorInput {
  initialValue: ContentMasterTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentMasterTagsStreamCursorValueInput {
  contentMasterId: bigint
  tagId: bigint
}

type ContentMasterTagsSumFields {
  contentMasterId: bigint
  tagId: bigint
}

input ContentMasterTagsSumOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

enum ContentMasterTagsUpdateColumn {
  contentMasterId
  tagId
}

input ContentMasterTagsUpdates {
  _inc: ContentMasterTagsIncInput
  _set: ContentMasterTagsSetInput
  where: ContentMasterTagsBoolExp!
}

type ContentMasterTagsVarianceFields {
  contentMasterId: Float
  tagId: Float
}

input ContentMasterTagsVarianceOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

type ContentMasterTagsVarPopFields {
  contentMasterId: Float
  tagId: Float
}

input ContentMasterTagsVarPopOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

type ContentMasterTagsVarSampFields {
  contentMasterId: Float
  tagId: Float
}

input ContentMasterTagsVarSampOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

enum ContentMasterUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  rootContentId
  slug
  tenantId
  type
}

input ContentMasterUpdates {
  _inc: ContentMasterIncInput
  _set: ContentMasterSetInput
  where: ContentMasterBoolExp!
}

type ContentMasterVarianceFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

input ContentMasterVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

type ContentMasterVarPopFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

input ContentMasterVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

type ContentMasterVarSampFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

input ContentMasterVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

type ContentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  tenantId: bigint
  text: String
}

input ContentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

type ContentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  tenantId: bigint
  text: String
}

input ContentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

type ContentMutationResponse {
  affectedRows: Int!
  returning: [Content!]!
}

input ContentObjRelInsertInput {
  data: ContentInsertInput!
  onConflict: ContentOnConflict
}

input ContentOnConflict {
  constraint: ContentConstraint!
  updateColumns: [ContentUpdateColumn!]! = []
  where: ContentBoolExp
}

input ContentOrderBy {
  content: ContentOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  contentMaster: ContentMasterOrderBy
  contentTeamsAggregate: ContentTeamsAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isAnonymous: OrderBy
  parentId: OrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  text: OrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

input ContentPkColumnsInput {
  id: bigint!
}

enum ContentSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAnonymous
  parentId
  tenantId
  text
}

enum ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns {
  isAnonymous
}

enum ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns {
  isAnonymous
}

input ContentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  tenantId: bigint
  text: String
}

type ContentStddevFields {
  createdById: Float
  id: Float
  parentId: Float
  tenantId: Float
}

input ContentStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

type ContentStddevPopFields {
  createdById: Float
  id: Float
  parentId: Float
  tenantId: Float
}

input ContentStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

type ContentStddevSampFields {
  createdById: Float
  id: Float
  parentId: Float
  tenantId: Float
}

input ContentStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

input ContentStreamCursorInput {
  initialValue: ContentStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  tenantId: bigint
  text: String
}

type ContentSumFields {
  createdById: bigint
  id: bigint
  parentId: bigint
  tenantId: bigint
}

input ContentSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

type ContentTeams {
  content: Content!
  contentId: bigint!
  team: Team!
  teamId: bigint!
}

type ContentTeamsAggregate {
  aggregate: ContentTeamsAggregateFields
  nodes: [ContentTeams!]!
}

input ContentTeamsAggregateBoolExp {
  count: contentTeamsAggregateBoolExpCount
}

input contentTeamsAggregateBoolExpCount {
  arguments: [ContentTeamsSelectColumn!]
  distinct: Boolean
  filter: ContentTeamsBoolExp
  predicate: IntComparisonExp!
}

type ContentTeamsAggregateFields {
  avg: ContentTeamsAvgFields
  count(columns: [ContentTeamsSelectColumn!], distinct: Boolean): Int!
  max: ContentTeamsMaxFields
  min: ContentTeamsMinFields
  stddev: ContentTeamsStddevFields
  stddevPop: ContentTeamsStddevPopFields
  stddevSamp: ContentTeamsStddevSampFields
  sum: ContentTeamsSumFields
  varPop: ContentTeamsVarPopFields
  varSamp: ContentTeamsVarSampFields
  variance: ContentTeamsVarianceFields
}

input ContentTeamsAggregateOrderBy {
  avg: ContentTeamsAvgOrderBy
  count: OrderBy
  max: ContentTeamsMaxOrderBy
  min: ContentTeamsMinOrderBy
  stddev: ContentTeamsStddevOrderBy
  stddevPop: ContentTeamsStddevPopOrderBy
  stddevSamp: ContentTeamsStddevSampOrderBy
  sum: ContentTeamsSumOrderBy
  varPop: ContentTeamsVarPopOrderBy
  varSamp: ContentTeamsVarSampOrderBy
  variance: ContentTeamsVarianceOrderBy
}

input ContentTeamsArrRelInsertInput {
  data: [ContentTeamsInsertInput!]!
  onConflict: ContentTeamsOnConflict
}

type ContentTeamsAvgFields {
  contentId: Float
  teamId: Float
}

input ContentTeamsAvgOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

input ContentTeamsBoolExp {
  _and: [ContentTeamsBoolExp!]
  _not: ContentTeamsBoolExp
  _or: [ContentTeamsBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
}

enum ContentTeamsConstraint {
  content_teams_pkey
}

input ContentTeamsIncInput {
  contentId: bigint
  teamId: bigint
}

input ContentTeamsInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
}

type ContentTeamsMaxFields {
  contentId: bigint
  teamId: bigint
}

input ContentTeamsMaxOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

type ContentTeamsMinFields {
  contentId: bigint
  teamId: bigint
}

input ContentTeamsMinOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

type ContentTeamsMutationResponse {
  affectedRows: Int!
  returning: [ContentTeams!]!
}

input ContentTeamsOnConflict {
  constraint: ContentTeamsConstraint!
  updateColumns: [ContentTeamsUpdateColumn!]! = []
  where: ContentTeamsBoolExp
}

input ContentTeamsOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
}

input ContentTeamsPkColumnsInput {
  contentId: bigint!
  teamId: bigint!
}

enum ContentTeamsSelectColumn {
  contentId
  teamId
}

input ContentTeamsSetInput {
  contentId: bigint
  teamId: bigint
}

type ContentTeamsStddevFields {
  contentId: Float
  teamId: Float
}

input ContentTeamsStddevOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

type ContentTeamsStddevPopFields {
  contentId: Float
  teamId: Float
}

input ContentTeamsStddevPopOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

type ContentTeamsStddevSampFields {
  contentId: Float
  teamId: Float
}

input ContentTeamsStddevSampOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

input ContentTeamsStreamCursorInput {
  initialValue: ContentTeamsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentTeamsStreamCursorValueInput {
  contentId: bigint
  teamId: bigint
}

type ContentTeamsSumFields {
  contentId: bigint
  teamId: bigint
}

input ContentTeamsSumOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

enum ContentTeamsUpdateColumn {
  contentId
  teamId
}

input ContentTeamsUpdates {
  _inc: ContentTeamsIncInput
  _set: ContentTeamsSetInput
  where: ContentTeamsBoolExp!
}

type ContentTeamsVarianceFields {
  contentId: Float
  teamId: Float
}

input ContentTeamsVarianceOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

type ContentTeamsVarPopFields {
  contentId: Float
  teamId: Float
}

input ContentTeamsVarPopOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

type ContentTeamsVarSampFields {
  contentId: Float
  teamId: Float
}

input ContentTeamsVarSampOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

enum ContentUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAnonymous
  parentId
  tenantId
  text
}

input ContentUpdates {
  _inc: ContentIncInput
  _set: ContentSetInput
  where: ContentBoolExp!
}

type ContentVarianceFields {
  createdById: Float
  id: Float
  parentId: Float
  tenantId: Float
}

input ContentVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

type ContentVarPopFields {
  createdById: Float
  id: Float
  parentId: Float
  tenantId: Float
}

input ContentVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

type ContentVarSampFields {
  createdById: Float
  id: Float
  parentId: Float
  tenantId: Float
}

input ContentVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

enum CursorOrdering {
  ASC
  DESC
}

type Document {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  documentEdits(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): [DocumentEdit!]!
  documentEditsAggregate(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): DocumentEditAggregate!
  fileId: bigint
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  subject: Subject
  subjectId: bigint
  team: Team
  teamId: bigint
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  yearVersion: smallint
}

type DocumentAggregate {
  aggregate: DocumentAggregateFields
  nodes: [Document!]!
}

input DocumentAggregateBoolExp {
  count: documentAggregateBoolExpCount
}

input documentAggregateBoolExpCount {
  arguments: [DocumentSelectColumn!]
  distinct: Boolean
  filter: DocumentBoolExp
  predicate: IntComparisonExp!
}

type DocumentAggregateFields {
  avg: DocumentAvgFields
  count(columns: [DocumentSelectColumn!], distinct: Boolean): Int!
  max: DocumentMaxFields
  min: DocumentMinFields
  stddev: DocumentStddevFields
  stddevPop: DocumentStddevPopFields
  stddevSamp: DocumentStddevSampFields
  sum: DocumentSumFields
  varPop: DocumentVarPopFields
  varSamp: DocumentVarSampFields
  variance: DocumentVarianceFields
}

input DocumentAggregateOrderBy {
  avg: DocumentAvgOrderBy
  count: OrderBy
  max: DocumentMaxOrderBy
  min: DocumentMinOrderBy
  stddev: DocumentStddevOrderBy
  stddevPop: DocumentStddevPopOrderBy
  stddevSamp: DocumentStddevSampOrderBy
  sum: DocumentSumOrderBy
  varPop: DocumentVarPopOrderBy
  varSamp: DocumentVarSampOrderBy
  variance: DocumentVarianceOrderBy
}

input DocumentArrRelInsertInput {
  data: [DocumentInsertInput!]!
  onConflict: DocumentOnConflict
}

type DocumentAvgFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentAvgOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

input DocumentBoolExp {
  _and: [DocumentBoolExp!]
  _not: DocumentBoolExp
  _or: [DocumentBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  fileId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  yearVersion: SmallintComparisonExp
}

enum DocumentConstraint {
  document_file_id_unique
  document_pkey
}

type DocumentEdit {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  document: Document!
  documentId: bigint!
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  newVersionId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  yearVersion: smallint
}

type DocumentEditAggregate {
  aggregate: DocumentEditAggregateFields
  nodes: [DocumentEdit!]!
}

input DocumentEditAggregateBoolExp {
  count: documentEditAggregateBoolExpCount
}

input documentEditAggregateBoolExpCount {
  arguments: [DocumentEditSelectColumn!]
  distinct: Boolean
  filter: DocumentEditBoolExp
  predicate: IntComparisonExp!
}

type DocumentEditAggregateFields {
  avg: DocumentEditAvgFields
  count(columns: [DocumentEditSelectColumn!], distinct: Boolean): Int!
  max: DocumentEditMaxFields
  min: DocumentEditMinFields
  stddev: DocumentEditStddevFields
  stddevPop: DocumentEditStddevPopFields
  stddevSamp: DocumentEditStddevSampFields
  sum: DocumentEditSumFields
  varPop: DocumentEditVarPopFields
  varSamp: DocumentEditVarSampFields
  variance: DocumentEditVarianceFields
}

input DocumentEditAggregateOrderBy {
  avg: DocumentEditAvgOrderBy
  count: OrderBy
  max: DocumentEditMaxOrderBy
  min: DocumentEditMinOrderBy
  stddev: DocumentEditStddevOrderBy
  stddevPop: DocumentEditStddevPopOrderBy
  stddevSamp: DocumentEditStddevSampOrderBy
  sum: DocumentEditSumOrderBy
  varPop: DocumentEditVarPopOrderBy
  varSamp: DocumentEditVarSampOrderBy
  variance: DocumentEditVarianceOrderBy
}

input DocumentEditArrRelInsertInput {
  data: [DocumentEditInsertInput!]!
  onConflict: DocumentEditOnConflict
}

type DocumentEditAvgFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentEditAvgOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

input DocumentEditBoolExp {
  _and: [DocumentEditBoolExp!]
  _not: DocumentEditBoolExp
  _or: [DocumentEditBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  document: DocumentBoolExp
  documentId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  newVersionId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  yearVersion: SmallintComparisonExp
}

enum DocumentEditConstraint {
  document_edit_pkey
}

input DocumentEditIncInput {
  createdById: bigint
  documentId: bigint
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  yearVersion: smallint
}

input DocumentEditInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  document: DocumentObjRelInsertInput
  documentId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  newVersionId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentEditMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

input DocumentEditMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type DocumentEditMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

input DocumentEditMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type DocumentEditMutationResponse {
  affectedRows: Int!
  returning: [DocumentEdit!]!
}

input DocumentEditOnConflict {
  constraint: DocumentEditConstraint!
  updateColumns: [DocumentEditUpdateColumn!]! = []
  where: DocumentEditBoolExp
}

input DocumentEditOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  document: DocumentOrderBy
  documentId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  newVersionId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

input DocumentEditPkColumnsInput {
  id: bigint!
}

enum DocumentEditSelectColumn {
  createdAt
  createdById
  deletedAt
  documentId
  hiddenAt
  id
  newVersionId
  tenantId
  type
  yearVersion
}

input DocumentEditSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentEditStddevFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentEditStddevOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentEditStddevPopFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentEditStddevPopOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentEditStddevSampFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentEditStddevSampOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

input DocumentEditStreamCursorInput {
  initialValue: DocumentEditStreamCursorValueInput!
  ordering: CursorOrdering
}

input DocumentEditStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentEditSumFields {
  createdById: bigint
  documentId: bigint
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  yearVersion: smallint
}

input DocumentEditSumOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

enum DocumentEditUpdateColumn {
  createdAt
  createdById
  deletedAt
  documentId
  hiddenAt
  id
  newVersionId
  tenantId
  type
  yearVersion
}

input DocumentEditUpdates {
  _inc: DocumentEditIncInput
  _set: DocumentEditSetInput
  where: DocumentEditBoolExp!
}

type DocumentEditVarianceFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentEditVarianceOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentEditVarPopFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentEditVarPopOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentEditVarSampFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentEditVarSampOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

input DocumentIncInput {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

input DocumentInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  documentEdits: DocumentEditArrRelInsertInput
  fileId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  subject: SubjectObjRelInsertInput
  subjectId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

input DocumentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type DocumentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

input DocumentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type DocumentMutationResponse {
  affectedRows: Int!
  returning: [Document!]!
}

input DocumentObjRelInsertInput {
  data: DocumentInsertInput!
  onConflict: DocumentOnConflict
}

input DocumentOnConflict {
  constraint: DocumentConstraint!
  updateColumns: [DocumentUpdateColumn!]! = []
  where: DocumentBoolExp
}

input DocumentOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  fileId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

input DocumentPkColumnsInput {
  id: bigint!
}

enum DocumentSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  fileId
  hiddenAt
  id
  name
  subjectId
  teamId
  tenantId
  type
  yearVersion
}

input DocumentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentStddevFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentStddevOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentStddevPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentStddevPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentStddevSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentStddevSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

input DocumentStreamCursorInput {
  initialValue: DocumentStreamCursorValueInput!
  ordering: CursorOrdering
}

input DocumentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentSumFields {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

input DocumentSumOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

enum DocumentUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  fileId
  hiddenAt
  id
  name
  subjectId
  teamId
  tenantId
  type
  yearVersion
}

input DocumentUpdates {
  _inc: DocumentIncInput
  _set: DocumentSetInput
  where: DocumentBoolExp!
}

type DocumentVarianceFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentVarianceOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentVarPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentVarPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentVarSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentVarSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type Event {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actorAddress: ActorAddress
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean!
  budget: Float
  contentMaster: ContentMaster!
  contentMasterId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz!
  eventApprovalStep: EventApprovalStep
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventRoles(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): [EventRole!]!
  eventRolesAggregate(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): EventRoleAggregate!
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  fileUpload: FileUpload
  form: Form
  formSubmission: FormSubmission
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint
  individual: Individual
  isPrivate: Boolean!
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta(path: String): jsonb!
  onlineMeetingLink: String
  onlineMeetingPlace: String
  presenceReward: Float!
  price: Float!
  project: Project!
  projectId: bigint!
  start: timestamptz!
  state: String!
  supervisorId: bigint!
  teamEvents(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): [TeamEvents!]!
  teamEventsAggregate(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): TeamEventsAggregate!
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  tenant: Tenant!
  tenantId: bigint!
  userInfo: UserInfo!
}

type EventAggregate {
  aggregate: EventAggregateFields
  nodes: [Event!]!
}

input EventAggregateBoolExp {
  bool_and: eventAggregateBoolExpBool_and
  bool_or: eventAggregateBoolExpBool_or
  count: eventAggregateBoolExpCount
}

input eventAggregateBoolExpBool_and {
  arguments: EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpBool_or {
  arguments: EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpCount {
  arguments: [EventSelectColumn!]
  distinct: Boolean
  filter: EventBoolExp
  predicate: IntComparisonExp!
}

type EventAggregateFields {
  avg: EventAvgFields
  count(columns: [EventSelectColumn!], distinct: Boolean): Int!
  max: EventMaxFields
  min: EventMinFields
  stddev: EventStddevFields
  stddevPop: EventStddevPopFields
  stddevSamp: EventStddevSampFields
  sum: EventSumFields
  varPop: EventVarPopFields
  varSamp: EventVarSampFields
  variance: EventVarianceFields
}

input EventAggregateOrderBy {
  avg: EventAvgOrderBy
  count: OrderBy
  max: EventMaxOrderBy
  min: EventMinOrderBy
  stddev: EventStddevOrderBy
  stddevPop: EventStddevPopOrderBy
  stddevSamp: EventStddevSampOrderBy
  sum: EventSumOrderBy
  varPop: EventVarPopOrderBy
  varSamp: EventVarSampOrderBy
  variance: EventVarianceOrderBy
}

input EventAppendInput {
  meta: jsonb
}

type EventApproval {
  approved: Boolean!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  event: Event
  eventApprovalStep: EventApprovalStep
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  message: String
  stepId: bigint
  tenant: Tenant!
  tenantId: bigint!
}

type EventApprovalAggregate {
  aggregate: EventApprovalAggregateFields
  nodes: [EventApproval!]!
}

input EventApprovalAggregateBoolExp {
  bool_and: eventApprovalAggregateBoolExpBool_and
  bool_or: eventApprovalAggregateBoolExpBool_or
  count: eventApprovalAggregateBoolExpCount
}

input eventApprovalAggregateBoolExpBool_and {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpBool_or {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpCount {
  arguments: [EventApprovalSelectColumn!]
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalAggregateFields {
  avg: EventApprovalAvgFields
  count(columns: [EventApprovalSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalMaxFields
  min: EventApprovalMinFields
  stddev: EventApprovalStddevFields
  stddevPop: EventApprovalStddevPopFields
  stddevSamp: EventApprovalStddevSampFields
  sum: EventApprovalSumFields
  varPop: EventApprovalVarPopFields
  varSamp: EventApprovalVarSampFields
  variance: EventApprovalVarianceFields
}

input EventApprovalAggregateOrderBy {
  avg: EventApprovalAvgOrderBy
  count: OrderBy
  max: EventApprovalMaxOrderBy
  min: EventApprovalMinOrderBy
  stddev: EventApprovalStddevOrderBy
  stddevPop: EventApprovalStddevPopOrderBy
  stddevSamp: EventApprovalStddevSampOrderBy
  sum: EventApprovalSumOrderBy
  varPop: EventApprovalVarPopOrderBy
  varSamp: EventApprovalVarSampOrderBy
  variance: EventApprovalVarianceOrderBy
}

input EventApprovalArrRelInsertInput {
  data: [EventApprovalInsertInput!]!
  onConflict: EventApprovalOnConflict
}

type EventApprovalAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

input EventApprovalAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

input EventApprovalBoolExp {
  _and: [EventApprovalBoolExp!]
  _not: EventApprovalBoolExp
  _or: [EventApprovalBoolExp!]
  approved: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  message: StringComparisonExp
  stepId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventApprovalConstraint {
  event_approval_pkey
}

input EventApprovalIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  stepId: bigint
  tenantId: bigint
}

input EventApprovalInsertInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  message: String
  stepId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventApprovalMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

input EventApprovalMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

input EventApprovalMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalMutationResponse {
  affectedRows: Int!
  returning: [EventApproval!]!
}

input EventApprovalOnConflict {
  constraint: EventApprovalConstraint!
  updateColumns: [EventApprovalUpdateColumn!]! = []
  where: EventApprovalBoolExp
}

input EventApprovalOrderBy {
  approved: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  message: OrderBy
  stepId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventApprovalPkColumnsInput {
  id: bigint!
}

enum EventApprovalSelectColumn {
  approved
  createdAt
  createdById
  deletedAt
  eventId
  hiddenAt
  id
  message
  stepId
  tenantId
}

enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns {
  approved
}

enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns {
  approved
}

input EventApprovalSetInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

type EventApprovalStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

input EventApprovalStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

input EventApprovalStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

input EventApprovalStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStep {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventApprovalStep: EventApprovalStep
  eventApprovalStepNotifiees(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepNotifieesAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  eventApprovalStepValidators(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStepValidatorsAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  eventApprovalSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  previousStepId: bigint
  tenant: Tenant!
  tenantId: bigint!
}

type EventApprovalStepAggregate {
  aggregate: EventApprovalStepAggregateFields
  nodes: [EventApprovalStep!]!
}

input EventApprovalStepAggregateBoolExp {
  count: eventApprovalStepAggregateBoolExpCount
}

input eventApprovalStepAggregateBoolExpCount {
  arguments: [EventApprovalStepSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalStepAggregateFields {
  avg: EventApprovalStepAvgFields
  count(columns: [EventApprovalStepSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepMaxFields
  min: EventApprovalStepMinFields
  stddev: EventApprovalStepStddevFields
  stddevPop: EventApprovalStepStddevPopFields
  stddevSamp: EventApprovalStepStddevSampFields
  sum: EventApprovalStepSumFields
  varPop: EventApprovalStepVarPopFields
  varSamp: EventApprovalStepVarSampFields
  variance: EventApprovalStepVarianceFields
}

input EventApprovalStepAggregateOrderBy {
  avg: EventApprovalStepAvgOrderBy
  count: OrderBy
  max: EventApprovalStepMaxOrderBy
  min: EventApprovalStepMinOrderBy
  stddev: EventApprovalStepStddevOrderBy
  stddevPop: EventApprovalStepStddevPopOrderBy
  stddevSamp: EventApprovalStepStddevSampOrderBy
  sum: EventApprovalStepSumOrderBy
  varPop: EventApprovalStepVarPopOrderBy
  varSamp: EventApprovalStepVarSampOrderBy
  variance: EventApprovalStepVarianceOrderBy
}

input EventApprovalStepArrRelInsertInput {
  data: [EventApprovalStepInsertInput!]!
  onConflict: EventApprovalStepOnConflict
}

type EventApprovalStepAvgFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

input EventApprovalStepBoolExp {
  _and: [EventApprovalStepBoolExp!]
  _not: EventApprovalStepBoolExp
  _or: [EventApprovalStepBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepNotifiees: EventApprovalStepNotifieesBoolExp
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateBoolExp
  eventApprovalStepValidators: EventApprovalStepValidatorsBoolExp
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateBoolExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  previousStepId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventApprovalStepConstraint {
  event_approval_step_pkey
}

input EventApprovalStepIncInput {
  createdById: bigint
  id: bigint
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepNotifiees: EventApprovalStepNotifieesArrRelInsertInput
  eventApprovalStepValidators: EventApprovalStepValidatorsArrRelInsertInput
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  events: EventArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  previousStepId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventApprovalStepMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalStep!]!
}

type EventApprovalStepNotifiees {
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!
  individual: Individual!
  individualId: bigint!
}

type EventApprovalStepNotifieesAggregate {
  aggregate: EventApprovalStepNotifieesAggregateFields
  nodes: [EventApprovalStepNotifiees!]!
}

input EventApprovalStepNotifieesAggregateBoolExp {
  count: eventApprovalStepNotifieesAggregateBoolExpCount
}

input eventApprovalStepNotifieesAggregateBoolExpCount {
  arguments: [EventApprovalStepNotifieesSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepNotifieesBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalStepNotifieesAggregateFields {
  avg: EventApprovalStepNotifieesAvgFields
  count(columns: [EventApprovalStepNotifieesSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepNotifieesMaxFields
  min: EventApprovalStepNotifieesMinFields
  stddev: EventApprovalStepNotifieesStddevFields
  stddevPop: EventApprovalStepNotifieesStddevPopFields
  stddevSamp: EventApprovalStepNotifieesStddevSampFields
  sum: EventApprovalStepNotifieesSumFields
  varPop: EventApprovalStepNotifieesVarPopFields
  varSamp: EventApprovalStepNotifieesVarSampFields
  variance: EventApprovalStepNotifieesVarianceFields
}

input EventApprovalStepNotifieesAggregateOrderBy {
  avg: EventApprovalStepNotifieesAvgOrderBy
  count: OrderBy
  max: EventApprovalStepNotifieesMaxOrderBy
  min: EventApprovalStepNotifieesMinOrderBy
  stddev: EventApprovalStepNotifieesStddevOrderBy
  stddevPop: EventApprovalStepNotifieesStddevPopOrderBy
  stddevSamp: EventApprovalStepNotifieesStddevSampOrderBy
  sum: EventApprovalStepNotifieesSumOrderBy
  varPop: EventApprovalStepNotifieesVarPopOrderBy
  varSamp: EventApprovalStepNotifieesVarSampOrderBy
  variance: EventApprovalStepNotifieesVarianceOrderBy
}

input EventApprovalStepNotifieesArrRelInsertInput {
  data: [EventApprovalStepNotifieesInsertInput!]!
  onConflict: EventApprovalStepNotifieesOnConflict
}

type EventApprovalStepNotifieesAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepNotifieesBoolExp {
  _and: [EventApprovalStepNotifieesBoolExp!]
  _not: EventApprovalStepNotifieesBoolExp
  _or: [EventApprovalStepNotifieesBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

enum EventApprovalStepNotifieesConstraint {
  event_approval_step_notifiees_pkey
}

input EventApprovalStepNotifieesIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

type EventApprovalStepNotifieesMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalStepNotifiees!]!
}

input EventApprovalStepNotifieesOnConflict {
  constraint: EventApprovalStepNotifieesConstraint!
  updateColumns: [EventApprovalStepNotifieesUpdateColumn!]! = []
  where: EventApprovalStepNotifieesBoolExp
}

input EventApprovalStepNotifieesOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

input EventApprovalStepNotifieesPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

enum EventApprovalStepNotifieesSelectColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepNotifieesSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepNotifieesStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepNotifieesStreamCursorInput {
  initialValue: EventApprovalStepNotifieesStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStepNotifieesStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepNotifieesSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

enum EventApprovalStepNotifieesUpdateColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepNotifieesUpdates {
  _inc: EventApprovalStepNotifieesIncInput
  _set: EventApprovalStepNotifieesSetInput
  where: EventApprovalStepNotifieesBoolExp!
}

type EventApprovalStepNotifieesVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepObjRelInsertInput {
  data: EventApprovalStepInsertInput!
  onConflict: EventApprovalStepOnConflict
}

input EventApprovalStepOnConflict {
  constraint: EventApprovalStepConstraint!
  updateColumns: [EventApprovalStepUpdateColumn!]! = []
  where: EventApprovalStepBoolExp
}

input EventApprovalStepOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateOrderBy
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateOrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventApprovalStepPkColumnsInput {
  id: bigint!
}

enum EventApprovalStepSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  previousStepId
  tenantId
}

input EventApprovalStepSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

type EventApprovalStepStddevFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepStddevPopFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepStddevSampFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

input EventApprovalStepStreamCursorInput {
  initialValue: EventApprovalStepStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStepStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

type EventApprovalStepSumFields {
  createdById: bigint
  id: bigint
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

enum EventApprovalStepUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  previousStepId
  tenantId
}

input EventApprovalStepUpdates {
  _inc: EventApprovalStepIncInput
  _set: EventApprovalStepSetInput
  where: EventApprovalStepBoolExp!
}

type EventApprovalStepValidators {
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!
  individual: Individual!
  individualId: bigint!
}

type EventApprovalStepValidatorsAggregate {
  aggregate: EventApprovalStepValidatorsAggregateFields
  nodes: [EventApprovalStepValidators!]!
}

input EventApprovalStepValidatorsAggregateBoolExp {
  count: eventApprovalStepValidatorsAggregateBoolExpCount
}

input eventApprovalStepValidatorsAggregateBoolExpCount {
  arguments: [EventApprovalStepValidatorsSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepValidatorsBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalStepValidatorsAggregateFields {
  avg: EventApprovalStepValidatorsAvgFields
  count(columns: [EventApprovalStepValidatorsSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepValidatorsMaxFields
  min: EventApprovalStepValidatorsMinFields
  stddev: EventApprovalStepValidatorsStddevFields
  stddevPop: EventApprovalStepValidatorsStddevPopFields
  stddevSamp: EventApprovalStepValidatorsStddevSampFields
  sum: EventApprovalStepValidatorsSumFields
  varPop: EventApprovalStepValidatorsVarPopFields
  varSamp: EventApprovalStepValidatorsVarSampFields
  variance: EventApprovalStepValidatorsVarianceFields
}

input EventApprovalStepValidatorsAggregateOrderBy {
  avg: EventApprovalStepValidatorsAvgOrderBy
  count: OrderBy
  max: EventApprovalStepValidatorsMaxOrderBy
  min: EventApprovalStepValidatorsMinOrderBy
  stddev: EventApprovalStepValidatorsStddevOrderBy
  stddevPop: EventApprovalStepValidatorsStddevPopOrderBy
  stddevSamp: EventApprovalStepValidatorsStddevSampOrderBy
  sum: EventApprovalStepValidatorsSumOrderBy
  varPop: EventApprovalStepValidatorsVarPopOrderBy
  varSamp: EventApprovalStepValidatorsVarSampOrderBy
  variance: EventApprovalStepValidatorsVarianceOrderBy
}

input EventApprovalStepValidatorsArrRelInsertInput {
  data: [EventApprovalStepValidatorsInsertInput!]!
  onConflict: EventApprovalStepValidatorsOnConflict
}

type EventApprovalStepValidatorsAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepValidatorsBoolExp {
  _and: [EventApprovalStepValidatorsBoolExp!]
  _not: EventApprovalStepValidatorsBoolExp
  _or: [EventApprovalStepValidatorsBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

enum EventApprovalStepValidatorsConstraint {
  event_approval_step_validators_pkey
}

input EventApprovalStepValidatorsIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

type EventApprovalStepValidatorsMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalStepValidators!]!
}

input EventApprovalStepValidatorsOnConflict {
  constraint: EventApprovalStepValidatorsConstraint!
  updateColumns: [EventApprovalStepValidatorsUpdateColumn!]! = []
  where: EventApprovalStepValidatorsBoolExp
}

input EventApprovalStepValidatorsOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

input EventApprovalStepValidatorsPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

enum EventApprovalStepValidatorsSelectColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepValidatorsSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepValidatorsStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepValidatorsStreamCursorInput {
  initialValue: EventApprovalStepValidatorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStepValidatorsStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepValidatorsSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

enum EventApprovalStepValidatorsUpdateColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepValidatorsUpdates {
  _inc: EventApprovalStepValidatorsIncInput
  _set: EventApprovalStepValidatorsSetInput
  where: EventApprovalStepValidatorsBoolExp!
}

type EventApprovalStepValidatorsVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepVarianceFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepVarPopFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepVarSampFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

input EventApprovalStreamCursorInput {
  initialValue: EventApprovalStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStreamCursorValueInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

type EventApprovalSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  stepId: bigint
  tenantId: bigint
}

input EventApprovalSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

enum EventApprovalUpdateColumn {
  approved
  createdAt
  createdById
  deletedAt
  eventId
  hiddenAt
  id
  message
  stepId
  tenantId
}

input EventApprovalUpdates {
  _inc: EventApprovalIncInput
  _set: EventApprovalSetInput
  where: EventApprovalBoolExp!
}

type EventApprovalVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

input EventApprovalVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

input EventApprovalVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

input EventApprovalVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

input EventArrRelInsertInput {
  data: [EventInsertInput!]!
  onConflict: EventOnConflict
}

type EventAttendance {
  confirmedVia: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoin!
  eventJoinId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  participated: Boolean!
  tenant: Tenant!
  tenantId: bigint!
}

type EventAttendanceAggregate {
  aggregate: EventAttendanceAggregateFields
  nodes: [EventAttendance!]!
}

input EventAttendanceAggregateBoolExp {
  bool_and: eventAttendanceAggregateBoolExpBool_and
  bool_or: eventAttendanceAggregateBoolExpBool_or
  count: eventAttendanceAggregateBoolExpCount
}

input eventAttendanceAggregateBoolExpBool_and {
  arguments: EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventAttendanceBoolExp
  predicate: BooleanComparisonExp!
}

input eventAttendanceAggregateBoolExpBool_or {
  arguments: EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventAttendanceBoolExp
  predicate: BooleanComparisonExp!
}

input eventAttendanceAggregateBoolExpCount {
  arguments: [EventAttendanceSelectColumn!]
  distinct: Boolean
  filter: EventAttendanceBoolExp
  predicate: IntComparisonExp!
}

type EventAttendanceAggregateFields {
  avg: EventAttendanceAvgFields
  count(columns: [EventAttendanceSelectColumn!], distinct: Boolean): Int!
  max: EventAttendanceMaxFields
  min: EventAttendanceMinFields
  stddev: EventAttendanceStddevFields
  stddevPop: EventAttendanceStddevPopFields
  stddevSamp: EventAttendanceStddevSampFields
  sum: EventAttendanceSumFields
  varPop: EventAttendanceVarPopFields
  varSamp: EventAttendanceVarSampFields
  variance: EventAttendanceVarianceFields
}

input EventAttendanceAggregateOrderBy {
  avg: EventAttendanceAvgOrderBy
  count: OrderBy
  max: EventAttendanceMaxOrderBy
  min: EventAttendanceMinOrderBy
  stddev: EventAttendanceStddevOrderBy
  stddevPop: EventAttendanceStddevPopOrderBy
  stddevSamp: EventAttendanceStddevSampOrderBy
  sum: EventAttendanceSumOrderBy
  varPop: EventAttendanceVarPopOrderBy
  varSamp: EventAttendanceVarSampOrderBy
  variance: EventAttendanceVarianceOrderBy
}

input EventAttendanceArrRelInsertInput {
  data: [EventAttendanceInsertInput!]!
  onConflict: EventAttendanceOnConflict
}

type EventAttendanceAvgFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

input EventAttendanceAvgOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input EventAttendanceBoolExp {
  _and: [EventAttendanceBoolExp!]
  _not: EventAttendanceBoolExp
  _or: [EventAttendanceBoolExp!]
  confirmedVia: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  participated: BooleanComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventAttendanceConstraint {
  event_attendance_pkey
}

input EventAttendanceIncInput {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  tenantId: bigint
}

input EventAttendanceInsertInput {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  participated: Boolean
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventAttendanceMaxFields {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input EventAttendanceMaxOrderBy {
  confirmedVia: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventAttendanceMinFields {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input EventAttendanceMinOrderBy {
  confirmedVia: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventAttendanceMutationResponse {
  affectedRows: Int!
  returning: [EventAttendance!]!
}

input EventAttendanceOnConflict {
  constraint: EventAttendanceConstraint!
  updateColumns: [EventAttendanceUpdateColumn!]! = []
  where: EventAttendanceBoolExp
}

input EventAttendanceOrderBy {
  confirmedVia: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  participated: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventAttendancePkColumnsInput {
  id: bigint!
}

enum EventAttendanceSelectColumn {
  confirmedVia
  createdAt
  createdById
  deletedAt
  eventJoinId
  hiddenAt
  id
  participated
  tenantId
}

enum EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_andArgumentsColumns {
  participated
}

enum EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_orArgumentsColumns {
  participated
}

input EventAttendanceSetInput {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  participated: Boolean
  tenantId: bigint
}

type EventAttendanceStddevFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

input EventAttendanceStddevOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventAttendanceStddevPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

input EventAttendanceStddevPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventAttendanceStddevSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

input EventAttendanceStddevSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input EventAttendanceStreamCursorInput {
  initialValue: EventAttendanceStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventAttendanceStreamCursorValueInput {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  participated: Boolean
  tenantId: bigint
}

type EventAttendanceSumFields {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  tenantId: bigint
}

input EventAttendanceSumOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum EventAttendanceUpdateColumn {
  confirmedVia
  createdAt
  createdById
  deletedAt
  eventJoinId
  hiddenAt
  id
  participated
  tenantId
}

input EventAttendanceUpdates {
  _inc: EventAttendanceIncInput
  _set: EventAttendanceSetInput
  where: EventAttendanceBoolExp!
}

type EventAttendanceVarianceFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

input EventAttendanceVarianceOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventAttendanceVarPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

input EventAttendanceVarPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventAttendanceVarSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

input EventAttendanceVarSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventAvgFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  supervisorId: Float
  tenantId: Float
}

input EventAvgOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

input EventBoolExp {
  _and: [EventBoolExp!]
  _not: EventBoolExp
  _or: [EventBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  approvalSubmissionId: BigintComparisonExp
  autoAcceptJoins: BooleanComparisonExp
  budget: FloatComparisonExp
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  end: TimestamptzComparisonExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  fileUpload: FileUploadBoolExp
  form: FormBoolExp
  formSubmission: FormSubmissionBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  isPrivate: BooleanComparisonExp
  joinFormId: BigintComparisonExp
  lastEventApprovalStepId: BigintComparisonExp
  meta: JsonbComparisonExp
  onlineMeetingLink: StringComparisonExp
  onlineMeetingPlace: StringComparisonExp
  presenceReward: FloatComparisonExp
  price: FloatComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  start: TimestamptzComparisonExp
  state: StringComparisonExp
  supervisorId: BigintComparisonExp
  teamEvents: TeamEventsBoolExp
  teamEventsAggregate: TeamEventsAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

type EventChangeRole {
  accepted: Boolean!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoin
  eventRole: EventRole
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  note: String!
  receivedRoleId: bigint
  tenant: Tenant!
  tenantId: bigint!
}

type EventChangeRoleAggregate {
  aggregate: EventChangeRoleAggregateFields
  nodes: [EventChangeRole!]!
}

input EventChangeRoleAggregateBoolExp {
  bool_and: eventChangeRoleAggregateBoolExpBool_and
  bool_or: eventChangeRoleAggregateBoolExpBool_or
  count: eventChangeRoleAggregateBoolExpCount
}

input eventChangeRoleAggregateBoolExpBool_and {
  arguments: EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventChangeRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventChangeRoleAggregateBoolExpBool_or {
  arguments: EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventChangeRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventChangeRoleAggregateBoolExpCount {
  arguments: [EventChangeRoleSelectColumn!]
  distinct: Boolean
  filter: EventChangeRoleBoolExp
  predicate: IntComparisonExp!
}

type EventChangeRoleAggregateFields {
  avg: EventChangeRoleAvgFields
  count(columns: [EventChangeRoleSelectColumn!], distinct: Boolean): Int!
  max: EventChangeRoleMaxFields
  min: EventChangeRoleMinFields
  stddev: EventChangeRoleStddevFields
  stddevPop: EventChangeRoleStddevPopFields
  stddevSamp: EventChangeRoleStddevSampFields
  sum: EventChangeRoleSumFields
  varPop: EventChangeRoleVarPopFields
  varSamp: EventChangeRoleVarSampFields
  variance: EventChangeRoleVarianceFields
}

input EventChangeRoleAggregateOrderBy {
  avg: EventChangeRoleAvgOrderBy
  count: OrderBy
  max: EventChangeRoleMaxOrderBy
  min: EventChangeRoleMinOrderBy
  stddev: EventChangeRoleStddevOrderBy
  stddevPop: EventChangeRoleStddevPopOrderBy
  stddevSamp: EventChangeRoleStddevSampOrderBy
  sum: EventChangeRoleSumOrderBy
  varPop: EventChangeRoleVarPopOrderBy
  varSamp: EventChangeRoleVarSampOrderBy
  variance: EventChangeRoleVarianceOrderBy
}

input EventChangeRoleArrRelInsertInput {
  data: [EventChangeRoleInsertInput!]!
  onConflict: EventChangeRoleOnConflict
}

type EventChangeRoleAvgFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

input EventChangeRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

input EventChangeRoleBoolExp {
  _and: [EventChangeRoleBoolExp!]
  _not: EventChangeRoleBoolExp
  _or: [EventChangeRoleBoolExp!]
  accepted: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoin: EventJoinBoolExp
  eventRole: EventRoleBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  note: StringComparisonExp
  receivedRoleId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventChangeRoleConstraint {
  event_change_role_pkey
}

input EventChangeRoleIncInput {
  createdById: bigint
  id: bigint
  receivedRoleId: bigint
  tenantId: bigint
}

input EventChangeRoleInsertInput {
  accepted: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoinObjRelInsertInput
  eventRole: EventRoleObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  note: String
  receivedRoleId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventChangeRoleMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

input EventChangeRoleMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

type EventChangeRoleMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

input EventChangeRoleMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

type EventChangeRoleMutationResponse {
  affectedRows: Int!
  returning: [EventChangeRole!]!
}

input EventChangeRoleObjRelInsertInput {
  data: EventChangeRoleInsertInput!
  onConflict: EventChangeRoleOnConflict
}

input EventChangeRoleOnConflict {
  constraint: EventChangeRoleConstraint!
  updateColumns: [EventChangeRoleUpdateColumn!]! = []
  where: EventChangeRoleBoolExp
}

input EventChangeRoleOrderBy {
  accepted: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoin: EventJoinOrderBy
  eventRole: EventRoleOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  note: OrderBy
  receivedRoleId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventChangeRolePkColumnsInput {
  id: bigint!
}

enum EventChangeRoleSelectColumn {
  accepted
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  note
  receivedRoleId
  tenantId
}

enum EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_andArgumentsColumns {
  accepted
}

enum EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_orArgumentsColumns {
  accepted
}

input EventChangeRoleSetInput {
  accepted: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

type EventChangeRoleStddevFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

input EventChangeRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

type EventChangeRoleStddevPopFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

input EventChangeRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

type EventChangeRoleStddevSampFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

input EventChangeRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

input EventChangeRoleStreamCursorInput {
  initialValue: EventChangeRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventChangeRoleStreamCursorValueInput {
  accepted: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

type EventChangeRoleSumFields {
  createdById: bigint
  id: bigint
  receivedRoleId: bigint
  tenantId: bigint
}

input EventChangeRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

enum EventChangeRoleUpdateColumn {
  accepted
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  note
  receivedRoleId
  tenantId
}

input EventChangeRoleUpdates {
  _inc: EventChangeRoleIncInput
  _set: EventChangeRoleSetInput
  where: EventChangeRoleBoolExp!
}

type EventChangeRoleVarianceFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

input EventChangeRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

type EventChangeRoleVarPopFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

input EventChangeRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

type EventChangeRoleVarSampFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

input EventChangeRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

enum EventConstraint {
  event_approval_submission_id_unique
  event_content_master_id_unique
  event_pkey
}

input EventDeleteAtPathInput {
  meta: [String!]
}

input EventDeleteElemInput {
  meta: Int
}

input EventDeleteKeyInput {
  meta: String
}

input EventIncInput {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  presenceReward: Float
  price: Float
  projectId: bigint
  supervisorId: bigint
  tenantId: bigint
}

input EventInsertInput {
  actions: ActionArrRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  budget: Float
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  eventTags: EventTagsArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  form: FormObjRelInsertInput
  formSubmission: FormSubmissionObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  isPrivate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta: jsonb
  onlineMeetingLink: String
  onlineMeetingPlace: String
  presenceReward: Float
  price: Float
  project: ProjectObjRelInsertInput
  projectId: bigint
  start: timestamptz
  state: String
  supervisorId: bigint
  teamEvents: TeamEventsArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type EventJoin {
  action: Action
  actionId: bigint
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  attendanceStatus: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  event: Event!
  eventAttendances(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): [EventAttendance!]!
  eventAttendancesAggregate(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): EventAttendanceAggregate!
  eventChangeRole: EventChangeRole
  eventChangeRoleId: bigint
  eventId: bigint!
  eventRole: EventRole
  eventRoleId: bigint
  fileUpload: FileUpload
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  joinerId: bigint!
  participated: Boolean
  qrCodeId: bigint
  state: String!
  tenant: Tenant!
  tenantId: bigint!
  userInfo: UserInfo!
}

type EventJoinAggregate {
  aggregate: EventJoinAggregateFields
  nodes: [EventJoin!]!
}

input EventJoinAggregateBoolExp {
  bool_and: eventJoinAggregateBoolExpBool_and
  bool_or: eventJoinAggregateBoolExpBool_or
  count: eventJoinAggregateBoolExpCount
}

input eventJoinAggregateBoolExpBool_and {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpBool_or {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpCount {
  arguments: [EventJoinSelectColumn!]
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: IntComparisonExp!
}

type EventJoinAggregateFields {
  avg: EventJoinAvgFields
  count(columns: [EventJoinSelectColumn!], distinct: Boolean): Int!
  max: EventJoinMaxFields
  min: EventJoinMinFields
  stddev: EventJoinStddevFields
  stddevPop: EventJoinStddevPopFields
  stddevSamp: EventJoinStddevSampFields
  sum: EventJoinSumFields
  varPop: EventJoinVarPopFields
  varSamp: EventJoinVarSampFields
  variance: EventJoinVarianceFields
}

input EventJoinAggregateOrderBy {
  avg: EventJoinAvgOrderBy
  count: OrderBy
  max: EventJoinMaxOrderBy
  min: EventJoinMinOrderBy
  stddev: EventJoinStddevOrderBy
  stddevPop: EventJoinStddevPopOrderBy
  stddevSamp: EventJoinStddevSampOrderBy
  sum: EventJoinSumOrderBy
  varPop: EventJoinVarPopOrderBy
  varSamp: EventJoinVarSampOrderBy
  variance: EventJoinVarianceOrderBy
}

input EventJoinArrRelInsertInput {
  data: [EventJoinInsertInput!]!
  onConflict: EventJoinOnConflict
}

type EventJoinAvgFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinAvgOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

input EventJoinBoolExp {
  _and: [EventJoinBoolExp!]
  _not: EventJoinBoolExp
  _or: [EventJoinBoolExp!]
  action: ActionBoolExp
  actionId: BigintComparisonExp
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  attendanceStatus: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventAttendances: EventAttendanceBoolExp
  eventAttendancesAggregate: EventAttendanceAggregateBoolExp
  eventChangeRole: EventChangeRoleBoolExp
  eventChangeRoleId: BigintComparisonExp
  eventId: BigintComparisonExp
  eventRole: EventRoleBoolExp
  eventRoleId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  joinerId: BigintComparisonExp
  participated: BooleanComparisonExp
  qrCodeId: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum EventJoinConstraint {
  event_join_event_change_role_id_unique
  event_join_pkey
}

input EventJoinIncInput {
  actionId: bigint
  createdById: bigint
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  tenantId: bigint
}

input EventJoinInsertInput {
  action: ActionObjRelInsertInput
  actionId: bigint
  actions: ActionArrRelInsertInput
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventAttendances: EventAttendanceArrRelInsertInput
  eventChangeRole: EventChangeRoleObjRelInsertInput
  eventChangeRoleId: bigint
  eventId: bigint
  eventRole: EventRoleObjRelInsertInput
  eventRoleId: bigint
  fileUpload: FileUploadObjRelInsertInput
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  joinerId: bigint
  participated: Boolean
  qrCodeId: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type EventJoinMaxFields {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

input EventJoinMaxOrderBy {
  actionId: OrderBy
  attendanceStatus: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type EventJoinMinFields {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

input EventJoinMinOrderBy {
  actionId: OrderBy
  attendanceStatus: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type EventJoinMutationResponse {
  affectedRows: Int!
  returning: [EventJoin!]!
}

input EventJoinObjRelInsertInput {
  data: EventJoinInsertInput!
  onConflict: EventJoinOnConflict
}

input EventJoinOnConflict {
  constraint: EventJoinConstraint!
  updateColumns: [EventJoinUpdateColumn!]! = []
  where: EventJoinBoolExp
}

input EventJoinOrderBy {
  action: ActionOrderBy
  actionId: OrderBy
  actionsAggregate: ActionAggregateOrderBy
  attendanceStatus: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventAttendancesAggregate: EventAttendanceAggregateOrderBy
  eventChangeRole: EventChangeRoleOrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRole: EventRoleOrderBy
  eventRoleId: OrderBy
  fileUpload: FileUploadOrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  joinerId: OrderBy
  participated: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

input EventJoinPkColumnsInput {
  id: bigint!
}

enum EventJoinSelectColumn {
  actionId
  attendanceStatus
  createdAt
  createdById
  deletedAt
  eventChangeRoleId
  eventId
  eventRoleId
  formSubmissionId
  hiddenAt
  id
  joinerId
  participated
  qrCodeId
  state
  tenantId
}

enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns {
  participated
}

enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns {
  participated
}

input EventJoinSetInput {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  participated: Boolean
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

type EventJoinStddevFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinStddevOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinStddevPopFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinStddevPopOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinStddevSampFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinStddevSampOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

input EventJoinStreamCursorInput {
  initialValue: EventJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventJoinStreamCursorValueInput {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  participated: Boolean
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

type EventJoinSumFields {
  actionId: bigint
  createdById: bigint
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  tenantId: bigint
}

input EventJoinSumOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

enum EventJoinUpdateColumn {
  actionId
  attendanceStatus
  createdAt
  createdById
  deletedAt
  eventChangeRoleId
  eventId
  eventRoleId
  formSubmissionId
  hiddenAt
  id
  joinerId
  participated
  qrCodeId
  state
  tenantId
}

input EventJoinUpdates {
  _inc: EventJoinIncInput
  _set: EventJoinSetInput
  where: EventJoinBoolExp!
}

type EventJoinVarianceFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinVarianceOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinVarPopFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinVarPopOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinVarSampFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinVarSampOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventMaxFields {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  onlineMeetingLink: String
  onlineMeetingPlace: String
  presenceReward: Float
  price: Float
  projectId: bigint
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

input EventMaxOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  onlineMeetingLink: OrderBy
  onlineMeetingPlace: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  start: OrderBy
  state: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type EventMinFields {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  onlineMeetingLink: String
  onlineMeetingPlace: String
  presenceReward: Float
  price: Float
  projectId: bigint
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

input EventMinOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  onlineMeetingLink: OrderBy
  onlineMeetingPlace: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  start: OrderBy
  state: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type EventMutationResponse {
  affectedRows: Int!
  returning: [Event!]!
}

input EventObjRelInsertInput {
  data: EventInsertInput!
  onConflict: EventOnConflict
}

input EventOnConflict {
  constraint: EventConstraint!
  updateColumns: [EventUpdateColumn!]! = []
  where: EventBoolExp
}

input EventOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  autoAcceptJoins: OrderBy
  budget: OrderBy
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  fileUpload: FileUploadOrderBy
  form: FormOrderBy
  formSubmission: FormSubmissionOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  isPrivate: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  meta: OrderBy
  onlineMeetingLink: OrderBy
  onlineMeetingPlace: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  start: OrderBy
  state: OrderBy
  supervisorId: OrderBy
  teamEventsAggregate: TeamEventsAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

input EventPkColumnsInput {
  id: bigint!
}

input EventPrependInput {
  meta: jsonb
}

type EventRole {
  autoAccept: Boolean!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  event: Event!
  eventChangeRoles(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): [EventChangeRole!]!
  eventChangeRolesAggregate(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): EventChangeRoleAggregate!
  eventId: bigint!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  projectRole: ProjectRole!
  projectRoleId: bigint!
  required: Boolean!
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint
  userInfo: UserInfo
}

type EventRoleAggregate {
  aggregate: EventRoleAggregateFields
  nodes: [EventRole!]!
}

input EventRoleAggregateBoolExp {
  bool_and: eventRoleAggregateBoolExpBool_and
  bool_or: eventRoleAggregateBoolExpBool_or
  count: eventRoleAggregateBoolExpCount
}

input eventRoleAggregateBoolExpBool_and {
  arguments: EventRoleSelectColumnEventRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventRoleAggregateBoolExpBool_or {
  arguments: EventRoleSelectColumnEventRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventRoleAggregateBoolExpCount {
  arguments: [EventRoleSelectColumn!]
  distinct: Boolean
  filter: EventRoleBoolExp
  predicate: IntComparisonExp!
}

type EventRoleAggregateFields {
  avg: EventRoleAvgFields
  count(columns: [EventRoleSelectColumn!], distinct: Boolean): Int!
  max: EventRoleMaxFields
  min: EventRoleMinFields
  stddev: EventRoleStddevFields
  stddevPop: EventRoleStddevPopFields
  stddevSamp: EventRoleStddevSampFields
  sum: EventRoleSumFields
  varPop: EventRoleVarPopFields
  varSamp: EventRoleVarSampFields
  variance: EventRoleVarianceFields
}

input EventRoleAggregateOrderBy {
  avg: EventRoleAvgOrderBy
  count: OrderBy
  max: EventRoleMaxOrderBy
  min: EventRoleMinOrderBy
  stddev: EventRoleStddevOrderBy
  stddevPop: EventRoleStddevPopOrderBy
  stddevSamp: EventRoleStddevSampOrderBy
  sum: EventRoleSumOrderBy
  varPop: EventRoleVarPopOrderBy
  varSamp: EventRoleVarSampOrderBy
  variance: EventRoleVarianceOrderBy
}

input EventRoleArrRelInsertInput {
  data: [EventRoleInsertInput!]!
  onConflict: EventRoleOnConflict
}

type EventRoleAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

input EventRoleAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input EventRoleBoolExp {
  _and: [EventRoleBoolExp!]
  _not: EventRoleBoolExp
  _or: [EventRoleBoolExp!]
  autoAccept: BooleanComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventChangeRoles: EventChangeRoleBoolExp
  eventChangeRolesAggregate: EventChangeRoleAggregateBoolExp
  eventId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  projectRole: ProjectRoleBoolExp
  projectRoleId: BigintComparisonExp
  required: BooleanComparisonExp
  rewardMaximum: SmallintComparisonExp
  rewardMinimum: SmallintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum EventRoleConstraint {
  event_role_pkey
}

input EventRoleIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

input EventRoleInsertInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventChangeRoles: EventChangeRoleArrRelInsertInput
  eventId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  projectRole: ProjectRoleObjRelInsertInput
  projectRoleId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type EventRoleMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

input EventRoleMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventRoleMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

input EventRoleMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventRoleMutationResponse {
  affectedRows: Int!
  returning: [EventRole!]!
}

input EventRoleObjRelInsertInput {
  data: EventRoleInsertInput!
  onConflict: EventRoleOnConflict
}

input EventRoleOnConflict {
  constraint: EventRoleConstraint!
  updateColumns: [EventRoleUpdateColumn!]! = []
  where: EventRoleBoolExp
}

input EventRoleOrderBy {
  autoAccept: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventChangeRolesAggregate: EventChangeRoleAggregateOrderBy
  eventId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  projectRole: ProjectRoleOrderBy
  projectRoleId: OrderBy
  required: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

input EventRolePkColumnsInput {
  id: bigint!
}

enum EventRoleSelectColumn {
  autoAccept
  color
  createdAt
  createdById
  deletedAt
  description
  eventId
  hiddenAt
  id
  name
  projectRoleId
  required
  rewardMaximum
  rewardMinimum
  tenantId
  userId
}

enum EventRoleSelectColumnEventRoleAggregateBoolExpBool_andArgumentsColumns {
  autoAccept
  required
}

enum EventRoleSelectColumnEventRoleAggregateBoolExpBool_orArgumentsColumns {
  autoAccept
  required
}

input EventRoleSetInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

type EventRoleStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

input EventRoleStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventRoleStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

input EventRoleStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventRoleStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

input EventRoleStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input EventRoleStreamCursorInput {
  initialValue: EventRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventRoleStreamCursorValueInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

type EventRoleSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

input EventRoleSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum EventRoleUpdateColumn {
  autoAccept
  color
  createdAt
  createdById
  deletedAt
  description
  eventId
  hiddenAt
  id
  name
  projectRoleId
  required
  rewardMaximum
  rewardMinimum
  tenantId
  userId
}

input EventRoleUpdates {
  _inc: EventRoleIncInput
  _set: EventRoleSetInput
  where: EventRoleBoolExp!
}

type EventRoleVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

input EventRoleVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventRoleVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

input EventRoleVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventRoleVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

input EventRoleVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum EventSelectColumn {
  addressId
  approvalSubmissionId
  autoAcceptJoins
  budget
  contentMasterId
  createdAt
  createdById
  deletedAt
  end
  hiddenAt
  id
  imageId
  isPrivate
  joinFormId
  lastEventApprovalStepId
  meta
  onlineMeetingLink
  onlineMeetingPlace
  presenceReward
  price
  projectId
  start
  state
  supervisorId
  tenantId
}

enum EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns {
  autoAcceptJoins
  isPrivate
}

enum EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns {
  autoAcceptJoins
  isPrivate
}

input EventSetInput {
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta: jsonb
  onlineMeetingLink: String
  onlineMeetingPlace: String
  presenceReward: Float
  price: Float
  projectId: bigint
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

type EventStddevFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  supervisorId: Float
  tenantId: Float
}

input EventStddevOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type EventStddevPopFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  supervisorId: Float
  tenantId: Float
}

input EventStddevPopOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type EventStddevSampFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  supervisorId: Float
  tenantId: Float
}

input EventStddevSampOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

input EventStreamCursorInput {
  initialValue: EventStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventStreamCursorValueInput {
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta: jsonb
  onlineMeetingLink: String
  onlineMeetingPlace: String
  presenceReward: Float
  price: Float
  projectId: bigint
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

type EventSumFields {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  presenceReward: Float
  price: Float
  projectId: bigint
  supervisorId: bigint
  tenantId: bigint
}

input EventSumOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type EventTags {
  event: Event!
  eventId: bigint!
  tag: Tag!
  tagId: bigint!
}

type EventTagsAggregate {
  aggregate: EventTagsAggregateFields
  nodes: [EventTags!]!
}

input EventTagsAggregateBoolExp {
  count: eventTagsAggregateBoolExpCount
}

input eventTagsAggregateBoolExpCount {
  arguments: [EventTagsSelectColumn!]
  distinct: Boolean
  filter: EventTagsBoolExp
  predicate: IntComparisonExp!
}

type EventTagsAggregateFields {
  avg: EventTagsAvgFields
  count(columns: [EventTagsSelectColumn!], distinct: Boolean): Int!
  max: EventTagsMaxFields
  min: EventTagsMinFields
  stddev: EventTagsStddevFields
  stddevPop: EventTagsStddevPopFields
  stddevSamp: EventTagsStddevSampFields
  sum: EventTagsSumFields
  varPop: EventTagsVarPopFields
  varSamp: EventTagsVarSampFields
  variance: EventTagsVarianceFields
}

input EventTagsAggregateOrderBy {
  avg: EventTagsAvgOrderBy
  count: OrderBy
  max: EventTagsMaxOrderBy
  min: EventTagsMinOrderBy
  stddev: EventTagsStddevOrderBy
  stddevPop: EventTagsStddevPopOrderBy
  stddevSamp: EventTagsStddevSampOrderBy
  sum: EventTagsSumOrderBy
  varPop: EventTagsVarPopOrderBy
  varSamp: EventTagsVarSampOrderBy
  variance: EventTagsVarianceOrderBy
}

input EventTagsArrRelInsertInput {
  data: [EventTagsInsertInput!]!
  onConflict: EventTagsOnConflict
}

type EventTagsAvgFields {
  eventId: Float
  tagId: Float
}

input EventTagsAvgOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

input EventTagsBoolExp {
  _and: [EventTagsBoolExp!]
  _not: EventTagsBoolExp
  _or: [EventTagsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum EventTagsConstraint {
  event_tags_pkey
}

input EventTagsIncInput {
  eventId: bigint
  tagId: bigint
}

input EventTagsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type EventTagsMaxFields {
  eventId: bigint
  tagId: bigint
}

input EventTagsMaxOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsMinFields {
  eventId: bigint
  tagId: bigint
}

input EventTagsMinOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsMutationResponse {
  affectedRows: Int!
  returning: [EventTags!]!
}

input EventTagsOnConflict {
  constraint: EventTagsConstraint!
  updateColumns: [EventTagsUpdateColumn!]! = []
  where: EventTagsBoolExp
}

input EventTagsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input EventTagsPkColumnsInput {
  eventId: bigint!
  tagId: bigint!
}

enum EventTagsSelectColumn {
  eventId
  tagId
}

input EventTagsSetInput {
  eventId: bigint
  tagId: bigint
}

type EventTagsStddevFields {
  eventId: Float
  tagId: Float
}

input EventTagsStddevOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsStddevPopFields {
  eventId: Float
  tagId: Float
}

input EventTagsStddevPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsStddevSampFields {
  eventId: Float
  tagId: Float
}

input EventTagsStddevSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

input EventTagsStreamCursorInput {
  initialValue: EventTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventTagsStreamCursorValueInput {
  eventId: bigint
  tagId: bigint
}

type EventTagsSumFields {
  eventId: bigint
  tagId: bigint
}

input EventTagsSumOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

enum EventTagsUpdateColumn {
  eventId
  tagId
}

input EventTagsUpdates {
  _inc: EventTagsIncInput
  _set: EventTagsSetInput
  where: EventTagsBoolExp!
}

type EventTagsVarianceFields {
  eventId: Float
  tagId: Float
}

input EventTagsVarianceOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsVarPopFields {
  eventId: Float
  tagId: Float
}

input EventTagsVarPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsVarSampFields {
  eventId: Float
  tagId: Float
}

input EventTagsVarSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

enum EventUpdateColumn {
  addressId
  approvalSubmissionId
  autoAcceptJoins
  budget
  contentMasterId
  createdAt
  createdById
  deletedAt
  end
  hiddenAt
  id
  imageId
  isPrivate
  joinFormId
  lastEventApprovalStepId
  meta
  onlineMeetingLink
  onlineMeetingPlace
  presenceReward
  price
  projectId
  start
  state
  supervisorId
  tenantId
}

input EventUpdates {
  _append: EventAppendInput
  _deleteAtPath: EventDeleteAtPathInput
  _deleteElem: EventDeleteElemInput
  _deleteKey: EventDeleteKeyInput
  _inc: EventIncInput
  _prepend: EventPrependInput
  _set: EventSetInput
  where: EventBoolExp!
}

type EventVarianceFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  supervisorId: Float
  tenantId: Float
}

input EventVarianceOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type EventVarPopFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  supervisorId: Float
  tenantId: Float
}

input EventVarPopOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type EventVarSampFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  supervisorId: Float
  tenantId: Float
}

input EventVarSampOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

type Expense {
  actorBankInfo: ActorBankInfo!
  actorFinances(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinancesAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  bankInfoId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  expenseReportId: bigint!
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  issue: Issue
  issueId: bigint
  state: String!
  teamFinance: TeamFinance
  tenant: Tenant!
  tenantId: bigint!
}

type ExpenseAggregate {
  aggregate: ExpenseAggregateFields
  nodes: [Expense!]!
}

input ExpenseAggregateBoolExp {
  count: expenseAggregateBoolExpCount
}

input expenseAggregateBoolExpCount {
  arguments: [ExpenseSelectColumn!]
  distinct: Boolean
  filter: ExpenseBoolExp
  predicate: IntComparisonExp!
}

type ExpenseAggregateFields {
  avg: ExpenseAvgFields
  count(columns: [ExpenseSelectColumn!], distinct: Boolean): Int!
  max: ExpenseMaxFields
  min: ExpenseMinFields
  stddev: ExpenseStddevFields
  stddevPop: ExpenseStddevPopFields
  stddevSamp: ExpenseStddevSampFields
  sum: ExpenseSumFields
  varPop: ExpenseVarPopFields
  varSamp: ExpenseVarSampFields
  variance: ExpenseVarianceFields
}

input ExpenseAggregateOrderBy {
  avg: ExpenseAvgOrderBy
  count: OrderBy
  max: ExpenseMaxOrderBy
  min: ExpenseMinOrderBy
  stddev: ExpenseStddevOrderBy
  stddevPop: ExpenseStddevPopOrderBy
  stddevSamp: ExpenseStddevSampOrderBy
  sum: ExpenseSumOrderBy
  varPop: ExpenseVarPopOrderBy
  varSamp: ExpenseVarSampOrderBy
  variance: ExpenseVarianceOrderBy
}

input ExpenseArrRelInsertInput {
  data: [ExpenseInsertInput!]!
  onConflict: ExpenseOnConflict
}

type ExpenseAvgFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

input ExpenseAvgOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

input ExpenseBoolExp {
  _and: [ExpenseBoolExp!]
  _not: ExpenseBoolExp
  _or: [ExpenseBoolExp!]
  actorBankInfo: ActorBankInfoBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  bankInfoId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expenseReportId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  issue: IssueBoolExp
  issueId: BigintComparisonExp
  state: StringComparisonExp
  teamFinance: TeamFinanceBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ExpenseConstraint {
  expense_pkey
}

input ExpenseIncInput {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  issueId: bigint
  tenantId: bigint
}

input ExpenseInsertInput {
  actorBankInfo: ActorBankInfoObjRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  issue: IssueObjRelInsertInput
  issueId: bigint
  state: String
  teamFinance: TeamFinanceObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ExpenseMaxFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

input ExpenseMaxOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  issueId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type ExpenseMinFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

input ExpenseMinOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  issueId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type ExpenseMutationResponse {
  affectedRows: Int!
  returning: [Expense!]!
}

input ExpenseObjRelInsertInput {
  data: ExpenseInsertInput!
  onConflict: ExpenseOnConflict
}

input ExpenseOnConflict {
  constraint: ExpenseConstraint!
  updateColumns: [ExpenseUpdateColumn!]! = []
  where: ExpenseBoolExp
}

input ExpenseOrderBy {
  actorBankInfo: ActorBankInfoOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  issue: IssueOrderBy
  issueId: OrderBy
  state: OrderBy
  teamFinance: TeamFinanceOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ExpensePkColumnsInput {
  id: bigint!
}

enum ExpenseSelectColumn {
  bankInfoId
  createdAt
  createdById
  deletedAt
  description
  expenseReportId
  hiddenAt
  id
  issueId
  state
  tenantId
}

input ExpenseSetInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

type ExpenseStddevFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

input ExpenseStddevOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

type ExpenseStddevPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

input ExpenseStddevPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

type ExpenseStddevSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

input ExpenseStddevSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

input ExpenseStreamCursorInput {
  initialValue: ExpenseStreamCursorValueInput!
  ordering: CursorOrdering
}

input ExpenseStreamCursorValueInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

type ExpenseSumFields {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  issueId: bigint
  tenantId: bigint
}

input ExpenseSumOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

enum ExpenseUpdateColumn {
  bankInfoId
  createdAt
  createdById
  deletedAt
  description
  expenseReportId
  hiddenAt
  id
  issueId
  state
  tenantId
}

input ExpenseUpdates {
  _inc: ExpenseIncInput
  _set: ExpenseSetInput
  where: ExpenseBoolExp!
}

type ExpenseVarianceFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

input ExpenseVarianceOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

type ExpenseVarPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

input ExpenseVarPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

type ExpenseVarSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

input ExpenseVarSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

type Favorite {
  actor: Actor
  actorId: bigint
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  lastActiveDate: timestamptz
  tenant: Tenant!
  tenantId: bigint!
}

type FavoriteAggregate {
  aggregate: FavoriteAggregateFields
  nodes: [Favorite!]!
}

input FavoriteAggregateBoolExp {
  count: favoriteAggregateBoolExpCount
}

input favoriteAggregateBoolExpCount {
  arguments: [FavoriteSelectColumn!]
  distinct: Boolean
  filter: FavoriteBoolExp
  predicate: IntComparisonExp!
}

type FavoriteAggregateFields {
  avg: FavoriteAvgFields
  count(columns: [FavoriteSelectColumn!], distinct: Boolean): Int!
  max: FavoriteMaxFields
  min: FavoriteMinFields
  stddev: FavoriteStddevFields
  stddevPop: FavoriteStddevPopFields
  stddevSamp: FavoriteStddevSampFields
  sum: FavoriteSumFields
  varPop: FavoriteVarPopFields
  varSamp: FavoriteVarSampFields
  variance: FavoriteVarianceFields
}

input FavoriteAggregateOrderBy {
  avg: FavoriteAvgOrderBy
  count: OrderBy
  max: FavoriteMaxOrderBy
  min: FavoriteMinOrderBy
  stddev: FavoriteStddevOrderBy
  stddevPop: FavoriteStddevPopOrderBy
  stddevSamp: FavoriteStddevSampOrderBy
  sum: FavoriteSumOrderBy
  varPop: FavoriteVarPopOrderBy
  varSamp: FavoriteVarSampOrderBy
  variance: FavoriteVarianceOrderBy
}

input FavoriteArrRelInsertInput {
  data: [FavoriteInsertInput!]!
  onConflict: FavoriteOnConflict
}

type FavoriteAvgFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteAvgOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FavoriteBoolExp {
  _and: [FavoriteBoolExp!]
  _not: FavoriteBoolExp
  _or: [FavoriteBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FavoriteConstraint {
  favorite_pkey
}

input FavoriteIncInput {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input FavoriteInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FavoriteMaxFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

input FavoriteMaxOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
}

type FavoriteMinFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

input FavoriteMinOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
}

type FavoriteMutationResponse {
  affectedRows: Int!
  returning: [Favorite!]!
}

input FavoriteOnConflict {
  constraint: FavoriteConstraint!
  updateColumns: [FavoriteUpdateColumn!]! = []
  where: FavoriteBoolExp
}

input FavoriteOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FavoritePkColumnsInput {
  id: bigint!
}

enum FavoriteSelectColumn {
  actorId
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  tenantId
}

input FavoriteSetInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

type FavoriteStddevFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteStddevOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteStddevPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteStddevPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteStddevSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteStddevSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FavoriteStreamCursorInput {
  initialValue: FavoriteStreamCursorValueInput!
  ordering: CursorOrdering
}

input FavoriteStreamCursorValueInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

type FavoriteSumFields {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input FavoriteSumOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FavoriteUpdateColumn {
  actorId
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  tenantId
}

input FavoriteUpdates {
  _inc: FavoriteIncInput
  _set: FavoriteSetInput
  where: FavoriteBoolExp!
}

type FavoriteVarianceFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteVarianceOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteVarPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteVarPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteVarSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteVarSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FileUpload {
  actorAddress: ActorAddress
  actorFinances(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinancesAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  actorImage: ActorImage
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  document: Document
  documentEdits(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): [DocumentEdit!]!
  documentEditsAggregate(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): DocumentEditAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  fileLastModifiedAt: timestamptz!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  mime: String!
  name: String!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  size: Int!
  tags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenant: Tenant!
  tenantId: bigint!
  url: String!
}

type FileUploadAggregate {
  aggregate: FileUploadAggregateFields
  nodes: [FileUpload!]!
}

input FileUploadAggregateBoolExp {
  count: fileUploadAggregateBoolExpCount
}

input fileUploadAggregateBoolExpCount {
  arguments: [FileUploadSelectColumn!]
  distinct: Boolean
  filter: FileUploadBoolExp
  predicate: IntComparisonExp!
}

type FileUploadAggregateFields {
  avg: FileUploadAvgFields
  count(columns: [FileUploadSelectColumn!], distinct: Boolean): Int!
  max: FileUploadMaxFields
  min: FileUploadMinFields
  stddev: FileUploadStddevFields
  stddevPop: FileUploadStddevPopFields
  stddevSamp: FileUploadStddevSampFields
  sum: FileUploadSumFields
  varPop: FileUploadVarPopFields
  varSamp: FileUploadVarSampFields
  variance: FileUploadVarianceFields
}

input FileUploadAggregateOrderBy {
  avg: FileUploadAvgOrderBy
  count: OrderBy
  max: FileUploadMaxOrderBy
  min: FileUploadMinOrderBy
  stddev: FileUploadStddevOrderBy
  stddevPop: FileUploadStddevPopOrderBy
  stddevSamp: FileUploadStddevSampOrderBy
  sum: FileUploadSumOrderBy
  varPop: FileUploadVarPopOrderBy
  varSamp: FileUploadVarSampOrderBy
  variance: FileUploadVarianceOrderBy
}

input FileUploadArrRelInsertInput {
  data: [FileUploadInsertInput!]!
  onConflict: FileUploadOnConflict
}

type FileUploadAvgFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

input FileUploadBoolExp {
  _and: [FileUploadBoolExp!]
  _not: FileUploadBoolExp
  _or: [FileUploadBoolExp!]
  actorAddress: ActorAddressBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImage: ActorImageBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  document: DocumentBoolExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fileLastModifiedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  mime: StringComparisonExp
  name: StringComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  size: IntComparisonExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  url: StringComparisonExp
}

enum FileUploadConstraint {
  file_upload_pkey
}

input FileUploadIncInput {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

input FileUploadInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImage: ActorImageObjRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  document: DocumentObjRelInsertInput
  documentEdits: DocumentEditArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  events: EventArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  mime: String
  name: String
  projects: ProjectArrRelInsertInput
  size: Int
  tags: TagArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  url: String
}

type FileUploadMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

input FileUploadMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  mime: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  url: OrderBy
}

type FileUploadMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

input FileUploadMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  mime: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  url: OrderBy
}

type FileUploadMutationResponse {
  affectedRows: Int!
  returning: [FileUpload!]!
}

input FileUploadObjRelInsertInput {
  data: FileUploadInsertInput!
  onConflict: FileUploadOnConflict
}

input FileUploadOnConflict {
  constraint: FileUploadConstraint!
  updateColumns: [FileUploadUpdateColumn!]! = []
  where: FileUploadBoolExp
}

input FileUploadOrderBy {
  actorAddress: ActorAddressOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImage: ActorImageOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  document: DocumentOrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  mime: OrderBy
  name: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  size: OrderBy
  tagsAggregate: TagAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  url: OrderBy
}

input FileUploadPkColumnsInput {
  id: bigint!
}

enum FileUploadSelectColumn {
  createdAt
  createdById
  deletedAt
  fileLastModifiedAt
  hiddenAt
  id
  mime
  name
  size
  tenantId
  url
}

input FileUploadSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

type FileUploadStddevFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadStddevPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadStddevSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

input FileUploadStreamCursorInput {
  initialValue: FileUploadStreamCursorValueInput!
  ordering: CursorOrdering
}

input FileUploadStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

type FileUploadSumFields {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

input FileUploadSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

enum FileUploadUpdateColumn {
  createdAt
  createdById
  deletedAt
  fileLastModifiedAt
  hiddenAt
  id
  mime
  name
  size
  tenantId
  url
}

input FileUploadUpdates {
  _inc: FileUploadIncInput
  _set: FileUploadSetInput
  where: FileUploadBoolExp!
}

type FileUploadVarianceFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadVarPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadVarSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

input FloatComparisonExp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _isNull: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

type Follow {
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  tenant: Tenant!
  tenantId: bigint!
}

type FollowAggregate {
  aggregate: FollowAggregateFields
  nodes: [Follow!]!
}

input FollowAggregateBoolExp {
  count: followAggregateBoolExpCount
}

input followAggregateBoolExpCount {
  arguments: [FollowSelectColumn!]
  distinct: Boolean
  filter: FollowBoolExp
  predicate: IntComparisonExp!
}

type FollowAggregateFields {
  avg: FollowAvgFields
  count(columns: [FollowSelectColumn!], distinct: Boolean): Int!
  max: FollowMaxFields
  min: FollowMinFields
  stddev: FollowStddevFields
  stddevPop: FollowStddevPopFields
  stddevSamp: FollowStddevSampFields
  sum: FollowSumFields
  varPop: FollowVarPopFields
  varSamp: FollowVarSampFields
  variance: FollowVarianceFields
}

input FollowAggregateOrderBy {
  avg: FollowAvgOrderBy
  count: OrderBy
  max: FollowMaxOrderBy
  min: FollowMinOrderBy
  stddev: FollowStddevOrderBy
  stddevPop: FollowStddevPopOrderBy
  stddevSamp: FollowStddevSampOrderBy
  sum: FollowSumOrderBy
  varPop: FollowVarPopOrderBy
  varSamp: FollowVarSampOrderBy
  variance: FollowVarianceOrderBy
}

input FollowArrRelInsertInput {
  data: [FollowInsertInput!]!
  onConflict: FollowOnConflict
}

type FollowAvgFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowAvgOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FollowBoolExp {
  _and: [FollowBoolExp!]
  _not: FollowBoolExp
  _or: [FollowBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  followedActorId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FollowConstraint {
  follow_pkey
}

input FollowIncInput {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

input FollowInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FollowMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FollowMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FollowMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowMutationResponse {
  affectedRows: Int!
  returning: [Follow!]!
}

input FollowOnConflict {
  constraint: FollowConstraint!
  updateColumns: [FollowUpdateColumn!]! = []
  where: FollowBoolExp
}

input FollowOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FollowPkColumnsInput {
  id: bigint!
}

enum FollowSelectColumn {
  createdAt
  createdById
  deletedAt
  followedActorId
  hiddenAt
  id
  tenantId
}

input FollowSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type FollowStddevFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowStddevOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowStddevPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowStddevPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowStddevSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowStddevSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FollowStreamCursorInput {
  initialValue: FollowStreamCursorValueInput!
  ordering: CursorOrdering
}

input FollowStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type FollowSumFields {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

input FollowSumOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FollowUpdateColumn {
  createdAt
  createdById
  deletedAt
  followedActorId
  hiddenAt
  id
  tenantId
}

input FollowUpdates {
  _inc: FollowIncInput
  _set: FollowSetInput
  where: FollowBoolExp!
}

type FollowVarianceFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowVarianceOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowVarPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowVarPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowVarSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowVarSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Form {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  formEdits(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): [FormEdit!]!
  formEditsAggregate(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): FormEditAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  isAllowingEditingAnswers: Boolean!
  isAllowingMultipleAnswers: Boolean!
  isEnabled: Boolean!
  isRequired: Boolean!
  isTemplate: Boolean!
  name: String!
  schema(path: String): jsonb!
  team: Team
  teamId: bigint
  tenant: Tenant!
  tenantById: Tenant
  tenantId: bigint!
  type: String!
}

type FormAggregate {
  aggregate: FormAggregateFields
  nodes: [Form!]!
}

input FormAggregateBoolExp {
  bool_and: formAggregateBoolExpBool_and
  bool_or: formAggregateBoolExpBool_or
  count: formAggregateBoolExpCount
}

input formAggregateBoolExpBool_and {
  arguments: FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpBool_or {
  arguments: FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpCount {
  arguments: [FormSelectColumn!]
  distinct: Boolean
  filter: FormBoolExp
  predicate: IntComparisonExp!
}

type FormAggregateFields {
  avg: FormAvgFields
  count(columns: [FormSelectColumn!], distinct: Boolean): Int!
  max: FormMaxFields
  min: FormMinFields
  stddev: FormStddevFields
  stddevPop: FormStddevPopFields
  stddevSamp: FormStddevSampFields
  sum: FormSumFields
  varPop: FormVarPopFields
  varSamp: FormVarSampFields
  variance: FormVarianceFields
}

input FormAggregateOrderBy {
  avg: FormAvgOrderBy
  count: OrderBy
  max: FormMaxOrderBy
  min: FormMinOrderBy
  stddev: FormStddevOrderBy
  stddevPop: FormStddevPopOrderBy
  stddevSamp: FormStddevSampOrderBy
  sum: FormSumOrderBy
  varPop: FormVarPopOrderBy
  varSamp: FormVarSampOrderBy
  variance: FormVarianceOrderBy
}

input FormAppendInput {
  schema: jsonb
}

input FormArrRelInsertInput {
  data: [FormInsertInput!]!
  onConflict: FormOnConflict
}

type FormAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input FormAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input FormBoolExp {
  _and: [FormBoolExp!]
  _not: FormBoolExp
  _or: [FormBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  formEdits: FormEditBoolExp
  formEditsAggregate: FormEditAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isAllowingEditingAnswers: BooleanComparisonExp
  isAllowingMultipleAnswers: BooleanComparisonExp
  isEnabled: BooleanComparisonExp
  isRequired: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  name: StringComparisonExp
  schema: JsonbComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantById: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum FormConstraint {
  form_pkey
  form_team_id_unique
}

input FormDeleteAtPathInput {
  schema: [String!]
}

input FormDeleteElemInput {
  schema: Int
}

input FormDeleteKeyInput {
  schema: String
}

type FormEdit {
  addedDiff(path: String): jsonb
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  form: Form!
  formId: bigint!
  formSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  newVersion(path: String): jsonb!
  tenant: Tenant!
  tenantId: bigint!
}

type FormEditAggregate {
  aggregate: FormEditAggregateFields
  nodes: [FormEdit!]!
}

input FormEditAggregateBoolExp {
  count: formEditAggregateBoolExpCount
}

input formEditAggregateBoolExpCount {
  arguments: [FormEditSelectColumn!]
  distinct: Boolean
  filter: FormEditBoolExp
  predicate: IntComparisonExp!
}

type FormEditAggregateFields {
  avg: FormEditAvgFields
  count(columns: [FormEditSelectColumn!], distinct: Boolean): Int!
  max: FormEditMaxFields
  min: FormEditMinFields
  stddev: FormEditStddevFields
  stddevPop: FormEditStddevPopFields
  stddevSamp: FormEditStddevSampFields
  sum: FormEditSumFields
  varPop: FormEditVarPopFields
  varSamp: FormEditVarSampFields
  variance: FormEditVarianceFields
}

input FormEditAggregateOrderBy {
  avg: FormEditAvgOrderBy
  count: OrderBy
  max: FormEditMaxOrderBy
  min: FormEditMinOrderBy
  stddev: FormEditStddevOrderBy
  stddevPop: FormEditStddevPopOrderBy
  stddevSamp: FormEditStddevSampOrderBy
  sum: FormEditSumOrderBy
  varPop: FormEditVarPopOrderBy
  varSamp: FormEditVarSampOrderBy
  variance: FormEditVarianceOrderBy
}

input FormEditAppendInput {
  addedDiff: jsonb
  newVersion: jsonb
}

input FormEditArrRelInsertInput {
  data: [FormEditInsertInput!]!
  onConflict: FormEditOnConflict
}

type FormEditAvgFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormEditAvgOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormEditBoolExp {
  _and: [FormEditBoolExp!]
  _not: FormEditBoolExp
  _or: [FormEditBoolExp!]
  addedDiff: JsonbComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  form: FormBoolExp
  formId: BigintComparisonExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  newVersion: JsonbComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FormEditConstraint {
  form_edit_pkey
}

input FormEditDeleteAtPathInput {
  addedDiff: [String!]
  newVersion: [String!]
}

input FormEditDeleteElemInput {
  addedDiff: Int
  newVersion: Int
}

input FormEditDeleteKeyInput {
  addedDiff: String
  newVersion: String
}

input FormEditIncInput {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

input FormEditInsertInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  form: FormObjRelInsertInput
  formId: bigint
  formSubmissions: FormSubmissionArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  newVersion: jsonb
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FormEditMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormEditMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormEditMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormEditMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormEditMutationResponse {
  affectedRows: Int!
  returning: [FormEdit!]!
}

input FormEditObjRelInsertInput {
  data: FormEditInsertInput!
  onConflict: FormEditOnConflict
}

input FormEditOnConflict {
  constraint: FormEditConstraint!
  updateColumns: [FormEditUpdateColumn!]! = []
  where: FormEditBoolExp
}

input FormEditOrderBy {
  addedDiff: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  form: FormOrderBy
  formId: OrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  newVersion: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FormEditPkColumnsInput {
  id: bigint!
}

input FormEditPrependInput {
  addedDiff: jsonb
  newVersion: jsonb
}

enum FormEditSelectColumn {
  addedDiff
  createdAt
  createdById
  deletedAt
  formId
  hiddenAt
  id
  newVersion
  tenantId
}

input FormEditSetInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

type FormEditStddevFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormEditStddevOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormEditStddevPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormEditStddevPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormEditStddevSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormEditStddevSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormEditStreamCursorInput {
  initialValue: FormEditStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormEditStreamCursorValueInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

type FormEditSumFields {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

input FormEditSumOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FormEditUpdateColumn {
  addedDiff
  createdAt
  createdById
  deletedAt
  formId
  hiddenAt
  id
  newVersion
  tenantId
}

input FormEditUpdates {
  _append: FormEditAppendInput
  _deleteAtPath: FormEditDeleteAtPathInput
  _deleteElem: FormEditDeleteElemInput
  _deleteKey: FormEditDeleteKeyInput
  _inc: FormEditIncInput
  _prepend: FormEditPrependInput
  _set: FormEditSetInput
  where: FormEditBoolExp!
}

type FormEditVarianceFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormEditVarianceOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormEditVarPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormEditVarPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormEditVarSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormEditVarSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input FormInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  formEdits: FormEditArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  isTemplate: Boolean
  name: String
  schema: jsonb
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type FormMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
  type: String
}

input FormMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type FormMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
  type: String
}

input FormMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type FormMutationResponse {
  affectedRows: Int!
  returning: [Form!]!
}

input FormObjRelInsertInput {
  data: FormInsertInput!
  onConflict: FormOnConflict
}

input FormOnConflict {
  constraint: FormConstraint!
  updateColumns: [FormUpdateColumn!]! = []
  where: FormBoolExp
}

input FormOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  formEditsAggregate: FormEditAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isAllowingEditingAnswers: OrderBy
  isAllowingMultipleAnswers: OrderBy
  isEnabled: OrderBy
  isRequired: OrderBy
  isTemplate: OrderBy
  name: OrderBy
  schema: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantById: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input FormPkColumnsInput {
  id: bigint!
}

input FormPrependInput {
  schema: jsonb
}

enum FormSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isRequired
  isTemplate
  name
  schema
  teamId
  tenantId
  type
}

enum FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns {
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isRequired
  isTemplate
}

enum FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns {
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isRequired
  isTemplate
}

input FormSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  isTemplate: Boolean
  name: String
  schema: jsonb
  teamId: bigint
  tenantId: bigint
  type: String
}

type FormStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input FormStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FormStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input FormStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FormStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input FormStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input FormStreamCursorInput {
  initialValue: FormStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  isTemplate: Boolean
  name: String
  schema: jsonb
  teamId: bigint
  tenantId: bigint
  type: String
}

type FormSubmission {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  event: Event
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  formEdit: FormEdit!
  formEditId: bigint!
  formSubmissionEdits(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): [FormSubmissionEdit!]!
  formSubmissionEditsAggregate(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): FormSubmissionEditAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  submission(path: String): jsonb!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  tenant: Tenant!
  tenantId: bigint!
}

type FormSubmissionAggregate {
  aggregate: FormSubmissionAggregateFields
  nodes: [FormSubmission!]!
}

input FormSubmissionAggregateBoolExp {
  count: formSubmissionAggregateBoolExpCount
}

input formSubmissionAggregateBoolExpCount {
  arguments: [FormSubmissionSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionBoolExp
  predicate: IntComparisonExp!
}

type FormSubmissionAggregateFields {
  avg: FormSubmissionAvgFields
  count(columns: [FormSubmissionSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionMaxFields
  min: FormSubmissionMinFields
  stddev: FormSubmissionStddevFields
  stddevPop: FormSubmissionStddevPopFields
  stddevSamp: FormSubmissionStddevSampFields
  sum: FormSubmissionSumFields
  varPop: FormSubmissionVarPopFields
  varSamp: FormSubmissionVarSampFields
  variance: FormSubmissionVarianceFields
}

input FormSubmissionAggregateOrderBy {
  avg: FormSubmissionAvgOrderBy
  count: OrderBy
  max: FormSubmissionMaxOrderBy
  min: FormSubmissionMinOrderBy
  stddev: FormSubmissionStddevOrderBy
  stddevPop: FormSubmissionStddevPopOrderBy
  stddevSamp: FormSubmissionStddevSampOrderBy
  sum: FormSubmissionSumOrderBy
  varPop: FormSubmissionVarPopOrderBy
  varSamp: FormSubmissionVarSampOrderBy
  variance: FormSubmissionVarianceOrderBy
}

input FormSubmissionAppendInput {
  submission: jsonb
}

input FormSubmissionArrRelInsertInput {
  data: [FormSubmissionInsertInput!]!
  onConflict: FormSubmissionOnConflict
}

type FormSubmissionAvgFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionAvgOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormSubmissionBoolExp {
  _and: [FormSubmissionBoolExp!]
  _not: FormSubmissionBoolExp
  _or: [FormSubmissionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  formEdit: FormEditBoolExp
  formEditId: BigintComparisonExp
  formSubmissionEdits: FormSubmissionEditBoolExp
  formSubmissionEditsAggregate: FormSubmissionEditAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  submission: JsonbComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FormSubmissionConstraint {
  form_submission_pkey
}

input FormSubmissionDeleteAtPathInput {
  submission: [String!]
}

input FormSubmissionDeleteElemInput {
  submission: Int
}

input FormSubmissionDeleteKeyInput {
  submission: String
}

type FormSubmissionEdit {
  addedDiff(path: String): jsonb
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmission!
  formSubmissionId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  newVersion(path: String): jsonb!
  tenant: Tenant!
  tenantId: bigint!
}

type FormSubmissionEditAggregate {
  aggregate: FormSubmissionEditAggregateFields
  nodes: [FormSubmissionEdit!]!
}

input FormSubmissionEditAggregateBoolExp {
  count: formSubmissionEditAggregateBoolExpCount
}

input formSubmissionEditAggregateBoolExpCount {
  arguments: [FormSubmissionEditSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionEditBoolExp
  predicate: IntComparisonExp!
}

type FormSubmissionEditAggregateFields {
  avg: FormSubmissionEditAvgFields
  count(columns: [FormSubmissionEditSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionEditMaxFields
  min: FormSubmissionEditMinFields
  stddev: FormSubmissionEditStddevFields
  stddevPop: FormSubmissionEditStddevPopFields
  stddevSamp: FormSubmissionEditStddevSampFields
  sum: FormSubmissionEditSumFields
  varPop: FormSubmissionEditVarPopFields
  varSamp: FormSubmissionEditVarSampFields
  variance: FormSubmissionEditVarianceFields
}

input FormSubmissionEditAggregateOrderBy {
  avg: FormSubmissionEditAvgOrderBy
  count: OrderBy
  max: FormSubmissionEditMaxOrderBy
  min: FormSubmissionEditMinOrderBy
  stddev: FormSubmissionEditStddevOrderBy
  stddevPop: FormSubmissionEditStddevPopOrderBy
  stddevSamp: FormSubmissionEditStddevSampOrderBy
  sum: FormSubmissionEditSumOrderBy
  varPop: FormSubmissionEditVarPopOrderBy
  varSamp: FormSubmissionEditVarSampOrderBy
  variance: FormSubmissionEditVarianceOrderBy
}

input FormSubmissionEditAppendInput {
  addedDiff: jsonb
  newVersion: jsonb
}

input FormSubmissionEditArrRelInsertInput {
  data: [FormSubmissionEditInsertInput!]!
  onConflict: FormSubmissionEditOnConflict
}

type FormSubmissionEditAvgFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionEditAvgOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormSubmissionEditBoolExp {
  _and: [FormSubmissionEditBoolExp!]
  _not: FormSubmissionEditBoolExp
  _or: [FormSubmissionEditBoolExp!]
  addedDiff: JsonbComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  newVersion: JsonbComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FormSubmissionEditConstraint {
  form_submission_edit_pkey
}

input FormSubmissionEditDeleteAtPathInput {
  addedDiff: [String!]
  newVersion: [String!]
}

input FormSubmissionEditDeleteElemInput {
  addedDiff: Int
  newVersion: Int
}

input FormSubmissionEditDeleteKeyInput {
  addedDiff: String
  newVersion: String
}

input FormSubmissionEditIncInput {
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  tenantId: bigint
}

input FormSubmissionEditInsertInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  newVersion: jsonb
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FormSubmissionEditMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormSubmissionEditMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionEditMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormSubmissionEditMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionEditMutationResponse {
  affectedRows: Int!
  returning: [FormSubmissionEdit!]!
}

input FormSubmissionEditOnConflict {
  constraint: FormSubmissionEditConstraint!
  updateColumns: [FormSubmissionEditUpdateColumn!]! = []
  where: FormSubmissionEditBoolExp
}

input FormSubmissionEditOrderBy {
  addedDiff: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  newVersion: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FormSubmissionEditPkColumnsInput {
  id: bigint!
}

input FormSubmissionEditPrependInput {
  addedDiff: jsonb
  newVersion: jsonb
}

enum FormSubmissionEditSelectColumn {
  addedDiff
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  newVersion
  tenantId
}

input FormSubmissionEditSetInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

type FormSubmissionEditStddevFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionEditStddevOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionEditStddevPopFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionEditStddevPopOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionEditStddevSampFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionEditStddevSampOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormSubmissionEditStreamCursorInput {
  initialValue: FormSubmissionEditStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormSubmissionEditStreamCursorValueInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

type FormSubmissionEditSumFields {
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  tenantId: bigint
}

input FormSubmissionEditSumOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FormSubmissionEditUpdateColumn {
  addedDiff
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  newVersion
  tenantId
}

input FormSubmissionEditUpdates {
  _append: FormSubmissionEditAppendInput
  _deleteAtPath: FormSubmissionEditDeleteAtPathInput
  _deleteElem: FormSubmissionEditDeleteElemInput
  _deleteKey: FormSubmissionEditDeleteKeyInput
  _inc: FormSubmissionEditIncInput
  _prepend: FormSubmissionEditPrependInput
  _set: FormSubmissionEditSetInput
  where: FormSubmissionEditBoolExp!
}

type FormSubmissionEditVarianceFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionEditVarianceOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionEditVarPopFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionEditVarPopOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionEditVarSampFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionEditVarSampOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormSubmissionIncInput {
  createdById: bigint
  formEditId: bigint
  id: bigint
  tenantId: bigint
}

input FormSubmissionInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  formEdit: FormEditObjRelInsertInput
  formEditId: bigint
  formSubmissionEdits: FormSubmissionEditArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  submission: jsonb
  teamJoins: TeamJoinArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FormSubmissionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormSubmissionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formEditId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormSubmissionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formEditId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionMutationResponse {
  affectedRows: Int!
  returning: [FormSubmission!]!
}

input FormSubmissionObjRelInsertInput {
  data: FormSubmissionInsertInput!
  onConflict: FormSubmissionOnConflict
}

input FormSubmissionOnConflict {
  constraint: FormSubmissionConstraint!
  updateColumns: [FormSubmissionUpdateColumn!]! = []
  where: FormSubmissionBoolExp
}

input FormSubmissionOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  formEdit: FormEditOrderBy
  formEditId: OrderBy
  formSubmissionEditsAggregate: FormSubmissionEditAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  submission: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FormSubmissionPkColumnsInput {
  id: bigint!
}

input FormSubmissionPrependInput {
  submission: jsonb
}

enum FormSubmissionSelectColumn {
  createdAt
  createdById
  deletedAt
  formEditId
  hiddenAt
  id
  submission
  tenantId
}

input FormSubmissionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

type FormSubmissionStddevFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionStddevOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionStddevPopFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionStddevPopOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionStddevSampFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionStddevSampOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormSubmissionStreamCursorInput {
  initialValue: FormSubmissionStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormSubmissionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

type FormSubmissionSumFields {
  createdById: bigint
  formEditId: bigint
  id: bigint
  tenantId: bigint
}

input FormSubmissionSumOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FormSubmissionUpdateColumn {
  createdAt
  createdById
  deletedAt
  formEditId
  hiddenAt
  id
  submission
  tenantId
}

input FormSubmissionUpdates {
  _append: FormSubmissionAppendInput
  _deleteAtPath: FormSubmissionDeleteAtPathInput
  _deleteElem: FormSubmissionDeleteElemInput
  _deleteKey: FormSubmissionDeleteKeyInput
  _inc: FormSubmissionIncInput
  _prepend: FormSubmissionPrependInput
  _set: FormSubmissionSetInput
  where: FormSubmissionBoolExp!
}

type FormSubmissionVarianceFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionVarianceOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionVarPopFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionVarPopOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionVarSampFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionVarSampOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input FormSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum FormUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isRequired
  isTemplate
  name
  schema
  teamId
  tenantId
  type
}

input FormUpdates {
  _append: FormAppendInput
  _deleteAtPath: FormDeleteAtPathInput
  _deleteElem: FormDeleteElemInput
  _deleteKey: FormDeleteKeyInput
  _inc: FormIncInput
  _prepend: FormPrependInput
  _set: FormSetInput
  where: FormBoolExp!
}

type FormVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input FormVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FormVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input FormVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FormVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input FormVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Individual {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actionsByValidatedById(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsByValidatedByIdAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actor: Actor
  actorAddresses(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): [ActorAddress!]!
  actorAddressesAggregate(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): ActorAddressAggregate!
  actorBankInfos(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): [ActorBankInfo!]!
  actorBankInfosAggregate(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): ActorBankInfoAggregate!
  actorFinances(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinancesAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  actorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actors(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorsAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  botId: bigint
  botInfo: BotInfo
  botInfos(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): [BotInfo!]!
  botInfosAggregate(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): BotInfoAggregate!
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  canteenFoods(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodsAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenMenus(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenusAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  canteens(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  canteensAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  changeRoles(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRolesAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  classGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  classGroups(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupsAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  cohorts(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  cohortsAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  contentMasterContributors(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): [ContentMasterContributors!]!
  contentMasterContributorsAggregate(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): ContentMasterContributorsAggregate!
  contentMasters(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): [ContentMaster!]!
  contentMastersAggregate(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): ContentMasterAggregate!
  contents(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentsAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  documentEdits(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): [DocumentEdit!]!
  documentEditsAggregate(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): DocumentEditAggregate!
  documents(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  eventApprovalStepNotifiees(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepNotifieesAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  eventApprovalStepValidators(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStepValidatorsAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  eventApprovalSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventAttendances(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): [EventAttendance!]!
  eventAttendancesAggregate(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): EventAttendanceAggregate!
  eventChangeRoles(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): [EventChangeRole!]!
  eventChangeRolesAggregate(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): EventChangeRoleAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventRoles(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): [EventRole!]!
  eventRolesAggregate(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): EventRoleAggregate!
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  favorites(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoritesAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  fileUploads(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadsAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  follows(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followsAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  formEdits(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): [FormEdit!]!
  formEditsAggregate(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): FormEditAggregate!
  formSubmissionEdits(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): [FormSubmissionEdit!]!
  formSubmissionEditsAggregate(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): FormSubmissionEditAggregate!
  formSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  forms(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formsAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  individuals(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  individualsAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  issues(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  issuesAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  passwordHash: String
  poles(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  polesAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  projectRoles(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): [ProjectRole!]!
  projectRolesAggregate(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): ProjectRoleAggregate!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  reactions(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionsAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  roles(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  rolesAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  scopeRole: String!
  sessions(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionsAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  shortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  socials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  subjects(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  subjectsAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  tags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMetrics(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  teamMetricsAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenant: Tenant!
  tenantId: bigint!
  tenants(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  tenantsAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  userId: bigint
  userInfo: UserInfo
  userInfos(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): [UserInfo!]!
  userInfosAggregate(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): UserInfoAggregate!
  validations(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationsAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  votes(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  votesAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
}

type IndividualAggregate {
  aggregate: IndividualAggregateFields
  nodes: [Individual!]!
}

input IndividualAggregateBoolExp {
  count: individualAggregateBoolExpCount
}

input individualAggregateBoolExpCount {
  arguments: [IndividualSelectColumn!]
  distinct: Boolean
  filter: IndividualBoolExp
  predicate: IntComparisonExp!
}

type IndividualAggregateFields {
  avg: IndividualAvgFields
  count(columns: [IndividualSelectColumn!], distinct: Boolean): Int!
  max: IndividualMaxFields
  min: IndividualMinFields
  stddev: IndividualStddevFields
  stddevPop: IndividualStddevPopFields
  stddevSamp: IndividualStddevSampFields
  sum: IndividualSumFields
  varPop: IndividualVarPopFields
  varSamp: IndividualVarSampFields
  variance: IndividualVarianceFields
}

input IndividualAggregateOrderBy {
  avg: IndividualAvgOrderBy
  count: OrderBy
  max: IndividualMaxOrderBy
  min: IndividualMinOrderBy
  stddev: IndividualStddevOrderBy
  stddevPop: IndividualStddevPopOrderBy
  stddevSamp: IndividualStddevSampOrderBy
  sum: IndividualSumOrderBy
  varPop: IndividualVarPopOrderBy
  varSamp: IndividualVarSampOrderBy
  variance: IndividualVarianceOrderBy
}

input IndividualArrRelInsertInput {
  data: [IndividualInsertInput!]!
  onConflict: IndividualOnConflict
}

type IndividualAvgFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input IndividualAvgOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input IndividualBoolExp {
  _and: [IndividualBoolExp!]
  _not: IndividualBoolExp
  _or: [IndividualBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actionsByValidatedById: ActionBoolExp
  actionsByValidatedByIdAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  botId: BigintComparisonExp
  botInfo: BotInfoBoolExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  canteens: CanteenBoolExp
  canteensAggregate: CanteenAggregateBoolExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  classGroups: ClassGroupBoolExp
  classGroupsAggregate: ClassGroupAggregateBoolExp
  cohorts: CohortBoolExp
  cohortsAggregate: CohortAggregateBoolExp
  contentMasterContributors: ContentMasterContributorsBoolExp
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateBoolExp
  contentMasters: ContentMasterBoolExp
  contentMastersAggregate: ContentMasterAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  eventApprovalStepNotifiees: EventApprovalStepNotifieesBoolExp
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateBoolExp
  eventApprovalStepValidators: EventApprovalStepValidatorsBoolExp
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateBoolExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventAttendances: EventAttendanceBoolExp
  eventAttendancesAggregate: EventAttendanceAggregateBoolExp
  eventChangeRoles: EventChangeRoleBoolExp
  eventChangeRolesAggregate: EventChangeRoleAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  formEdits: FormEditBoolExp
  formEditsAggregate: FormEditAggregateBoolExp
  formSubmissionEdits: FormSubmissionEditBoolExp
  formSubmissionEditsAggregate: FormSubmissionEditAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individuals: IndividualBoolExp
  individualsAggregate: IndividualAggregateBoolExp
  issues: IssueBoolExp
  issuesAggregate: IssueAggregateBoolExp
  passwordHash: StringComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projectRoles: ProjectRoleBoolExp
  projectRolesAggregate: ProjectRoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  scopeRole: StringComparisonExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  subjects: SubjectBoolExp
  subjectsAggregate: SubjectAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamMetrics: TeamMetricBoolExp
  teamMetricsAggregate: TeamMetricAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tenants: TenantBoolExp
  tenantsAggregate: TenantAggregateBoolExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
  userInfos: UserInfoBoolExp
  userInfosAggregate: UserInfoAggregateBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

enum IndividualConstraint {
  individual_bot_id_unique
  individual_pkey
  individual_user_id_unique
}

input IndividualIncInput {
  botId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input IndividualInsertInput {
  actions: ActionArrRelInsertInput
  actionsByValidatedById: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actors: ActorArrRelInsertInput
  botId: bigint
  botInfo: BotInfoObjRelInsertInput
  botInfos: BotInfoArrRelInsertInput
  campuses: CampusArrRelInsertInput
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  canteens: CanteenArrRelInsertInput
  changeRoles: ChangeRoleArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  classGroups: ClassGroupArrRelInsertInput
  cohorts: CohortArrRelInsertInput
  contentMasterContributors: ContentMasterContributorsArrRelInsertInput
  contentMasters: ContentMasterArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentEdits: DocumentEditArrRelInsertInput
  documents: DocumentArrRelInsertInput
  eventApprovalStepNotifiees: EventApprovalStepNotifieesArrRelInsertInput
  eventApprovalStepValidators: EventApprovalStepValidatorsArrRelInsertInput
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventAttendances: EventAttendanceArrRelInsertInput
  eventChangeRoles: EventChangeRoleArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  events: EventArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  favorites: FavoriteArrRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  follows: FollowArrRelInsertInput
  formEdits: FormEditArrRelInsertInput
  formSubmissionEdits: FormSubmissionEditArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individuals: IndividualArrRelInsertInput
  issues: IssueArrRelInsertInput
  passwordHash: String
  poles: PoleArrRelInsertInput
  projectRoles: ProjectRoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  roles: RoleArrRelInsertInput
  scopeRole: String
  sessions: SessionArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  socials: SocialArrRelInsertInput
  subjects: SubjectArrRelInsertInput
  tags: TagArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamMetrics: TeamMetricArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tenants: TenantArrRelInsertInput
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
  userInfos: UserInfoArrRelInsertInput
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

type IndividualMaxFields {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

input IndividualMaxOrderBy {
  botId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  scopeRole: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type IndividualMinFields {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

input IndividualMinOrderBy {
  botId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  scopeRole: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type IndividualMutationResponse {
  affectedRows: Int!
  returning: [Individual!]!
}

input IndividualObjRelInsertInput {
  data: IndividualInsertInput!
  onConflict: IndividualOnConflict
}

input IndividualOnConflict {
  constraint: IndividualConstraint!
  updateColumns: [IndividualUpdateColumn!]! = []
  where: IndividualBoolExp
}

input IndividualOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actionsByValidatedByIdAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  botId: OrderBy
  botInfo: BotInfoOrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  canteensAggregate: CanteenAggregateOrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  classGroupsAggregate: ClassGroupAggregateOrderBy
  cohortsAggregate: CohortAggregateOrderBy
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateOrderBy
  contentMastersAggregate: ContentMasterAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  documentsAggregate: DocumentAggregateOrderBy
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateOrderBy
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateOrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventAttendancesAggregate: EventAttendanceAggregateOrderBy
  eventChangeRolesAggregate: EventChangeRoleAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  formEditsAggregate: FormEditAggregateOrderBy
  formSubmissionEditsAggregate: FormSubmissionEditAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualsAggregate: IndividualAggregateOrderBy
  issuesAggregate: IssueAggregateOrderBy
  passwordHash: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectRolesAggregate: ProjectRoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  scopeRole: OrderBy
  sessionsAggregate: SessionAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  subjectsAggregate: SubjectAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamMetricsAggregate: TeamMetricAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tenantsAggregate: TenantAggregateOrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
  userInfosAggregate: UserInfoAggregateOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

input IndividualPkColumnsInput {
  id: bigint!
}

enum IndividualSelectColumn {
  botId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  passwordHash
  scopeRole
  tenantId
  userId
}

input IndividualSetInput {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

type IndividualStddevFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input IndividualStddevOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type IndividualStddevPopFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input IndividualStddevPopOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type IndividualStddevSampFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input IndividualStddevSampOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input IndividualStreamCursorInput {
  initialValue: IndividualStreamCursorValueInput!
  ordering: CursorOrdering
}

input IndividualStreamCursorValueInput {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

type IndividualSumFields {
  botId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input IndividualSumOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum IndividualUpdateColumn {
  botId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  passwordHash
  scopeRole
  tenantId
  userId
}

input IndividualUpdates {
  _inc: IndividualIncInput
  _set: IndividualSetInput
  where: IndividualBoolExp!
}

type IndividualVarianceFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input IndividualVarianceOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type IndividualVarPopFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input IndividualVarPopOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type IndividualVarSampFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input IndividualVarSampOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type Issue {
  contentMaster: ContentMaster!
  contentMasterId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  tenant: Tenant!
  tenantId: bigint!
}

type IssueAggregate {
  aggregate: IssueAggregateFields
  nodes: [Issue!]!
}

input IssueAggregateBoolExp {
  count: issueAggregateBoolExpCount
}

input issueAggregateBoolExpCount {
  arguments: [IssueSelectColumn!]
  distinct: Boolean
  filter: IssueBoolExp
  predicate: IntComparisonExp!
}

type IssueAggregateFields {
  avg: IssueAvgFields
  count(columns: [IssueSelectColumn!], distinct: Boolean): Int!
  max: IssueMaxFields
  min: IssueMinFields
  stddev: IssueStddevFields
  stddevPop: IssueStddevPopFields
  stddevSamp: IssueStddevSampFields
  sum: IssueSumFields
  varPop: IssueVarPopFields
  varSamp: IssueVarSampFields
  variance: IssueVarianceFields
}

input IssueAggregateOrderBy {
  avg: IssueAvgOrderBy
  count: OrderBy
  max: IssueMaxOrderBy
  min: IssueMinOrderBy
  stddev: IssueStddevOrderBy
  stddevPop: IssueStddevPopOrderBy
  stddevSamp: IssueStddevSampOrderBy
  sum: IssueSumOrderBy
  varPop: IssueVarPopOrderBy
  varSamp: IssueVarSampOrderBy
  variance: IssueVarianceOrderBy
}

input IssueArrRelInsertInput {
  data: [IssueInsertInput!]!
  onConflict: IssueOnConflict
}

type IssueAvgFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueAvgOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input IssueBoolExp {
  _and: [IssueBoolExp!]
  _not: IssueBoolExp
  _or: [IssueBoolExp!]
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum IssueConstraint {
  issue_content_master_id_unique
  issue_pkey
}

input IssueIncInput {
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input IssueInsertInput {
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expenses: ExpenseArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type IssueMaxFields {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input IssueMaxOrderBy {
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueMinFields {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input IssueMinOrderBy {
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueMutationResponse {
  affectedRows: Int!
  returning: [Issue!]!
}

input IssueObjRelInsertInput {
  data: IssueInsertInput!
  onConflict: IssueOnConflict
}

input IssueOnConflict {
  constraint: IssueConstraint!
  updateColumns: [IssueUpdateColumn!]! = []
  where: IssueBoolExp
}

input IssueOrderBy {
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input IssuePkColumnsInput {
  id: bigint!
}

enum IssueSelectColumn {
  contentMasterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input IssueSetInput {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type IssueStddevFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueStddevOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueStddevPopFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueStddevPopOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueStddevSampFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueStddevSampOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input IssueStreamCursorInput {
  initialValue: IssueStreamCursorValueInput!
  ordering: CursorOrdering
}

input IssueStreamCursorValueInput {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type IssueSumFields {
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input IssueSumOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum IssueUpdateColumn {
  contentMasterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input IssueUpdates {
  _inc: IssueIncInput
  _set: IssueSetInput
  where: IssueBoolExp!
}

type IssueVarianceFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueVarianceOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueVarPopFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueVarPopOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueVarSampFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueVarSampOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

scalar jsonb

input JsonbCastExp {
  String: StringComparisonExp
}

input JsonbComparisonExp {
  _cast: JsonbCastExp
  _containedIn: jsonb
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  _hasKey: String
  _hasKeysAll: [String!]
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

type Mutation {
  deleteAction(where: ActionBoolExp!): ActionMutationResponse
  deleteActionByPk(id: bigint!): Action
  deleteActor(where: ActorBoolExp!): ActorMutationResponse
  deleteActorAddress(where: ActorAddressBoolExp!): ActorAddressMutationResponse
  deleteActorAddressByPk(id: bigint!): ActorAddress
  deleteActorBankInfo(where: ActorBankInfoBoolExp!): ActorBankInfoMutationResponse
  deleteActorBankInfoByPk(id: bigint!): ActorBankInfo
  deleteActorByPk(id: bigint!): Actor
  deleteActorFinance(where: ActorFinanceBoolExp!): ActorFinanceMutationResponse
  deleteActorFinanceByPk(id: bigint!): ActorFinance
  deleteActorImage(where: ActorImageBoolExp!): ActorImageMutationResponse
  deleteActorImageByPk(id: bigint!): ActorImage
  deleteActorTags(where: ActorTagsBoolExp!): ActorTagsMutationResponse
  deleteActorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags
  deleteBotInfo(where: BotInfoBoolExp!): BotInfoMutationResponse
  deleteBotInfoByPk(id: bigint!): BotInfo
  deleteCampus(where: CampusBoolExp!): CampusMutationResponse
  deleteCampusByPk(id: bigint!): Campus
  deleteCanteen(where: CanteenBoolExp!): CanteenMutationResponse
  deleteCanteenByPk(id: bigint!): Canteen
  deleteCanteenFood(where: CanteenFoodBoolExp!): CanteenFoodMutationResponse
  deleteCanteenFoodByPk(id: bigint!): CanteenFood
  deleteCanteenMenu(where: CanteenMenuBoolExp!): CanteenMenuMutationResponse
  deleteCanteenMenuByPk(id: bigint!): CanteenMenu
  deleteChangeRole(where: ChangeRoleBoolExp!): ChangeRoleMutationResponse
  deleteChangeRoleByPk(id: bigint!): ChangeRole
  deleteClassGroup(where: ClassGroupBoolExp!): ClassGroupMutationResponse
  deleteClassGroupByPk(id: bigint!): ClassGroup
  deleteClassGroupTeacher(where: ClassGroupTeacherBoolExp!): ClassGroupTeacherMutationResponse
  deleteClassGroupTeacherByPk(id: bigint!): ClassGroupTeacher
  deleteClassGroupTeacherSubjects(where: ClassGroupTeacherSubjectsBoolExp!): ClassGroupTeacherSubjectsMutationResponse
  deleteClassGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects
  deleteCohort(where: CohortBoolExp!): CohortMutationResponse
  deleteCohortByPk(id: bigint!): Cohort
  deleteContent(where: ContentBoolExp!): ContentMutationResponse
  deleteContentAttachments(where: ContentAttachmentsBoolExp!): ContentAttachmentsMutationResponse
  deleteContentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments
  deleteContentByPk(id: bigint!): Content
  deleteContentMaster(where: ContentMasterBoolExp!): ContentMasterMutationResponse
  deleteContentMasterByPk(id: bigint!): ContentMaster
  deleteContentMasterContributors(where: ContentMasterContributorsBoolExp!): ContentMasterContributorsMutationResponse
  deleteContentMasterContributorsByPk(contentMasterId: bigint!, individualId: bigint!): ContentMasterContributors
  deleteContentMasterTags(where: ContentMasterTagsBoolExp!): ContentMasterTagsMutationResponse
  deleteContentMasterTagsByPk(contentMasterId: bigint!, tagId: bigint!): ContentMasterTags
  deleteContentTeams(where: ContentTeamsBoolExp!): ContentTeamsMutationResponse
  deleteContentTeamsByPk(contentId: bigint!, teamId: bigint!): ContentTeams
  deleteDocument(where: DocumentBoolExp!): DocumentMutationResponse
  deleteDocumentByPk(id: bigint!): Document
  deleteDocumentEdit(where: DocumentEditBoolExp!): DocumentEditMutationResponse
  deleteDocumentEditByPk(id: bigint!): DocumentEdit
  deleteEvent(where: EventBoolExp!): EventMutationResponse
  deleteEventApproval(where: EventApprovalBoolExp!): EventApprovalMutationResponse
  deleteEventApprovalByPk(id: bigint!): EventApproval
  deleteEventApprovalStep(where: EventApprovalStepBoolExp!): EventApprovalStepMutationResponse
  deleteEventApprovalStepByPk(id: bigint!): EventApprovalStep
  deleteEventApprovalStepNotifiees(where: EventApprovalStepNotifieesBoolExp!): EventApprovalStepNotifieesMutationResponse
  deleteEventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees
  deleteEventApprovalStepValidators(where: EventApprovalStepValidatorsBoolExp!): EventApprovalStepValidatorsMutationResponse
  deleteEventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators
  deleteEventAttendance(where: EventAttendanceBoolExp!): EventAttendanceMutationResponse
  deleteEventAttendanceByPk(id: bigint!): EventAttendance
  deleteEventByPk(id: bigint!): Event
  deleteEventChangeRole(where: EventChangeRoleBoolExp!): EventChangeRoleMutationResponse
  deleteEventChangeRoleByPk(id: bigint!): EventChangeRole
  deleteEventJoin(where: EventJoinBoolExp!): EventJoinMutationResponse
  deleteEventJoinByPk(id: bigint!): EventJoin
  deleteEventRole(where: EventRoleBoolExp!): EventRoleMutationResponse
  deleteEventRoleByPk(id: bigint!): EventRole
  deleteEventTags(where: EventTagsBoolExp!): EventTagsMutationResponse
  deleteEventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags
  deleteExpense(where: ExpenseBoolExp!): ExpenseMutationResponse
  deleteExpenseByPk(id: bigint!): Expense
  deleteFavorite(where: FavoriteBoolExp!): FavoriteMutationResponse
  deleteFavoriteByPk(id: bigint!): Favorite
  deleteFileUpload(where: FileUploadBoolExp!): FileUploadMutationResponse
  deleteFileUploadByPk(id: bigint!): FileUpload
  deleteFollow(where: FollowBoolExp!): FollowMutationResponse
  deleteFollowByPk(id: bigint!): Follow
  deleteForm(where: FormBoolExp!): FormMutationResponse
  deleteFormByPk(id: bigint!): Form
  deleteFormEdit(where: FormEditBoolExp!): FormEditMutationResponse
  deleteFormEditByPk(id: bigint!): FormEdit
  deleteFormSubmission(where: FormSubmissionBoolExp!): FormSubmissionMutationResponse
  deleteFormSubmissionByPk(id: bigint!): FormSubmission
  deleteFormSubmissionEdit(where: FormSubmissionEditBoolExp!): FormSubmissionEditMutationResponse
  deleteFormSubmissionEditByPk(id: bigint!): FormSubmissionEdit
  deleteIndividual(where: IndividualBoolExp!): IndividualMutationResponse
  deleteIndividualByPk(id: bigint!): Individual
  deleteIssue(where: IssueBoolExp!): IssueMutationResponse
  deleteIssueByPk(id: bigint!): Issue
  deletePole(where: PoleBoolExp!): PoleMutationResponse
  deletePoleByPk(id: bigint!): Pole
  deleteProject(where: ProjectBoolExp!): ProjectMutationResponse
  deleteProjectByPk(id: bigint!): Project
  deleteProjectRole(where: ProjectRoleBoolExp!): ProjectRoleMutationResponse
  deleteProjectRoleByPk(id: bigint!): ProjectRole
  deleteProjectSupervisors(where: ProjectSupervisorsBoolExp!): ProjectSupervisorsMutationResponse
  deleteProjectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  deleteProjectTags(where: ProjectTagsBoolExp!): ProjectTagsMutationResponse
  deleteProjectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags
  deleteReaction(where: ReactionBoolExp!): ReactionMutationResponse
  deleteReactionByPk(id: bigint!): Reaction
  deleteReport(where: ReportBoolExp!): ReportMutationResponse
  deleteReportByPk(id: bigint!): Report
  deleteRole(where: RoleBoolExp!): RoleMutationResponse
  deleteRoleByPk(id: bigint!): Role
  deleteSession(where: SessionBoolExp!): SessionMutationResponse
  deleteSessionByPk(id: bigint!): Session
  deleteShortcut(where: ShortcutBoolExp!): ShortcutMutationResponse
  deleteShortcutByPk(id: bigint!): Shortcut
  deleteSocial(where: SocialBoolExp!): SocialMutationResponse
  deleteSocialByPk(id: bigint!): Social
  deleteSubject(where: SubjectBoolExp!): SubjectMutationResponse
  deleteSubjectByPk(id: bigint!): Subject
  deleteSubjectClassGroups(where: SubjectClassGroupsBoolExp!): SubjectClassGroupsMutationResponse
  deleteSubjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups
  deleteTag(where: TagBoolExp!): TagMutationResponse
  deleteTagByPk(id: bigint!): Tag
  deleteTeam(where: TeamBoolExp!): TeamMutationResponse
  deleteTeamByPk(id: bigint!): Team
  deleteTeamEvents(where: TeamEventsBoolExp!): TeamEventsMutationResponse
  deleteTeamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents
  deleteTeamFinance(where: TeamFinanceBoolExp!): TeamFinanceMutationResponse
  deleteTeamFinanceByPk(id: bigint!): TeamFinance
  deleteTeamJoin(where: TeamJoinBoolExp!): TeamJoinMutationResponse
  deleteTeamJoinByPk(id: bigint!): TeamJoin
  deleteTeamMember(where: TeamMemberBoolExp!): TeamMemberMutationResponse
  deleteTeamMemberByPk(id: bigint!): TeamMember
  deleteTeamMemberRoles(where: TeamMemberRolesBoolExp!): TeamMemberRolesMutationResponse
  deleteTeamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles
  deleteTeamMetric(where: TeamMetricBoolExp!): TeamMetricMutationResponse
  deleteTeamMetricByPk(id: bigint!): TeamMetric
  deleteTenant(where: TenantBoolExp!): TenantMutationResponse
  deleteTenantByPk(id: bigint!): Tenant
  deleteUserInfo(where: UserInfoBoolExp!): UserInfoMutationResponse
  deleteUserInfoByPk(id: bigint!): UserInfo
  deleteValidation(where: ValidationBoolExp!): ValidationMutationResponse
  deleteValidationByPk(id: bigint!): Validation
  deleteVote(where: VoteBoolExp!): VoteMutationResponse
  deleteVoteByPk(id: bigint!): Vote
  insertAction(objects: [ActionInsertInput!]!, onConflict: ActionOnConflict): ActionMutationResponse
  insertActionOne(object: ActionInsertInput!, onConflict: ActionOnConflict): Action
  insertActor(objects: [ActorInsertInput!]!, onConflict: ActorOnConflict): ActorMutationResponse
  insertActorAddress(objects: [ActorAddressInsertInput!]!, onConflict: ActorAddressOnConflict): ActorAddressMutationResponse
  insertActorAddressOne(object: ActorAddressInsertInput!, onConflict: ActorAddressOnConflict): ActorAddress
  insertActorBankInfo(objects: [ActorBankInfoInsertInput!]!, onConflict: ActorBankInfoOnConflict): ActorBankInfoMutationResponse
  insertActorBankInfoOne(object: ActorBankInfoInsertInput!, onConflict: ActorBankInfoOnConflict): ActorBankInfo
  insertActorFinance(objects: [ActorFinanceInsertInput!]!, onConflict: ActorFinanceOnConflict): ActorFinanceMutationResponse
  insertActorFinanceOne(object: ActorFinanceInsertInput!, onConflict: ActorFinanceOnConflict): ActorFinance
  insertActorImage(objects: [ActorImageInsertInput!]!, onConflict: ActorImageOnConflict): ActorImageMutationResponse
  insertActorImageOne(object: ActorImageInsertInput!, onConflict: ActorImageOnConflict): ActorImage
  insertActorOne(object: ActorInsertInput!, onConflict: ActorOnConflict): Actor
  insertActorTags(objects: [ActorTagsInsertInput!]!, onConflict: ActorTagsOnConflict): ActorTagsMutationResponse
  insertActorTagsOne(object: ActorTagsInsertInput!, onConflict: ActorTagsOnConflict): ActorTags
  insertBotInfo(objects: [BotInfoInsertInput!]!, onConflict: BotInfoOnConflict): BotInfoMutationResponse
  insertBotInfoOne(object: BotInfoInsertInput!, onConflict: BotInfoOnConflict): BotInfo
  insertCampus(objects: [CampusInsertInput!]!, onConflict: CampusOnConflict): CampusMutationResponse
  insertCampusOne(object: CampusInsertInput!, onConflict: CampusOnConflict): Campus
  insertCanteen(objects: [CanteenInsertInput!]!, onConflict: CanteenOnConflict): CanteenMutationResponse
  insertCanteenFood(objects: [CanteenFoodInsertInput!]!, onConflict: CanteenFoodOnConflict): CanteenFoodMutationResponse
  insertCanteenFoodOne(object: CanteenFoodInsertInput!, onConflict: CanteenFoodOnConflict): CanteenFood
  insertCanteenMenu(objects: [CanteenMenuInsertInput!]!, onConflict: CanteenMenuOnConflict): CanteenMenuMutationResponse
  insertCanteenMenuOne(object: CanteenMenuInsertInput!, onConflict: CanteenMenuOnConflict): CanteenMenu
  insertCanteenOne(object: CanteenInsertInput!, onConflict: CanteenOnConflict): Canteen
  insertChangeRole(objects: [ChangeRoleInsertInput!]!, onConflict: ChangeRoleOnConflict): ChangeRoleMutationResponse
  insertChangeRoleOne(object: ChangeRoleInsertInput!, onConflict: ChangeRoleOnConflict): ChangeRole
  insertClassGroup(objects: [ClassGroupInsertInput!]!, onConflict: ClassGroupOnConflict): ClassGroupMutationResponse
  insertClassGroupOne(object: ClassGroupInsertInput!, onConflict: ClassGroupOnConflict): ClassGroup
  insertClassGroupTeacher(objects: [ClassGroupTeacherInsertInput!]!, onConflict: ClassGroupTeacherOnConflict): ClassGroupTeacherMutationResponse
  insertClassGroupTeacherOne(object: ClassGroupTeacherInsertInput!, onConflict: ClassGroupTeacherOnConflict): ClassGroupTeacher
  insertClassGroupTeacherSubjects(objects: [ClassGroupTeacherSubjectsInsertInput!]!, onConflict: ClassGroupTeacherSubjectsOnConflict): ClassGroupTeacherSubjectsMutationResponse
  insertClassGroupTeacherSubjectsOne(object: ClassGroupTeacherSubjectsInsertInput!, onConflict: ClassGroupTeacherSubjectsOnConflict): ClassGroupTeacherSubjects
  insertCohort(objects: [CohortInsertInput!]!, onConflict: CohortOnConflict): CohortMutationResponse
  insertCohortOne(object: CohortInsertInput!, onConflict: CohortOnConflict): Cohort
  insertContent(objects: [ContentInsertInput!]!, onConflict: ContentOnConflict): ContentMutationResponse
  insertContentAttachments(objects: [ContentAttachmentsInsertInput!]!, onConflict: ContentAttachmentsOnConflict): ContentAttachmentsMutationResponse
  insertContentAttachmentsOne(object: ContentAttachmentsInsertInput!, onConflict: ContentAttachmentsOnConflict): ContentAttachments
  insertContentMaster(objects: [ContentMasterInsertInput!]!, onConflict: ContentMasterOnConflict): ContentMasterMutationResponse
  insertContentMasterContributors(objects: [ContentMasterContributorsInsertInput!]!, onConflict: ContentMasterContributorsOnConflict): ContentMasterContributorsMutationResponse
  insertContentMasterContributorsOne(object: ContentMasterContributorsInsertInput!, onConflict: ContentMasterContributorsOnConflict): ContentMasterContributors
  insertContentMasterOne(object: ContentMasterInsertInput!, onConflict: ContentMasterOnConflict): ContentMaster
  insertContentMasterTags(objects: [ContentMasterTagsInsertInput!]!, onConflict: ContentMasterTagsOnConflict): ContentMasterTagsMutationResponse
  insertContentMasterTagsOne(object: ContentMasterTagsInsertInput!, onConflict: ContentMasterTagsOnConflict): ContentMasterTags
  insertContentOne(object: ContentInsertInput!, onConflict: ContentOnConflict): Content
  insertContentTeams(objects: [ContentTeamsInsertInput!]!, onConflict: ContentTeamsOnConflict): ContentTeamsMutationResponse
  insertContentTeamsOne(object: ContentTeamsInsertInput!, onConflict: ContentTeamsOnConflict): ContentTeams
  insertDocument(objects: [DocumentInsertInput!]!, onConflict: DocumentOnConflict): DocumentMutationResponse
  insertDocumentEdit(objects: [DocumentEditInsertInput!]!, onConflict: DocumentEditOnConflict): DocumentEditMutationResponse
  insertDocumentEditOne(object: DocumentEditInsertInput!, onConflict: DocumentEditOnConflict): DocumentEdit
  insertDocumentOne(object: DocumentInsertInput!, onConflict: DocumentOnConflict): Document
  insertEvent(objects: [EventInsertInput!]!, onConflict: EventOnConflict): EventMutationResponse
  insertEventApproval(objects: [EventApprovalInsertInput!]!, onConflict: EventApprovalOnConflict): EventApprovalMutationResponse
  insertEventApprovalOne(object: EventApprovalInsertInput!, onConflict: EventApprovalOnConflict): EventApproval
  insertEventApprovalStep(objects: [EventApprovalStepInsertInput!]!, onConflict: EventApprovalStepOnConflict): EventApprovalStepMutationResponse
  insertEventApprovalStepNotifiees(objects: [EventApprovalStepNotifieesInsertInput!]!, onConflict: EventApprovalStepNotifieesOnConflict): EventApprovalStepNotifieesMutationResponse
  insertEventApprovalStepNotifieesOne(object: EventApprovalStepNotifieesInsertInput!, onConflict: EventApprovalStepNotifieesOnConflict): EventApprovalStepNotifiees
  insertEventApprovalStepOne(object: EventApprovalStepInsertInput!, onConflict: EventApprovalStepOnConflict): EventApprovalStep
  insertEventApprovalStepValidators(objects: [EventApprovalStepValidatorsInsertInput!]!, onConflict: EventApprovalStepValidatorsOnConflict): EventApprovalStepValidatorsMutationResponse
  insertEventApprovalStepValidatorsOne(object: EventApprovalStepValidatorsInsertInput!, onConflict: EventApprovalStepValidatorsOnConflict): EventApprovalStepValidators
  insertEventAttendance(objects: [EventAttendanceInsertInput!]!, onConflict: EventAttendanceOnConflict): EventAttendanceMutationResponse
  insertEventAttendanceOne(object: EventAttendanceInsertInput!, onConflict: EventAttendanceOnConflict): EventAttendance
  insertEventChangeRole(objects: [EventChangeRoleInsertInput!]!, onConflict: EventChangeRoleOnConflict): EventChangeRoleMutationResponse
  insertEventChangeRoleOne(object: EventChangeRoleInsertInput!, onConflict: EventChangeRoleOnConflict): EventChangeRole
  insertEventJoin(objects: [EventJoinInsertInput!]!, onConflict: EventJoinOnConflict): EventJoinMutationResponse
  insertEventJoinOne(object: EventJoinInsertInput!, onConflict: EventJoinOnConflict): EventJoin
  insertEventOne(object: EventInsertInput!, onConflict: EventOnConflict): Event
  insertEventRole(objects: [EventRoleInsertInput!]!, onConflict: EventRoleOnConflict): EventRoleMutationResponse
  insertEventRoleOne(object: EventRoleInsertInput!, onConflict: EventRoleOnConflict): EventRole
  insertEventTags(objects: [EventTagsInsertInput!]!, onConflict: EventTagsOnConflict): EventTagsMutationResponse
  insertEventTagsOne(object: EventTagsInsertInput!, onConflict: EventTagsOnConflict): EventTags
  insertExpense(objects: [ExpenseInsertInput!]!, onConflict: ExpenseOnConflict): ExpenseMutationResponse
  insertExpenseOne(object: ExpenseInsertInput!, onConflict: ExpenseOnConflict): Expense
  insertFavorite(objects: [FavoriteInsertInput!]!, onConflict: FavoriteOnConflict): FavoriteMutationResponse
  insertFavoriteOne(object: FavoriteInsertInput!, onConflict: FavoriteOnConflict): Favorite
  insertFileUpload(objects: [FileUploadInsertInput!]!, onConflict: FileUploadOnConflict): FileUploadMutationResponse
  insertFileUploadOne(object: FileUploadInsertInput!, onConflict: FileUploadOnConflict): FileUpload
  insertFollow(objects: [FollowInsertInput!]!, onConflict: FollowOnConflict): FollowMutationResponse
  insertFollowOne(object: FollowInsertInput!, onConflict: FollowOnConflict): Follow
  insertForm(objects: [FormInsertInput!]!, onConflict: FormOnConflict): FormMutationResponse
  insertFormEdit(objects: [FormEditInsertInput!]!, onConflict: FormEditOnConflict): FormEditMutationResponse
  insertFormEditOne(object: FormEditInsertInput!, onConflict: FormEditOnConflict): FormEdit
  insertFormOne(object: FormInsertInput!, onConflict: FormOnConflict): Form
  insertFormSubmission(objects: [FormSubmissionInsertInput!]!, onConflict: FormSubmissionOnConflict): FormSubmissionMutationResponse
  insertFormSubmissionEdit(objects: [FormSubmissionEditInsertInput!]!, onConflict: FormSubmissionEditOnConflict): FormSubmissionEditMutationResponse
  insertFormSubmissionEditOne(object: FormSubmissionEditInsertInput!, onConflict: FormSubmissionEditOnConflict): FormSubmissionEdit
  insertFormSubmissionOne(object: FormSubmissionInsertInput!, onConflict: FormSubmissionOnConflict): FormSubmission
  insertIndividual(objects: [IndividualInsertInput!]!, onConflict: IndividualOnConflict): IndividualMutationResponse
  insertIndividualOne(object: IndividualInsertInput!, onConflict: IndividualOnConflict): Individual
  insertIssue(objects: [IssueInsertInput!]!, onConflict: IssueOnConflict): IssueMutationResponse
  insertIssueOne(object: IssueInsertInput!, onConflict: IssueOnConflict): Issue
  insertPole(objects: [PoleInsertInput!]!, onConflict: PoleOnConflict): PoleMutationResponse
  insertPoleOne(object: PoleInsertInput!, onConflict: PoleOnConflict): Pole
  insertProject(objects: [ProjectInsertInput!]!, onConflict: ProjectOnConflict): ProjectMutationResponse
  insertProjectOne(object: ProjectInsertInput!, onConflict: ProjectOnConflict): Project
  insertProjectRole(objects: [ProjectRoleInsertInput!]!, onConflict: ProjectRoleOnConflict): ProjectRoleMutationResponse
  insertProjectRoleOne(object: ProjectRoleInsertInput!, onConflict: ProjectRoleOnConflict): ProjectRole
  insertProjectSupervisors(objects: [ProjectSupervisorsInsertInput!]!, onConflict: ProjectSupervisorsOnConflict): ProjectSupervisorsMutationResponse
  insertProjectSupervisorsOne(object: ProjectSupervisorsInsertInput!, onConflict: ProjectSupervisorsOnConflict): ProjectSupervisors
  insertProjectTags(objects: [ProjectTagsInsertInput!]!, onConflict: ProjectTagsOnConflict): ProjectTagsMutationResponse
  insertProjectTagsOne(object: ProjectTagsInsertInput!, onConflict: ProjectTagsOnConflict): ProjectTags
  insertReaction(objects: [ReactionInsertInput!]!, onConflict: ReactionOnConflict): ReactionMutationResponse
  insertReactionOne(object: ReactionInsertInput!, onConflict: ReactionOnConflict): Reaction
  insertReport(objects: [ReportInsertInput!]!, onConflict: ReportOnConflict): ReportMutationResponse
  insertReportOne(object: ReportInsertInput!, onConflict: ReportOnConflict): Report
  insertRole(objects: [RoleInsertInput!]!, onConflict: RoleOnConflict): RoleMutationResponse
  insertRoleOne(object: RoleInsertInput!, onConflict: RoleOnConflict): Role
  insertSession(objects: [SessionInsertInput!]!, onConflict: SessionOnConflict): SessionMutationResponse
  insertSessionOne(object: SessionInsertInput!, onConflict: SessionOnConflict): Session
  insertShortcut(objects: [ShortcutInsertInput!]!, onConflict: ShortcutOnConflict): ShortcutMutationResponse
  insertShortcutOne(object: ShortcutInsertInput!, onConflict: ShortcutOnConflict): Shortcut
  insertSocial(objects: [SocialInsertInput!]!, onConflict: SocialOnConflict): SocialMutationResponse
  insertSocialOne(object: SocialInsertInput!, onConflict: SocialOnConflict): Social
  insertSubject(objects: [SubjectInsertInput!]!, onConflict: SubjectOnConflict): SubjectMutationResponse
  insertSubjectClassGroups(objects: [SubjectClassGroupsInsertInput!]!, onConflict: SubjectClassGroupsOnConflict): SubjectClassGroupsMutationResponse
  insertSubjectClassGroupsOne(object: SubjectClassGroupsInsertInput!, onConflict: SubjectClassGroupsOnConflict): SubjectClassGroups
  insertSubjectOne(object: SubjectInsertInput!, onConflict: SubjectOnConflict): Subject
  insertTag(objects: [TagInsertInput!]!, onConflict: TagOnConflict): TagMutationResponse
  insertTagOne(object: TagInsertInput!, onConflict: TagOnConflict): Tag
  insertTeam(objects: [TeamInsertInput!]!, onConflict: TeamOnConflict): TeamMutationResponse
  insertTeamEvents(objects: [TeamEventsInsertInput!]!, onConflict: TeamEventsOnConflict): TeamEventsMutationResponse
  insertTeamEventsOne(object: TeamEventsInsertInput!, onConflict: TeamEventsOnConflict): TeamEvents
  insertTeamFinance(objects: [TeamFinanceInsertInput!]!, onConflict: TeamFinanceOnConflict): TeamFinanceMutationResponse
  insertTeamFinanceOne(object: TeamFinanceInsertInput!, onConflict: TeamFinanceOnConflict): TeamFinance
  insertTeamJoin(objects: [TeamJoinInsertInput!]!, onConflict: TeamJoinOnConflict): TeamJoinMutationResponse
  insertTeamJoinOne(object: TeamJoinInsertInput!, onConflict: TeamJoinOnConflict): TeamJoin
  insertTeamMember(objects: [TeamMemberInsertInput!]!, onConflict: TeamMemberOnConflict): TeamMemberMutationResponse
  insertTeamMemberOne(object: TeamMemberInsertInput!, onConflict: TeamMemberOnConflict): TeamMember
  insertTeamMemberRoles(objects: [TeamMemberRolesInsertInput!]!, onConflict: TeamMemberRolesOnConflict): TeamMemberRolesMutationResponse
  insertTeamMemberRolesOne(object: TeamMemberRolesInsertInput!, onConflict: TeamMemberRolesOnConflict): TeamMemberRoles
  insertTeamMetric(objects: [TeamMetricInsertInput!]!, onConflict: TeamMetricOnConflict): TeamMetricMutationResponse
  insertTeamMetricOne(object: TeamMetricInsertInput!, onConflict: TeamMetricOnConflict): TeamMetric
  insertTeamOne(object: TeamInsertInput!, onConflict: TeamOnConflict): Team
  insertTenant(objects: [TenantInsertInput!]!, onConflict: TenantOnConflict): TenantMutationResponse
  insertTenantOne(object: TenantInsertInput!, onConflict: TenantOnConflict): Tenant
  insertUserInfo(objects: [UserInfoInsertInput!]!, onConflict: UserInfoOnConflict): UserInfoMutationResponse
  insertUserInfoOne(object: UserInfoInsertInput!, onConflict: UserInfoOnConflict): UserInfo
  insertValidation(objects: [ValidationInsertInput!]!, onConflict: ValidationOnConflict): ValidationMutationResponse
  insertValidationOne(object: ValidationInsertInput!, onConflict: ValidationOnConflict): Validation
  insertVote(objects: [VoteInsertInput!]!, onConflict: VoteOnConflict): VoteMutationResponse
  insertVoteOne(object: VoteInsertInput!, onConflict: VoteOnConflict): Vote
  updateAction(_inc: ActionIncInput, _set: ActionSetInput, where: ActionBoolExp!): ActionMutationResponse
  updateActionByPk(_inc: ActionIncInput, _set: ActionSetInput, pkColumns: ActionPkColumnsInput!): Action
  updateActionMany(updates: [ActionUpdates!]!): [ActionMutationResponse]
  updateActor(_inc: ActorIncInput, _set: ActorSetInput, where: ActorBoolExp!): ActorMutationResponse
  updateActorAddress(_inc: ActorAddressIncInput, _set: ActorAddressSetInput, where: ActorAddressBoolExp!): ActorAddressMutationResponse
  updateActorAddressByPk(_inc: ActorAddressIncInput, _set: ActorAddressSetInput, pkColumns: ActorAddressPkColumnsInput!): ActorAddress
  updateActorAddressMany(updates: [ActorAddressUpdates!]!): [ActorAddressMutationResponse]
  updateActorBankInfo(_inc: ActorBankInfoIncInput, _set: ActorBankInfoSetInput, where: ActorBankInfoBoolExp!): ActorBankInfoMutationResponse
  updateActorBankInfoByPk(_inc: ActorBankInfoIncInput, _set: ActorBankInfoSetInput, pkColumns: ActorBankInfoPkColumnsInput!): ActorBankInfo
  updateActorBankInfoMany(updates: [ActorBankInfoUpdates!]!): [ActorBankInfoMutationResponse]
  updateActorByPk(_inc: ActorIncInput, _set: ActorSetInput, pkColumns: ActorPkColumnsInput!): Actor
  updateActorFinance(_inc: ActorFinanceIncInput, _set: ActorFinanceSetInput, where: ActorFinanceBoolExp!): ActorFinanceMutationResponse
  updateActorFinanceByPk(_inc: ActorFinanceIncInput, _set: ActorFinanceSetInput, pkColumns: ActorFinancePkColumnsInput!): ActorFinance
  updateActorFinanceMany(updates: [ActorFinanceUpdates!]!): [ActorFinanceMutationResponse]
  updateActorImage(_inc: ActorImageIncInput, _set: ActorImageSetInput, where: ActorImageBoolExp!): ActorImageMutationResponse
  updateActorImageByPk(_inc: ActorImageIncInput, _set: ActorImageSetInput, pkColumns: ActorImagePkColumnsInput!): ActorImage
  updateActorImageMany(updates: [ActorImageUpdates!]!): [ActorImageMutationResponse]
  updateActorMany(updates: [ActorUpdates!]!): [ActorMutationResponse]
  updateActorTags(_inc: ActorTagsIncInput, _set: ActorTagsSetInput, where: ActorTagsBoolExp!): ActorTagsMutationResponse
  updateActorTagsByPk(_inc: ActorTagsIncInput, _set: ActorTagsSetInput, pkColumns: ActorTagsPkColumnsInput!): ActorTags
  updateActorTagsMany(updates: [ActorTagsUpdates!]!): [ActorTagsMutationResponse]
  updateBotInfo(_inc: BotInfoIncInput, _set: BotInfoSetInput, where: BotInfoBoolExp!): BotInfoMutationResponse
  updateBotInfoByPk(_inc: BotInfoIncInput, _set: BotInfoSetInput, pkColumns: BotInfoPkColumnsInput!): BotInfo
  updateBotInfoMany(updates: [BotInfoUpdates!]!): [BotInfoMutationResponse]
  updateCampus(_inc: CampusIncInput, _set: CampusSetInput, where: CampusBoolExp!): CampusMutationResponse
  updateCampusByPk(_inc: CampusIncInput, _set: CampusSetInput, pkColumns: CampusPkColumnsInput!): Campus
  updateCampusMany(updates: [CampusUpdates!]!): [CampusMutationResponse]
  updateCanteen(_inc: CanteenIncInput, _set: CanteenSetInput, where: CanteenBoolExp!): CanteenMutationResponse
  updateCanteenByPk(_inc: CanteenIncInput, _set: CanteenSetInput, pkColumns: CanteenPkColumnsInput!): Canteen
  updateCanteenFood(_inc: CanteenFoodIncInput, _set: CanteenFoodSetInput, where: CanteenFoodBoolExp!): CanteenFoodMutationResponse
  updateCanteenFoodByPk(_inc: CanteenFoodIncInput, _set: CanteenFoodSetInput, pkColumns: CanteenFoodPkColumnsInput!): CanteenFood
  updateCanteenFoodMany(updates: [CanteenFoodUpdates!]!): [CanteenFoodMutationResponse]
  updateCanteenMany(updates: [CanteenUpdates!]!): [CanteenMutationResponse]
  updateCanteenMenu(_inc: CanteenMenuIncInput, _set: CanteenMenuSetInput, where: CanteenMenuBoolExp!): CanteenMenuMutationResponse
  updateCanteenMenuByPk(_inc: CanteenMenuIncInput, _set: CanteenMenuSetInput, pkColumns: CanteenMenuPkColumnsInput!): CanteenMenu
  updateCanteenMenuMany(updates: [CanteenMenuUpdates!]!): [CanteenMenuMutationResponse]
  updateChangeRole(_inc: ChangeRoleIncInput, _set: ChangeRoleSetInput, where: ChangeRoleBoolExp!): ChangeRoleMutationResponse
  updateChangeRoleByPk(_inc: ChangeRoleIncInput, _set: ChangeRoleSetInput, pkColumns: ChangeRolePkColumnsInput!): ChangeRole
  updateChangeRoleMany(updates: [ChangeRoleUpdates!]!): [ChangeRoleMutationResponse]
  updateClassGroup(_inc: ClassGroupIncInput, _set: ClassGroupSetInput, where: ClassGroupBoolExp!): ClassGroupMutationResponse
  updateClassGroupByPk(_inc: ClassGroupIncInput, _set: ClassGroupSetInput, pkColumns: ClassGroupPkColumnsInput!): ClassGroup
  updateClassGroupMany(updates: [ClassGroupUpdates!]!): [ClassGroupMutationResponse]
  updateClassGroupTeacher(_inc: ClassGroupTeacherIncInput, _set: ClassGroupTeacherSetInput, where: ClassGroupTeacherBoolExp!): ClassGroupTeacherMutationResponse
  updateClassGroupTeacherByPk(_inc: ClassGroupTeacherIncInput, _set: ClassGroupTeacherSetInput, pkColumns: ClassGroupTeacherPkColumnsInput!): ClassGroupTeacher
  updateClassGroupTeacherMany(updates: [ClassGroupTeacherUpdates!]!): [ClassGroupTeacherMutationResponse]
  updateClassGroupTeacherSubjects(_inc: ClassGroupTeacherSubjectsIncInput, _set: ClassGroupTeacherSubjectsSetInput, where: ClassGroupTeacherSubjectsBoolExp!): ClassGroupTeacherSubjectsMutationResponse
  updateClassGroupTeacherSubjectsByPk(_inc: ClassGroupTeacherSubjectsIncInput, _set: ClassGroupTeacherSubjectsSetInput, pkColumns: ClassGroupTeacherSubjectsPkColumnsInput!): ClassGroupTeacherSubjects
  updateClassGroupTeacherSubjectsMany(updates: [ClassGroupTeacherSubjectsUpdates!]!): [ClassGroupTeacherSubjectsMutationResponse]
  updateCohort(_inc: CohortIncInput, _set: CohortSetInput, where: CohortBoolExp!): CohortMutationResponse
  updateCohortByPk(_inc: CohortIncInput, _set: CohortSetInput, pkColumns: CohortPkColumnsInput!): Cohort
  updateCohortMany(updates: [CohortUpdates!]!): [CohortMutationResponse]
  updateContent(_inc: ContentIncInput, _set: ContentSetInput, where: ContentBoolExp!): ContentMutationResponse
  updateContentAttachments(_inc: ContentAttachmentsIncInput, _set: ContentAttachmentsSetInput, where: ContentAttachmentsBoolExp!): ContentAttachmentsMutationResponse
  updateContentAttachmentsByPk(_inc: ContentAttachmentsIncInput, _set: ContentAttachmentsSetInput, pkColumns: ContentAttachmentsPkColumnsInput!): ContentAttachments
  updateContentAttachmentsMany(updates: [ContentAttachmentsUpdates!]!): [ContentAttachmentsMutationResponse]
  updateContentByPk(_inc: ContentIncInput, _set: ContentSetInput, pkColumns: ContentPkColumnsInput!): Content
  updateContentMany(updates: [ContentUpdates!]!): [ContentMutationResponse]
  updateContentMaster(_inc: ContentMasterIncInput, _set: ContentMasterSetInput, where: ContentMasterBoolExp!): ContentMasterMutationResponse
  updateContentMasterByPk(_inc: ContentMasterIncInput, _set: ContentMasterSetInput, pkColumns: ContentMasterPkColumnsInput!): ContentMaster
  updateContentMasterContributors(_inc: ContentMasterContributorsIncInput, _set: ContentMasterContributorsSetInput, where: ContentMasterContributorsBoolExp!): ContentMasterContributorsMutationResponse
  updateContentMasterContributorsByPk(_inc: ContentMasterContributorsIncInput, _set: ContentMasterContributorsSetInput, pkColumns: ContentMasterContributorsPkColumnsInput!): ContentMasterContributors
  updateContentMasterContributorsMany(updates: [ContentMasterContributorsUpdates!]!): [ContentMasterContributorsMutationResponse]
  updateContentMasterMany(updates: [ContentMasterUpdates!]!): [ContentMasterMutationResponse]
  updateContentMasterTags(_inc: ContentMasterTagsIncInput, _set: ContentMasterTagsSetInput, where: ContentMasterTagsBoolExp!): ContentMasterTagsMutationResponse
  updateContentMasterTagsByPk(_inc: ContentMasterTagsIncInput, _set: ContentMasterTagsSetInput, pkColumns: ContentMasterTagsPkColumnsInput!): ContentMasterTags
  updateContentMasterTagsMany(updates: [ContentMasterTagsUpdates!]!): [ContentMasterTagsMutationResponse]
  updateContentTeams(_inc: ContentTeamsIncInput, _set: ContentTeamsSetInput, where: ContentTeamsBoolExp!): ContentTeamsMutationResponse
  updateContentTeamsByPk(_inc: ContentTeamsIncInput, _set: ContentTeamsSetInput, pkColumns: ContentTeamsPkColumnsInput!): ContentTeams
  updateContentTeamsMany(updates: [ContentTeamsUpdates!]!): [ContentTeamsMutationResponse]
  updateDocument(_inc: DocumentIncInput, _set: DocumentSetInput, where: DocumentBoolExp!): DocumentMutationResponse
  updateDocumentByPk(_inc: DocumentIncInput, _set: DocumentSetInput, pkColumns: DocumentPkColumnsInput!): Document
  updateDocumentEdit(_inc: DocumentEditIncInput, _set: DocumentEditSetInput, where: DocumentEditBoolExp!): DocumentEditMutationResponse
  updateDocumentEditByPk(_inc: DocumentEditIncInput, _set: DocumentEditSetInput, pkColumns: DocumentEditPkColumnsInput!): DocumentEdit
  updateDocumentEditMany(updates: [DocumentEditUpdates!]!): [DocumentEditMutationResponse]
  updateDocumentMany(updates: [DocumentUpdates!]!): [DocumentMutationResponse]
  updateEvent(_append: EventAppendInput, _deleteAtPath: EventDeleteAtPathInput, _deleteElem: EventDeleteElemInput, _deleteKey: EventDeleteKeyInput, _inc: EventIncInput, _prepend: EventPrependInput, _set: EventSetInput, where: EventBoolExp!): EventMutationResponse
  updateEventApproval(_inc: EventApprovalIncInput, _set: EventApprovalSetInput, where: EventApprovalBoolExp!): EventApprovalMutationResponse
  updateEventApprovalByPk(_inc: EventApprovalIncInput, _set: EventApprovalSetInput, pkColumns: EventApprovalPkColumnsInput!): EventApproval
  updateEventApprovalMany(updates: [EventApprovalUpdates!]!): [EventApprovalMutationResponse]
  updateEventApprovalStep(_inc: EventApprovalStepIncInput, _set: EventApprovalStepSetInput, where: EventApprovalStepBoolExp!): EventApprovalStepMutationResponse
  updateEventApprovalStepByPk(_inc: EventApprovalStepIncInput, _set: EventApprovalStepSetInput, pkColumns: EventApprovalStepPkColumnsInput!): EventApprovalStep
  updateEventApprovalStepMany(updates: [EventApprovalStepUpdates!]!): [EventApprovalStepMutationResponse]
  updateEventApprovalStepNotifiees(_inc: EventApprovalStepNotifieesIncInput, _set: EventApprovalStepNotifieesSetInput, where: EventApprovalStepNotifieesBoolExp!): EventApprovalStepNotifieesMutationResponse
  updateEventApprovalStepNotifieesByPk(_inc: EventApprovalStepNotifieesIncInput, _set: EventApprovalStepNotifieesSetInput, pkColumns: EventApprovalStepNotifieesPkColumnsInput!): EventApprovalStepNotifiees
  updateEventApprovalStepNotifieesMany(updates: [EventApprovalStepNotifieesUpdates!]!): [EventApprovalStepNotifieesMutationResponse]
  updateEventApprovalStepValidators(_inc: EventApprovalStepValidatorsIncInput, _set: EventApprovalStepValidatorsSetInput, where: EventApprovalStepValidatorsBoolExp!): EventApprovalStepValidatorsMutationResponse
  updateEventApprovalStepValidatorsByPk(_inc: EventApprovalStepValidatorsIncInput, _set: EventApprovalStepValidatorsSetInput, pkColumns: EventApprovalStepValidatorsPkColumnsInput!): EventApprovalStepValidators
  updateEventApprovalStepValidatorsMany(updates: [EventApprovalStepValidatorsUpdates!]!): [EventApprovalStepValidatorsMutationResponse]
  updateEventAttendance(_inc: EventAttendanceIncInput, _set: EventAttendanceSetInput, where: EventAttendanceBoolExp!): EventAttendanceMutationResponse
  updateEventAttendanceByPk(_inc: EventAttendanceIncInput, _set: EventAttendanceSetInput, pkColumns: EventAttendancePkColumnsInput!): EventAttendance
  updateEventAttendanceMany(updates: [EventAttendanceUpdates!]!): [EventAttendanceMutationResponse]
  updateEventByPk(_append: EventAppendInput, _deleteAtPath: EventDeleteAtPathInput, _deleteElem: EventDeleteElemInput, _deleteKey: EventDeleteKeyInput, _inc: EventIncInput, _prepend: EventPrependInput, _set: EventSetInput, pkColumns: EventPkColumnsInput!): Event
  updateEventChangeRole(_inc: EventChangeRoleIncInput, _set: EventChangeRoleSetInput, where: EventChangeRoleBoolExp!): EventChangeRoleMutationResponse
  updateEventChangeRoleByPk(_inc: EventChangeRoleIncInput, _set: EventChangeRoleSetInput, pkColumns: EventChangeRolePkColumnsInput!): EventChangeRole
  updateEventChangeRoleMany(updates: [EventChangeRoleUpdates!]!): [EventChangeRoleMutationResponse]
  updateEventJoin(_inc: EventJoinIncInput, _set: EventJoinSetInput, where: EventJoinBoolExp!): EventJoinMutationResponse
  updateEventJoinByPk(_inc: EventJoinIncInput, _set: EventJoinSetInput, pkColumns: EventJoinPkColumnsInput!): EventJoin
  updateEventJoinMany(updates: [EventJoinUpdates!]!): [EventJoinMutationResponse]
  updateEventMany(updates: [EventUpdates!]!): [EventMutationResponse]
  updateEventRole(_inc: EventRoleIncInput, _set: EventRoleSetInput, where: EventRoleBoolExp!): EventRoleMutationResponse
  updateEventRoleByPk(_inc: EventRoleIncInput, _set: EventRoleSetInput, pkColumns: EventRolePkColumnsInput!): EventRole
  updateEventRoleMany(updates: [EventRoleUpdates!]!): [EventRoleMutationResponse]
  updateEventTags(_inc: EventTagsIncInput, _set: EventTagsSetInput, where: EventTagsBoolExp!): EventTagsMutationResponse
  updateEventTagsByPk(_inc: EventTagsIncInput, _set: EventTagsSetInput, pkColumns: EventTagsPkColumnsInput!): EventTags
  updateEventTagsMany(updates: [EventTagsUpdates!]!): [EventTagsMutationResponse]
  updateExpense(_inc: ExpenseIncInput, _set: ExpenseSetInput, where: ExpenseBoolExp!): ExpenseMutationResponse
  updateExpenseByPk(_inc: ExpenseIncInput, _set: ExpenseSetInput, pkColumns: ExpensePkColumnsInput!): Expense
  updateExpenseMany(updates: [ExpenseUpdates!]!): [ExpenseMutationResponse]
  updateFavorite(_inc: FavoriteIncInput, _set: FavoriteSetInput, where: FavoriteBoolExp!): FavoriteMutationResponse
  updateFavoriteByPk(_inc: FavoriteIncInput, _set: FavoriteSetInput, pkColumns: FavoritePkColumnsInput!): Favorite
  updateFavoriteMany(updates: [FavoriteUpdates!]!): [FavoriteMutationResponse]
  updateFileUpload(_inc: FileUploadIncInput, _set: FileUploadSetInput, where: FileUploadBoolExp!): FileUploadMutationResponse
  updateFileUploadByPk(_inc: FileUploadIncInput, _set: FileUploadSetInput, pkColumns: FileUploadPkColumnsInput!): FileUpload
  updateFileUploadMany(updates: [FileUploadUpdates!]!): [FileUploadMutationResponse]
  updateFollow(_inc: FollowIncInput, _set: FollowSetInput, where: FollowBoolExp!): FollowMutationResponse
  updateFollowByPk(_inc: FollowIncInput, _set: FollowSetInput, pkColumns: FollowPkColumnsInput!): Follow
  updateFollowMany(updates: [FollowUpdates!]!): [FollowMutationResponse]
  updateForm(_append: FormAppendInput, _deleteAtPath: FormDeleteAtPathInput, _deleteElem: FormDeleteElemInput, _deleteKey: FormDeleteKeyInput, _inc: FormIncInput, _prepend: FormPrependInput, _set: FormSetInput, where: FormBoolExp!): FormMutationResponse
  updateFormByPk(_append: FormAppendInput, _deleteAtPath: FormDeleteAtPathInput, _deleteElem: FormDeleteElemInput, _deleteKey: FormDeleteKeyInput, _inc: FormIncInput, _prepend: FormPrependInput, _set: FormSetInput, pkColumns: FormPkColumnsInput!): Form
  updateFormEdit(_append: FormEditAppendInput, _deleteAtPath: FormEditDeleteAtPathInput, _deleteElem: FormEditDeleteElemInput, _deleteKey: FormEditDeleteKeyInput, _inc: FormEditIncInput, _prepend: FormEditPrependInput, _set: FormEditSetInput, where: FormEditBoolExp!): FormEditMutationResponse
  updateFormEditByPk(_append: FormEditAppendInput, _deleteAtPath: FormEditDeleteAtPathInput, _deleteElem: FormEditDeleteElemInput, _deleteKey: FormEditDeleteKeyInput, _inc: FormEditIncInput, _prepend: FormEditPrependInput, _set: FormEditSetInput, pkColumns: FormEditPkColumnsInput!): FormEdit
  updateFormEditMany(updates: [FormEditUpdates!]!): [FormEditMutationResponse]
  updateFormMany(updates: [FormUpdates!]!): [FormMutationResponse]
  updateFormSubmission(_append: FormSubmissionAppendInput, _deleteAtPath: FormSubmissionDeleteAtPathInput, _deleteElem: FormSubmissionDeleteElemInput, _deleteKey: FormSubmissionDeleteKeyInput, _inc: FormSubmissionIncInput, _prepend: FormSubmissionPrependInput, _set: FormSubmissionSetInput, where: FormSubmissionBoolExp!): FormSubmissionMutationResponse
  updateFormSubmissionByPk(_append: FormSubmissionAppendInput, _deleteAtPath: FormSubmissionDeleteAtPathInput, _deleteElem: FormSubmissionDeleteElemInput, _deleteKey: FormSubmissionDeleteKeyInput, _inc: FormSubmissionIncInput, _prepend: FormSubmissionPrependInput, _set: FormSubmissionSetInput, pkColumns: FormSubmissionPkColumnsInput!): FormSubmission
  updateFormSubmissionEdit(_append: FormSubmissionEditAppendInput, _deleteAtPath: FormSubmissionEditDeleteAtPathInput, _deleteElem: FormSubmissionEditDeleteElemInput, _deleteKey: FormSubmissionEditDeleteKeyInput, _inc: FormSubmissionEditIncInput, _prepend: FormSubmissionEditPrependInput, _set: FormSubmissionEditSetInput, where: FormSubmissionEditBoolExp!): FormSubmissionEditMutationResponse
  updateFormSubmissionEditByPk(_append: FormSubmissionEditAppendInput, _deleteAtPath: FormSubmissionEditDeleteAtPathInput, _deleteElem: FormSubmissionEditDeleteElemInput, _deleteKey: FormSubmissionEditDeleteKeyInput, _inc: FormSubmissionEditIncInput, _prepend: FormSubmissionEditPrependInput, _set: FormSubmissionEditSetInput, pkColumns: FormSubmissionEditPkColumnsInput!): FormSubmissionEdit
  updateFormSubmissionEditMany(updates: [FormSubmissionEditUpdates!]!): [FormSubmissionEditMutationResponse]
  updateFormSubmissionMany(updates: [FormSubmissionUpdates!]!): [FormSubmissionMutationResponse]
  updateIndividual(_inc: IndividualIncInput, _set: IndividualSetInput, where: IndividualBoolExp!): IndividualMutationResponse
  updateIndividualByPk(_inc: IndividualIncInput, _set: IndividualSetInput, pkColumns: IndividualPkColumnsInput!): Individual
  updateIndividualMany(updates: [IndividualUpdates!]!): [IndividualMutationResponse]
  updateIssue(_inc: IssueIncInput, _set: IssueSetInput, where: IssueBoolExp!): IssueMutationResponse
  updateIssueByPk(_inc: IssueIncInput, _set: IssueSetInput, pkColumns: IssuePkColumnsInput!): Issue
  updateIssueMany(updates: [IssueUpdates!]!): [IssueMutationResponse]
  updatePole(_inc: PoleIncInput, _set: PoleSetInput, where: PoleBoolExp!): PoleMutationResponse
  updatePoleByPk(_inc: PoleIncInput, _set: PoleSetInput, pkColumns: PolePkColumnsInput!): Pole
  updatePoleMany(updates: [PoleUpdates!]!): [PoleMutationResponse]
  updateProject(_inc: ProjectIncInput, _set: ProjectSetInput, where: ProjectBoolExp!): ProjectMutationResponse
  updateProjectByPk(_inc: ProjectIncInput, _set: ProjectSetInput, pkColumns: ProjectPkColumnsInput!): Project
  updateProjectMany(updates: [ProjectUpdates!]!): [ProjectMutationResponse]
  updateProjectRole(_inc: ProjectRoleIncInput, _set: ProjectRoleSetInput, where: ProjectRoleBoolExp!): ProjectRoleMutationResponse
  updateProjectRoleByPk(_inc: ProjectRoleIncInput, _set: ProjectRoleSetInput, pkColumns: ProjectRolePkColumnsInput!): ProjectRole
  updateProjectRoleMany(updates: [ProjectRoleUpdates!]!): [ProjectRoleMutationResponse]
  updateProjectSupervisors(_inc: ProjectSupervisorsIncInput, _set: ProjectSupervisorsSetInput, where: ProjectSupervisorsBoolExp!): ProjectSupervisorsMutationResponse
  updateProjectSupervisorsByPk(_inc: ProjectSupervisorsIncInput, _set: ProjectSupervisorsSetInput, pkColumns: ProjectSupervisorsPkColumnsInput!): ProjectSupervisors
  updateProjectSupervisorsMany(updates: [ProjectSupervisorsUpdates!]!): [ProjectSupervisorsMutationResponse]
  updateProjectTags(_inc: ProjectTagsIncInput, _set: ProjectTagsSetInput, where: ProjectTagsBoolExp!): ProjectTagsMutationResponse
  updateProjectTagsByPk(_inc: ProjectTagsIncInput, _set: ProjectTagsSetInput, pkColumns: ProjectTagsPkColumnsInput!): ProjectTags
  updateProjectTagsMany(updates: [ProjectTagsUpdates!]!): [ProjectTagsMutationResponse]
  updateReaction(_inc: ReactionIncInput, _set: ReactionSetInput, where: ReactionBoolExp!): ReactionMutationResponse
  updateReactionByPk(_inc: ReactionIncInput, _set: ReactionSetInput, pkColumns: ReactionPkColumnsInput!): Reaction
  updateReactionMany(updates: [ReactionUpdates!]!): [ReactionMutationResponse]
  updateReport(_inc: ReportIncInput, _set: ReportSetInput, where: ReportBoolExp!): ReportMutationResponse
  updateReportByPk(_inc: ReportIncInput, _set: ReportSetInput, pkColumns: ReportPkColumnsInput!): Report
  updateReportMany(updates: [ReportUpdates!]!): [ReportMutationResponse]
  updateRole(_inc: RoleIncInput, _set: RoleSetInput, where: RoleBoolExp!): RoleMutationResponse
  updateRoleByPk(_inc: RoleIncInput, _set: RoleSetInput, pkColumns: RolePkColumnsInput!): Role
  updateRoleMany(updates: [RoleUpdates!]!): [RoleMutationResponse]
  updateSession(_append: SessionAppendInput, _deleteAtPath: SessionDeleteAtPathInput, _deleteElem: SessionDeleteElemInput, _deleteKey: SessionDeleteKeyInput, _inc: SessionIncInput, _prepend: SessionPrependInput, _set: SessionSetInput, where: SessionBoolExp!): SessionMutationResponse
  updateSessionByPk(_append: SessionAppendInput, _deleteAtPath: SessionDeleteAtPathInput, _deleteElem: SessionDeleteElemInput, _deleteKey: SessionDeleteKeyInput, _inc: SessionIncInput, _prepend: SessionPrependInput, _set: SessionSetInput, pkColumns: SessionPkColumnsInput!): Session
  updateSessionMany(updates: [SessionUpdates!]!): [SessionMutationResponse]
  updateShortcut(_inc: ShortcutIncInput, _set: ShortcutSetInput, where: ShortcutBoolExp!): ShortcutMutationResponse
  updateShortcutByPk(_inc: ShortcutIncInput, _set: ShortcutSetInput, pkColumns: ShortcutPkColumnsInput!): Shortcut
  updateShortcutMany(updates: [ShortcutUpdates!]!): [ShortcutMutationResponse]
  updateSocial(_inc: SocialIncInput, _set: SocialSetInput, where: SocialBoolExp!): SocialMutationResponse
  updateSocialByPk(_inc: SocialIncInput, _set: SocialSetInput, pkColumns: SocialPkColumnsInput!): Social
  updateSocialMany(updates: [SocialUpdates!]!): [SocialMutationResponse]
  updateSubject(_inc: SubjectIncInput, _set: SubjectSetInput, where: SubjectBoolExp!): SubjectMutationResponse
  updateSubjectByPk(_inc: SubjectIncInput, _set: SubjectSetInput, pkColumns: SubjectPkColumnsInput!): Subject
  updateSubjectClassGroups(_inc: SubjectClassGroupsIncInput, _set: SubjectClassGroupsSetInput, where: SubjectClassGroupsBoolExp!): SubjectClassGroupsMutationResponse
  updateSubjectClassGroupsByPk(_inc: SubjectClassGroupsIncInput, _set: SubjectClassGroupsSetInput, pkColumns: SubjectClassGroupsPkColumnsInput!): SubjectClassGroups
  updateSubjectClassGroupsMany(updates: [SubjectClassGroupsUpdates!]!): [SubjectClassGroupsMutationResponse]
  updateSubjectMany(updates: [SubjectUpdates!]!): [SubjectMutationResponse]
  updateTag(_inc: TagIncInput, _set: TagSetInput, where: TagBoolExp!): TagMutationResponse
  updateTagByPk(_inc: TagIncInput, _set: TagSetInput, pkColumns: TagPkColumnsInput!): Tag
  updateTagMany(updates: [TagUpdates!]!): [TagMutationResponse]
  updateTeam(_inc: TeamIncInput, _set: TeamSetInput, where: TeamBoolExp!): TeamMutationResponse
  updateTeamByPk(_inc: TeamIncInput, _set: TeamSetInput, pkColumns: TeamPkColumnsInput!): Team
  updateTeamEvents(_inc: TeamEventsIncInput, _set: TeamEventsSetInput, where: TeamEventsBoolExp!): TeamEventsMutationResponse
  updateTeamEventsByPk(_inc: TeamEventsIncInput, _set: TeamEventsSetInput, pkColumns: TeamEventsPkColumnsInput!): TeamEvents
  updateTeamEventsMany(updates: [TeamEventsUpdates!]!): [TeamEventsMutationResponse]
  updateTeamFinance(_inc: TeamFinanceIncInput, _set: TeamFinanceSetInput, where: TeamFinanceBoolExp!): TeamFinanceMutationResponse
  updateTeamFinanceByPk(_inc: TeamFinanceIncInput, _set: TeamFinanceSetInput, pkColumns: TeamFinancePkColumnsInput!): TeamFinance
  updateTeamFinanceMany(updates: [TeamFinanceUpdates!]!): [TeamFinanceMutationResponse]
  updateTeamJoin(_inc: TeamJoinIncInput, _set: TeamJoinSetInput, where: TeamJoinBoolExp!): TeamJoinMutationResponse
  updateTeamJoinByPk(_inc: TeamJoinIncInput, _set: TeamJoinSetInput, pkColumns: TeamJoinPkColumnsInput!): TeamJoin
  updateTeamJoinMany(updates: [TeamJoinUpdates!]!): [TeamJoinMutationResponse]
  updateTeamMany(updates: [TeamUpdates!]!): [TeamMutationResponse]
  updateTeamMember(_inc: TeamMemberIncInput, _set: TeamMemberSetInput, where: TeamMemberBoolExp!): TeamMemberMutationResponse
  updateTeamMemberByPk(_inc: TeamMemberIncInput, _set: TeamMemberSetInput, pkColumns: TeamMemberPkColumnsInput!): TeamMember
  updateTeamMemberMany(updates: [TeamMemberUpdates!]!): [TeamMemberMutationResponse]
  updateTeamMemberRoles(_inc: TeamMemberRolesIncInput, _set: TeamMemberRolesSetInput, where: TeamMemberRolesBoolExp!): TeamMemberRolesMutationResponse
  updateTeamMemberRolesByPk(_inc: TeamMemberRolesIncInput, _set: TeamMemberRolesSetInput, pkColumns: TeamMemberRolesPkColumnsInput!): TeamMemberRoles
  updateTeamMemberRolesMany(updates: [TeamMemberRolesUpdates!]!): [TeamMemberRolesMutationResponse]
  updateTeamMetric(_inc: TeamMetricIncInput, _set: TeamMetricSetInput, where: TeamMetricBoolExp!): TeamMetricMutationResponse
  updateTeamMetricByPk(_inc: TeamMetricIncInput, _set: TeamMetricSetInput, pkColumns: TeamMetricPkColumnsInput!): TeamMetric
  updateTeamMetricMany(updates: [TeamMetricUpdates!]!): [TeamMetricMutationResponse]
  updateTenant(_inc: TenantIncInput, _set: TenantSetInput, where: TenantBoolExp!): TenantMutationResponse
  updateTenantByPk(_inc: TenantIncInput, _set: TenantSetInput, pkColumns: TenantPkColumnsInput!): Tenant
  updateTenantMany(updates: [TenantUpdates!]!): [TenantMutationResponse]
  updateUserInfo(_inc: UserInfoIncInput, _set: UserInfoSetInput, where: UserInfoBoolExp!): UserInfoMutationResponse
  updateUserInfoByPk(_inc: UserInfoIncInput, _set: UserInfoSetInput, pkColumns: UserInfoPkColumnsInput!): UserInfo
  updateUserInfoMany(updates: [UserInfoUpdates!]!): [UserInfoMutationResponse]
  updateValidation(_inc: ValidationIncInput, _set: ValidationSetInput, where: ValidationBoolExp!): ValidationMutationResponse
  updateValidationByPk(_inc: ValidationIncInput, _set: ValidationSetInput, pkColumns: ValidationPkColumnsInput!): Validation
  updateValidationMany(updates: [ValidationUpdates!]!): [ValidationMutationResponse]
  updateVote(_inc: VoteIncInput, _set: VoteSetInput, where: VoteBoolExp!): VoteMutationResponse
  updateVoteByPk(_inc: VoteIncInput, _set: VoteSetInput, pkColumns: VotePkColumnsInput!): Vote
  updateVoteMany(updates: [VoteUpdates!]!): [VoteMutationResponse]
  singleUpload(file: Upload!, bucket: String): FileUpload
  login(dto: LoginInput!): UserInfo
  logout: Boolean!
}

enum OrderBy {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

type Pole {
  category: String!
  changeRoles(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRolesAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  required: Boolean!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type PoleAggregate {
  aggregate: PoleAggregateFields
  nodes: [Pole!]!
}

input PoleAggregateBoolExp {
  bool_and: poleAggregateBoolExpBool_and
  bool_or: poleAggregateBoolExpBool_or
  count: poleAggregateBoolExpCount
}

input poleAggregateBoolExpBool_and {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpBool_or {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpCount {
  arguments: [PoleSelectColumn!]
  distinct: Boolean
  filter: PoleBoolExp
  predicate: IntComparisonExp!
}

type PoleAggregateFields {
  avg: PoleAvgFields
  count(columns: [PoleSelectColumn!], distinct: Boolean): Int!
  max: PoleMaxFields
  min: PoleMinFields
  stddev: PoleStddevFields
  stddevPop: PoleStddevPopFields
  stddevSamp: PoleStddevSampFields
  sum: PoleSumFields
  varPop: PoleVarPopFields
  varSamp: PoleVarSampFields
  variance: PoleVarianceFields
}

input PoleAggregateOrderBy {
  avg: PoleAvgOrderBy
  count: OrderBy
  max: PoleMaxOrderBy
  min: PoleMinOrderBy
  stddev: PoleStddevOrderBy
  stddevPop: PoleStddevPopOrderBy
  stddevSamp: PoleStddevSampOrderBy
  sum: PoleSumOrderBy
  varPop: PoleVarPopOrderBy
  varSamp: PoleVarSampOrderBy
  variance: PoleVarianceOrderBy
}

input PoleArrRelInsertInput {
  data: [PoleInsertInput!]!
  onConflict: PoleOnConflict
}

type PoleAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input PoleBoolExp {
  _and: [PoleBoolExp!]
  _not: PoleBoolExp
  _or: [PoleBoolExp!]
  category: StringComparisonExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  required: BooleanComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum PoleConstraint {
  pole_pkey
}

input PoleIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input PoleInsertInput {
  category: String
  changeRoles: ChangeRoleArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  required: Boolean
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type PoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

input PoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

input PoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleMutationResponse {
  affectedRows: Int!
  returning: [Pole!]!
}

input PoleObjRelInsertInput {
  data: PoleInsertInput!
  onConflict: PoleOnConflict
}

input PoleOnConflict {
  constraint: PoleConstraint!
  updateColumns: [PoleUpdateColumn!]! = []
  where: PoleBoolExp
}

input PoleOrderBy {
  category: OrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  required: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input PolePkColumnsInput {
  id: bigint!
}

enum PoleSelectColumn {
  category
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  required
  teamId
  tenantId
}

enum PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns {
  required
}

enum PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns {
  required
}

input PoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  required: Boolean
  teamId: bigint
  tenantId: bigint
}

type PoleStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input PoleStreamCursorInput {
  initialValue: PoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input PoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  required: Boolean
  teamId: bigint
  tenantId: bigint
}

type PoleSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input PoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum PoleUpdateColumn {
  category
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  required
  teamId
  tenantId
}

input PoleUpdates {
  _inc: PoleIncInput
  _set: PoleSetInput
  where: PoleBoolExp!
}

type PoleVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Project {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actualBudget: Float!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expectedBudget: Float!
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint
  individual: Individual
  isPrivate: Boolean!
  name: String!
  projectRoles(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): [ProjectRole!]!
  projectRolesAggregate(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): ProjectRoleAggregate!
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  regularEventInterval: String
  slug: String!
  team: Team!
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type ProjectAggregate {
  aggregate: ProjectAggregateFields
  nodes: [Project!]!
}

input ProjectAggregateBoolExp {
  bool_and: projectAggregateBoolExpBool_and
  bool_or: projectAggregateBoolExpBool_or
  count: projectAggregateBoolExpCount
}

input projectAggregateBoolExpBool_and {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpBool_or {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpCount {
  arguments: [ProjectSelectColumn!]
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: IntComparisonExp!
}

type ProjectAggregateFields {
  avg: ProjectAvgFields
  count(columns: [ProjectSelectColumn!], distinct: Boolean): Int!
  max: ProjectMaxFields
  min: ProjectMinFields
  stddev: ProjectStddevFields
  stddevPop: ProjectStddevPopFields
  stddevSamp: ProjectStddevSampFields
  sum: ProjectSumFields
  varPop: ProjectVarPopFields
  varSamp: ProjectVarSampFields
  variance: ProjectVarianceFields
}

input ProjectAggregateOrderBy {
  avg: ProjectAvgOrderBy
  count: OrderBy
  max: ProjectMaxOrderBy
  min: ProjectMinOrderBy
  stddev: ProjectStddevOrderBy
  stddevPop: ProjectStddevPopOrderBy
  stddevSamp: ProjectStddevSampOrderBy
  sum: ProjectSumOrderBy
  varPop: ProjectVarPopOrderBy
  varSamp: ProjectVarSampOrderBy
  variance: ProjectVarianceOrderBy
}

input ProjectArrRelInsertInput {
  data: [ProjectInsertInput!]!
  onConflict: ProjectOnConflict
}

type ProjectAvgFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

input ProjectAvgOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input ProjectBoolExp {
  _and: [ProjectBoolExp!]
  _not: ProjectBoolExp
  _or: [ProjectBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actualBudget: FloatComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expectedBudget: FloatComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  isPrivate: BooleanComparisonExp
  name: StringComparisonExp
  projectRoles: ProjectRoleBoolExp
  projectRolesAggregate: ProjectRoleAggregateBoolExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  regularEventInterval: StringComparisonExp
  slug: StringComparisonExp
  team: TeamBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ProjectConstraint {
  project_pkey
}

input ProjectIncInput {
  actualBudget: Float
  createdById: bigint
  expectedBudget: Float
  id: bigint
  imageId: bigint
  teamId: bigint
  tenantId: bigint
}

input ProjectInsertInput {
  actions: ActionArrRelInsertInput
  actualBudget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  events: EventArrRelInsertInput
  expectedBudget: Float
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  isPrivate: Boolean
  name: String
  projectRoles: ProjectRoleArrRelInsertInput
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  projectTags: ProjectTagsArrRelInsertInput
  regularEventInterval: String
  slug: String
  team: TeamObjRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ProjectMaxFields {
  actualBudget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

input ProjectMaxOrderBy {
  actualBudget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expectedBudget: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectMinFields {
  actualBudget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

input ProjectMinOrderBy {
  actualBudget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expectedBudget: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectMutationResponse {
  affectedRows: Int!
  returning: [Project!]!
}

input ProjectObjRelInsertInput {
  data: ProjectInsertInput!
  onConflict: ProjectOnConflict
}

input ProjectOnConflict {
  constraint: ProjectConstraint!
  updateColumns: [ProjectUpdateColumn!]! = []
  where: ProjectBoolExp
}

input ProjectOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actualBudget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expectedBudget: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  isPrivate: OrderBy
  name: OrderBy
  projectRolesAggregate: ProjectRoleAggregateOrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  team: TeamOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ProjectPkColumnsInput {
  id: bigint!
}

type ProjectRole {
  autoAccept: Boolean!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventRoles(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): [EventRole!]!
  eventRolesAggregate(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): EventRoleAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  project: Project!
  projectId: bigint!
  required: Boolean!
  rewardMaximum: smallint!
  rewardMinimum: smallint!
  tenant: Tenant!
  tenantId: bigint!
}

type ProjectRoleAggregate {
  aggregate: ProjectRoleAggregateFields
  nodes: [ProjectRole!]!
}

input ProjectRoleAggregateBoolExp {
  bool_and: projectRoleAggregateBoolExpBool_and
  bool_or: projectRoleAggregateBoolExpBool_or
  count: projectRoleAggregateBoolExpCount
}

input projectRoleAggregateBoolExpBool_and {
  arguments: ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProjectRoleBoolExp
  predicate: BooleanComparisonExp!
}

input projectRoleAggregateBoolExpBool_or {
  arguments: ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProjectRoleBoolExp
  predicate: BooleanComparisonExp!
}

input projectRoleAggregateBoolExpCount {
  arguments: [ProjectRoleSelectColumn!]
  distinct: Boolean
  filter: ProjectRoleBoolExp
  predicate: IntComparisonExp!
}

type ProjectRoleAggregateFields {
  avg: ProjectRoleAvgFields
  count(columns: [ProjectRoleSelectColumn!], distinct: Boolean): Int!
  max: ProjectRoleMaxFields
  min: ProjectRoleMinFields
  stddev: ProjectRoleStddevFields
  stddevPop: ProjectRoleStddevPopFields
  stddevSamp: ProjectRoleStddevSampFields
  sum: ProjectRoleSumFields
  varPop: ProjectRoleVarPopFields
  varSamp: ProjectRoleVarSampFields
  variance: ProjectRoleVarianceFields
}

input ProjectRoleAggregateOrderBy {
  avg: ProjectRoleAvgOrderBy
  count: OrderBy
  max: ProjectRoleMaxOrderBy
  min: ProjectRoleMinOrderBy
  stddev: ProjectRoleStddevOrderBy
  stddevPop: ProjectRoleStddevPopOrderBy
  stddevSamp: ProjectRoleStddevSampOrderBy
  sum: ProjectRoleSumOrderBy
  varPop: ProjectRoleVarPopOrderBy
  varSamp: ProjectRoleVarSampOrderBy
  variance: ProjectRoleVarianceOrderBy
}

input ProjectRoleArrRelInsertInput {
  data: [ProjectRoleInsertInput!]!
  onConflict: ProjectRoleOnConflict
}

type ProjectRoleAvgFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

input ProjectRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

input ProjectRoleBoolExp {
  _and: [ProjectRoleBoolExp!]
  _not: ProjectRoleBoolExp
  _or: [ProjectRoleBoolExp!]
  autoAccept: BooleanComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  required: BooleanComparisonExp
  rewardMaximum: SmallintComparisonExp
  rewardMinimum: SmallintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ProjectRoleConstraint {
  project_role_pkey
}

input ProjectRoleIncInput {
  createdById: bigint
  id: bigint
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

input ProjectRoleInsertInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventRoles: EventRoleArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ProjectRoleMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

input ProjectRoleMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

type ProjectRoleMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

input ProjectRoleMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

type ProjectRoleMutationResponse {
  affectedRows: Int!
  returning: [ProjectRole!]!
}

input ProjectRoleObjRelInsertInput {
  data: ProjectRoleInsertInput!
  onConflict: ProjectRoleOnConflict
}

input ProjectRoleOnConflict {
  constraint: ProjectRoleConstraint!
  updateColumns: [ProjectRoleUpdateColumn!]! = []
  where: ProjectRoleBoolExp
}

input ProjectRoleOrderBy {
  autoAccept: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  required: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ProjectRolePkColumnsInput {
  id: bigint!
}

enum ProjectRoleSelectColumn {
  autoAccept
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  projectId
  required
  rewardMaximum
  rewardMinimum
  tenantId
}

enum ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_andArgumentsColumns {
  autoAccept
  required
}

enum ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_orArgumentsColumns {
  autoAccept
  required
}

input ProjectRoleSetInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

type ProjectRoleStddevFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

input ProjectRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

type ProjectRoleStddevPopFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

input ProjectRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

type ProjectRoleStddevSampFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

input ProjectRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

input ProjectRoleStreamCursorInput {
  initialValue: ProjectRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectRoleStreamCursorValueInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

type ProjectRoleSumFields {
  createdById: bigint
  id: bigint
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

input ProjectRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

enum ProjectRoleUpdateColumn {
  autoAccept
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  projectId
  required
  rewardMaximum
  rewardMinimum
  tenantId
}

input ProjectRoleUpdates {
  _inc: ProjectRoleIncInput
  _set: ProjectRoleSetInput
  where: ProjectRoleBoolExp!
}

type ProjectRoleVarianceFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

input ProjectRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

type ProjectRoleVarPopFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

input ProjectRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

type ProjectRoleVarSampFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

input ProjectRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

enum ProjectSelectColumn {
  actualBudget
  color
  createdAt
  createdById
  deletedAt
  description
  expectedBudget
  hiddenAt
  id
  imageId
  isPrivate
  name
  regularEventInterval
  slug
  teamId
  tenantId
}

enum ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns {
  isPrivate
}

enum ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns {
  isPrivate
}

input ProjectSetInput {
  actualBudget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

type ProjectStddevFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

input ProjectStddevOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectStddevPopFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

input ProjectStddevPopOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectStddevSampFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

input ProjectStddevSampOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input ProjectStreamCursorInput {
  initialValue: ProjectStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectStreamCursorValueInput {
  actualBudget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

type ProjectSumFields {
  actualBudget: Float
  createdById: bigint
  expectedBudget: Float
  id: bigint
  imageId: bigint
  teamId: bigint
  tenantId: bigint
}

input ProjectSumOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectSupervisors {
  project: Project!
  projectId: bigint!
  teamMember: TeamMember!
  teamMemberId: bigint!
}

type ProjectSupervisorsAggregate {
  aggregate: ProjectSupervisorsAggregateFields
  nodes: [ProjectSupervisors!]!
}

input ProjectSupervisorsAggregateBoolExp {
  count: projectSupervisorsAggregateBoolExpCount
}

input projectSupervisorsAggregateBoolExpCount {
  arguments: [ProjectSupervisorsSelectColumn!]
  distinct: Boolean
  filter: ProjectSupervisorsBoolExp
  predicate: IntComparisonExp!
}

type ProjectSupervisorsAggregateFields {
  avg: ProjectSupervisorsAvgFields
  count(columns: [ProjectSupervisorsSelectColumn!], distinct: Boolean): Int!
  max: ProjectSupervisorsMaxFields
  min: ProjectSupervisorsMinFields
  stddev: ProjectSupervisorsStddevFields
  stddevPop: ProjectSupervisorsStddevPopFields
  stddevSamp: ProjectSupervisorsStddevSampFields
  sum: ProjectSupervisorsSumFields
  varPop: ProjectSupervisorsVarPopFields
  varSamp: ProjectSupervisorsVarSampFields
  variance: ProjectSupervisorsVarianceFields
}

input ProjectSupervisorsAggregateOrderBy {
  avg: ProjectSupervisorsAvgOrderBy
  count: OrderBy
  max: ProjectSupervisorsMaxOrderBy
  min: ProjectSupervisorsMinOrderBy
  stddev: ProjectSupervisorsStddevOrderBy
  stddevPop: ProjectSupervisorsStddevPopOrderBy
  stddevSamp: ProjectSupervisorsStddevSampOrderBy
  sum: ProjectSupervisorsSumOrderBy
  varPop: ProjectSupervisorsVarPopOrderBy
  varSamp: ProjectSupervisorsVarSampOrderBy
  variance: ProjectSupervisorsVarianceOrderBy
}

input ProjectSupervisorsArrRelInsertInput {
  data: [ProjectSupervisorsInsertInput!]!
  onConflict: ProjectSupervisorsOnConflict
}

type ProjectSupervisorsAvgFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsAvgOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsBoolExp {
  _and: [ProjectSupervisorsBoolExp!]
  _not: ProjectSupervisorsBoolExp
  _or: [ProjectSupervisorsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

enum ProjectSupervisorsConstraint {
  project_supervisors_pkey
}

input ProjectSupervisorsIncInput {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

type ProjectSupervisorsMaxFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsMaxOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsMinFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsMinOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsMutationResponse {
  affectedRows: Int!
  returning: [ProjectSupervisors!]!
}

input ProjectSupervisorsOnConflict {
  constraint: ProjectSupervisorsConstraint!
  updateColumns: [ProjectSupervisorsUpdateColumn!]! = []
  where: ProjectSupervisorsBoolExp
}

input ProjectSupervisorsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsPkColumnsInput {
  projectId: bigint!
  teamMemberId: bigint!
}

enum ProjectSupervisorsSelectColumn {
  projectId
  teamMemberId
}

input ProjectSupervisorsSetInput {
  projectId: bigint
  teamMemberId: bigint
}

type ProjectSupervisorsStddevFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsStddevPopFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsStddevSampFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsStreamCursorInput {
  initialValue: ProjectSupervisorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectSupervisorsStreamCursorValueInput {
  projectId: bigint
  teamMemberId: bigint
}

type ProjectSupervisorsSumFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsSumOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

enum ProjectSupervisorsUpdateColumn {
  projectId
  teamMemberId
}

input ProjectSupervisorsUpdates {
  _inc: ProjectSupervisorsIncInput
  _set: ProjectSupervisorsSetInput
  where: ProjectSupervisorsBoolExp!
}

type ProjectSupervisorsVarianceFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarianceOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsVarPopFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsVarSampFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectTags {
  project: Project!
  projectId: bigint!
  tag: Tag!
  tagId: bigint!
}

type ProjectTagsAggregate {
  aggregate: ProjectTagsAggregateFields
  nodes: [ProjectTags!]!
}

input ProjectTagsAggregateBoolExp {
  count: projectTagsAggregateBoolExpCount
}

input projectTagsAggregateBoolExpCount {
  arguments: [ProjectTagsSelectColumn!]
  distinct: Boolean
  filter: ProjectTagsBoolExp
  predicate: IntComparisonExp!
}

type ProjectTagsAggregateFields {
  avg: ProjectTagsAvgFields
  count(columns: [ProjectTagsSelectColumn!], distinct: Boolean): Int!
  max: ProjectTagsMaxFields
  min: ProjectTagsMinFields
  stddev: ProjectTagsStddevFields
  stddevPop: ProjectTagsStddevPopFields
  stddevSamp: ProjectTagsStddevSampFields
  sum: ProjectTagsSumFields
  varPop: ProjectTagsVarPopFields
  varSamp: ProjectTagsVarSampFields
  variance: ProjectTagsVarianceFields
}

input ProjectTagsAggregateOrderBy {
  avg: ProjectTagsAvgOrderBy
  count: OrderBy
  max: ProjectTagsMaxOrderBy
  min: ProjectTagsMinOrderBy
  stddev: ProjectTagsStddevOrderBy
  stddevPop: ProjectTagsStddevPopOrderBy
  stddevSamp: ProjectTagsStddevSampOrderBy
  sum: ProjectTagsSumOrderBy
  varPop: ProjectTagsVarPopOrderBy
  varSamp: ProjectTagsVarSampOrderBy
  variance: ProjectTagsVarianceOrderBy
}

input ProjectTagsArrRelInsertInput {
  data: [ProjectTagsInsertInput!]!
  onConflict: ProjectTagsOnConflict
}

type ProjectTagsAvgFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsAvgOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

input ProjectTagsBoolExp {
  _and: [ProjectTagsBoolExp!]
  _not: ProjectTagsBoolExp
  _or: [ProjectTagsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum ProjectTagsConstraint {
  project_tags_pkey
}

input ProjectTagsIncInput {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type ProjectTagsMaxFields {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsMaxOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsMinFields {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsMinOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsMutationResponse {
  affectedRows: Int!
  returning: [ProjectTags!]!
}

input ProjectTagsOnConflict {
  constraint: ProjectTagsConstraint!
  updateColumns: [ProjectTagsUpdateColumn!]! = []
  where: ProjectTagsBoolExp
}

input ProjectTagsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input ProjectTagsPkColumnsInput {
  projectId: bigint!
  tagId: bigint!
}

enum ProjectTagsSelectColumn {
  projectId
  tagId
}

input ProjectTagsSetInput {
  projectId: bigint
  tagId: bigint
}

type ProjectTagsStddevFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsStddevOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsStddevPopFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsStddevPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsStddevSampFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsStddevSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

input ProjectTagsStreamCursorInput {
  initialValue: ProjectTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectTagsStreamCursorValueInput {
  projectId: bigint
  tagId: bigint
}

type ProjectTagsSumFields {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsSumOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

enum ProjectTagsUpdateColumn {
  projectId
  tagId
}

input ProjectTagsUpdates {
  _inc: ProjectTagsIncInput
  _set: ProjectTagsSetInput
  where: ProjectTagsBoolExp!
}

type ProjectTagsVarianceFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsVarianceOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsVarPopFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsVarPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsVarSampFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsVarSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

enum ProjectUpdateColumn {
  actualBudget
  color
  createdAt
  createdById
  deletedAt
  description
  expectedBudget
  hiddenAt
  id
  imageId
  isPrivate
  name
  regularEventInterval
  slug
  teamId
  tenantId
}

input ProjectUpdates {
  _inc: ProjectIncInput
  _set: ProjectSetInput
  where: ProjectBoolExp!
}

type ProjectVarianceFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

input ProjectVarianceOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectVarPopFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

input ProjectVarPopOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectVarSampFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

input ProjectVarSampOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Query {
  action(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actionByPk(id: bigint!): Action
  actor(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorAddress(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): [ActorAddress!]!
  actorAddressAggregate(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): ActorAddressAggregate!
  actorAddressByPk(id: bigint!): ActorAddress
  actorAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  actorBankInfo(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): [ActorBankInfo!]!
  actorBankInfoAggregate(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): ActorBankInfoAggregate!
  actorBankInfoByPk(id: bigint!): ActorBankInfo
  actorByPk(id: bigint!): Actor
  actorFinance(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinanceAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  actorFinanceByPk(id: bigint!): ActorFinance
  actorImage(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImageAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorImageByPk(id: bigint!): ActorImage
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags
  botInfo(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): [BotInfo!]!
  botInfoAggregate(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): BotInfoAggregate!
  botInfoByPk(id: bigint!): BotInfo
  campus(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  campusByPk(id: bigint!): Campus
  canteen(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  canteenAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  canteenByPk(id: bigint!): Canteen
  canteenFood(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenFoodByPk(id: bigint!): CanteenFood
  canteenMenu(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenuAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  canteenMenuByPk(id: bigint!): CanteenMenu
  changeRole(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRoleAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  changeRoleByPk(id: bigint!): ChangeRole
  classGroup(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  classGroupByPk(id: bigint!): ClassGroup
  classGroupTeacher(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeacherAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects
  cohort(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  cohortAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  cohortByPk(id: bigint!): Cohort
  content(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments
  contentByPk(id: bigint!): Content
  contentMaster(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): [ContentMaster!]!
  contentMasterAggregate(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): ContentMasterAggregate!
  contentMasterByPk(id: bigint!): ContentMaster
  contentMasterContributors(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): [ContentMasterContributors!]!
  contentMasterContributorsAggregate(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): ContentMasterContributorsAggregate!
  contentMasterContributorsByPk(contentMasterId: bigint!, individualId: bigint!): ContentMasterContributors
  contentMasterTags(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): [ContentMasterTags!]!
  contentMasterTagsAggregate(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): ContentMasterTagsAggregate!
  contentMasterTagsByPk(contentMasterId: bigint!, tagId: bigint!): ContentMasterTags
  contentTeams(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): [ContentTeams!]!
  contentTeamsAggregate(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): ContentTeamsAggregate!
  contentTeamsByPk(contentId: bigint!, teamId: bigint!): ContentTeams
  document(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  documentByPk(id: bigint!): Document
  documentEdit(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): [DocumentEdit!]!
  documentEditAggregate(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): DocumentEditAggregate!
  documentEditByPk(id: bigint!): DocumentEdit
  event(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  eventApproval(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventApprovalByPk(id: bigint!): EventApproval
  eventApprovalStep(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovalStepByPk(id: bigint!): EventApprovalStep
  eventApprovalStepNotifiees(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepNotifieesAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees
  eventApprovalStepValidators(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStepValidatorsAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators
  eventAttendance(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): [EventAttendance!]!
  eventAttendanceAggregate(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): EventAttendanceAggregate!
  eventAttendanceByPk(id: bigint!): EventAttendance
  eventByPk(id: bigint!): Event
  eventChangeRole(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): [EventChangeRole!]!
  eventChangeRoleAggregate(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): EventChangeRoleAggregate!
  eventChangeRoleByPk(id: bigint!): EventChangeRole
  eventJoin(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventJoinByPk(id: bigint!): EventJoin
  eventRole(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): [EventRole!]!
  eventRoleAggregate(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): EventRoleAggregate!
  eventRoleByPk(id: bigint!): EventRole
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags
  expense(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expenseAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  expenseByPk(id: bigint!): Expense
  favorite(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoriteAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  favoriteByPk(id: bigint!): Favorite
  fileUpload(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  fileUploadByPk(id: bigint!): FileUpload
  follow(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  followByPk(id: bigint!): Follow
  form(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  formByPk(id: bigint!): Form
  formEdit(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): [FormEdit!]!
  formEditAggregate(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): FormEditAggregate!
  formEditByPk(id: bigint!): FormEdit
  formSubmission(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  formSubmissionByPk(id: bigint!): FormSubmission
  formSubmissionEdit(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): [FormSubmissionEdit!]!
  formSubmissionEditAggregate(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): FormSubmissionEditAggregate!
  formSubmissionEditByPk(id: bigint!): FormSubmissionEdit
  individual(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  individualAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  individualByPk(id: bigint!): Individual
  issue(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  issueAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  issueByPk(id: bigint!): Issue
  pole(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  poleAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  poleByPk(id: bigint!): Pole
  project(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  projectByPk(id: bigint!): Project
  projectRole(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): [ProjectRole!]!
  projectRoleAggregate(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): ProjectRoleAggregate!
  projectRoleByPk(id: bigint!): ProjectRole
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags
  reaction(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reactionByPk(id: bigint!): Reaction
  report(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  reportByPk(id: bigint!): Report
  role(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  roleAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  roleByPk(id: bigint!): Role
  session(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  sessionByPk(id: bigint!): Session
  shortcut(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  shortcutByPk(id: bigint!): Shortcut
  social(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  socialByPk(id: bigint!): Social
  subject(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  subjectAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  subjectByPk(id: bigint!): Subject
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups
  tag(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  tagByPk(id: bigint!): Tag
  team(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  teamByPk(id: bigint!): Team
  teamEvents(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): [TeamEvents!]!
  teamEventsAggregate(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): TeamEventsAggregate!
  teamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents
  teamFinance(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinanceAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teamFinanceByPk(id: bigint!): TeamFinance
  teamJoin(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamJoinByPk(id: bigint!): TeamJoin
  teamMember(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMemberAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMemberByPk(id: bigint!): TeamMember
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles
  teamMetric(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  teamMetricAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  teamMetricByPk(id: bigint!): TeamMetric
  tenant(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  tenantAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  tenantByPk(id: bigint!): Tenant
  userInfo(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): [UserInfo!]!
  userInfoAggregate(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): UserInfoAggregate!
  userInfoByPk(id: bigint!): UserInfo
  validation(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  validationByPk(id: bigint!): Validation
  vote(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  voteAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
  voteByPk(id: bigint!): Vote
  teamFinanceLogs(id: bigint, teamId: bigint): [Log!]!
  me: UserInfo
  searchLocation(query: String!): [Location!]!
  searchFrenchCompany(query: SearchCompanyQuery): [CompanyInfo!]!
  processReceipt(key: String!): ProcessedReceipt
}

type Reaction {
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  lastActiveDate: timestamptz
  reactionType: String!
  tenant: Tenant!
  tenantId: bigint!
}

type ReactionAggregate {
  aggregate: ReactionAggregateFields
  nodes: [Reaction!]!
}

input ReactionAggregateBoolExp {
  count: reactionAggregateBoolExpCount
}

input reactionAggregateBoolExpCount {
  arguments: [ReactionSelectColumn!]
  distinct: Boolean
  filter: ReactionBoolExp
  predicate: IntComparisonExp!
}

type ReactionAggregateFields {
  avg: ReactionAvgFields
  count(columns: [ReactionSelectColumn!], distinct: Boolean): Int!
  max: ReactionMaxFields
  min: ReactionMinFields
  stddev: ReactionStddevFields
  stddevPop: ReactionStddevPopFields
  stddevSamp: ReactionStddevSampFields
  sum: ReactionSumFields
  varPop: ReactionVarPopFields
  varSamp: ReactionVarSampFields
  variance: ReactionVarianceFields
}

input ReactionAggregateOrderBy {
  avg: ReactionAvgOrderBy
  count: OrderBy
  max: ReactionMaxOrderBy
  min: ReactionMinOrderBy
  stddev: ReactionStddevOrderBy
  stddevPop: ReactionStddevPopOrderBy
  stddevSamp: ReactionStddevSampOrderBy
  sum: ReactionSumOrderBy
  varPop: ReactionVarPopOrderBy
  varSamp: ReactionVarSampOrderBy
  variance: ReactionVarianceOrderBy
}

input ReactionArrRelInsertInput {
  data: [ReactionInsertInput!]!
  onConflict: ReactionOnConflict
}

type ReactionAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReactionBoolExp {
  _and: [ReactionBoolExp!]
  _not: ReactionBoolExp
  _or: [ReactionBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  reactionType: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ReactionConstraint {
  reaction_pkey
}

input ReactionIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReactionInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  reactionType: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ReactionMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

input ReactionMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

type ReactionMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

input ReactionMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

type ReactionMutationResponse {
  affectedRows: Int!
  returning: [Reaction!]!
}

input ReactionOnConflict {
  constraint: ReactionConstraint!
  updateColumns: [ReactionUpdateColumn!]! = []
  where: ReactionBoolExp
}

input ReactionOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ReactionPkColumnsInput {
  id: bigint!
}

enum ReactionSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  reactionType
  tenantId
}

input ReactionSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

type ReactionStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReactionStreamCursorInput {
  initialValue: ReactionStreamCursorValueInput!
  ordering: CursorOrdering
}

input ReactionStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

type ReactionSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReactionSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ReactionUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  reactionType
  tenantId
}

input ReactionUpdates {
  _inc: ReactionIncInput
  _set: ReactionSetInput
  where: ReactionBoolExp!
}

type ReactionVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Report {
  actor: Actor
  actorId: bigint
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  lastActiveDate: timestamptz
  reason: String
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ReportAggregate {
  aggregate: ReportAggregateFields
  nodes: [Report!]!
}

input ReportAggregateBoolExp {
  count: reportAggregateBoolExpCount
}

input reportAggregateBoolExpCount {
  arguments: [ReportSelectColumn!]
  distinct: Boolean
  filter: ReportBoolExp
  predicate: IntComparisonExp!
}

type ReportAggregateFields {
  avg: ReportAvgFields
  count(columns: [ReportSelectColumn!], distinct: Boolean): Int!
  max: ReportMaxFields
  min: ReportMinFields
  stddev: ReportStddevFields
  stddevPop: ReportStddevPopFields
  stddevSamp: ReportStddevSampFields
  sum: ReportSumFields
  varPop: ReportVarPopFields
  varSamp: ReportVarSampFields
  variance: ReportVarianceFields
}

input ReportAggregateOrderBy {
  avg: ReportAvgOrderBy
  count: OrderBy
  max: ReportMaxOrderBy
  min: ReportMinOrderBy
  stddev: ReportStddevOrderBy
  stddevPop: ReportStddevPopOrderBy
  stddevSamp: ReportStddevSampOrderBy
  sum: ReportSumOrderBy
  varPop: ReportVarPopOrderBy
  varSamp: ReportVarSampOrderBy
  variance: ReportVarianceOrderBy
}

input ReportArrRelInsertInput {
  data: [ReportInsertInput!]!
  onConflict: ReportOnConflict
}

type ReportAvgFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportAvgOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReportBoolExp {
  _and: [ReportBoolExp!]
  _not: ReportBoolExp
  _or: [ReportBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  reason: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ReportConstraint {
  report_pkey
}

input ReportIncInput {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReportInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  reason: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ReportMaxFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

input ReportMaxOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ReportMinFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

input ReportMinOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ReportMutationResponse {
  affectedRows: Int!
  returning: [Report!]!
}

input ReportOnConflict {
  constraint: ReportConstraint!
  updateColumns: [ReportUpdateColumn!]! = []
  where: ReportBoolExp
}

input ReportOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ReportPkColumnsInput {
  id: bigint!
}

enum ReportSelectColumn {
  actorId
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  reason
  tenantId
  type
}

input ReportSetInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

type ReportStddevFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportStddevOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportStddevPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportStddevPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportStddevSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportStddevSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReportStreamCursorInput {
  initialValue: ReportStreamCursorValueInput!
  ordering: CursorOrdering
}

input ReportStreamCursorValueInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

type ReportSumFields {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReportSumOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ReportUpdateColumn {
  actorId
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  reason
  tenantId
  type
}

input ReportUpdates {
  _inc: ReportIncInput
  _set: ReportSetInput
  where: ReportBoolExp!
}

type ReportVarianceFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportVarianceOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportVarPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportVarPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportVarSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportVarSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Role {
  category: String!
  changeRoles(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRolesAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  isRequired: Boolean!
  name: String!
  permissions: Int!
  team: Team!
  teamId: bigint!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type RoleAggregate {
  aggregate: RoleAggregateFields
  nodes: [Role!]!
}

input RoleAggregateBoolExp {
  bool_and: roleAggregateBoolExpBool_and
  bool_or: roleAggregateBoolExpBool_or
  count: roleAggregateBoolExpCount
}

input roleAggregateBoolExpBool_and {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpBool_or {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpCount {
  arguments: [RoleSelectColumn!]
  distinct: Boolean
  filter: RoleBoolExp
  predicate: IntComparisonExp!
}

type RoleAggregateFields {
  avg: RoleAvgFields
  count(columns: [RoleSelectColumn!], distinct: Boolean): Int!
  max: RoleMaxFields
  min: RoleMinFields
  stddev: RoleStddevFields
  stddevPop: RoleStddevPopFields
  stddevSamp: RoleStddevSampFields
  sum: RoleSumFields
  varPop: RoleVarPopFields
  varSamp: RoleVarSampFields
  variance: RoleVarianceFields
}

input RoleAggregateOrderBy {
  avg: RoleAvgOrderBy
  count: OrderBy
  max: RoleMaxOrderBy
  min: RoleMinOrderBy
  stddev: RoleStddevOrderBy
  stddevPop: RoleStddevPopOrderBy
  stddevSamp: RoleStddevSampOrderBy
  sum: RoleSumOrderBy
  varPop: RoleVarPopOrderBy
  varSamp: RoleVarSampOrderBy
  variance: RoleVarianceOrderBy
}

input RoleArrRelInsertInput {
  data: [RoleInsertInput!]!
  onConflict: RoleOnConflict
}

type RoleAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

input RoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input RoleBoolExp {
  _and: [RoleBoolExp!]
  _not: RoleBoolExp
  _or: [RoleBoolExp!]
  category: StringComparisonExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isRequired: BooleanComparisonExp
  name: StringComparisonExp
  permissions: IntComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum RoleConstraint {
  role_pkey
}

input RoleIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
}

input RoleInsertInput {
  category: String
  changeRoles: ChangeRoleArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isRequired: Boolean
  name: String
  permissions: Int
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type RoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

input RoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type RoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

input RoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type RoleMutationResponse {
  affectedRows: Int!
  returning: [Role!]!
}

input RoleObjRelInsertInput {
  data: RoleInsertInput!
  onConflict: RoleOnConflict
}

input RoleOnConflict {
  constraint: RoleConstraint!
  updateColumns: [RoleUpdateColumn!]! = []
  where: RoleBoolExp
}

input RoleOrderBy {
  category: OrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isRequired: OrderBy
  name: OrderBy
  permissions: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input RolePkColumnsInput {
  id: bigint!
}

enum RoleSelectColumn {
  category
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isRequired
  name
  permissions
  teamId
  tenantId
  type
}

enum RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns {
  isRequired
}

enum RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns {
  isRequired
}

input RoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isRequired: Boolean
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

type RoleStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

input RoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

input RoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

input RoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input RoleStreamCursorInput {
  initialValue: RoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input RoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isRequired: Boolean
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

type RoleSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
}

input RoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum RoleUpdateColumn {
  category
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isRequired
  name
  permissions
  teamId
  tenantId
  type
}

input RoleUpdates {
  _inc: RoleIncInput
  _set: RoleSetInput
  where: RoleBoolExp!
}

type RoleVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

input RoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

input RoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

input RoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Session {
  clientType: String!
  country: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  ip: String!
  lastActivityAt: timestamptz!
  lastIssuedAt: timestamptz!
  refreshTokenHash: String!
  revokedAt: timestamptz
  tenant: Tenant!
  tenantId: bigint!
  tokenFamily: String!
  userAgent(path: String): jsonb!
  userId: bigint!
  userInfo: UserInfo!
}

type SessionAggregate {
  aggregate: SessionAggregateFields
  nodes: [Session!]!
}

input SessionAggregateBoolExp {
  count: sessionAggregateBoolExpCount
}

input sessionAggregateBoolExpCount {
  arguments: [SessionSelectColumn!]
  distinct: Boolean
  filter: SessionBoolExp
  predicate: IntComparisonExp!
}

type SessionAggregateFields {
  avg: SessionAvgFields
  count(columns: [SessionSelectColumn!], distinct: Boolean): Int!
  max: SessionMaxFields
  min: SessionMinFields
  stddev: SessionStddevFields
  stddevPop: SessionStddevPopFields
  stddevSamp: SessionStddevSampFields
  sum: SessionSumFields
  varPop: SessionVarPopFields
  varSamp: SessionVarSampFields
  variance: SessionVarianceFields
}

input SessionAggregateOrderBy {
  avg: SessionAvgOrderBy
  count: OrderBy
  max: SessionMaxOrderBy
  min: SessionMinOrderBy
  stddev: SessionStddevOrderBy
  stddevPop: SessionStddevPopOrderBy
  stddevSamp: SessionStddevSampOrderBy
  sum: SessionSumOrderBy
  varPop: SessionVarPopOrderBy
  varSamp: SessionVarSampOrderBy
  variance: SessionVarianceOrderBy
}

input SessionAppendInput {
  userAgent: jsonb
}

input SessionArrRelInsertInput {
  data: [SessionInsertInput!]!
  onConflict: SessionOnConflict
}

type SessionAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input SessionBoolExp {
  _and: [SessionBoolExp!]
  _not: SessionBoolExp
  _or: [SessionBoolExp!]
  clientType: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expiredAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  ip: StringComparisonExp
  lastActivityAt: TimestamptzComparisonExp
  lastIssuedAt: TimestamptzComparisonExp
  refreshTokenHash: StringComparisonExp
  revokedAt: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tokenFamily: StringComparisonExp
  userAgent: JsonbComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum SessionConstraint {
  session_pkey
}

input SessionDeleteAtPathInput {
  userAgent: [String!]
}

input SessionDeleteElemInput {
  userAgent: Int
}

input SessionDeleteKeyInput {
  userAgent: String
}

input SessionIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input SessionInsertInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type SessionMaxFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

input SessionMaxOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

type SessionMinFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

input SessionMinOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

type SessionMutationResponse {
  affectedRows: Int!
  returning: [Session!]!
}

input SessionOnConflict {
  constraint: SessionConstraint!
  updateColumns: [SessionUpdateColumn!]! = []
  where: SessionBoolExp
}

input SessionOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userAgent: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

input SessionPkColumnsInput {
  id: bigint!
}

input SessionPrependInput {
  userAgent: jsonb
}

enum SessionSelectColumn {
  clientType
  country
  createdAt
  createdById
  deletedAt
  expiredAt
  hiddenAt
  id
  ip
  lastActivityAt
  lastIssuedAt
  refreshTokenHash
  revokedAt
  tenantId
  tokenFamily
  userAgent
  userId
}

input SessionSetInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

type SessionStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input SessionStreamCursorInput {
  initialValue: SessionStreamCursorValueInput!
  ordering: CursorOrdering
}

input SessionStreamCursorValueInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

type SessionSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input SessionSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum SessionUpdateColumn {
  clientType
  country
  createdAt
  createdById
  deletedAt
  expiredAt
  hiddenAt
  id
  ip
  lastActivityAt
  lastIssuedAt
  refreshTokenHash
  revokedAt
  tenantId
  tokenFamily
  userAgent
  userId
}

input SessionUpdates {
  _append: SessionAppendInput
  _deleteAtPath: SessionDeleteAtPathInput
  _deleteElem: SessionDeleteElemInput
  _deleteKey: SessionDeleteKeyInput
  _inc: SessionIncInput
  _prepend: SessionPrependInput
  _set: SessionSetInput
  where: SessionBoolExp!
}

type SessionVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type Shortcut {
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  targetActorId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  userId: bigint!
  userInfo: UserInfo!
}

type ShortcutAggregate {
  aggregate: ShortcutAggregateFields
  nodes: [Shortcut!]!
}

input ShortcutAggregateBoolExp {
  count: shortcutAggregateBoolExpCount
}

input shortcutAggregateBoolExpCount {
  arguments: [ShortcutSelectColumn!]
  distinct: Boolean
  filter: ShortcutBoolExp
  predicate: IntComparisonExp!
}

type ShortcutAggregateFields {
  avg: ShortcutAvgFields
  count(columns: [ShortcutSelectColumn!], distinct: Boolean): Int!
  max: ShortcutMaxFields
  min: ShortcutMinFields
  stddev: ShortcutStddevFields
  stddevPop: ShortcutStddevPopFields
  stddevSamp: ShortcutStddevSampFields
  sum: ShortcutSumFields
  varPop: ShortcutVarPopFields
  varSamp: ShortcutVarSampFields
  variance: ShortcutVarianceFields
}

input ShortcutAggregateOrderBy {
  avg: ShortcutAvgOrderBy
  count: OrderBy
  max: ShortcutMaxOrderBy
  min: ShortcutMinOrderBy
  stddev: ShortcutStddevOrderBy
  stddevPop: ShortcutStddevPopOrderBy
  stddevSamp: ShortcutStddevSampOrderBy
  sum: ShortcutSumOrderBy
  varPop: ShortcutVarPopOrderBy
  varSamp: ShortcutVarSampOrderBy
  variance: ShortcutVarianceOrderBy
}

input ShortcutArrRelInsertInput {
  data: [ShortcutInsertInput!]!
  onConflict: ShortcutOnConflict
}

type ShortcutAvgFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ShortcutBoolExp {
  _and: [ShortcutBoolExp!]
  _not: ShortcutBoolExp
  _or: [ShortcutBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  targetActorId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum ShortcutConstraint {
  shortcut_pkey
}

input ShortcutIncInput {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

input ShortcutInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  targetActorId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type ShortcutMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

input ShortcutMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

type ShortcutMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

input ShortcutMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

type ShortcutMutationResponse {
  affectedRows: Int!
  returning: [Shortcut!]!
}

input ShortcutOnConflict {
  constraint: ShortcutConstraint!
  updateColumns: [ShortcutUpdateColumn!]! = []
  where: ShortcutBoolExp
}

input ShortcutOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  targetActorId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

input ShortcutPkColumnsInput {
  id: bigint!
}

enum ShortcutSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  targetActorId
  tenantId
  type
  userId
}

input ShortcutSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

type ShortcutStddevFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutStddevPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutStddevSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ShortcutStreamCursorInput {
  initialValue: ShortcutStreamCursorValueInput!
  ordering: CursorOrdering
}

input ShortcutStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

type ShortcutSumFields {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

input ShortcutSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ShortcutUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  targetActorId
  tenantId
  type
  userId
}

input ShortcutUpdates {
  _inc: ShortcutIncInput
  _set: ShortcutSetInput
  where: ShortcutBoolExp!
}

type ShortcutVarianceFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutVarPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutVarSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

scalar smallint

input SmallintComparisonExp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _isNull: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type Social {
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  order: smallint!
  pseudo: String!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  url: String!
}

type SocialAggregate {
  aggregate: SocialAggregateFields
  nodes: [Social!]!
}

input SocialAggregateBoolExp {
  count: socialAggregateBoolExpCount
}

input socialAggregateBoolExpCount {
  arguments: [SocialSelectColumn!]
  distinct: Boolean
  filter: SocialBoolExp
  predicate: IntComparisonExp!
}

type SocialAggregateFields {
  avg: SocialAvgFields
  count(columns: [SocialSelectColumn!], distinct: Boolean): Int!
  max: SocialMaxFields
  min: SocialMinFields
  stddev: SocialStddevFields
  stddevPop: SocialStddevPopFields
  stddevSamp: SocialStddevSampFields
  sum: SocialSumFields
  varPop: SocialVarPopFields
  varSamp: SocialVarSampFields
  variance: SocialVarianceFields
}

input SocialAggregateOrderBy {
  avg: SocialAvgOrderBy
  count: OrderBy
  max: SocialMaxOrderBy
  min: SocialMinOrderBy
  stddev: SocialStddevOrderBy
  stddevPop: SocialStddevPopOrderBy
  stddevSamp: SocialStddevSampOrderBy
  sum: SocialSumOrderBy
  varPop: SocialVarPopOrderBy
  varSamp: SocialVarSampOrderBy
  variance: SocialVarianceOrderBy
}

input SocialArrRelInsertInput {
  data: [SocialInsertInput!]!
  onConflict: SocialOnConflict
}

type SocialAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

input SocialBoolExp {
  _and: [SocialBoolExp!]
  _not: SocialBoolExp
  _or: [SocialBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  order: SmallintComparisonExp
  pseudo: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

enum SocialConstraint {
  social_pkey
}

input SocialIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

input SocialInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  order: smallint
  pseudo: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  url: String
}

type SocialMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

input SocialMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

type SocialMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

input SocialMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

type SocialMutationResponse {
  affectedRows: Int!
  returning: [Social!]!
}

input SocialOnConflict {
  constraint: SocialConstraint!
  updateColumns: [SocialUpdateColumn!]! = []
  where: SocialBoolExp
}

input SocialOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  order: OrderBy
  pseudo: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

input SocialPkColumnsInput {
  id: bigint!
}

enum SocialSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  order
  pseudo
  tenantId
  type
  url
}

input SocialSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

type SocialStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

input SocialStreamCursorInput {
  initialValue: SocialStreamCursorValueInput!
  ordering: CursorOrdering
}

input SocialStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

type SocialSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

input SocialSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

enum SocialUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  order
  pseudo
  tenantId
  type
  url
}

input SocialUpdates {
  _inc: SocialIncInput
  _set: SocialSetInput
  where: SocialBoolExp!
}

type SocialVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _iregex: String
  _isNull: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _niregex: String
  _nlike: String
  _nregex: String
  _nsimilar: String
  _regex: String
  _similar: String
}

type Subject {
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  code: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  documents(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  englishName: String
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  lastActiveDate: timestamptz
  name: String!
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type SubjectAggregate {
  aggregate: SubjectAggregateFields
  nodes: [Subject!]!
}

input SubjectAggregateBoolExp {
  count: subjectAggregateBoolExpCount
}

input subjectAggregateBoolExpCount {
  arguments: [SubjectSelectColumn!]
  distinct: Boolean
  filter: SubjectBoolExp
  predicate: IntComparisonExp!
}

type SubjectAggregateFields {
  avg: SubjectAvgFields
  count(columns: [SubjectSelectColumn!], distinct: Boolean): Int!
  max: SubjectMaxFields
  min: SubjectMinFields
  stddev: SubjectStddevFields
  stddevPop: SubjectStddevPopFields
  stddevSamp: SubjectStddevSampFields
  sum: SubjectSumFields
  varPop: SubjectVarPopFields
  varSamp: SubjectVarSampFields
  variance: SubjectVarianceFields
}

input SubjectAggregateOrderBy {
  avg: SubjectAvgOrderBy
  count: OrderBy
  max: SubjectMaxOrderBy
  min: SubjectMinOrderBy
  stddev: SubjectStddevOrderBy
  stddevPop: SubjectStddevPopOrderBy
  stddevSamp: SubjectStddevSampOrderBy
  sum: SubjectSumOrderBy
  varPop: SubjectVarPopOrderBy
  varSamp: SubjectVarSampOrderBy
  variance: SubjectVarianceOrderBy
}

input SubjectArrRelInsertInput {
  data: [SubjectInsertInput!]!
  onConflict: SubjectOnConflict
}

type SubjectAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input SubjectBoolExp {
  _and: [SubjectBoolExp!]
  _not: SubjectBoolExp
  _or: [SubjectBoolExp!]
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  code: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  englishName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  name: StringComparisonExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

type SubjectClassGroups {
  classGroup: ClassGroup!
  classGroupId: bigint!
  subject: Subject!
  subjectId: bigint!
}

type SubjectClassGroupsAggregate {
  aggregate: SubjectClassGroupsAggregateFields
  nodes: [SubjectClassGroups!]!
}

input SubjectClassGroupsAggregateBoolExp {
  count: subjectClassGroupsAggregateBoolExpCount
}

input subjectClassGroupsAggregateBoolExpCount {
  arguments: [SubjectClassGroupsSelectColumn!]
  distinct: Boolean
  filter: SubjectClassGroupsBoolExp
  predicate: IntComparisonExp!
}

type SubjectClassGroupsAggregateFields {
  avg: SubjectClassGroupsAvgFields
  count(columns: [SubjectClassGroupsSelectColumn!], distinct: Boolean): Int!
  max: SubjectClassGroupsMaxFields
  min: SubjectClassGroupsMinFields
  stddev: SubjectClassGroupsStddevFields
  stddevPop: SubjectClassGroupsStddevPopFields
  stddevSamp: SubjectClassGroupsStddevSampFields
  sum: SubjectClassGroupsSumFields
  varPop: SubjectClassGroupsVarPopFields
  varSamp: SubjectClassGroupsVarSampFields
  variance: SubjectClassGroupsVarianceFields
}

input SubjectClassGroupsAggregateOrderBy {
  avg: SubjectClassGroupsAvgOrderBy
  count: OrderBy
  max: SubjectClassGroupsMaxOrderBy
  min: SubjectClassGroupsMinOrderBy
  stddev: SubjectClassGroupsStddevOrderBy
  stddevPop: SubjectClassGroupsStddevPopOrderBy
  stddevSamp: SubjectClassGroupsStddevSampOrderBy
  sum: SubjectClassGroupsSumOrderBy
  varPop: SubjectClassGroupsVarPopOrderBy
  varSamp: SubjectClassGroupsVarSampOrderBy
  variance: SubjectClassGroupsVarianceOrderBy
}

input SubjectClassGroupsArrRelInsertInput {
  data: [SubjectClassGroupsInsertInput!]!
  onConflict: SubjectClassGroupsOnConflict
}

type SubjectClassGroupsAvgFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsAvgOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

input SubjectClassGroupsBoolExp {
  _and: [SubjectClassGroupsBoolExp!]
  _not: SubjectClassGroupsBoolExp
  _or: [SubjectClassGroupsBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

enum SubjectClassGroupsConstraint {
  subject_class_groups_pkey
}

input SubjectClassGroupsIncInput {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

type SubjectClassGroupsMaxFields {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsMaxOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsMinFields {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsMinOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsMutationResponse {
  affectedRows: Int!
  returning: [SubjectClassGroups!]!
}

input SubjectClassGroupsOnConflict {
  constraint: SubjectClassGroupsConstraint!
  updateColumns: [SubjectClassGroupsUpdateColumn!]! = []
  where: SubjectClassGroupsBoolExp
}

input SubjectClassGroupsOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

input SubjectClassGroupsPkColumnsInput {
  classGroupId: bigint!
  subjectId: bigint!
}

enum SubjectClassGroupsSelectColumn {
  classGroupId
  subjectId
}

input SubjectClassGroupsSetInput {
  classGroupId: bigint
  subjectId: bigint
}

type SubjectClassGroupsStddevFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsStddevOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsStddevPopFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsStddevPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsStddevSampFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsStddevSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

input SubjectClassGroupsStreamCursorInput {
  initialValue: SubjectClassGroupsStreamCursorValueInput!
  ordering: CursorOrdering
}

input SubjectClassGroupsStreamCursorValueInput {
  classGroupId: bigint
  subjectId: bigint
}

type SubjectClassGroupsSumFields {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsSumOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

enum SubjectClassGroupsUpdateColumn {
  classGroupId
  subjectId
}

input SubjectClassGroupsUpdates {
  _inc: SubjectClassGroupsIncInput
  _set: SubjectClassGroupsSetInput
  where: SubjectClassGroupsBoolExp!
}

type SubjectClassGroupsVarianceFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsVarianceOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsVarPopFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsVarPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsVarSampFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsVarSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

enum SubjectConstraint {
  subject_pkey
}

input SubjectIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input SubjectInsertInput {
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  documents: DocumentArrRelInsertInput
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  name: String
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type SubjectMaxFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

input SubjectMaxOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type SubjectMinFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

input SubjectMinOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type SubjectMutationResponse {
  affectedRows: Int!
  returning: [Subject!]!
}

input SubjectObjRelInsertInput {
  data: SubjectInsertInput!
  onConflict: SubjectOnConflict
}

input SubjectOnConflict {
  constraint: SubjectConstraint!
  updateColumns: [SubjectUpdateColumn!]! = []
  where: SubjectBoolExp
}

input SubjectOrderBy {
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input SubjectPkColumnsInput {
  id: bigint!
}

enum SubjectSelectColumn {
  code
  createdAt
  createdById
  deletedAt
  description
  englishName
  hiddenAt
  id
  lastActiveDate
  name
  tenantId
  type
}

input SubjectSetInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

type SubjectStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input SubjectStreamCursorInput {
  initialValue: SubjectStreamCursorValueInput!
  ordering: CursorOrdering
}

input SubjectStreamCursorValueInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

type SubjectSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input SubjectSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum SubjectUpdateColumn {
  code
  createdAt
  createdById
  deletedAt
  description
  englishName
  hiddenAt
  id
  lastActiveDate
  name
  tenantId
  type
}

input SubjectUpdates {
  _inc: SubjectIncInput
  _set: SubjectSetInput
  where: SubjectBoolExp!
}

type SubjectVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Subscription {
  action(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actionByPk(id: bigint!): Action
  actionStream(batchSize: Int!, cursor: [ActionStreamCursorInput]!, where: ActionBoolExp): [Action!]!
  actor(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorAddress(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): [ActorAddress!]!
  actorAddressAggregate(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): ActorAddressAggregate!
  actorAddressByPk(id: bigint!): ActorAddress
  actorAddressStream(batchSize: Int!, cursor: [ActorAddressStreamCursorInput]!, where: ActorAddressBoolExp): [ActorAddress!]!
  actorAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  actorBankInfo(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): [ActorBankInfo!]!
  actorBankInfoAggregate(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): ActorBankInfoAggregate!
  actorBankInfoByPk(id: bigint!): ActorBankInfo
  actorBankInfoStream(batchSize: Int!, cursor: [ActorBankInfoStreamCursorInput]!, where: ActorBankInfoBoolExp): [ActorBankInfo!]!
  actorByPk(id: bigint!): Actor
  actorFinance(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinanceAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  actorFinanceByPk(id: bigint!): ActorFinance
  actorFinanceStream(batchSize: Int!, cursor: [ActorFinanceStreamCursorInput]!, where: ActorFinanceBoolExp): [ActorFinance!]!
  actorImage(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImageAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorImageByPk(id: bigint!): ActorImage
  actorImageStream(batchSize: Int!, cursor: [ActorImageStreamCursorInput]!, where: ActorImageBoolExp): [ActorImage!]!
  actorStream(batchSize: Int!, cursor: [ActorStreamCursorInput]!, where: ActorBoolExp): [Actor!]!
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags
  actorTagsStream(batchSize: Int!, cursor: [ActorTagsStreamCursorInput]!, where: ActorTagsBoolExp): [ActorTags!]!
  botInfo(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): [BotInfo!]!
  botInfoAggregate(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): BotInfoAggregate!
  botInfoByPk(id: bigint!): BotInfo
  botInfoStream(batchSize: Int!, cursor: [BotInfoStreamCursorInput]!, where: BotInfoBoolExp): [BotInfo!]!
  campus(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  campusByPk(id: bigint!): Campus
  campusStream(batchSize: Int!, cursor: [CampusStreamCursorInput]!, where: CampusBoolExp): [Campus!]!
  canteen(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  canteenAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  canteenByPk(id: bigint!): Canteen
  canteenFood(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenFoodByPk(id: bigint!): CanteenFood
  canteenFoodStream(batchSize: Int!, cursor: [CanteenFoodStreamCursorInput]!, where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenMenu(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenuAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  canteenMenuByPk(id: bigint!): CanteenMenu
  canteenMenuStream(batchSize: Int!, cursor: [CanteenMenuStreamCursorInput]!, where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenStream(batchSize: Int!, cursor: [CanteenStreamCursorInput]!, where: CanteenBoolExp): [Canteen!]!
  changeRole(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRoleAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  changeRoleByPk(id: bigint!): ChangeRole
  changeRoleStream(batchSize: Int!, cursor: [ChangeRoleStreamCursorInput]!, where: ChangeRoleBoolExp): [ChangeRole!]!
  classGroup(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  classGroupByPk(id: bigint!): ClassGroup
  classGroupStream(batchSize: Int!, cursor: [ClassGroupStreamCursorInput]!, where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupTeacher(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeacherAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher
  classGroupTeacherStream(batchSize: Int!, cursor: [ClassGroupTeacherStreamCursorInput]!, where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects
  classGroupTeacherSubjectsStream(batchSize: Int!, cursor: [ClassGroupTeacherSubjectsStreamCursorInput]!, where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  cohort(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  cohortAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  cohortByPk(id: bigint!): Cohort
  cohortStream(batchSize: Int!, cursor: [CohortStreamCursorInput]!, where: CohortBoolExp): [Cohort!]!
  content(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments
  contentAttachmentsStream(batchSize: Int!, cursor: [ContentAttachmentsStreamCursorInput]!, where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentByPk(id: bigint!): Content
  contentMaster(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): [ContentMaster!]!
  contentMasterAggregate(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): ContentMasterAggregate!
  contentMasterByPk(id: bigint!): ContentMaster
  contentMasterContributors(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): [ContentMasterContributors!]!
  contentMasterContributorsAggregate(distinctOn: [ContentMasterContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterContributorsOrderBy!], where: ContentMasterContributorsBoolExp): ContentMasterContributorsAggregate!
  contentMasterContributorsByPk(contentMasterId: bigint!, individualId: bigint!): ContentMasterContributors
  contentMasterContributorsStream(batchSize: Int!, cursor: [ContentMasterContributorsStreamCursorInput]!, where: ContentMasterContributorsBoolExp): [ContentMasterContributors!]!
  contentMasterStream(batchSize: Int!, cursor: [ContentMasterStreamCursorInput]!, where: ContentMasterBoolExp): [ContentMaster!]!
  contentMasterTags(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): [ContentMasterTags!]!
  contentMasterTagsAggregate(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): ContentMasterTagsAggregate!
  contentMasterTagsByPk(contentMasterId: bigint!, tagId: bigint!): ContentMasterTags
  contentMasterTagsStream(batchSize: Int!, cursor: [ContentMasterTagsStreamCursorInput]!, where: ContentMasterTagsBoolExp): [ContentMasterTags!]!
  contentStream(batchSize: Int!, cursor: [ContentStreamCursorInput]!, where: ContentBoolExp): [Content!]!
  contentTeams(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): [ContentTeams!]!
  contentTeamsAggregate(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): ContentTeamsAggregate!
  contentTeamsByPk(contentId: bigint!, teamId: bigint!): ContentTeams
  contentTeamsStream(batchSize: Int!, cursor: [ContentTeamsStreamCursorInput]!, where: ContentTeamsBoolExp): [ContentTeams!]!
  document(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  documentByPk(id: bigint!): Document
  documentEdit(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): [DocumentEdit!]!
  documentEditAggregate(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): DocumentEditAggregate!
  documentEditByPk(id: bigint!): DocumentEdit
  documentEditStream(batchSize: Int!, cursor: [DocumentEditStreamCursorInput]!, where: DocumentEditBoolExp): [DocumentEdit!]!
  documentStream(batchSize: Int!, cursor: [DocumentStreamCursorInput]!, where: DocumentBoolExp): [Document!]!
  event(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  eventApproval(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventApprovalByPk(id: bigint!): EventApproval
  eventApprovalStep(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovalStepByPk(id: bigint!): EventApprovalStep
  eventApprovalStepNotifiees(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepNotifieesAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees
  eventApprovalStepNotifieesStream(batchSize: Int!, cursor: [EventApprovalStepNotifieesStreamCursorInput]!, where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepStream(batchSize: Int!, cursor: [EventApprovalStepStreamCursorInput]!, where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepValidators(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStepValidatorsAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators
  eventApprovalStepValidatorsStream(batchSize: Int!, cursor: [EventApprovalStepValidatorsStreamCursorInput]!, where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStream(batchSize: Int!, cursor: [EventApprovalStreamCursorInput]!, where: EventApprovalBoolExp): [EventApproval!]!
  eventAttendance(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): [EventAttendance!]!
  eventAttendanceAggregate(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): EventAttendanceAggregate!
  eventAttendanceByPk(id: bigint!): EventAttendance
  eventAttendanceStream(batchSize: Int!, cursor: [EventAttendanceStreamCursorInput]!, where: EventAttendanceBoolExp): [EventAttendance!]!
  eventByPk(id: bigint!): Event
  eventChangeRole(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): [EventChangeRole!]!
  eventChangeRoleAggregate(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): EventChangeRoleAggregate!
  eventChangeRoleByPk(id: bigint!): EventChangeRole
  eventChangeRoleStream(batchSize: Int!, cursor: [EventChangeRoleStreamCursorInput]!, where: EventChangeRoleBoolExp): [EventChangeRole!]!
  eventJoin(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventJoinByPk(id: bigint!): EventJoin
  eventJoinStream(batchSize: Int!, cursor: [EventJoinStreamCursorInput]!, where: EventJoinBoolExp): [EventJoin!]!
  eventRole(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): [EventRole!]!
  eventRoleAggregate(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): EventRoleAggregate!
  eventRoleByPk(id: bigint!): EventRole
  eventRoleStream(batchSize: Int!, cursor: [EventRoleStreamCursorInput]!, where: EventRoleBoolExp): [EventRole!]!
  eventStream(batchSize: Int!, cursor: [EventStreamCursorInput]!, where: EventBoolExp): [Event!]!
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags
  eventTagsStream(batchSize: Int!, cursor: [EventTagsStreamCursorInput]!, where: EventTagsBoolExp): [EventTags!]!
  expense(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expenseAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  expenseByPk(id: bigint!): Expense
  expenseStream(batchSize: Int!, cursor: [ExpenseStreamCursorInput]!, where: ExpenseBoolExp): [Expense!]!
  favorite(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoriteAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  favoriteByPk(id: bigint!): Favorite
  favoriteStream(batchSize: Int!, cursor: [FavoriteStreamCursorInput]!, where: FavoriteBoolExp): [Favorite!]!
  fileUpload(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  fileUploadByPk(id: bigint!): FileUpload
  fileUploadStream(batchSize: Int!, cursor: [FileUploadStreamCursorInput]!, where: FileUploadBoolExp): [FileUpload!]!
  follow(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  followByPk(id: bigint!): Follow
  followStream(batchSize: Int!, cursor: [FollowStreamCursorInput]!, where: FollowBoolExp): [Follow!]!
  form(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  formByPk(id: bigint!): Form
  formEdit(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): [FormEdit!]!
  formEditAggregate(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): FormEditAggregate!
  formEditByPk(id: bigint!): FormEdit
  formEditStream(batchSize: Int!, cursor: [FormEditStreamCursorInput]!, where: FormEditBoolExp): [FormEdit!]!
  formStream(batchSize: Int!, cursor: [FormStreamCursorInput]!, where: FormBoolExp): [Form!]!
  formSubmission(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  formSubmissionByPk(id: bigint!): FormSubmission
  formSubmissionEdit(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): [FormSubmissionEdit!]!
  formSubmissionEditAggregate(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): FormSubmissionEditAggregate!
  formSubmissionEditByPk(id: bigint!): FormSubmissionEdit
  formSubmissionEditStream(batchSize: Int!, cursor: [FormSubmissionEditStreamCursorInput]!, where: FormSubmissionEditBoolExp): [FormSubmissionEdit!]!
  formSubmissionStream(batchSize: Int!, cursor: [FormSubmissionStreamCursorInput]!, where: FormSubmissionBoolExp): [FormSubmission!]!
  individual(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  individualAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  individualByPk(id: bigint!): Individual
  individualStream(batchSize: Int!, cursor: [IndividualStreamCursorInput]!, where: IndividualBoolExp): [Individual!]!
  issue(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  issueAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  issueByPk(id: bigint!): Issue
  issueStream(batchSize: Int!, cursor: [IssueStreamCursorInput]!, where: IssueBoolExp): [Issue!]!
  pole(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  poleAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  poleByPk(id: bigint!): Pole
  poleStream(batchSize: Int!, cursor: [PoleStreamCursorInput]!, where: PoleBoolExp): [Pole!]!
  project(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  projectByPk(id: bigint!): Project
  projectRole(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): [ProjectRole!]!
  projectRoleAggregate(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): ProjectRoleAggregate!
  projectRoleByPk(id: bigint!): ProjectRole
  projectRoleStream(batchSize: Int!, cursor: [ProjectRoleStreamCursorInput]!, where: ProjectRoleBoolExp): [ProjectRole!]!
  projectStream(batchSize: Int!, cursor: [ProjectStreamCursorInput]!, where: ProjectBoolExp): [Project!]!
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  projectSupervisorsStream(batchSize: Int!, cursor: [ProjectSupervisorsStreamCursorInput]!, where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags
  projectTagsStream(batchSize: Int!, cursor: [ProjectTagsStreamCursorInput]!, where: ProjectTagsBoolExp): [ProjectTags!]!
  reaction(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reactionByPk(id: bigint!): Reaction
  reactionStream(batchSize: Int!, cursor: [ReactionStreamCursorInput]!, where: ReactionBoolExp): [Reaction!]!
  report(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  reportByPk(id: bigint!): Report
  reportStream(batchSize: Int!, cursor: [ReportStreamCursorInput]!, where: ReportBoolExp): [Report!]!
  role(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  roleAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  roleByPk(id: bigint!): Role
  roleStream(batchSize: Int!, cursor: [RoleStreamCursorInput]!, where: RoleBoolExp): [Role!]!
  session(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  sessionByPk(id: bigint!): Session
  sessionStream(batchSize: Int!, cursor: [SessionStreamCursorInput]!, where: SessionBoolExp): [Session!]!
  shortcut(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  shortcutByPk(id: bigint!): Shortcut
  shortcutStream(batchSize: Int!, cursor: [ShortcutStreamCursorInput]!, where: ShortcutBoolExp): [Shortcut!]!
  social(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  socialByPk(id: bigint!): Social
  socialStream(batchSize: Int!, cursor: [SocialStreamCursorInput]!, where: SocialBoolExp): [Social!]!
  subject(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  subjectAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  subjectByPk(id: bigint!): Subject
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups
  subjectClassGroupsStream(batchSize: Int!, cursor: [SubjectClassGroupsStreamCursorInput]!, where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectStream(batchSize: Int!, cursor: [SubjectStreamCursorInput]!, where: SubjectBoolExp): [Subject!]!
  tag(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  tagByPk(id: bigint!): Tag
  tagStream(batchSize: Int!, cursor: [TagStreamCursorInput]!, where: TagBoolExp): [Tag!]!
  team(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  teamByPk(id: bigint!): Team
  teamEvents(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): [TeamEvents!]!
  teamEventsAggregate(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): TeamEventsAggregate!
  teamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents
  teamEventsStream(batchSize: Int!, cursor: [TeamEventsStreamCursorInput]!, where: TeamEventsBoolExp): [TeamEvents!]!
  teamFinance(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinanceAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teamFinanceByPk(id: bigint!): TeamFinance
  teamFinanceStream(batchSize: Int!, cursor: [TeamFinanceStreamCursorInput]!, where: TeamFinanceBoolExp): [TeamFinance!]!
  teamJoin(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamJoinByPk(id: bigint!): TeamJoin
  teamJoinStream(batchSize: Int!, cursor: [TeamJoinStreamCursorInput]!, where: TeamJoinBoolExp): [TeamJoin!]!
  teamMember(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMemberAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMemberByPk(id: bigint!): TeamMember
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles
  teamMemberRolesStream(batchSize: Int!, cursor: [TeamMemberRolesStreamCursorInput]!, where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberStream(batchSize: Int!, cursor: [TeamMemberStreamCursorInput]!, where: TeamMemberBoolExp): [TeamMember!]!
  teamMetric(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  teamMetricAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  teamMetricByPk(id: bigint!): TeamMetric
  teamMetricStream(batchSize: Int!, cursor: [TeamMetricStreamCursorInput]!, where: TeamMetricBoolExp): [TeamMetric!]!
  teamStream(batchSize: Int!, cursor: [TeamStreamCursorInput]!, where: TeamBoolExp): [Team!]!
  tenant(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  tenantAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  tenantByPk(id: bigint!): Tenant
  tenantStream(batchSize: Int!, cursor: [TenantStreamCursorInput]!, where: TenantBoolExp): [Tenant!]!
  userInfo(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): [UserInfo!]!
  userInfoAggregate(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): UserInfoAggregate!
  userInfoByPk(id: bigint!): UserInfo
  userInfoStream(batchSize: Int!, cursor: [UserInfoStreamCursorInput]!, where: UserInfoBoolExp): [UserInfo!]!
  validation(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  validationByPk(id: bigint!): Validation
  validationStream(batchSize: Int!, cursor: [ValidationStreamCursorInput]!, where: ValidationBoolExp): [Validation!]!
  vote(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  voteAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
  voteByPk(id: bigint!): Vote
  voteStream(batchSize: Int!, cursor: [VoteStreamCursorInput]!, where: VoteBoolExp): [Vote!]!
}

type Tag {
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  color: String!
  contentMasterTags(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): [ContentMasterTags!]!
  contentMasterTagsAggregate(distinctOn: [ContentMasterTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterTagsOrderBy!], where: ContentMasterTagsBoolExp): ContentMasterTagsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint
  individual: Individual
  name: String!
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  slug: String!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type TagAggregate {
  aggregate: TagAggregateFields
  nodes: [Tag!]!
}

input TagAggregateBoolExp {
  count: tagAggregateBoolExpCount
}

input tagAggregateBoolExpCount {
  arguments: [TagSelectColumn!]
  distinct: Boolean
  filter: TagBoolExp
  predicate: IntComparisonExp!
}

type TagAggregateFields {
  avg: TagAvgFields
  count(columns: [TagSelectColumn!], distinct: Boolean): Int!
  max: TagMaxFields
  min: TagMinFields
  stddev: TagStddevFields
  stddevPop: TagStddevPopFields
  stddevSamp: TagStddevSampFields
  sum: TagSumFields
  varPop: TagVarPopFields
  varSamp: TagVarSampFields
  variance: TagVarianceFields
}

input TagAggregateOrderBy {
  avg: TagAvgOrderBy
  count: OrderBy
  max: TagMaxOrderBy
  min: TagMinOrderBy
  stddev: TagStddevOrderBy
  stddevPop: TagStddevPopOrderBy
  stddevSamp: TagStddevSampOrderBy
  sum: TagSumOrderBy
  varPop: TagVarPopOrderBy
  varSamp: TagVarSampOrderBy
  variance: TagVarianceOrderBy
}

input TagArrRelInsertInput {
  data: [TagInsertInput!]!
  onConflict: TagOnConflict
}

type TagAvgFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input TagBoolExp {
  _and: [TagBoolExp!]
  _not: TagBoolExp
  _or: [TagBoolExp!]
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  color: StringComparisonExp
  contentMasterTags: ContentMasterTagsBoolExp
  contentMasterTagsAggregate: ContentMasterTagsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum TagConstraint {
  tag_pkey
}

input TagIncInput {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input TagInsertInput {
  actorTags: ActorTagsArrRelInsertInput
  color: String
  contentMasterTags: ContentMasterTagsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventTags: EventTagsArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  name: String
  projectTags: ProjectTagsArrRelInsertInput
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type TagMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

input TagMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type TagMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

input TagMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type TagMutationResponse {
  affectedRows: Int!
  returning: [Tag!]!
}

input TagObjRelInsertInput {
  data: TagInsertInput!
  onConflict: TagOnConflict
}

input TagOnConflict {
  constraint: TagConstraint!
  updateColumns: [TagUpdateColumn!]! = []
  where: TagBoolExp
}

input TagOrderBy {
  actorTagsAggregate: ActorTagsAggregateOrderBy
  color: OrderBy
  contentMasterTagsAggregate: ContentMasterTagsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input TagPkColumnsInput {
  id: bigint!
}

enum TagSelectColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  imageId
  name
  slug
  tenantId
  type
}

input TagSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

type TagStddevFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagStddevPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagStddevSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input TagStreamCursorInput {
  initialValue: TagStreamCursorValueInput!
  ordering: CursorOrdering
}

input TagStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

type TagSumFields {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input TagSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

enum TagUpdateColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  imageId
  name
  slug
  tenantId
  type
}

input TagUpdates {
  _inc: TagIncInput
  _set: TagSetInput
  where: TagBoolExp!
}

type TagVarianceFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagVarPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagVarSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type Team {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actor: Actor
  canteen: Canteen
  canteenId: bigint
  changeRoles(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRolesAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  classGroup: ClassGroup
  classGroupId: bigint
  cohort: Cohort
  cohortId: bigint
  contentTeams(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): [ContentTeams!]!
  contentTeamsAggregate(distinctOn: [ContentTeamsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentTeamsOrderBy!], where: ContentTeamsBoolExp): ContentTeamsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  currentFinance: Float!
  deletedAt: timestamptz
  directorsCategoryName: String!
  documents(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  fileUpload: FileUpload
  form: Form
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  managersCategoryName: String!
  membersCategoryName: String!
  membershipFees: Int!
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  poles(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  polesAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  roles(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  rolesAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  team: Team
  teamEvents(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): [TeamEvents!]!
  teamEventsAggregate(distinctOn: [TeamEventsSelectColumn!], limit: Int, offset: Int, orderBy: [TeamEventsOrderBy!], where: TeamEventsBoolExp): TeamEventsAggregate!
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenant: Tenant!
  tenantById: Tenant
  tenantId: bigint!
  type: String!
  videoId: bigint
}

type TeamAggregate {
  aggregate: TeamAggregateFields
  nodes: [Team!]!
}

input TeamAggregateBoolExp {
  count: teamAggregateBoolExpCount
}

input teamAggregateBoolExpCount {
  arguments: [TeamSelectColumn!]
  distinct: Boolean
  filter: TeamBoolExp
  predicate: IntComparisonExp!
}

type TeamAggregateFields {
  avg: TeamAvgFields
  count(columns: [TeamSelectColumn!], distinct: Boolean): Int!
  max: TeamMaxFields
  min: TeamMinFields
  stddev: TeamStddevFields
  stddevPop: TeamStddevPopFields
  stddevSamp: TeamStddevSampFields
  sum: TeamSumFields
  varPop: TeamVarPopFields
  varSamp: TeamVarSampFields
  variance: TeamVarianceFields
}

input TeamAggregateOrderBy {
  avg: TeamAvgOrderBy
  count: OrderBy
  max: TeamMaxOrderBy
  min: TeamMinOrderBy
  stddev: TeamStddevOrderBy
  stddevPop: TeamStddevPopOrderBy
  stddevSamp: TeamStddevSampOrderBy
  sum: TeamSumOrderBy
  varPop: TeamVarPopOrderBy
  varSamp: TeamVarSampOrderBy
  variance: TeamVarianceOrderBy
}

input TeamArrRelInsertInput {
  data: [TeamInsertInput!]!
  onConflict: TeamOnConflict
}

type TeamAvgFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

input TeamAvgOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

input TeamBoolExp {
  _and: [TeamBoolExp!]
  _not: TeamBoolExp
  _or: [TeamBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  cohort: CohortBoolExp
  cohortId: BigintComparisonExp
  contentTeams: ContentTeamsBoolExp
  contentTeamsAggregate: ContentTeamsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  currentFinance: FloatComparisonExp
  deletedAt: TimestamptzComparisonExp
  directorsCategoryName: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  fileUpload: FileUploadBoolExp
  form: FormBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  managersCategoryName: StringComparisonExp
  membersCategoryName: StringComparisonExp
  membershipFees: IntComparisonExp
  originalCreationDay: SmallintComparisonExp
  originalCreationMonth: SmallintComparisonExp
  originalCreationYear: SmallintComparisonExp
  parentId: BigintComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  team: TeamBoolExp
  teamEvents: TeamEventsBoolExp
  teamEventsAggregate: TeamEventsAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantById: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  videoId: BigintComparisonExp
}

enum TeamConstraint {
  team_canteen_id_unique
  team_class_group_id_unique
  team_cohort_id_unique
  team_pkey
}

type TeamEvents {
  event: Event!
  eventId: bigint!
  team: Team!
  teamId: bigint!
}

type TeamEventsAggregate {
  aggregate: TeamEventsAggregateFields
  nodes: [TeamEvents!]!
}

input TeamEventsAggregateBoolExp {
  count: teamEventsAggregateBoolExpCount
}

input teamEventsAggregateBoolExpCount {
  arguments: [TeamEventsSelectColumn!]
  distinct: Boolean
  filter: TeamEventsBoolExp
  predicate: IntComparisonExp!
}

type TeamEventsAggregateFields {
  avg: TeamEventsAvgFields
  count(columns: [TeamEventsSelectColumn!], distinct: Boolean): Int!
  max: TeamEventsMaxFields
  min: TeamEventsMinFields
  stddev: TeamEventsStddevFields
  stddevPop: TeamEventsStddevPopFields
  stddevSamp: TeamEventsStddevSampFields
  sum: TeamEventsSumFields
  varPop: TeamEventsVarPopFields
  varSamp: TeamEventsVarSampFields
  variance: TeamEventsVarianceFields
}

input TeamEventsAggregateOrderBy {
  avg: TeamEventsAvgOrderBy
  count: OrderBy
  max: TeamEventsMaxOrderBy
  min: TeamEventsMinOrderBy
  stddev: TeamEventsStddevOrderBy
  stddevPop: TeamEventsStddevPopOrderBy
  stddevSamp: TeamEventsStddevSampOrderBy
  sum: TeamEventsSumOrderBy
  varPop: TeamEventsVarPopOrderBy
  varSamp: TeamEventsVarSampOrderBy
  variance: TeamEventsVarianceOrderBy
}

input TeamEventsArrRelInsertInput {
  data: [TeamEventsInsertInput!]!
  onConflict: TeamEventsOnConflict
}

type TeamEventsAvgFields {
  eventId: Float
  teamId: Float
}

input TeamEventsAvgOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

input TeamEventsBoolExp {
  _and: [TeamEventsBoolExp!]
  _not: TeamEventsBoolExp
  _or: [TeamEventsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
}

enum TeamEventsConstraint {
  team_events_pkey
}

input TeamEventsIncInput {
  eventId: bigint
  teamId: bigint
}

input TeamEventsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
}

type TeamEventsMaxFields {
  eventId: bigint
  teamId: bigint
}

input TeamEventsMaxOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

type TeamEventsMinFields {
  eventId: bigint
  teamId: bigint
}

input TeamEventsMinOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

type TeamEventsMutationResponse {
  affectedRows: Int!
  returning: [TeamEvents!]!
}

input TeamEventsOnConflict {
  constraint: TeamEventsConstraint!
  updateColumns: [TeamEventsUpdateColumn!]! = []
  where: TeamEventsBoolExp
}

input TeamEventsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
}

input TeamEventsPkColumnsInput {
  eventId: bigint!
  teamId: bigint!
}

enum TeamEventsSelectColumn {
  eventId
  teamId
}

input TeamEventsSetInput {
  eventId: bigint
  teamId: bigint
}

type TeamEventsStddevFields {
  eventId: Float
  teamId: Float
}

input TeamEventsStddevOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

type TeamEventsStddevPopFields {
  eventId: Float
  teamId: Float
}

input TeamEventsStddevPopOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

type TeamEventsStddevSampFields {
  eventId: Float
  teamId: Float
}

input TeamEventsStddevSampOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

input TeamEventsStreamCursorInput {
  initialValue: TeamEventsStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamEventsStreamCursorValueInput {
  eventId: bigint
  teamId: bigint
}

type TeamEventsSumFields {
  eventId: bigint
  teamId: bigint
}

input TeamEventsSumOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

enum TeamEventsUpdateColumn {
  eventId
  teamId
}

input TeamEventsUpdates {
  _inc: TeamEventsIncInput
  _set: TeamEventsSetInput
  where: TeamEventsBoolExp!
}

type TeamEventsVarianceFields {
  eventId: Float
  teamId: Float
}

input TeamEventsVarianceOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

type TeamEventsVarPopFields {
  eventId: Float
  teamId: Float
}

input TeamEventsVarPopOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

type TeamEventsVarSampFields {
  eventId: Float
  teamId: Float
}

input TeamEventsVarSampOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

type TeamFinance {
  actor: Actor
  actorAddress: ActorAddress
  addressId: bigint
  addressType: String!
  amount: Float!
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  event: Event
  eventId: bigint
  expense: Expense
  expenseId: bigint
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  method: String!
  name: String!
  payedAt: timestamptz!
  payedById: bigint
  payedByType: String!
  project: Project
  projectId: bigint
  receiptId: bigint
  state: String!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type TeamFinanceAggregate {
  aggregate: TeamFinanceAggregateFields
  nodes: [TeamFinance!]!
}

input TeamFinanceAggregateBoolExp {
  count: teamFinanceAggregateBoolExpCount
}

input teamFinanceAggregateBoolExpCount {
  arguments: [TeamFinanceSelectColumn!]
  distinct: Boolean
  filter: TeamFinanceBoolExp
  predicate: IntComparisonExp!
}

type TeamFinanceAggregateFields {
  avg: TeamFinanceAvgFields
  count(columns: [TeamFinanceSelectColumn!], distinct: Boolean): Int!
  max: TeamFinanceMaxFields
  min: TeamFinanceMinFields
  stddev: TeamFinanceStddevFields
  stddevPop: TeamFinanceStddevPopFields
  stddevSamp: TeamFinanceStddevSampFields
  sum: TeamFinanceSumFields
  varPop: TeamFinanceVarPopFields
  varSamp: TeamFinanceVarSampFields
  variance: TeamFinanceVarianceFields
}

input TeamFinanceAggregateOrderBy {
  avg: TeamFinanceAvgOrderBy
  count: OrderBy
  max: TeamFinanceMaxOrderBy
  min: TeamFinanceMinOrderBy
  stddev: TeamFinanceStddevOrderBy
  stddevPop: TeamFinanceStddevPopOrderBy
  stddevSamp: TeamFinanceStddevSampOrderBy
  sum: TeamFinanceSumOrderBy
  varPop: TeamFinanceVarPopOrderBy
  varSamp: TeamFinanceVarSampOrderBy
  variance: TeamFinanceVarianceOrderBy
}

input TeamFinanceArrRelInsertInput {
  data: [TeamFinanceInsertInput!]!
  onConflict: TeamFinanceOnConflict
}

type TeamFinanceAvgFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

input TeamFinanceAvgOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamFinanceBoolExp {
  _and: [TeamFinanceBoolExp!]
  _not: TeamFinanceBoolExp
  _or: [TeamFinanceBoolExp!]
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  addressType: StringComparisonExp
  amount: FloatComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  method: StringComparisonExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedById: BigintComparisonExp
  payedByType: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  receiptId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum TeamFinanceConstraint {
  team_finance_expense_id_unique
  team_finance_pkey
}

input TeamFinanceIncInput {
  addressId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  projectId: bigint
  receiptId: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamFinanceInsertInput {
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  receiptId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type TeamFinanceMaxFields {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input TeamFinanceMaxOrderBy {
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamFinanceMinFields {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input TeamFinanceMinOrderBy {
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamFinanceMutationResponse {
  affectedRows: Int!
  returning: [TeamFinance!]!
}

input TeamFinanceObjRelInsertInput {
  data: TeamFinanceInsertInput!
  onConflict: TeamFinanceOnConflict
}

input TeamFinanceOnConflict {
  constraint: TeamFinanceConstraint!
  updateColumns: [TeamFinanceUpdateColumn!]! = []
  where: TeamFinanceBoolExp
}

input TeamFinanceOrderBy {
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  receiptId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input TeamFinancePkColumnsInput {
  id: bigint!
}

enum TeamFinanceSelectColumn {
  addressId
  addressType
  amount
  category
  createdAt
  createdById
  deletedAt
  description
  eventId
  expenseId
  hiddenAt
  id
  method
  name
  payedAt
  payedById
  payedByType
  projectId
  receiptId
  state
  teamId
  tenantId
}

input TeamFinanceSetInput {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type TeamFinanceStddevFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

input TeamFinanceStddevOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamFinanceStddevPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

input TeamFinanceStddevPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamFinanceStddevSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

input TeamFinanceStddevSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamFinanceStreamCursorInput {
  initialValue: TeamFinanceStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamFinanceStreamCursorValueInput {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type TeamFinanceSumFields {
  addressId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  projectId: bigint
  receiptId: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamFinanceSumOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum TeamFinanceUpdateColumn {
  addressId
  addressType
  amount
  category
  createdAt
  createdById
  deletedAt
  description
  eventId
  expenseId
  hiddenAt
  id
  method
  name
  payedAt
  payedById
  payedByType
  projectId
  receiptId
  state
  teamId
  tenantId
}

input TeamFinanceUpdates {
  _inc: TeamFinanceIncInput
  _set: TeamFinanceSetInput
  where: TeamFinanceBoolExp!
}

type TeamFinanceVarianceFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

input TeamFinanceVarianceOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamFinanceVarPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

input TeamFinanceVarPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamFinanceVarSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

input TeamFinanceVarSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamIncInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  currentFinance: Float
  id: bigint
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  videoId: bigint
}

input TeamInsertInput {
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  changeRoles: ChangeRoleArrRelInsertInput
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  cohort: CohortObjRelInsertInput
  cohortId: bigint
  contentTeams: ContentTeamsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  documents: DocumentArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  form: FormObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  poles: PoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  roles: RoleArrRelInsertInput
  team: TeamObjRelInsertInput
  teamEvents: TeamEventsArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  videoId: bigint
}

type TeamJoin {
  askedRoleId: bigint!
  changeRole: ChangeRole
  changeRoleId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  joinerId: bigint!
  role: Role!
  state: String!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  userInfo: UserInfo!
}

type TeamJoinAggregate {
  aggregate: TeamJoinAggregateFields
  nodes: [TeamJoin!]!
}

input TeamJoinAggregateBoolExp {
  count: teamJoinAggregateBoolExpCount
}

input teamJoinAggregateBoolExpCount {
  arguments: [TeamJoinSelectColumn!]
  distinct: Boolean
  filter: TeamJoinBoolExp
  predicate: IntComparisonExp!
}

type TeamJoinAggregateFields {
  avg: TeamJoinAvgFields
  count(columns: [TeamJoinSelectColumn!], distinct: Boolean): Int!
  max: TeamJoinMaxFields
  min: TeamJoinMinFields
  stddev: TeamJoinStddevFields
  stddevPop: TeamJoinStddevPopFields
  stddevSamp: TeamJoinStddevSampFields
  sum: TeamJoinSumFields
  varPop: TeamJoinVarPopFields
  varSamp: TeamJoinVarSampFields
  variance: TeamJoinVarianceFields
}

input TeamJoinAggregateOrderBy {
  avg: TeamJoinAvgOrderBy
  count: OrderBy
  max: TeamJoinMaxOrderBy
  min: TeamJoinMinOrderBy
  stddev: TeamJoinStddevOrderBy
  stddevPop: TeamJoinStddevPopOrderBy
  stddevSamp: TeamJoinStddevSampOrderBy
  sum: TeamJoinSumOrderBy
  varPop: TeamJoinVarPopOrderBy
  varSamp: TeamJoinVarSampOrderBy
  variance: TeamJoinVarianceOrderBy
}

input TeamJoinArrRelInsertInput {
  data: [TeamJoinInsertInput!]!
  onConflict: TeamJoinOnConflict
}

type TeamJoinAvgFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinAvgOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamJoinBoolExp {
  _and: [TeamJoinBoolExp!]
  _not: TeamJoinBoolExp
  _or: [TeamJoinBoolExp!]
  askedRoleId: BigintComparisonExp
  changeRole: ChangeRoleBoolExp
  changeRoleId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  joinerId: BigintComparisonExp
  role: RoleBoolExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum TeamJoinConstraint {
  team_join_change_role_id_unique
  team_join_pkey
}

input TeamJoinIncInput {
  askedRoleId: bigint
  changeRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamJoinInsertInput {
  askedRoleId: bigint
  changeRole: ChangeRoleObjRelInsertInput
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  joinerId: bigint
  role: RoleObjRelInsertInput
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type TeamJoinMaxFields {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input TeamJoinMaxOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinMinFields {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input TeamJoinMinOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinMutationResponse {
  affectedRows: Int!
  returning: [TeamJoin!]!
}

input TeamJoinObjRelInsertInput {
  data: TeamJoinInsertInput!
  onConflict: TeamJoinOnConflict
}

input TeamJoinOnConflict {
  constraint: TeamJoinConstraint!
  updateColumns: [TeamJoinUpdateColumn!]! = []
  where: TeamJoinBoolExp
}

input TeamJoinOrderBy {
  askedRoleId: OrderBy
  changeRole: ChangeRoleOrderBy
  changeRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  joinerId: OrderBy
  role: RoleOrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

input TeamJoinPkColumnsInput {
  id: bigint!
}

enum TeamJoinSelectColumn {
  askedRoleId
  changeRoleId
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  joinerId
  state
  teamId
  tenantId
}

input TeamJoinSetInput {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type TeamJoinStddevFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinStddevOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinStddevPopFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinStddevPopOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinStddevSampFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinStddevSampOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamJoinStreamCursorInput {
  initialValue: TeamJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamJoinStreamCursorValueInput {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type TeamJoinSumFields {
  askedRoleId: bigint
  changeRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamJoinSumOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum TeamJoinUpdateColumn {
  askedRoleId
  changeRoleId
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  joinerId
  state
  teamId
  tenantId
}

input TeamJoinUpdates {
  _inc: TeamJoinIncInput
  _set: TeamJoinSetInput
  where: TeamJoinBoolExp!
}

type TeamJoinVarianceFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinVarianceOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinVarPopFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinVarPopOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinVarSampFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinVarSampOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamMaxFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

input TeamMaxOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

type TeamMember {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  permissions: Int!
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  startDate: timestamptz!
  team: Team!
  teamId: bigint!
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!
  userInfo: UserInfo!
}

type TeamMemberAggregate {
  aggregate: TeamMemberAggregateFields
  nodes: [TeamMember!]!
}

input TeamMemberAggregateBoolExp {
  count: teamMemberAggregateBoolExpCount
}

input teamMemberAggregateBoolExpCount {
  arguments: [TeamMemberSelectColumn!]
  distinct: Boolean
  filter: TeamMemberBoolExp
  predicate: IntComparisonExp!
}

type TeamMemberAggregateFields {
  avg: TeamMemberAvgFields
  count(columns: [TeamMemberSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberMaxFields
  min: TeamMemberMinFields
  stddev: TeamMemberStddevFields
  stddevPop: TeamMemberStddevPopFields
  stddevSamp: TeamMemberStddevSampFields
  sum: TeamMemberSumFields
  varPop: TeamMemberVarPopFields
  varSamp: TeamMemberVarSampFields
  variance: TeamMemberVarianceFields
}

input TeamMemberAggregateOrderBy {
  avg: TeamMemberAvgOrderBy
  count: OrderBy
  max: TeamMemberMaxOrderBy
  min: TeamMemberMinOrderBy
  stddev: TeamMemberStddevOrderBy
  stddevPop: TeamMemberStddevPopOrderBy
  stddevSamp: TeamMemberStddevSampOrderBy
  sum: TeamMemberSumOrderBy
  varPop: TeamMemberVarPopOrderBy
  varSamp: TeamMemberVarSampOrderBy
  variance: TeamMemberVarianceOrderBy
}

input TeamMemberArrRelInsertInput {
  data: [TeamMemberInsertInput!]!
  onConflict: TeamMemberOnConflict
}

type TeamMemberAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input TeamMemberBoolExp {
  _and: [TeamMemberBoolExp!]
  _not: TeamMemberBoolExp
  _or: [TeamMemberBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  permissions: IntComparisonExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  startDate: TimestamptzComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

enum TeamMemberConstraint {
  team_member_pkey
}

input TeamMemberIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  permissions: Int
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  startDate: timestamptz
  team: TeamObjRelInsertInput
  teamId: bigint
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

type TeamMemberMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberMutationResponse {
  affectedRows: Int!
  returning: [TeamMember!]!
}

input TeamMemberObjRelInsertInput {
  data: TeamMemberInsertInput!
  onConflict: TeamMemberOnConflict
}

input TeamMemberOnConflict {
  constraint: TeamMemberConstraint!
  updateColumns: [TeamMemberUpdateColumn!]! = []
  where: TeamMemberBoolExp
}

input TeamMemberOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  permissions: OrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  startDate: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

input TeamMemberPkColumnsInput {
  id: bigint!
}

type TeamMemberRoles {
  role: Role!
  roleId: bigint!
  teamMember: TeamMember!
  teamMemberId: bigint!
}

type TeamMemberRolesAggregate {
  aggregate: TeamMemberRolesAggregateFields
  nodes: [TeamMemberRoles!]!
}

input TeamMemberRolesAggregateBoolExp {
  count: teamMemberRolesAggregateBoolExpCount
}

input teamMemberRolesAggregateBoolExpCount {
  arguments: [TeamMemberRolesSelectColumn!]
  distinct: Boolean
  filter: TeamMemberRolesBoolExp
  predicate: IntComparisonExp!
}

type TeamMemberRolesAggregateFields {
  avg: TeamMemberRolesAvgFields
  count(columns: [TeamMemberRolesSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberRolesMaxFields
  min: TeamMemberRolesMinFields
  stddev: TeamMemberRolesStddevFields
  stddevPop: TeamMemberRolesStddevPopFields
  stddevSamp: TeamMemberRolesStddevSampFields
  sum: TeamMemberRolesSumFields
  varPop: TeamMemberRolesVarPopFields
  varSamp: TeamMemberRolesVarSampFields
  variance: TeamMemberRolesVarianceFields
}

input TeamMemberRolesAggregateOrderBy {
  avg: TeamMemberRolesAvgOrderBy
  count: OrderBy
  max: TeamMemberRolesMaxOrderBy
  min: TeamMemberRolesMinOrderBy
  stddev: TeamMemberRolesStddevOrderBy
  stddevPop: TeamMemberRolesStddevPopOrderBy
  stddevSamp: TeamMemberRolesStddevSampOrderBy
  sum: TeamMemberRolesSumOrderBy
  varPop: TeamMemberRolesVarPopOrderBy
  varSamp: TeamMemberRolesVarSampOrderBy
  variance: TeamMemberRolesVarianceOrderBy
}

input TeamMemberRolesArrRelInsertInput {
  data: [TeamMemberRolesInsertInput!]!
  onConflict: TeamMemberRolesOnConflict
}

type TeamMemberRolesAvgFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesAvgOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

input TeamMemberRolesBoolExp {
  _and: [TeamMemberRolesBoolExp!]
  _not: TeamMemberRolesBoolExp
  _or: [TeamMemberRolesBoolExp!]
  role: RoleBoolExp
  roleId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

enum TeamMemberRolesConstraint {
  team_member_roles_pkey
}

input TeamMemberRolesIncInput {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesInsertInput {
  role: RoleObjRelInsertInput
  roleId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

type TeamMemberRolesMaxFields {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesMaxOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesMinFields {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesMinOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesMutationResponse {
  affectedRows: Int!
  returning: [TeamMemberRoles!]!
}

input TeamMemberRolesOnConflict {
  constraint: TeamMemberRolesConstraint!
  updateColumns: [TeamMemberRolesUpdateColumn!]! = []
  where: TeamMemberRolesBoolExp
}

input TeamMemberRolesOrderBy {
  role: RoleOrderBy
  roleId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

input TeamMemberRolesPkColumnsInput {
  roleId: bigint!
  teamMemberId: bigint!
}

enum TeamMemberRolesSelectColumn {
  roleId
  teamMemberId
}

input TeamMemberRolesSetInput {
  roleId: bigint
  teamMemberId: bigint
}

type TeamMemberRolesStddevFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesStddevOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesStddevPopFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesStddevPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesStddevSampFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesStddevSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

input TeamMemberRolesStreamCursorInput {
  initialValue: TeamMemberRolesStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMemberRolesStreamCursorValueInput {
  roleId: bigint
  teamMemberId: bigint
}

type TeamMemberRolesSumFields {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesSumOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

enum TeamMemberRolesUpdateColumn {
  roleId
  teamMemberId
}

input TeamMemberRolesUpdates {
  _inc: TeamMemberRolesIncInput
  _set: TeamMemberRolesSetInput
  where: TeamMemberRolesBoolExp!
}

type TeamMemberRolesVarianceFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesVarianceOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesVarPopFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesVarPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesVarSampFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesVarSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

enum TeamMemberSelectColumn {
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  permissions
  startDate
  teamId
  tenantId
  userId
}

input TeamMemberSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type TeamMemberStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input TeamMemberStreamCursorInput {
  initialValue: TeamMemberStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMemberStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type TeamMemberSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum TeamMemberUpdateColumn {
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  permissions
  startDate
  teamId
  tenantId
  userId
}

input TeamMemberUpdates {
  _inc: TeamMemberIncInput
  _set: TeamMemberSetInput
  where: TeamMemberBoolExp!
}

type TeamMemberVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMetric {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  value: String!
}

type TeamMetricAggregate {
  aggregate: TeamMetricAggregateFields
  nodes: [TeamMetric!]!
}

input TeamMetricAggregateBoolExp {
  count: teamMetricAggregateBoolExpCount
}

input teamMetricAggregateBoolExpCount {
  arguments: [TeamMetricSelectColumn!]
  distinct: Boolean
  filter: TeamMetricBoolExp
  predicate: IntComparisonExp!
}

type TeamMetricAggregateFields {
  avg: TeamMetricAvgFields
  count(columns: [TeamMetricSelectColumn!], distinct: Boolean): Int!
  max: TeamMetricMaxFields
  min: TeamMetricMinFields
  stddev: TeamMetricStddevFields
  stddevPop: TeamMetricStddevPopFields
  stddevSamp: TeamMetricStddevSampFields
  sum: TeamMetricSumFields
  varPop: TeamMetricVarPopFields
  varSamp: TeamMetricVarSampFields
  variance: TeamMetricVarianceFields
}

input TeamMetricAggregateOrderBy {
  avg: TeamMetricAvgOrderBy
  count: OrderBy
  max: TeamMetricMaxOrderBy
  min: TeamMetricMinOrderBy
  stddev: TeamMetricStddevOrderBy
  stddevPop: TeamMetricStddevPopOrderBy
  stddevSamp: TeamMetricStddevSampOrderBy
  sum: TeamMetricSumOrderBy
  varPop: TeamMetricVarPopOrderBy
  varSamp: TeamMetricVarSampOrderBy
  variance: TeamMetricVarianceOrderBy
}

input TeamMetricArrRelInsertInput {
  data: [TeamMetricInsertInput!]!
  onConflict: TeamMetricOnConflict
}

type TeamMetricAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input TeamMetricBoolExp {
  _and: [TeamMetricBoolExp!]
  _not: TeamMetricBoolExp
  _or: [TeamMetricBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  value: StringComparisonExp
}

enum TeamMetricConstraint {
  team_metric_pkey
}

input TeamMetricIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input TeamMetricInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  value: String
}

type TeamMetricMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

input TeamMetricMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

type TeamMetricMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

input TeamMetricMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

type TeamMetricMutationResponse {
  affectedRows: Int!
  returning: [TeamMetric!]!
}

input TeamMetricOnConflict {
  constraint: TeamMetricConstraint!
  updateColumns: [TeamMetricUpdateColumn!]! = []
  where: TeamMetricBoolExp
}

input TeamMetricOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

input TeamMetricPkColumnsInput {
  id: bigint!
}

enum TeamMetricSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  type
  value
}

input TeamMetricSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

type TeamMetricStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input TeamMetricStreamCursorInput {
  initialValue: TeamMetricStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMetricStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

type TeamMetricSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input TeamMetricSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum TeamMetricUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  type
  value
}

input TeamMetricUpdates {
  _inc: TeamMetricIncInput
  _set: TeamMetricSetInput
  where: TeamMetricBoolExp!
}

type TeamMetricVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMinFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

input TeamMinOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

type TeamMutationResponse {
  affectedRows: Int!
  returning: [Team!]!
}

input TeamObjRelInsertInput {
  data: TeamInsertInput!
  onConflict: TeamOnConflict
}

input TeamOnConflict {
  constraint: TeamConstraint!
  updateColumns: [TeamUpdateColumn!]! = []
  where: TeamBoolExp
}

input TeamOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  canteen: CanteenOrderBy
  canteenId: OrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  cohort: CohortOrderBy
  cohortId: OrderBy
  contentTeamsAggregate: ContentTeamsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  fileUpload: FileUploadOrderBy
  form: FormOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  team: TeamOrderBy
  teamEventsAggregate: TeamEventsAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantById: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

input TeamPkColumnsInput {
  id: bigint!
}

enum TeamSelectColumn {
  canteenId
  classGroupId
  cohortId
  createdAt
  createdById
  currentFinance
  deletedAt
  directorsCategoryName
  hiddenAt
  id
  managersCategoryName
  membersCategoryName
  membershipFees
  originalCreationDay
  originalCreationMonth
  originalCreationYear
  parentId
  tenantId
  type
  videoId
}

input TeamSetInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

type TeamStddevFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

input TeamStddevOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamStddevPopFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

input TeamStddevPopOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamStddevSampFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

input TeamStddevSampOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

input TeamStreamCursorInput {
  initialValue: TeamStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamStreamCursorValueInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

type TeamSumFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  currentFinance: Float
  id: bigint
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  videoId: bigint
}

input TeamSumOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

enum TeamUpdateColumn {
  canteenId
  classGroupId
  cohortId
  createdAt
  createdById
  currentFinance
  deletedAt
  directorsCategoryName
  hiddenAt
  id
  managersCategoryName
  membersCategoryName
  membershipFees
  originalCreationDay
  originalCreationMonth
  originalCreationYear
  parentId
  tenantId
  type
  videoId
}

input TeamUpdates {
  _inc: TeamIncInput
  _set: TeamSetInput
  where: TeamBoolExp!
}

type TeamVarianceFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

input TeamVarianceOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamVarPopFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

input TeamVarPopOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamVarSampFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

input TeamVarSampOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type Tenant {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actorAddresses(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): [ActorAddress!]!
  actorAddressesAggregate(distinctOn: [ActorAddressSelectColumn!], limit: Int, offset: Int, orderBy: [ActorAddressOrderBy!], where: ActorAddressBoolExp): ActorAddressAggregate!
  actorBankInfos(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): [ActorBankInfo!]!
  actorBankInfosAggregate(distinctOn: [ActorBankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [ActorBankInfoOrderBy!], where: ActorBankInfoBoolExp): ActorBankInfoAggregate!
  actorFinances(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): [ActorFinance!]!
  actorFinancesAggregate(distinctOn: [ActorFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [ActorFinanceOrderBy!], where: ActorFinanceBoolExp): ActorFinanceAggregate!
  actorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actors(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorsAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  botInfos(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): [BotInfo!]!
  botInfosAggregate(distinctOn: [BotInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BotInfoOrderBy!], where: BotInfoBoolExp): BotInfoAggregate!
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  canteenFoods(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodsAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenMenus(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenusAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  canteens(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  canteensAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  changeRoles(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRolesAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  classGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  classGroups(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupsAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  cohorts(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  cohortsAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  contentMasters(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): [ContentMaster!]!
  contentMastersAggregate(distinctOn: [ContentMasterSelectColumn!], limit: Int, offset: Int, orderBy: [ContentMasterOrderBy!], where: ContentMasterBoolExp): ContentMasterAggregate!
  contents(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentsAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  documentEdits(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): [DocumentEdit!]!
  documentEditsAggregate(distinctOn: [DocumentEditSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentEditOrderBy!], where: DocumentEditBoolExp): DocumentEditAggregate!
  documents(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  domain: String!
  eventApprovalSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventAttendances(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): [EventAttendance!]!
  eventAttendancesAggregate(distinctOn: [EventAttendanceSelectColumn!], limit: Int, offset: Int, orderBy: [EventAttendanceOrderBy!], where: EventAttendanceBoolExp): EventAttendanceAggregate!
  eventChangeRoles(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): [EventChangeRole!]!
  eventChangeRolesAggregate(distinctOn: [EventChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventChangeRoleOrderBy!], where: EventChangeRoleBoolExp): EventChangeRoleAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventRoles(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): [EventRole!]!
  eventRolesAggregate(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): EventRoleAggregate!
  eventValidationFormId: bigint
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  favorites(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoritesAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  fileUploads(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadsAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  follows(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followsAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  form: Form
  formEdits(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): [FormEdit!]!
  formEditsAggregate(distinctOn: [FormEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormEditOrderBy!], where: FormEditBoolExp): FormEditAggregate!
  formSubmissionEdits(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): [FormSubmissionEdit!]!
  formSubmissionEditsAggregate(distinctOn: [FormSubmissionEditSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionEditOrderBy!], where: FormSubmissionEditBoolExp): FormSubmissionEditAggregate!
  formSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  forms(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formsAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  id: bigint!
  individual: Individual
  individuals(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  individualsAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  issues(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  issuesAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  name: String!
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean!
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String!
  poles(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  polesAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  projectRoles(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): [ProjectRole!]!
  projectRolesAggregate(distinctOn: [ProjectRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectRoleOrderBy!], where: ProjectRoleBoolExp): ProjectRoleAggregate!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  reactions(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionsAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  roles(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  rolesAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  sessions(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionsAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  shortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  socials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  subjects(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  subjectsAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  tags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  team: Team
  teamFinances(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): [TeamFinance!]!
  teamFinancesAggregate(distinctOn: [TeamFinanceSelectColumn!], limit: Int, offset: Int, orderBy: [TeamFinanceOrderBy!], where: TeamFinanceBoolExp): TeamFinanceAggregate!
  teamId: bigint
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMetrics(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  teamMetricsAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  userInfos(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): [UserInfo!]!
  userInfosAggregate(distinctOn: [UserInfoSelectColumn!], limit: Int, offset: Int, orderBy: [UserInfoOrderBy!], where: UserInfoBoolExp): UserInfoAggregate!
  validations(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationsAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  votes(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  votesAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
}

type TenantAggregate {
  aggregate: TenantAggregateFields
  nodes: [Tenant!]!
}

input TenantAggregateBoolExp {
  bool_and: tenantAggregateBoolExpBool_and
  bool_or: tenantAggregateBoolExpBool_or
  count: tenantAggregateBoolExpCount
}

input tenantAggregateBoolExpBool_and {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpBool_or {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpCount {
  arguments: [TenantSelectColumn!]
  distinct: Boolean
  filter: TenantBoolExp
  predicate: IntComparisonExp!
}

type TenantAggregateFields {
  avg: TenantAvgFields
  count(columns: [TenantSelectColumn!], distinct: Boolean): Int!
  max: TenantMaxFields
  min: TenantMinFields
  stddev: TenantStddevFields
  stddevPop: TenantStddevPopFields
  stddevSamp: TenantStddevSampFields
  sum: TenantSumFields
  varPop: TenantVarPopFields
  varSamp: TenantVarSampFields
  variance: TenantVarianceFields
}

input TenantAggregateOrderBy {
  avg: TenantAvgOrderBy
  count: OrderBy
  max: TenantMaxOrderBy
  min: TenantMinOrderBy
  stddev: TenantStddevOrderBy
  stddevPop: TenantStddevPopOrderBy
  stddevSamp: TenantStddevSampOrderBy
  sum: TenantSumOrderBy
  varPop: TenantVarPopOrderBy
  varSamp: TenantVarSampOrderBy
  variance: TenantVarianceOrderBy
}

input TenantArrRelInsertInput {
  data: [TenantInsertInput!]!
  onConflict: TenantOnConflict
}

type TenantAvgFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

input TenantAvgOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

input TenantBoolExp {
  _and: [TenantBoolExp!]
  _not: TenantBoolExp
  _or: [TenantBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  canteens: CanteenBoolExp
  canteensAggregate: CanteenAggregateBoolExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  classGroups: ClassGroupBoolExp
  classGroupsAggregate: ClassGroupAggregateBoolExp
  cohorts: CohortBoolExp
  cohortsAggregate: CohortAggregateBoolExp
  contentMasters: ContentMasterBoolExp
  contentMastersAggregate: ContentMasterAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  domain: StringComparisonExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventAttendances: EventAttendanceBoolExp
  eventAttendancesAggregate: EventAttendanceAggregateBoolExp
  eventChangeRoles: EventChangeRoleBoolExp
  eventChangeRolesAggregate: EventChangeRoleAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  eventValidationFormId: BigintComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  form: FormBoolExp
  formEdits: FormEditBoolExp
  formEditsAggregate: FormEditAggregateBoolExp
  formSubmissionEdits: FormSubmissionEditBoolExp
  formSubmissionEditsAggregate: FormSubmissionEditAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individuals: IndividualBoolExp
  individualsAggregate: IndividualAggregateBoolExp
  issues: IssueBoolExp
  issuesAggregate: IssueAggregateBoolExp
  name: StringComparisonExp
  oidcInfoOidcCallbackUri: StringComparisonExp
  oidcInfoOidcClientId: StringComparisonExp
  oidcInfoOidcClientSecret: StringComparisonExp
  oidcInfoOidcDiscoveryUrl: StringComparisonExp
  oidcInfoOidcEnabled: BooleanComparisonExp
  oidcInfoOidcName: StringComparisonExp
  oidcInfoOidcScopes: StringComparisonExp
  pointName: StringComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projectRoles: ProjectRoleBoolExp
  projectRolesAggregate: ProjectRoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  subjects: SubjectBoolExp
  subjectsAggregate: SubjectAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  team: TeamBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamMetrics: TeamMetricBoolExp
  teamMetricsAggregate: TeamMetricAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  userInfos: UserInfoBoolExp
  userInfosAggregate: UserInfoAggregateBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

enum TenantConstraint {
  tenant_domain_unique
  tenant_event_validation_form_id_unique
  tenant_pkey
  tenant_team_id_unique
}

input TenantIncInput {
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
  teamId: bigint
}

input TenantInsertInput {
  actions: ActionArrRelInsertInput
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actors: ActorArrRelInsertInput
  botInfos: BotInfoArrRelInsertInput
  campuses: CampusArrRelInsertInput
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  canteens: CanteenArrRelInsertInput
  changeRoles: ChangeRoleArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  classGroups: ClassGroupArrRelInsertInput
  cohorts: CohortArrRelInsertInput
  contentMasters: ContentMasterArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentEdits: DocumentEditArrRelInsertInput
  documents: DocumentArrRelInsertInput
  domain: String
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventAttendances: EventAttendanceArrRelInsertInput
  eventChangeRoles: EventChangeRoleArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  eventValidationFormId: bigint
  events: EventArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  favorites: FavoriteArrRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  follows: FollowArrRelInsertInput
  form: FormObjRelInsertInput
  formEdits: FormEditArrRelInsertInput
  formSubmissionEdits: FormSubmissionEditArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  id: bigint
  individual: IndividualObjRelInsertInput
  individuals: IndividualArrRelInsertInput
  issues: IssueArrRelInsertInput
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  poles: PoleArrRelInsertInput
  projectRoles: ProjectRoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  roles: RoleArrRelInsertInput
  sessions: SessionArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  socials: SocialArrRelInsertInput
  subjects: SubjectArrRelInsertInput
  tags: TagArrRelInsertInput
  team: TeamObjRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamMetrics: TeamMetricArrRelInsertInput
  teams: TeamArrRelInsertInput
  userInfos: UserInfoArrRelInsertInput
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

type TenantMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

input TenantMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  teamId: OrderBy
}

type TenantMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

input TenantMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  teamId: OrderBy
}

type TenantMutationResponse {
  affectedRows: Int!
  returning: [Tenant!]!
}

input TenantObjRelInsertInput {
  data: TenantInsertInput!
  onConflict: TenantOnConflict
}

input TenantOnConflict {
  constraint: TenantConstraint!
  updateColumns: [TenantUpdateColumn!]! = []
  where: TenantBoolExp
}

input TenantOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  canteensAggregate: CanteenAggregateOrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  classGroupsAggregate: ClassGroupAggregateOrderBy
  cohortsAggregate: CohortAggregateOrderBy
  contentMastersAggregate: ContentMasterAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  documentsAggregate: DocumentAggregateOrderBy
  domain: OrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventAttendancesAggregate: EventAttendanceAggregateOrderBy
  eventChangeRolesAggregate: EventChangeRoleAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventValidationFormId: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  form: FormOrderBy
  formEditsAggregate: FormEditAggregateOrderBy
  formSubmissionEditsAggregate: FormSubmissionEditAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualsAggregate: IndividualAggregateOrderBy
  issuesAggregate: IssueAggregateOrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcEnabled: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectRolesAggregate: ProjectRoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  sessionsAggregate: SessionAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  subjectsAggregate: SubjectAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  team: TeamOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamMetricsAggregate: TeamMetricAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  userInfosAggregate: UserInfoAggregateOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

input TenantPkColumnsInput {
  id: bigint!
}

enum TenantSelectColumn {
  createdAt
  createdById
  deletedAt
  domain
  eventValidationFormId
  id
  name
  oidcInfoOidcCallbackUri
  oidcInfoOidcClientId
  oidcInfoOidcClientSecret
  oidcInfoOidcDiscoveryUrl
  oidcInfoOidcEnabled
  oidcInfoOidcName
  oidcInfoOidcScopes
  pointName
  teamId
}

enum TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns {
  oidcInfoOidcEnabled
}

enum TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns {
  oidcInfoOidcEnabled
}

input TenantSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

type TenantStddevFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

input TenantStddevOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

type TenantStddevPopFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

input TenantStddevPopOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

type TenantStddevSampFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

input TenantStddevSampOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

input TenantStreamCursorInput {
  initialValue: TenantStreamCursorValueInput!
  ordering: CursorOrdering
}

input TenantStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

type TenantSumFields {
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
  teamId: bigint
}

input TenantSumOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

enum TenantUpdateColumn {
  createdAt
  createdById
  deletedAt
  domain
  eventValidationFormId
  id
  name
  oidcInfoOidcCallbackUri
  oidcInfoOidcClientId
  oidcInfoOidcClientSecret
  oidcInfoOidcDiscoveryUrl
  oidcInfoOidcEnabled
  oidcInfoOidcName
  oidcInfoOidcScopes
  pointName
  teamId
}

input TenantUpdates {
  _inc: TenantIncInput
  _set: TenantSetInput
  where: TenantBoolExp!
}

type TenantVarianceFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

input TenantVarianceOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

type TenantVarPopFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

input TenantVarPopOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

type TenantVarSampFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

input TenantVarSampOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

scalar timestamptz

input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

type UserInfo {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  changeRoles(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): [ChangeRole!]!
  changeRolesAggregate(distinctOn: [ChangeRoleSelectColumn!], limit: Int, offset: Int, orderBy: [ChangeRoleOrderBy!], where: ChangeRoleBoolExp): ChangeRoleAggregate!
  classGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventRoles(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): [EventRole!]!
  eventRolesAggregate(distinctOn: [EventRoleSelectColumn!], limit: Int, offset: Int, orderBy: [EventRoleOrderBy!], where: EventRoleBoolExp): EventRoleAggregate!
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  finishedIntroduction: Boolean!
  finishedOnboarding: Boolean!
  firstName: String!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  individualById: Individual
  lastName: String!
  middleNames: _text!
  notificationSettingsAdminEventValidationApproved: smallint!
  notificationSettingsAdminEventValidationRejected: smallint!
  notificationSettingsAdminEventValidationStarted: smallint!
  notificationSettingsAdminEventValidationStep: smallint!
  notificationSettingsAdminReportCreated: smallint!
  notificationSettingsAdminRoleUpdated: smallint!
  notificationSettingsAdminTeamLegalFileUpdated: smallint!
  notificationSettingsAdminTeamSocialUpdated: smallint!
  notificationSettingsAdminThreadAssigned: smallint!
  notificationSettingsAdminThreadAssignedStale: smallint!
  notificationSettingsAdminThreadAssignedStaleThreshold: Int!
  notificationSettingsAdminThreadStale: smallint!
  notificationSettingsAdminThreadStaleThreshold: Int!
  notificationSettingsBadgeUnlocked: smallint!
  notificationSettingsBlogSubscribedUpdated: smallint!
  notificationSettingsContentRemoved: smallint!
  notificationSettingsEventCreated: smallint!
  notificationSettingsEventManagedApproved: smallint!
  notificationSettingsEventManagedRegistrationCreated: smallint!
  notificationSettingsEventManagedRejected: smallint!
  notificationSettingsEventSubscribedUpdated: smallint!
  notificationSettingsMentionned: smallint!
  notificationSettingsRoleUpdated: smallint!
  notificationSettingsTeamManagedEventUpdated: smallint!
  notificationSettingsTeamManagedFormUpdated: smallint!
  notificationSettingsTeamManagedMemberRoleUpdated: smallint!
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint!
  notificationSettingsTeamSubscribedEventCreated: smallint!
  notificationSettingsThreadSubscribedAnswered: smallint!
  notificationSettingsThreadSubscribedUpdated: smallint!
  sessions(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionsAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  settingsDarkModeActivated: Boolean!
  settingsGdprEndOfLifeAnonymize: Boolean!
  settingsGdprEndOfLifeExport: Boolean!
  shortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  statsActionStreak: smallint!
  statsCommentCount: smallint!
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int!
  statsPostCount: smallint!
  statsPostStreak: smallint!
  statsReplyCount: smallint!
  statsReplyStreak: smallint!
  statsUploadCount: smallint!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  tenant: Tenant!
  tenantId: bigint!
}

type UserInfoAggregate {
  aggregate: UserInfoAggregateFields
  nodes: [UserInfo!]!
}

input UserInfoAggregateBoolExp {
  bool_and: userInfoAggregateBoolExpBool_and
  bool_or: userInfoAggregateBoolExpBool_or
  count: userInfoAggregateBoolExpCount
}

input userInfoAggregateBoolExpBool_and {
  arguments: UserInfoSelectColumnUserInfoAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: BooleanComparisonExp!
}

input userInfoAggregateBoolExpBool_or {
  arguments: UserInfoSelectColumnUserInfoAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: BooleanComparisonExp!
}

input userInfoAggregateBoolExpCount {
  arguments: [UserInfoSelectColumn!]
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: IntComparisonExp!
}

type UserInfoAggregateFields {
  avg: UserInfoAvgFields
  count(columns: [UserInfoSelectColumn!], distinct: Boolean): Int!
  max: UserInfoMaxFields
  min: UserInfoMinFields
  stddev: UserInfoStddevFields
  stddevPop: UserInfoStddevPopFields
  stddevSamp: UserInfoStddevSampFields
  sum: UserInfoSumFields
  varPop: UserInfoVarPopFields
  varSamp: UserInfoVarSampFields
  variance: UserInfoVarianceFields
}

input UserInfoAggregateOrderBy {
  avg: UserInfoAvgOrderBy
  count: OrderBy
  max: UserInfoMaxOrderBy
  min: UserInfoMinOrderBy
  stddev: UserInfoStddevOrderBy
  stddevPop: UserInfoStddevPopOrderBy
  stddevSamp: UserInfoStddevSampOrderBy
  sum: UserInfoSumOrderBy
  varPop: UserInfoVarPopOrderBy
  varSamp: UserInfoVarSampOrderBy
  variance: UserInfoVarianceOrderBy
}

input UserInfoArrRelInsertInput {
  data: [UserInfoInsertInput!]!
  onConflict: UserInfoOnConflict
}

type UserInfoAvgFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

input UserInfoAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

input UserInfoBoolExp {
  _and: [UserInfoBoolExp!]
  _not: UserInfoBoolExp
  _or: [UserInfoBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  customizationColor: StringComparisonExp
  customizationSignature: StringComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  finishedIntroduction: BooleanComparisonExp
  finishedOnboarding: BooleanComparisonExp
  firstName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualById: IndividualBoolExp
  lastName: StringComparisonExp
  middleNames: _textComparisonExp
  notificationSettingsAdminEventValidationApproved: SmallintComparisonExp
  notificationSettingsAdminEventValidationRejected: SmallintComparisonExp
  notificationSettingsAdminEventValidationStarted: SmallintComparisonExp
  notificationSettingsAdminEventValidationStep: SmallintComparisonExp
  notificationSettingsAdminReportCreated: SmallintComparisonExp
  notificationSettingsAdminRoleUpdated: SmallintComparisonExp
  notificationSettingsAdminTeamLegalFileUpdated: SmallintComparisonExp
  notificationSettingsAdminTeamSocialUpdated: SmallintComparisonExp
  notificationSettingsAdminThreadAssigned: SmallintComparisonExp
  notificationSettingsAdminThreadAssignedStale: SmallintComparisonExp
  notificationSettingsAdminThreadAssignedStaleThreshold: IntComparisonExp
  notificationSettingsAdminThreadStale: SmallintComparisonExp
  notificationSettingsAdminThreadStaleThreshold: IntComparisonExp
  notificationSettingsBadgeUnlocked: SmallintComparisonExp
  notificationSettingsBlogSubscribedUpdated: SmallintComparisonExp
  notificationSettingsContentRemoved: SmallintComparisonExp
  notificationSettingsEventCreated: SmallintComparisonExp
  notificationSettingsEventManagedApproved: SmallintComparisonExp
  notificationSettingsEventManagedRegistrationCreated: SmallintComparisonExp
  notificationSettingsEventManagedRejected: SmallintComparisonExp
  notificationSettingsEventSubscribedUpdated: SmallintComparisonExp
  notificationSettingsMentionned: SmallintComparisonExp
  notificationSettingsRoleUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedEventUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedFormUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedMemberRoleUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedMembershipRequestUpdated: SmallintComparisonExp
  notificationSettingsTeamSubscribedEventCreated: SmallintComparisonExp
  notificationSettingsThreadSubscribedAnswered: SmallintComparisonExp
  notificationSettingsThreadSubscribedUpdated: SmallintComparisonExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  settingsDarkModeActivated: BooleanComparisonExp
  settingsGdprEndOfLifeAnonymize: BooleanComparisonExp
  settingsGdprEndOfLifeExport: BooleanComparisonExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  statsActionStreak: SmallintComparisonExp
  statsCommentCount: SmallintComparisonExp
  statsLastActionAt: TimestamptzComparisonExp
  statsLastComment: TimestamptzComparisonExp
  statsLastPostAt: TimestamptzComparisonExp
  statsLastReplyAt: TimestamptzComparisonExp
  statsPoints: IntComparisonExp
  statsPostCount: SmallintComparisonExp
  statsPostStreak: SmallintComparisonExp
  statsReplyCount: SmallintComparisonExp
  statsReplyStreak: SmallintComparisonExp
  statsUploadCount: SmallintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum UserInfoConstraint {
  user_info_pkey
}

input UserInfoIncInput {
  createdById: bigint
  id: bigint
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

input UserInfoInsertInput {
  actions: ActionArrRelInsertInput
  changeRoles: ChangeRoleArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  events: EventArrRelInsertInput
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualById: IndividualObjRelInsertInput
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  sessions: SessionArrRelInsertInput
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  shortcuts: ShortcutArrRelInsertInput
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type UserInfoMaxFields {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

input UserInfoMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

type UserInfoMinFields {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

input UserInfoMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

type UserInfoMutationResponse {
  affectedRows: Int!
  returning: [UserInfo!]!
}

input UserInfoObjRelInsertInput {
  data: UserInfoInsertInput!
  onConflict: UserInfoOnConflict
}

input UserInfoOnConflict {
  constraint: UserInfoConstraint!
  updateColumns: [UserInfoUpdateColumn!]! = []
  where: UserInfoBoolExp
}

input UserInfoOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  finishedIntroduction: OrderBy
  finishedOnboarding: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualById: IndividualOrderBy
  lastName: OrderBy
  middleNames: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  sessionsAggregate: SessionAggregateOrderBy
  settingsDarkModeActivated: OrderBy
  settingsGdprEndOfLifeAnonymize: OrderBy
  settingsGdprEndOfLifeExport: OrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input UserInfoPkColumnsInput {
  id: bigint!
}

enum UserInfoSelectColumn {
  createdAt
  createdById
  customizationColor
  customizationSignature
  deletedAt
  finishedIntroduction
  finishedOnboarding
  firstName
  hiddenAt
  id
  lastName
  middleNames
  notificationSettingsAdminEventValidationApproved
  notificationSettingsAdminEventValidationRejected
  notificationSettingsAdminEventValidationStarted
  notificationSettingsAdminEventValidationStep
  notificationSettingsAdminReportCreated
  notificationSettingsAdminRoleUpdated
  notificationSettingsAdminTeamLegalFileUpdated
  notificationSettingsAdminTeamSocialUpdated
  notificationSettingsAdminThreadAssigned
  notificationSettingsAdminThreadAssignedStale
  notificationSettingsAdminThreadAssignedStaleThreshold
  notificationSettingsAdminThreadStale
  notificationSettingsAdminThreadStaleThreshold
  notificationSettingsBadgeUnlocked
  notificationSettingsBlogSubscribedUpdated
  notificationSettingsContentRemoved
  notificationSettingsEventCreated
  notificationSettingsEventManagedApproved
  notificationSettingsEventManagedRegistrationCreated
  notificationSettingsEventManagedRejected
  notificationSettingsEventSubscribedUpdated
  notificationSettingsMentionned
  notificationSettingsRoleUpdated
  notificationSettingsTeamManagedEventUpdated
  notificationSettingsTeamManagedFormUpdated
  notificationSettingsTeamManagedMemberRoleUpdated
  notificationSettingsTeamManagedMembershipRequestUpdated
  notificationSettingsTeamSubscribedEventCreated
  notificationSettingsThreadSubscribedAnswered
  notificationSettingsThreadSubscribedUpdated
  settingsDarkModeActivated
  settingsGdprEndOfLifeAnonymize
  settingsGdprEndOfLifeExport
  statsActionStreak
  statsCommentCount
  statsLastActionAt
  statsLastComment
  statsLastPostAt
  statsLastReplyAt
  statsPoints
  statsPostCount
  statsPostStreak
  statsReplyCount
  statsReplyStreak
  statsUploadCount
  tenantId
}

enum UserInfoSelectColumnUserInfoAggregateBoolExpBool_andArgumentsColumns {
  finishedIntroduction
  finishedOnboarding
  settingsDarkModeActivated
  settingsGdprEndOfLifeAnonymize
  settingsGdprEndOfLifeExport
}

enum UserInfoSelectColumnUserInfoAggregateBoolExpBool_orArgumentsColumns {
  finishedIntroduction
  finishedOnboarding
  settingsDarkModeActivated
  settingsGdprEndOfLifeAnonymize
  settingsGdprEndOfLifeExport
}

input UserInfoSetInput {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

type UserInfoStddevFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

input UserInfoStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

type UserInfoStddevPopFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

input UserInfoStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

type UserInfoStddevSampFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

input UserInfoStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

input UserInfoStreamCursorInput {
  initialValue: UserInfoStreamCursorValueInput!
  ordering: CursorOrdering
}

input UserInfoStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

type UserInfoSumFields {
  createdById: bigint
  id: bigint
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

input UserInfoSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

enum UserInfoUpdateColumn {
  createdAt
  createdById
  customizationColor
  customizationSignature
  deletedAt
  finishedIntroduction
  finishedOnboarding
  firstName
  hiddenAt
  id
  lastName
  middleNames
  notificationSettingsAdminEventValidationApproved
  notificationSettingsAdminEventValidationRejected
  notificationSettingsAdminEventValidationStarted
  notificationSettingsAdminEventValidationStep
  notificationSettingsAdminReportCreated
  notificationSettingsAdminRoleUpdated
  notificationSettingsAdminTeamLegalFileUpdated
  notificationSettingsAdminTeamSocialUpdated
  notificationSettingsAdminThreadAssigned
  notificationSettingsAdminThreadAssignedStale
  notificationSettingsAdminThreadAssignedStaleThreshold
  notificationSettingsAdminThreadStale
  notificationSettingsAdminThreadStaleThreshold
  notificationSettingsBadgeUnlocked
  notificationSettingsBlogSubscribedUpdated
  notificationSettingsContentRemoved
  notificationSettingsEventCreated
  notificationSettingsEventManagedApproved
  notificationSettingsEventManagedRegistrationCreated
  notificationSettingsEventManagedRejected
  notificationSettingsEventSubscribedUpdated
  notificationSettingsMentionned
  notificationSettingsRoleUpdated
  notificationSettingsTeamManagedEventUpdated
  notificationSettingsTeamManagedFormUpdated
  notificationSettingsTeamManagedMemberRoleUpdated
  notificationSettingsTeamManagedMembershipRequestUpdated
  notificationSettingsTeamSubscribedEventCreated
  notificationSettingsThreadSubscribedAnswered
  notificationSettingsThreadSubscribedUpdated
  settingsDarkModeActivated
  settingsGdprEndOfLifeAnonymize
  settingsGdprEndOfLifeExport
  statsActionStreak
  statsCommentCount
  statsLastActionAt
  statsLastComment
  statsLastPostAt
  statsLastReplyAt
  statsPoints
  statsPostCount
  statsPostStreak
  statsReplyCount
  statsReplyStreak
  statsUploadCount
  tenantId
}

input UserInfoUpdates {
  _inc: UserInfoIncInput
  _set: UserInfoSetInput
  where: UserInfoBoolExp!
}

type UserInfoVarianceFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

input UserInfoVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

type UserInfoVarPopFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

input UserInfoVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

type UserInfoVarSampFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

input UserInfoVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

type Validation {
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  lastActiveDate: timestamptz
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ValidationAggregate {
  aggregate: ValidationAggregateFields
  nodes: [Validation!]!
}

input ValidationAggregateBoolExp {
  count: validationAggregateBoolExpCount
}

input validationAggregateBoolExpCount {
  arguments: [ValidationSelectColumn!]
  distinct: Boolean
  filter: ValidationBoolExp
  predicate: IntComparisonExp!
}

type ValidationAggregateFields {
  avg: ValidationAvgFields
  count(columns: [ValidationSelectColumn!], distinct: Boolean): Int!
  max: ValidationMaxFields
  min: ValidationMinFields
  stddev: ValidationStddevFields
  stddevPop: ValidationStddevPopFields
  stddevSamp: ValidationStddevSampFields
  sum: ValidationSumFields
  varPop: ValidationVarPopFields
  varSamp: ValidationVarSampFields
  variance: ValidationVarianceFields
}

input ValidationAggregateOrderBy {
  avg: ValidationAvgOrderBy
  count: OrderBy
  max: ValidationMaxOrderBy
  min: ValidationMinOrderBy
  stddev: ValidationStddevOrderBy
  stddevPop: ValidationStddevPopOrderBy
  stddevSamp: ValidationStddevSampOrderBy
  sum: ValidationSumOrderBy
  varPop: ValidationVarPopOrderBy
  varSamp: ValidationVarSampOrderBy
  variance: ValidationVarianceOrderBy
}

input ValidationArrRelInsertInput {
  data: [ValidationInsertInput!]!
  onConflict: ValidationOnConflict
}

type ValidationAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ValidationBoolExp {
  _and: [ValidationBoolExp!]
  _not: ValidationBoolExp
  _or: [ValidationBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ValidationConstraint {
  validation_pkey
}

input ValidationIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ValidationInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ValidationMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

input ValidationMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ValidationMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

input ValidationMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ValidationMutationResponse {
  affectedRows: Int!
  returning: [Validation!]!
}

input ValidationOnConflict {
  constraint: ValidationConstraint!
  updateColumns: [ValidationUpdateColumn!]! = []
  where: ValidationBoolExp
}

input ValidationOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ValidationPkColumnsInput {
  id: bigint!
}

enum ValidationSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  tenantId
  type
}

input ValidationSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

type ValidationStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ValidationStreamCursorInput {
  initialValue: ValidationStreamCursorValueInput!
  ordering: CursorOrdering
}

input ValidationStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

type ValidationSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ValidationSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ValidationUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  tenantId
  type
}

input ValidationUpdates {
  _inc: ValidationIncInput
  _set: ValidationSetInput
  where: ValidationBoolExp!
}

type ValidationVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Vote {
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  lastActiveDate: timestamptz
  tenant: Tenant!
  tenantId: bigint!
  value: smallint!
}

type VoteAggregate {
  aggregate: VoteAggregateFields
  nodes: [Vote!]!
}

input VoteAggregateBoolExp {
  count: voteAggregateBoolExpCount
}

input voteAggregateBoolExpCount {
  arguments: [VoteSelectColumn!]
  distinct: Boolean
  filter: VoteBoolExp
  predicate: IntComparisonExp!
}

type VoteAggregateFields {
  avg: VoteAvgFields
  count(columns: [VoteSelectColumn!], distinct: Boolean): Int!
  max: VoteMaxFields
  min: VoteMinFields
  stddev: VoteStddevFields
  stddevPop: VoteStddevPopFields
  stddevSamp: VoteStddevSampFields
  sum: VoteSumFields
  varPop: VoteVarPopFields
  varSamp: VoteVarSampFields
  variance: VoteVarianceFields
}

input VoteAggregateOrderBy {
  avg: VoteAvgOrderBy
  count: OrderBy
  max: VoteMaxOrderBy
  min: VoteMinOrderBy
  stddev: VoteStddevOrderBy
  stddevPop: VoteStddevPopOrderBy
  stddevSamp: VoteStddevSampOrderBy
  sum: VoteSumOrderBy
  varPop: VoteVarPopOrderBy
  varSamp: VoteVarSampOrderBy
  variance: VoteVarianceOrderBy
}

input VoteArrRelInsertInput {
  data: [VoteInsertInput!]!
  onConflict: VoteOnConflict
}

type VoteAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

input VoteBoolExp {
  _and: [VoteBoolExp!]
  _not: VoteBoolExp
  _or: [VoteBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  value: SmallintComparisonExp
}

enum VoteConstraint {
  vote_pkey
}

input VoteIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

input VoteInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  value: smallint
}

type VoteMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

input VoteMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

input VoteMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteMutationResponse {
  affectedRows: Int!
  returning: [Vote!]!
}

input VoteOnConflict {
  constraint: VoteConstraint!
  updateColumns: [VoteUpdateColumn!]! = []
  where: VoteBoolExp
}

input VoteOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  value: OrderBy
}

input VotePkColumnsInput {
  id: bigint!
}

enum VoteSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  tenantId
  value
}

input VoteSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

type VoteStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

input VoteStreamCursorInput {
  initialValue: VoteStreamCursorValueInput!
  ordering: CursorOrdering
}

input VoteStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

type VoteSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

input VoteSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

enum VoteUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  lastActiveDate
  tenantId
  value
}

input VoteUpdates {
  _inc: VoteIncInput
  _set: VoteSetInput
  where: VoteBoolExp!
}

type VoteVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type Log {
  event: String!
  context: String!
  entityName: String!
  entityId: bigint!
  diff: jsonb!
  note: String!
  team: Team
  contentMaster: ContentMaster
}

scalar Upload

input LoginInput {
  username: String!
  password: String!
}

type Point {
  latitude: Float!
  longitude: Float!
}

type Location {
  id: String
  name: String!
  city: String!
  zip: String!
  state: String!
  street: String!
  country: String!
  coordinates: Point!
}

type AddressInfo {
  streetNumber: Int
  streetType: String!
  streetName: String!
  city: String!
  cityCode: String!
}

type CompanyInfo {
  nationalId: String!
  type: String
  activity: String
  name: String!
  address: AddressInfo!
}

input AddressInfoInput {
  streetNumber: Int!
  streetType: String!
  streetName: String!
  city: String!
  cityCode: String!
}

input SearchCompanyQuery {
  name: String!
  address: AddressInfoInput
}

type LineItem {
  name: String!
  quantity: Int!
  price: Float!
}

type ProcessedReceipt {
  amount: Float
  lineItems: [LineItem!]!
  address: String!
  tax: Float
  date: String
  vendorName: String
  phone: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}