directive @cached(ttl: Int! = 60, refresh: Boolean! = false) on QUERY

type Action {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventJoin: EventJoin
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedBy: User
  pointsProcessedById: bigint
  project: Project
  projectId: bigint
  state: String!
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  user: User!
  userId: bigint!
}

type ActionAggregate {
  aggregate: ActionAggregateFields
  nodes: [Action!]!
}

input ActionAggregateBoolExp {
  count: actionAggregateBoolExpCount
}

input actionAggregateBoolExpCount {
  arguments: [ActionSelectColumn!]
  distinct: Boolean
  filter: ActionBoolExp
  predicate: IntComparisonExp!
}

type ActionAggregateFields {
  avg: ActionAvgFields
  count(columns: [ActionSelectColumn!], distinct: Boolean): Int!
  max: ActionMaxFields
  min: ActionMinFields
  stddev: ActionStddevFields
  stddevPop: ActionStddevPopFields
  stddevSamp: ActionStddevSampFields
  sum: ActionSumFields
  varPop: ActionVarPopFields
  varSamp: ActionVarSampFields
  variance: ActionVarianceFields
}

input ActionAggregateOrderBy {
  avg: ActionAvgOrderBy
  count: OrderBy
  max: ActionMaxOrderBy
  min: ActionMinOrderBy
  stddev: ActionStddevOrderBy
  stddevPop: ActionStddevPopOrderBy
  stddevSamp: ActionStddevSampOrderBy
  sum: ActionSumOrderBy
  varPop: ActionVarPopOrderBy
  varSamp: ActionVarSampOrderBy
  variance: ActionVarianceOrderBy
}

input ActionArrRelInsertInput {
  data: [ActionInsertInput!]!
  onConflict: ActionOnConflict
}

type ActionAvgFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input ActionAvgOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input ActionBoolExp {
  _and: [ActionBoolExp!]
  _not: ActionBoolExp
  _or: [ActionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  points: SmallintComparisonExp
  pointsProcessedAt: TimestamptzComparisonExp
  pointsProcessedBy: UserBoolExp
  pointsProcessedById: BigintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum ActionConstraint {
  action_pkey
}

input ActionIncInput {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  points: smallint
  pointsProcessedById: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input ActionInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedBy: UserObjRelInsertInput
  pointsProcessedById: bigint
  project: ProjectObjRelInsertInput
  projectId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  user: UserObjRelInsertInput
  userId: bigint
}

type ActionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input ActionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type ActionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input ActionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type ActionMutationResponse {
  affectedRows: Int!
  returning: [Action!]!
}

input ActionOnConflict {
  constraint: ActionConstraint!
  updateColumns: [ActionUpdateColumn!]! = []
  where: ActionBoolExp
}

input ActionOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedBy: UserOrderBy
  pointsProcessedById: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input ActionPkColumnsInput {
  id: bigint!
}

enum ActionSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  eventJoinId
  hiddenAt
  id
  name
  points
  pointsProcessedAt
  pointsProcessedById
  projectId
  state
  teamId
  tenantScopeId
  userId
}

input ActionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

type ActionStddevFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input ActionStddevOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type ActionStddevPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input ActionStddevPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type ActionStddevSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input ActionStddevSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input ActionStreamCursorInput {
  initialValue: ActionStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

type ActionSumFields {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  points: smallint
  pointsProcessedById: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input ActionSumOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

enum ActionUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  eventJoinId
  hiddenAt
  id
  name
  points
  pointsProcessedAt
  pointsProcessedById
  projectId
  state
  teamId
  tenantScopeId
  userId
}

input ActionUpdates {
  _inc: ActionIncInput
  _set: ActionSetInput
  where: ActionBoolExp!
}

type ActionVarianceFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input ActionVarianceOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type ActionVarPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input ActionVarPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type ActionVarSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input ActionVarSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type Actor {
  actorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorTags(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): [ActorTag!]!
  actorTagsAggregate(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): ActorTagAggregate!
  avatar: String
  bankInfos(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): [BankInfo!]!
  bankInfosAggregate(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): BankInfoAggregate!
  banner: String
  bio: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  email: String
  followers(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followersAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  ical: String!
  id: bigint!
  legalUnit: LegalUnit
  legalUnitLocation: LegalUnitLocation
  locations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  name: String!
  payedTransactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  payedTransactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  receivedTransactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  receivedTransactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  socials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  status: String!
  team: Team
  tenant: Tenant
  tenantScope: Tenant
  tenantScopeId: bigint
  user: User
  website: String
}

type ActorAggregate {
  aggregate: ActorAggregateFields
  nodes: [Actor!]!
}

input ActorAggregateBoolExp {
  count: actorAggregateBoolExpCount
}

input actorAggregateBoolExpCount {
  arguments: [ActorSelectColumn!]
  distinct: Boolean
  filter: ActorBoolExp
  predicate: IntComparisonExp!
}

type ActorAggregateFields {
  avg: ActorAvgFields
  count(columns: [ActorSelectColumn!], distinct: Boolean): Int!
  max: ActorMaxFields
  min: ActorMinFields
  stddev: ActorStddevFields
  stddevPop: ActorStddevPopFields
  stddevSamp: ActorStddevSampFields
  sum: ActorSumFields
  varPop: ActorVarPopFields
  varSamp: ActorVarSampFields
  variance: ActorVarianceFields
}

input ActorAggregateOrderBy {
  avg: ActorAvgOrderBy
  count: OrderBy
  max: ActorMaxOrderBy
  min: ActorMinOrderBy
  stddev: ActorStddevOrderBy
  stddevPop: ActorStddevPopOrderBy
  stddevSamp: ActorStddevSampOrderBy
  sum: ActorSumOrderBy
  varPop: ActorVarPopOrderBy
  varSamp: ActorVarSampOrderBy
  variance: ActorVarianceOrderBy
}

input ActorArrRelInsertInput {
  data: [ActorInsertInput!]!
  onConflict: ActorOnConflict
}

type ActorAvgFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input ActorAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input ActorBoolExp {
  _and: [ActorBoolExp!]
  _not: ActorBoolExp
  _or: [ActorBoolExp!]
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actorTags: ActorTagBoolExp
  actorTagsAggregate: ActorTagAggregateBoolExp
  avatar: StringComparisonExp
  bankInfos: BankInfoBoolExp
  bankInfosAggregate: BankInfoAggregateBoolExp
  banner: StringComparisonExp
  bio: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  email: StringComparisonExp
  followers: FollowBoolExp
  followersAggregate: FollowAggregateBoolExp
  ical: StringComparisonExp
  id: BigintComparisonExp
  legalUnit: LegalUnitBoolExp
  legalUnitLocation: LegalUnitLocationBoolExp
  locations: LocationBoolExp
  locationsAggregate: LocationAggregateBoolExp
  name: StringComparisonExp
  payedTransactions: TransactionBoolExp
  payedTransactionsAggregate: TransactionAggregateBoolExp
  receivedTransactions: TransactionBoolExp
  receivedTransactionsAggregate: TransactionAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  status: StringComparisonExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  user: UserBoolExp
  website: StringComparisonExp
}

enum ActorConstraint {
  actor_ical_unique
  actor_pkey
}

type ActorImage {
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  image: FileUpload!
  imageId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String!
}

type ActorImageAggregate {
  aggregate: ActorImageAggregateFields
  nodes: [ActorImage!]!
}

input ActorImageAggregateBoolExp {
  count: actorImageAggregateBoolExpCount
}

input actorImageAggregateBoolExpCount {
  arguments: [ActorImageSelectColumn!]
  distinct: Boolean
  filter: ActorImageBoolExp
  predicate: IntComparisonExp!
}

type ActorImageAggregateFields {
  avg: ActorImageAvgFields
  count(columns: [ActorImageSelectColumn!], distinct: Boolean): Int!
  max: ActorImageMaxFields
  min: ActorImageMinFields
  stddev: ActorImageStddevFields
  stddevPop: ActorImageStddevPopFields
  stddevSamp: ActorImageStddevSampFields
  sum: ActorImageSumFields
  varPop: ActorImageVarPopFields
  varSamp: ActorImageVarSampFields
  variance: ActorImageVarianceFields
}

input ActorImageAggregateOrderBy {
  avg: ActorImageAvgOrderBy
  count: OrderBy
  max: ActorImageMaxOrderBy
  min: ActorImageMinOrderBy
  stddev: ActorImageStddevOrderBy
  stddevPop: ActorImageStddevPopOrderBy
  stddevSamp: ActorImageStddevSampOrderBy
  sum: ActorImageSumOrderBy
  varPop: ActorImageVarPopOrderBy
  varSamp: ActorImageVarSampOrderBy
  variance: ActorImageVarianceOrderBy
}

input ActorImageArrRelInsertInput {
  data: [ActorImageInsertInput!]!
  onConflict: ActorImageOnConflict
}

type ActorImageAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input ActorImageAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

input ActorImageBoolExp {
  _and: [ActorImageBoolExp!]
  _not: ActorImageBoolExp
  _or: [ActorImageBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  image: FileUploadBoolExp
  imageId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
}

enum ActorImageConstraint {
  actor_image_image_id_unique
  actor_image_pkey
}

input ActorImageIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
}

input ActorImageInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  image: FileUploadObjRelInsertInput
  imageId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
}

type ActorImageMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
  type: String
}

input ActorImageMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type ActorImageMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
  type: String
}

input ActorImageMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type ActorImageMutationResponse {
  affectedRows: Int!
  returning: [ActorImage!]!
}

input ActorImageObjRelInsertInput {
  data: ActorImageInsertInput!
  onConflict: ActorImageOnConflict
}

input ActorImageOnConflict {
  constraint: ActorImageConstraint!
  updateColumns: [ActorImageUpdateColumn!]! = []
  where: ActorImageBoolExp
}

input ActorImageOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  image: FileUploadOrderBy
  imageId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

input ActorImagePkColumnsInput {
  id: bigint!
}

enum ActorImageSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  tenantScopeId
  type
}

input ActorImageSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
  type: String
}

type ActorImageStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input ActorImageStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type ActorImageStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input ActorImageStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type ActorImageStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input ActorImageStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

input ActorImageStreamCursorInput {
  initialValue: ActorImageStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorImageStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
  type: String
}

type ActorImageSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
}

input ActorImageSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

enum ActorImageUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  tenantScopeId
  type
}

input ActorImageUpdates {
  _inc: ActorImageIncInput
  _set: ActorImageSetInput
  where: ActorImageBoolExp!
}

type ActorImageVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input ActorImageVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type ActorImageVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input ActorImageVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type ActorImageVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input ActorImageVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

input ActorIncInput {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input ActorInsertInput {
  actorImages: ActorImageArrRelInsertInput
  actorTags: ActorTagArrRelInsertInput
  avatar: String
  bankInfos: BankInfoArrRelInsertInput
  banner: String
  bio: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  email: String
  followers: FollowArrRelInsertInput
  ical: String
  id: bigint
  legalUnit: LegalUnitObjRelInsertInput
  legalUnitLocation: LegalUnitLocationObjRelInsertInput
  locations: LocationArrRelInsertInput
  name: String
  payedTransactions: TransactionArrRelInsertInput
  receivedTransactions: TransactionArrRelInsertInput
  socials: SocialArrRelInsertInput
  status: String
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  user: UserObjRelInsertInput
  website: String
}

type ActorMaxFields {
  avatar: String
  banner: String
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  ical: String
  id: bigint
  name: String
  status: String
  tenantScopeId: bigint
  website: String
}

input ActorMaxOrderBy {
  avatar: OrderBy
  banner: OrderBy
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  ical: OrderBy
  id: OrderBy
  name: OrderBy
  status: OrderBy
  tenantScopeId: OrderBy
  website: OrderBy
}

type ActorMinFields {
  avatar: String
  banner: String
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  ical: String
  id: bigint
  name: String
  status: String
  tenantScopeId: bigint
  website: String
}

input ActorMinOrderBy {
  avatar: OrderBy
  banner: OrderBy
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  ical: OrderBy
  id: OrderBy
  name: OrderBy
  status: OrderBy
  tenantScopeId: OrderBy
  website: OrderBy
}

type ActorMutationResponse {
  affectedRows: Int!
  returning: [Actor!]!
}

input ActorObjRelInsertInput {
  data: ActorInsertInput!
  onConflict: ActorOnConflict
}

input ActorOnConflict {
  constraint: ActorConstraint!
  updateColumns: [ActorUpdateColumn!]! = []
  where: ActorBoolExp
}

input ActorOrderBy {
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorTagsAggregate: ActorTagAggregateOrderBy
  avatar: OrderBy
  bankInfosAggregate: BankInfoAggregateOrderBy
  banner: OrderBy
  bio: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  followersAggregate: FollowAggregateOrderBy
  ical: OrderBy
  id: OrderBy
  legalUnit: LegalUnitOrderBy
  legalUnitLocation: LegalUnitLocationOrderBy
  locationsAggregate: LocationAggregateOrderBy
  name: OrderBy
  payedTransactionsAggregate: TransactionAggregateOrderBy
  receivedTransactionsAggregate: TransactionAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  status: OrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  user: UserOrderBy
  website: OrderBy
}

input ActorPkColumnsInput {
  id: bigint!
}

enum ActorSelectColumn {
  avatar
  banner
  bio
  createdAt
  createdById
  deletedAt
  email
  ical
  id
  name
  status
  tenantScopeId
  website
}

input ActorSetInput {
  avatar: String
  banner: String
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  ical: String
  id: bigint
  name: String
  status: String
  tenantScopeId: bigint
  website: String
}

type ActorStddevFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input ActorStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type ActorStddevPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input ActorStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type ActorStddevSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input ActorStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input ActorStreamCursorInput {
  initialValue: ActorStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorStreamCursorValueInput {
  avatar: String
  banner: String
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  ical: String
  id: bigint
  name: String
  status: String
  tenantScopeId: bigint
  website: String
}

type ActorSumFields {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input ActorSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type ActorTag {
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tag: Tag!
  tagId: bigint!
  tenant: Tenant!
  tenantScopeId: bigint!
}

type ActorTagAggregate {
  aggregate: ActorTagAggregateFields
  nodes: [ActorTag!]!
}

input ActorTagAggregateBoolExp {
  count: actorTagAggregateBoolExpCount
}

input actorTagAggregateBoolExpCount {
  arguments: [ActorTagSelectColumn!]
  distinct: Boolean
  filter: ActorTagBoolExp
  predicate: IntComparisonExp!
}

type ActorTagAggregateFields {
  avg: ActorTagAvgFields
  count(columns: [ActorTagSelectColumn!], distinct: Boolean): Int!
  max: ActorTagMaxFields
  min: ActorTagMinFields
  stddev: ActorTagStddevFields
  stddevPop: ActorTagStddevPopFields
  stddevSamp: ActorTagStddevSampFields
  sum: ActorTagSumFields
  varPop: ActorTagVarPopFields
  varSamp: ActorTagVarSampFields
  variance: ActorTagVarianceFields
}

input ActorTagAggregateOrderBy {
  avg: ActorTagAvgOrderBy
  count: OrderBy
  max: ActorTagMaxOrderBy
  min: ActorTagMinOrderBy
  stddev: ActorTagStddevOrderBy
  stddevPop: ActorTagStddevPopOrderBy
  stddevSamp: ActorTagStddevSampOrderBy
  sum: ActorTagSumOrderBy
  varPop: ActorTagVarPopOrderBy
  varSamp: ActorTagVarSampOrderBy
  variance: ActorTagVarianceOrderBy
}

input ActorTagArrRelInsertInput {
  data: [ActorTagInsertInput!]!
  onConflict: ActorTagOnConflict
}

type ActorTagAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  tagId: Float
  tenantScopeId: Float
}

input ActorTagAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

input ActorTagBoolExp {
  _and: [ActorTagBoolExp!]
  _not: ActorTagBoolExp
  _or: [ActorTagBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum ActorTagConstraint {
  actor_tag_pkey
  actor_tag_tag_id_unique
}

input ActorTagIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  tagId: bigint
  tenantScopeId: bigint
}

input ActorTagInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
  tenant: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type ActorTagMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tagId: bigint
  tenantScopeId: bigint
}

input ActorTagMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

type ActorTagMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tagId: bigint
  tenantScopeId: bigint
}

input ActorTagMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

type ActorTagMutationResponse {
  affectedRows: Int!
  returning: [ActorTag!]!
}

input ActorTagObjRelInsertInput {
  data: ActorTagInsertInput!
  onConflict: ActorTagOnConflict
}

input ActorTagOnConflict {
  constraint: ActorTagConstraint!
  updateColumns: [ActorTagUpdateColumn!]! = []
  where: ActorTagBoolExp
}

input ActorTagOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
  tenant: TenantOrderBy
  tenantScopeId: OrderBy
}

input ActorTagPkColumnsInput {
  id: bigint!
}

enum ActorTagSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tagId
  tenantScopeId
}

input ActorTagSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tagId: bigint
  tenantScopeId: bigint
}

type ActorTagStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  tagId: Float
  tenantScopeId: Float
}

input ActorTagStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

type ActorTagStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  tagId: Float
  tenantScopeId: Float
}

input ActorTagStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

type ActorTagStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  tagId: Float
  tenantScopeId: Float
}

input ActorTagStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

input ActorTagStreamCursorInput {
  initialValue: ActorTagStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorTagStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tagId: bigint
  tenantScopeId: bigint
}

type ActorTagSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  tagId: bigint
  tenantScopeId: bigint
}

input ActorTagSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

enum ActorTagUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tagId
  tenantScopeId
}

input ActorTagUpdates {
  _inc: ActorTagIncInput
  _set: ActorTagSetInput
  where: ActorTagBoolExp!
}

type ActorTagVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  tagId: Float
  tenantScopeId: Float
}

input ActorTagVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

type ActorTagVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  tagId: Float
  tenantScopeId: Float
}

input ActorTagVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

type ActorTagVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  tagId: Float
  tenantScopeId: Float
}

input ActorTagVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tagId: OrderBy
  tenantScopeId: OrderBy
}

enum ActorUpdateColumn {
  avatar
  banner
  bio
  createdAt
  createdById
  deletedAt
  email
  ical
  id
  name
  status
  tenantScopeId
  website
}

input ActorUpdates {
  _inc: ActorIncInput
  _set: ActorSetInput
  where: ActorBoolExp!
}

type ActorVarianceFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input ActorVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type ActorVarPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input ActorVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type ActorVarSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input ActorVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type Address {
  bankInfos(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): [BankInfo!]!
  bankInfosAggregate(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): BankInfoAggregate!
  category: String!
  city: String!
  country: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint!
  latitude: Float
  locations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  longitude: Float
  name: String!
  state: String!
  street: String!
  streetNumber: String!
  zip: String!
}

type AddressAggregate {
  aggregate: AddressAggregateFields
  nodes: [Address!]!
}

input AddressAggregateBoolExp {
  count: addressAggregateBoolExpCount
}

input addressAggregateBoolExpCount {
  arguments: [AddressSelectColumn!]
  distinct: Boolean
  filter: AddressBoolExp
  predicate: IntComparisonExp!
}

type AddressAggregateFields {
  avg: AddressAvgFields
  count(columns: [AddressSelectColumn!], distinct: Boolean): Int!
  max: AddressMaxFields
  min: AddressMinFields
  stddev: AddressStddevFields
  stddevPop: AddressStddevPopFields
  stddevSamp: AddressStddevSampFields
  sum: AddressSumFields
  varPop: AddressVarPopFields
  varSamp: AddressVarSampFields
  variance: AddressVarianceFields
}

input AddressAggregateOrderBy {
  avg: AddressAvgOrderBy
  count: OrderBy
  max: AddressMaxOrderBy
  min: AddressMinOrderBy
  stddev: AddressStddevOrderBy
  stddevPop: AddressStddevPopOrderBy
  stddevSamp: AddressStddevSampOrderBy
  sum: AddressSumOrderBy
  varPop: AddressVarPopOrderBy
  varSamp: AddressVarSampOrderBy
  variance: AddressVarianceOrderBy
}

input AddressArrRelInsertInput {
  data: [AddressInsertInput!]!
  onConflict: AddressOnConflict
}

type AddressAvgFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

input AddressBoolExp {
  _and: [AddressBoolExp!]
  _not: AddressBoolExp
  _or: [AddressBoolExp!]
  bankInfos: BankInfoBoolExp
  bankInfosAggregate: BankInfoAggregateBoolExp
  category: StringComparisonExp
  city: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  geoapifyId: StringComparisonExp
  id: BigintComparisonExp
  latitude: FloatComparisonExp
  locations: LocationBoolExp
  locationsAggregate: LocationAggregateBoolExp
  longitude: FloatComparisonExp
  name: StringComparisonExp
  state: StringComparisonExp
  street: StringComparisonExp
  streetNumber: StringComparisonExp
  zip: StringComparisonExp
}

enum AddressConstraint {
  address_pkey
}

input AddressIncInput {
  createdById: bigint
  id: bigint
  latitude: Float
  longitude: Float
}

input AddressInsertInput {
  bankInfos: BankInfoArrRelInsertInput
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  locations: LocationArrRelInsertInput
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

type AddressMaxFields {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

input AddressMaxOrderBy {
  category: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  geoapifyId: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  streetNumber: OrderBy
  zip: OrderBy
}

type AddressMinFields {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

input AddressMinOrderBy {
  category: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  geoapifyId: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  streetNumber: OrderBy
  zip: OrderBy
}

type AddressMutationResponse {
  affectedRows: Int!
  returning: [Address!]!
}

input AddressObjRelInsertInput {
  data: AddressInsertInput!
  onConflict: AddressOnConflict
}

input AddressOnConflict {
  constraint: AddressConstraint!
  updateColumns: [AddressUpdateColumn!]! = []
  where: AddressBoolExp
}

input AddressOrderBy {
  bankInfosAggregate: BankInfoAggregateOrderBy
  category: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  geoapifyId: OrderBy
  id: OrderBy
  latitude: OrderBy
  locationsAggregate: LocationAggregateOrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  streetNumber: OrderBy
  zip: OrderBy
}

input AddressPkColumnsInput {
  id: bigint!
}

enum AddressSelectColumn {
  category
  city
  country
  createdAt
  createdById
  deletedAt
  geoapifyId
  id
  latitude
  longitude
  name
  state
  street
  streetNumber
  zip
}

input AddressSetInput {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

type AddressStddevFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressStddevPopFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressStddevSampFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

input AddressStreamCursorInput {
  initialValue: AddressStreamCursorValueInput!
  ordering: CursorOrdering
}

input AddressStreamCursorValueInput {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

type AddressSumFields {
  createdById: bigint
  id: bigint
  latitude: Float
  longitude: Float
}

input AddressSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

enum AddressUpdateColumn {
  category
  city
  country
  createdAt
  createdById
  deletedAt
  geoapifyId
  id
  latitude
  longitude
  name
  state
  street
  streetNumber
  zip
}

input AddressUpdates {
  _inc: AddressIncInput
  _set: AddressSetInput
  where: AddressBoolExp!
}

type AddressVarianceFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressVarPopFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressVarSampFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type BankAccount {
  bankInfo: BankInfo
  bankInfoId: bigint
  childrenAccounts(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): [BankAccount!]!
  childrenAccountsAggregate(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): BankAccountAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  name: String
  parent: BankAccount
  parentId: bigint
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  transactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  type: String!
  user: User
}

type BankAccountAggregate {
  aggregate: BankAccountAggregateFields
  nodes: [BankAccount!]!
}

input BankAccountAggregateBoolExp {
  count: bankAccountAggregateBoolExpCount
}

input bankAccountAggregateBoolExpCount {
  arguments: [BankAccountSelectColumn!]
  distinct: Boolean
  filter: BankAccountBoolExp
  predicate: IntComparisonExp!
}

type BankAccountAggregateFields {
  avg: BankAccountAvgFields
  count(columns: [BankAccountSelectColumn!], distinct: Boolean): Int!
  max: BankAccountMaxFields
  min: BankAccountMinFields
  stddev: BankAccountStddevFields
  stddevPop: BankAccountStddevPopFields
  stddevSamp: BankAccountStddevSampFields
  sum: BankAccountSumFields
  varPop: BankAccountVarPopFields
  varSamp: BankAccountVarSampFields
  variance: BankAccountVarianceFields
}

input BankAccountAggregateOrderBy {
  avg: BankAccountAvgOrderBy
  count: OrderBy
  max: BankAccountMaxOrderBy
  min: BankAccountMinOrderBy
  stddev: BankAccountStddevOrderBy
  stddevPop: BankAccountStddevPopOrderBy
  stddevSamp: BankAccountStddevSampOrderBy
  sum: BankAccountSumOrderBy
  varPop: BankAccountVarPopOrderBy
  varSamp: BankAccountVarSampOrderBy
  variance: BankAccountVarianceOrderBy
}

input BankAccountArrRelInsertInput {
  data: [BankAccountInsertInput!]!
  onConflict: BankAccountOnConflict
}

type BankAccountAvgFields {
  bankInfoId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantScopeId: Float
}

input BankAccountAvgOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input BankAccountBoolExp {
  _and: [BankAccountBoolExp!]
  _not: BankAccountBoolExp
  _or: [BankAccountBoolExp!]
  bankInfo: BankInfoBoolExp
  bankInfoId: BigintComparisonExp
  childrenAccounts: BankAccountBoolExp
  childrenAccountsAggregate: BankAccountAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  parent: BankAccountBoolExp
  parentId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transactions: TransactionBoolExp
  transactionsAggregate: TransactionAggregateBoolExp
  type: StringComparisonExp
  user: UserBoolExp
}

enum BankAccountConstraint {
  bank_account_pkey
}

input BankAccountIncInput {
  bankInfoId: bigint
  createdById: bigint
  id: bigint
  parentId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input BankAccountInsertInput {
  bankInfo: BankInfoObjRelInsertInput
  bankInfoId: bigint
  childrenAccounts: BankAccountArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parent: BankAccountObjRelInsertInput
  parentId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transactions: TransactionArrRelInsertInput
  type: String
  user: UserObjRelInsertInput
}

type BankAccountMaxFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

input BankAccountMaxOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type BankAccountMinFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

input BankAccountMinOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type BankAccountMutationResponse {
  affectedRows: Int!
  returning: [BankAccount!]!
}

input BankAccountObjRelInsertInput {
  data: BankAccountInsertInput!
  onConflict: BankAccountOnConflict
}

input BankAccountOnConflict {
  constraint: BankAccountConstraint!
  updateColumns: [BankAccountUpdateColumn!]! = []
  where: BankAccountBoolExp
}

input BankAccountOrderBy {
  bankInfo: BankInfoOrderBy
  bankInfoId: OrderBy
  childrenAccountsAggregate: BankAccountAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  parent: BankAccountOrderBy
  parentId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transactionsAggregate: TransactionAggregateOrderBy
  type: OrderBy
  user: UserOrderBy
}

input BankAccountPkColumnsInput {
  id: bigint!
}

enum BankAccountSelectColumn {
  bankInfoId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  parentId
  teamId
  tenantScopeId
  type
}

input BankAccountSetInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

type BankAccountStddevFields {
  bankInfoId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantScopeId: Float
}

input BankAccountStddevOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type BankAccountStddevPopFields {
  bankInfoId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantScopeId: Float
}

input BankAccountStddevPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type BankAccountStddevSampFields {
  bankInfoId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantScopeId: Float
}

input BankAccountStddevSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input BankAccountStreamCursorInput {
  initialValue: BankAccountStreamCursorValueInput!
  ordering: CursorOrdering
}

input BankAccountStreamCursorValueInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

type BankAccountSumFields {
  bankInfoId: bigint
  createdById: bigint
  id: bigint
  parentId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input BankAccountSumOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum BankAccountUpdateColumn {
  bankInfoId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  parentId
  teamId
  tenantScopeId
  type
}

input BankAccountUpdates {
  _inc: BankAccountIncInput
  _set: BankAccountSetInput
  where: BankAccountBoolExp!
}

type BankAccountVarianceFields {
  bankInfoId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantScopeId: Float
}

input BankAccountVarianceOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type BankAccountVarPopFields {
  bankInfoId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantScopeId: Float
}

input BankAccountVarPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type BankAccountVarSampFields {
  bankInfoId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantScopeId: Float
}

input BankAccountVarSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type BankInfo {
  actor: Actor!
  actorId: bigint!
  bank: LegalUnit!
  bankAccounts(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): [BankAccount!]!
  bankAccountsAggregate(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): BankAccountAggregate!
  bankId: bigint!
  bicSwift: String!
  branchAddress: Address!
  branchAddressId: bigint!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  hiddenAt: timestamptz
  holderName: String!
  iban: String!
  id: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type BankInfoAggregate {
  aggregate: BankInfoAggregateFields
  nodes: [BankInfo!]!
}

input BankInfoAggregateBoolExp {
  count: bankInfoAggregateBoolExpCount
}

input bankInfoAggregateBoolExpCount {
  arguments: [BankInfoSelectColumn!]
  distinct: Boolean
  filter: BankInfoBoolExp
  predicate: IntComparisonExp!
}

type BankInfoAggregateFields {
  avg: BankInfoAvgFields
  count(columns: [BankInfoSelectColumn!], distinct: Boolean): Int!
  max: BankInfoMaxFields
  min: BankInfoMinFields
  stddev: BankInfoStddevFields
  stddevPop: BankInfoStddevPopFields
  stddevSamp: BankInfoStddevSampFields
  sum: BankInfoSumFields
  varPop: BankInfoVarPopFields
  varSamp: BankInfoVarSampFields
  variance: BankInfoVarianceFields
}

input BankInfoAggregateOrderBy {
  avg: BankInfoAvgOrderBy
  count: OrderBy
  max: BankInfoMaxOrderBy
  min: BankInfoMinOrderBy
  stddev: BankInfoStddevOrderBy
  stddevPop: BankInfoStddevPopOrderBy
  stddevSamp: BankInfoStddevSampOrderBy
  sum: BankInfoSumOrderBy
  varPop: BankInfoVarPopOrderBy
  varSamp: BankInfoVarSampOrderBy
  variance: BankInfoVarianceOrderBy
}

input BankInfoArrRelInsertInput {
  data: [BankInfoInsertInput!]!
  onConflict: BankInfoOnConflict
}

type BankInfoAvgFields {
  actorId: Float
  bankId: Float
  branchAddressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input BankInfoAvgOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input BankInfoBoolExp {
  _and: [BankInfoBoolExp!]
  _not: BankInfoBoolExp
  _or: [BankInfoBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bank: LegalUnitBoolExp
  bankAccounts: BankAccountBoolExp
  bankAccountsAggregate: BankAccountAggregateBoolExp
  bankId: BigintComparisonExp
  bicSwift: StringComparisonExp
  branchAddress: AddressBoolExp
  branchAddressId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  holderName: StringComparisonExp
  iban: StringComparisonExp
  id: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum BankInfoConstraint {
  bank_info_pkey
}

input BankInfoIncInput {
  actorId: bigint
  bankId: bigint
  branchAddressId: bigint
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input BankInfoInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  bank: LegalUnitObjRelInsertInput
  bankAccounts: BankAccountArrRelInsertInput
  bankId: bigint
  bicSwift: String
  branchAddress: AddressObjRelInsertInput
  branchAddressId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  expenses: ExpenseArrRelInsertInput
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type BankInfoMaxFields {
  actorId: bigint
  bankId: bigint
  bicSwift: String
  branchAddressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  tenantScopeId: bigint
}

input BankInfoMaxOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  bicSwift: OrderBy
  branchAddressId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  iban: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type BankInfoMinFields {
  actorId: bigint
  bankId: bigint
  bicSwift: String
  branchAddressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  tenantScopeId: bigint
}

input BankInfoMinOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  bicSwift: OrderBy
  branchAddressId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  iban: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type BankInfoMutationResponse {
  affectedRows: Int!
  returning: [BankInfo!]!
}

input BankInfoObjRelInsertInput {
  data: BankInfoInsertInput!
  onConflict: BankInfoOnConflict
}

input BankInfoOnConflict {
  constraint: BankInfoConstraint!
  updateColumns: [BankInfoUpdateColumn!]! = []
  where: BankInfoBoolExp
}

input BankInfoOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  bank: LegalUnitOrderBy
  bankAccountsAggregate: BankAccountAggregateOrderBy
  bankId: OrderBy
  bicSwift: OrderBy
  branchAddress: AddressOrderBy
  branchAddressId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  iban: OrderBy
  id: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input BankInfoPkColumnsInput {
  id: bigint!
}

enum BankInfoSelectColumn {
  actorId
  bankId
  bicSwift
  branchAddressId
  createdAt
  createdById
  deletedAt
  hiddenAt
  holderName
  iban
  id
  tenantScopeId
}

input BankInfoSetInput {
  actorId: bigint
  bankId: bigint
  bicSwift: String
  branchAddressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  tenantScopeId: bigint
}

type BankInfoStddevFields {
  actorId: Float
  bankId: Float
  branchAddressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input BankInfoStddevOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type BankInfoStddevPopFields {
  actorId: Float
  bankId: Float
  branchAddressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input BankInfoStddevPopOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type BankInfoStddevSampFields {
  actorId: Float
  bankId: Float
  branchAddressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input BankInfoStddevSampOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input BankInfoStreamCursorInput {
  initialValue: BankInfoStreamCursorValueInput!
  ordering: CursorOrdering
}

input BankInfoStreamCursorValueInput {
  actorId: bigint
  bankId: bigint
  bicSwift: String
  branchAddressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  tenantScopeId: bigint
}

type BankInfoSumFields {
  actorId: bigint
  bankId: bigint
  branchAddressId: bigint
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input BankInfoSumOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum BankInfoUpdateColumn {
  actorId
  bankId
  bicSwift
  branchAddressId
  createdAt
  createdById
  deletedAt
  hiddenAt
  holderName
  iban
  id
  tenantScopeId
}

input BankInfoUpdates {
  _inc: BankInfoIncInput
  _set: BankInfoSetInput
  where: BankInfoBoolExp!
}

type BankInfoVarianceFields {
  actorId: Float
  bankId: Float
  branchAddressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input BankInfoVarianceOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type BankInfoVarPopFields {
  actorId: Float
  bankId: Float
  branchAddressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input BankInfoVarPopOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type BankInfoVarSampFields {
  actorId: Float
  bankId: Float
  branchAddressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input BankInfoVarSampOrderBy {
  actorId: OrderBy
  bankId: OrderBy
  branchAddressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

scalar bigint

input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type Campus {
  campusCluster: CampusCluster!
  campusClusterId: bigint!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  location: Location!
  locationId: bigint!
  name: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type CampusAggregate {
  aggregate: CampusAggregateFields
  nodes: [Campus!]!
}

input CampusAggregateBoolExp {
  count: campusAggregateBoolExpCount
}

input campusAggregateBoolExpCount {
  arguments: [CampusSelectColumn!]
  distinct: Boolean
  filter: CampusBoolExp
  predicate: IntComparisonExp!
}

type CampusAggregateFields {
  avg: CampusAvgFields
  count(columns: [CampusSelectColumn!], distinct: Boolean): Int!
  max: CampusMaxFields
  min: CampusMinFields
  stddev: CampusStddevFields
  stddevPop: CampusStddevPopFields
  stddevSamp: CampusStddevSampFields
  sum: CampusSumFields
  varPop: CampusVarPopFields
  varSamp: CampusVarSampFields
  variance: CampusVarianceFields
}

input CampusAggregateOrderBy {
  avg: CampusAvgOrderBy
  count: OrderBy
  max: CampusMaxOrderBy
  min: CampusMinOrderBy
  stddev: CampusStddevOrderBy
  stddevPop: CampusStddevPopOrderBy
  stddevSamp: CampusStddevSampOrderBy
  sum: CampusSumOrderBy
  varPop: CampusVarPopOrderBy
  varSamp: CampusVarSampOrderBy
  variance: CampusVarianceOrderBy
}

input CampusArrRelInsertInput {
  data: [CampusInsertInput!]!
  onConflict: CampusOnConflict
}

type CampusAvgFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantScopeId: Float
}

input CampusAvgOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

input CampusBoolExp {
  _and: [CampusBoolExp!]
  _not: CampusBoolExp
  _or: [CampusBoolExp!]
  campusCluster: CampusClusterBoolExp
  campusClusterId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  name: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

type CampusCluster {
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type CampusClusterAggregate {
  aggregate: CampusClusterAggregateFields
  nodes: [CampusCluster!]!
}

input CampusClusterAggregateBoolExp {
  count: campusClusterAggregateBoolExpCount
}

input campusClusterAggregateBoolExpCount {
  arguments: [CampusClusterSelectColumn!]
  distinct: Boolean
  filter: CampusClusterBoolExp
  predicate: IntComparisonExp!
}

type CampusClusterAggregateFields {
  avg: CampusClusterAvgFields
  count(columns: [CampusClusterSelectColumn!], distinct: Boolean): Int!
  max: CampusClusterMaxFields
  min: CampusClusterMinFields
  stddev: CampusClusterStddevFields
  stddevPop: CampusClusterStddevPopFields
  stddevSamp: CampusClusterStddevSampFields
  sum: CampusClusterSumFields
  varPop: CampusClusterVarPopFields
  varSamp: CampusClusterVarSampFields
  variance: CampusClusterVarianceFields
}

input CampusClusterAggregateOrderBy {
  avg: CampusClusterAvgOrderBy
  count: OrderBy
  max: CampusClusterMaxOrderBy
  min: CampusClusterMinOrderBy
  stddev: CampusClusterStddevOrderBy
  stddevPop: CampusClusterStddevPopOrderBy
  stddevSamp: CampusClusterStddevSampOrderBy
  sum: CampusClusterSumOrderBy
  varPop: CampusClusterVarPopOrderBy
  varSamp: CampusClusterVarSampOrderBy
  variance: CampusClusterVarianceOrderBy
}

input CampusClusterArrRelInsertInput {
  data: [CampusClusterInsertInput!]!
  onConflict: CampusClusterOnConflict
}

type CampusClusterAvgFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input CampusClusterAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input CampusClusterBoolExp {
  _and: [CampusClusterBoolExp!]
  _not: CampusClusterBoolExp
  _or: [CampusClusterBoolExp!]
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum CampusClusterConstraint {
  campus_cluster_pkey
}

input CampusClusterIncInput {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input CampusClusterInsertInput {
  campuses: CampusArrRelInsertInput
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type CampusClusterMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantScopeId: bigint
}

input CampusClusterMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
}

type CampusClusterMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantScopeId: bigint
}

input CampusClusterMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
}

type CampusClusterMutationResponse {
  affectedRows: Int!
  returning: [CampusCluster!]!
}

input CampusClusterObjRelInsertInput {
  data: CampusClusterInsertInput!
  onConflict: CampusClusterOnConflict
}

input CampusClusterOnConflict {
  constraint: CampusClusterConstraint!
  updateColumns: [CampusClusterUpdateColumn!]! = []
  where: CampusClusterBoolExp
}

input CampusClusterOrderBy {
  campusesAggregate: CampusAggregateOrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input CampusClusterPkColumnsInput {
  id: bigint!
}

enum CampusClusterSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  tenantScopeId
}

input CampusClusterSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantScopeId: bigint
}

type CampusClusterStddevFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input CampusClusterStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type CampusClusterStddevPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input CampusClusterStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type CampusClusterStddevSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input CampusClusterStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input CampusClusterStreamCursorInput {
  initialValue: CampusClusterStreamCursorValueInput!
  ordering: CursorOrdering
}

input CampusClusterStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantScopeId: bigint
}

type CampusClusterSumFields {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input CampusClusterSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum CampusClusterUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  tenantScopeId
}

input CampusClusterUpdates {
  _inc: CampusClusterIncInput
  _set: CampusClusterSetInput
  where: CampusClusterBoolExp!
}

type CampusClusterVarianceFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input CampusClusterVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type CampusClusterVarPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input CampusClusterVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type CampusClusterVarSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input CampusClusterVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum CampusConstraint {
  campus_pkey
}

input CampusIncInput {
  campusClusterId: bigint
  createdById: bigint
  id: bigint
  locationId: bigint
  tenantScopeId: bigint
}

input CampusInsertInput {
  campusCluster: CampusClusterObjRelInsertInput
  campusClusterId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
  name: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type CampusMaxFields {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantScopeId: bigint
}

input CampusMaxOrderBy {
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationId: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
}

type CampusMinFields {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantScopeId: bigint
}

input CampusMinOrderBy {
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationId: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
}

type CampusMutationResponse {
  affectedRows: Int!
  returning: [Campus!]!
}

input CampusOnConflict {
  constraint: CampusConstraint!
  updateColumns: [CampusUpdateColumn!]! = []
  where: CampusBoolExp
}

input CampusOrderBy {
  campusCluster: CampusClusterOrderBy
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  name: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input CampusPkColumnsInput {
  id: bigint!
}

enum CampusSelectColumn {
  campusClusterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  locationId
  name
  tenantScopeId
}

input CampusSetInput {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantScopeId: bigint
}

type CampusStddevFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantScopeId: Float
}

input CampusStddevOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

type CampusStddevPopFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantScopeId: Float
}

input CampusStddevPopOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

type CampusStddevSampFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantScopeId: Float
}

input CampusStddevSampOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

input CampusStreamCursorInput {
  initialValue: CampusStreamCursorValueInput!
  ordering: CursorOrdering
}

input CampusStreamCursorValueInput {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantScopeId: bigint
}

type CampusSumFields {
  campusClusterId: bigint
  createdById: bigint
  id: bigint
  locationId: bigint
  tenantScopeId: bigint
}

input CampusSumOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

enum CampusUpdateColumn {
  campusClusterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  locationId
  name
  tenantScopeId
}

input CampusUpdates {
  _inc: CampusIncInput
  _set: CampusSetInput
  where: CampusBoolExp!
}

type CampusVarianceFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantScopeId: Float
}

input CampusVarianceOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

type CampusVarPopFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantScopeId: Float
}

input CampusVarPopOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

type CampusVarSampFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantScopeId: Float
}

input CampusVarSampOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantScopeId: OrderBy
}

enum CursorOrdering {
  ASC
  DESC
}

type Event {
  banner: FileUpload
  bannerId: bigint
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  end: timestamptz!
  eventApprovalSubmission: FormSubmission
  eventApprovalSubmissionId: bigint
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventFavorites(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoritesAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  hiddenAt: timestamptz
  id: bigint!
  isAutoAcceptingJoins: Boolean!
  isPrivate: Boolean!
  isTemplate: Boolean!
  joinForm: Form
  joinFormId: bigint
  location: Location!
  locationId: bigint!
  maxParticipants: smallint
  meta(path: String): jsonb!
  name: String!
  nextEventApprovalStep: EventApprovalStep
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float!
  price: Float!
  slug: String!
  start: timestamptz!
  state: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  transactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
}

type EventAggregate {
  aggregate: EventAggregateFields
  nodes: [Event!]!
}

input EventAggregateBoolExp {
  bool_and: eventAggregateBoolExpBool_and
  bool_or: eventAggregateBoolExpBool_or
  count: eventAggregateBoolExpCount
}

input eventAggregateBoolExpBool_and {
  arguments: EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpBool_or {
  arguments: EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpCount {
  arguments: [EventSelectColumn!]
  distinct: Boolean
  filter: EventBoolExp
  predicate: IntComparisonExp!
}

type EventAggregateFields {
  avg: EventAvgFields
  count(columns: [EventSelectColumn!], distinct: Boolean): Int!
  max: EventMaxFields
  min: EventMinFields
  stddev: EventStddevFields
  stddevPop: EventStddevPopFields
  stddevSamp: EventStddevSampFields
  sum: EventSumFields
  varPop: EventVarPopFields
  varSamp: EventVarSampFields
  variance: EventVarianceFields
}

input EventAggregateOrderBy {
  avg: EventAvgOrderBy
  count: OrderBy
  max: EventMaxOrderBy
  min: EventMinOrderBy
  stddev: EventStddevOrderBy
  stddevPop: EventStddevPopOrderBy
  stddevSamp: EventStddevSampOrderBy
  sum: EventSumOrderBy
  varPop: EventVarPopOrderBy
  varSamp: EventVarSampOrderBy
  variance: EventVarianceOrderBy
}

input EventAppendInput {
  meta: jsonb
}

type EventApproval {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  event: Event
  eventApprovalStep: EventApprovalStep
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint!
  isApproved: Boolean!
  message: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type EventApprovalAggregate {
  aggregate: EventApprovalAggregateFields
  nodes: [EventApproval!]!
}

input EventApprovalAggregateBoolExp {
  bool_and: eventApprovalAggregateBoolExpBool_and
  bool_or: eventApprovalAggregateBoolExpBool_or
  count: eventApprovalAggregateBoolExpCount
}

input eventApprovalAggregateBoolExpBool_and {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpBool_or {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpCount {
  arguments: [EventApprovalSelectColumn!]
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalAggregateFields {
  avg: EventApprovalAvgFields
  count(columns: [EventApprovalSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalMaxFields
  min: EventApprovalMinFields
  stddev: EventApprovalStddevFields
  stddevPop: EventApprovalStddevPopFields
  stddevSamp: EventApprovalStddevSampFields
  sum: EventApprovalSumFields
  varPop: EventApprovalVarPopFields
  varSamp: EventApprovalVarSampFields
  variance: EventApprovalVarianceFields
}

input EventApprovalAggregateOrderBy {
  avg: EventApprovalAvgOrderBy
  count: OrderBy
  max: EventApprovalMaxOrderBy
  min: EventApprovalMinOrderBy
  stddev: EventApprovalStddevOrderBy
  stddevPop: EventApprovalStddevPopOrderBy
  stddevSamp: EventApprovalStddevSampOrderBy
  sum: EventApprovalSumOrderBy
  varPop: EventApprovalVarPopOrderBy
  varSamp: EventApprovalVarSampOrderBy
  variance: EventApprovalVarianceOrderBy
}

input EventApprovalArrRelInsertInput {
  data: [EventApprovalInsertInput!]!
  onConflict: EventApprovalOnConflict
}

type EventApprovalAvgFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventApprovalAvgOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input EventApprovalBoolExp {
  _and: [EventApprovalBoolExp!]
  _not: EventApprovalBoolExp
  _or: [EventApprovalBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  eventId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isApproved: BooleanComparisonExp
  message: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum EventApprovalConstraint {
  event_approval_pkey
}

input EventApprovalIncInput {
  createdById: bigint
  eventApprovalStepId: bigint
  eventId: bigint
  id: bigint
  tenantScopeId: bigint
}

input EventApprovalInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isApproved: Boolean
  message: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type EventApprovalMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  tenantScopeId: bigint
}

input EventApprovalMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  tenantScopeId: bigint
}

input EventApprovalMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalMutationResponse {
  affectedRows: Int!
  returning: [EventApproval!]!
}

input EventApprovalOnConflict {
  constraint: EventApprovalConstraint!
  updateColumns: [EventApprovalUpdateColumn!]! = []
  where: EventApprovalBoolExp
}

input EventApprovalOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isApproved: OrderBy
  message: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input EventApprovalPkColumnsInput {
  id: bigint!
}

enum EventApprovalSelectColumn {
  createdAt
  createdById
  deletedAt
  eventApprovalStepId
  eventId
  hiddenAt
  id
  isApproved
  message
  tenantScopeId
}

enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns {
  isApproved
}

enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns {
  isApproved
}

input EventApprovalSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isApproved: Boolean
  message: String
  tenantScopeId: bigint
}

type EventApprovalStddevFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventApprovalStddevOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStddevPopFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventApprovalStddevPopOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStddevSampFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventApprovalStddevSampOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStep {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventApprovalValidators(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): [EventApprovalValidator!]!
  eventApprovalValidatorsAggregate(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): EventApprovalValidatorAggregate!
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  nextStepEvents(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  nextStepEventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  nextSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  nextStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  order: Int!
  previousStep: EventApprovalStep
  previousStepId: bigint
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type EventApprovalStepAggregate {
  aggregate: EventApprovalStepAggregateFields
  nodes: [EventApprovalStep!]!
}

input EventApprovalStepAggregateBoolExp {
  count: eventApprovalStepAggregateBoolExpCount
}

input eventApprovalStepAggregateBoolExpCount {
  arguments: [EventApprovalStepSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalStepAggregateFields {
  avg: EventApprovalStepAvgFields
  count(columns: [EventApprovalStepSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepMaxFields
  min: EventApprovalStepMinFields
  stddev: EventApprovalStepStddevFields
  stddevPop: EventApprovalStepStddevPopFields
  stddevSamp: EventApprovalStepStddevSampFields
  sum: EventApprovalStepSumFields
  varPop: EventApprovalStepVarPopFields
  varSamp: EventApprovalStepVarSampFields
  variance: EventApprovalStepVarianceFields
}

input EventApprovalStepAggregateOrderBy {
  avg: EventApprovalStepAvgOrderBy
  count: OrderBy
  max: EventApprovalStepMaxOrderBy
  min: EventApprovalStepMinOrderBy
  stddev: EventApprovalStepStddevOrderBy
  stddevPop: EventApprovalStepStddevPopOrderBy
  stddevSamp: EventApprovalStepStddevSampOrderBy
  sum: EventApprovalStepSumOrderBy
  varPop: EventApprovalStepVarPopOrderBy
  varSamp: EventApprovalStepVarSampOrderBy
  variance: EventApprovalStepVarianceOrderBy
}

input EventApprovalStepArrRelInsertInput {
  data: [EventApprovalStepInsertInput!]!
  onConflict: EventApprovalStepOnConflict
}

type EventApprovalStepAvgFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantScopeId: Float
}

input EventApprovalStepAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

input EventApprovalStepBoolExp {
  _and: [EventApprovalStepBoolExp!]
  _not: EventApprovalStepBoolExp
  _or: [EventApprovalStepBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventApprovalValidators: EventApprovalValidatorBoolExp
  eventApprovalValidatorsAggregate: EventApprovalValidatorAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  nextStepEvents: EventBoolExp
  nextStepEventsAggregate: EventAggregateBoolExp
  nextSteps: EventApprovalStepBoolExp
  nextStepsAggregate: EventApprovalStepAggregateBoolExp
  order: IntComparisonExp
  previousStep: EventApprovalStepBoolExp
  previousStepId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum EventApprovalStepConstraint {
  event_approval_step_pkey
}

input EventApprovalStepIncInput {
  createdById: bigint
  id: bigint
  order: Int
  previousStepId: bigint
  tenantScopeId: bigint
}

input EventApprovalStepInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventApprovalValidators: EventApprovalValidatorArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  name: String
  nextStepEvents: EventArrRelInsertInput
  nextSteps: EventApprovalStepArrRelInsertInput
  order: Int
  previousStep: EventApprovalStepObjRelInsertInput
  previousStepId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type EventApprovalStepMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantScopeId: bigint
}

input EventApprovalStepMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStepMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantScopeId: bigint
}

input EventApprovalStepMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStepMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalStep!]!
}

input EventApprovalStepObjRelInsertInput {
  data: EventApprovalStepInsertInput!
  onConflict: EventApprovalStepOnConflict
}

input EventApprovalStepOnConflict {
  constraint: EventApprovalStepConstraint!
  updateColumns: [EventApprovalStepUpdateColumn!]! = []
  where: EventApprovalStepBoolExp
}

input EventApprovalStepOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventApprovalValidatorsAggregate: EventApprovalValidatorAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  nextStepEventsAggregate: EventAggregateOrderBy
  nextStepsAggregate: EventApprovalStepAggregateOrderBy
  order: OrderBy
  previousStep: EventApprovalStepOrderBy
  previousStepId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input EventApprovalStepPkColumnsInput {
  id: bigint!
}

enum EventApprovalStepSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  order
  previousStepId
  tenantScopeId
}

input EventApprovalStepSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantScopeId: bigint
}

type EventApprovalStepStddevFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantScopeId: Float
}

input EventApprovalStepStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStepStddevPopFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantScopeId: Float
}

input EventApprovalStepStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStepStddevSampFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantScopeId: Float
}

input EventApprovalStepStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

input EventApprovalStepStreamCursorInput {
  initialValue: EventApprovalStepStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStepStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantScopeId: bigint
}

type EventApprovalStepSumFields {
  createdById: bigint
  id: bigint
  order: Int
  previousStepId: bigint
  tenantScopeId: bigint
}

input EventApprovalStepSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

enum EventApprovalStepUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  order
  previousStepId
  tenantScopeId
}

input EventApprovalStepUpdates {
  _inc: EventApprovalStepIncInput
  _set: EventApprovalStepSetInput
  where: EventApprovalStepBoolExp!
}

type EventApprovalStepVarianceFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantScopeId: Float
}

input EventApprovalStepVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStepVarPopFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantScopeId: Float
}

input EventApprovalStepVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalStepVarSampFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantScopeId: Float
}

input EventApprovalStepVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantScopeId: OrderBy
}

input EventApprovalStreamCursorInput {
  initialValue: EventApprovalStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isApproved: Boolean
  message: String
  tenantScopeId: bigint
}

type EventApprovalSumFields {
  createdById: bigint
  eventApprovalStepId: bigint
  eventId: bigint
  id: bigint
  tenantScopeId: bigint
}

input EventApprovalSumOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum EventApprovalUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventApprovalStepId
  eventId
  hiddenAt
  id
  isApproved
  message
  tenantScopeId
}

input EventApprovalUpdates {
  _inc: EventApprovalIncInput
  _set: EventApprovalSetInput
  where: EventApprovalBoolExp!
}

type EventApprovalValidator {
  canValidate: Boolean!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStep: EventApprovalStep!
  hiddenAt: timestamptz
  id: bigint!
  isNotified: Boolean!
  stepId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  user: User!
  userId: bigint!
}

type EventApprovalValidatorAggregate {
  aggregate: EventApprovalValidatorAggregateFields
  nodes: [EventApprovalValidator!]!
}

input EventApprovalValidatorAggregateBoolExp {
  bool_and: eventApprovalValidatorAggregateBoolExpBool_and
  bool_or: eventApprovalValidatorAggregateBoolExpBool_or
  count: eventApprovalValidatorAggregateBoolExpCount
}

input eventApprovalValidatorAggregateBoolExpBool_and {
  arguments: EventApprovalValidatorSelectColumnEventApprovalValidatorAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalValidatorBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalValidatorAggregateBoolExpBool_or {
  arguments: EventApprovalValidatorSelectColumnEventApprovalValidatorAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalValidatorBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalValidatorAggregateBoolExpCount {
  arguments: [EventApprovalValidatorSelectColumn!]
  distinct: Boolean
  filter: EventApprovalValidatorBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalValidatorAggregateFields {
  avg: EventApprovalValidatorAvgFields
  count(columns: [EventApprovalValidatorSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalValidatorMaxFields
  min: EventApprovalValidatorMinFields
  stddev: EventApprovalValidatorStddevFields
  stddevPop: EventApprovalValidatorStddevPopFields
  stddevSamp: EventApprovalValidatorStddevSampFields
  sum: EventApprovalValidatorSumFields
  varPop: EventApprovalValidatorVarPopFields
  varSamp: EventApprovalValidatorVarSampFields
  variance: EventApprovalValidatorVarianceFields
}

input EventApprovalValidatorAggregateOrderBy {
  avg: EventApprovalValidatorAvgOrderBy
  count: OrderBy
  max: EventApprovalValidatorMaxOrderBy
  min: EventApprovalValidatorMinOrderBy
  stddev: EventApprovalValidatorStddevOrderBy
  stddevPop: EventApprovalValidatorStddevPopOrderBy
  stddevSamp: EventApprovalValidatorStddevSampOrderBy
  sum: EventApprovalValidatorSumOrderBy
  varPop: EventApprovalValidatorVarPopOrderBy
  varSamp: EventApprovalValidatorVarSampOrderBy
  variance: EventApprovalValidatorVarianceOrderBy
}

input EventApprovalValidatorArrRelInsertInput {
  data: [EventApprovalValidatorInsertInput!]!
  onConflict: EventApprovalValidatorOnConflict
}

type EventApprovalValidatorAvgFields {
  createdById: Float
  id: Float
  stepId: Float
  tenantScopeId: Float
  userId: Float
}

input EventApprovalValidatorAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input EventApprovalValidatorBoolExp {
  _and: [EventApprovalValidatorBoolExp!]
  _not: EventApprovalValidatorBoolExp
  _or: [EventApprovalValidatorBoolExp!]
  canValidate: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventApprovalStep: EventApprovalStepBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isNotified: BooleanComparisonExp
  stepId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum EventApprovalValidatorConstraint {
  event_approval_validator_pkey
}

input EventApprovalValidatorIncInput {
  createdById: bigint
  id: bigint
  stepId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input EventApprovalValidatorInsertInput {
  canValidate: Boolean
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isNotified: Boolean
  stepId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  user: UserObjRelInsertInput
  userId: bigint
}

type EventApprovalValidatorMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  stepId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input EventApprovalValidatorMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventApprovalValidatorMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  stepId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input EventApprovalValidatorMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventApprovalValidatorMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalValidator!]!
}

input EventApprovalValidatorOnConflict {
  constraint: EventApprovalValidatorConstraint!
  updateColumns: [EventApprovalValidatorUpdateColumn!]! = []
  where: EventApprovalValidatorBoolExp
}

input EventApprovalValidatorOrderBy {
  canValidate: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isNotified: OrderBy
  stepId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input EventApprovalValidatorPkColumnsInput {
  id: bigint!
}

enum EventApprovalValidatorSelectColumn {
  canValidate
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isNotified
  stepId
  tenantScopeId
  userId
}

enum EventApprovalValidatorSelectColumnEventApprovalValidatorAggregateBoolExpBool_andArgumentsColumns {
  canValidate
  isNotified
}

enum EventApprovalValidatorSelectColumnEventApprovalValidatorAggregateBoolExpBool_orArgumentsColumns {
  canValidate
  isNotified
}

input EventApprovalValidatorSetInput {
  canValidate: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isNotified: Boolean
  stepId: bigint
  tenantScopeId: bigint
  userId: bigint
}

type EventApprovalValidatorStddevFields {
  createdById: Float
  id: Float
  stepId: Float
  tenantScopeId: Float
  userId: Float
}

input EventApprovalValidatorStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventApprovalValidatorStddevPopFields {
  createdById: Float
  id: Float
  stepId: Float
  tenantScopeId: Float
  userId: Float
}

input EventApprovalValidatorStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventApprovalValidatorStddevSampFields {
  createdById: Float
  id: Float
  stepId: Float
  tenantScopeId: Float
  userId: Float
}

input EventApprovalValidatorStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input EventApprovalValidatorStreamCursorInput {
  initialValue: EventApprovalValidatorStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalValidatorStreamCursorValueInput {
  canValidate: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isNotified: Boolean
  stepId: bigint
  tenantScopeId: bigint
  userId: bigint
}

type EventApprovalValidatorSumFields {
  createdById: bigint
  id: bigint
  stepId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input EventApprovalValidatorSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

enum EventApprovalValidatorUpdateColumn {
  canValidate
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isNotified
  stepId
  tenantScopeId
  userId
}

input EventApprovalValidatorUpdates {
  _inc: EventApprovalValidatorIncInput
  _set: EventApprovalValidatorSetInput
  where: EventApprovalValidatorBoolExp!
}

type EventApprovalValidatorVarianceFields {
  createdById: Float
  id: Float
  stepId: Float
  tenantScopeId: Float
  userId: Float
}

input EventApprovalValidatorVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventApprovalValidatorVarPopFields {
  createdById: Float
  id: Float
  stepId: Float
  tenantScopeId: Float
  userId: Float
}

input EventApprovalValidatorVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventApprovalValidatorVarSampFields {
  createdById: Float
  id: Float
  stepId: Float
  tenantScopeId: Float
  userId: Float
}

input EventApprovalValidatorVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventApprovalVarianceFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventApprovalVarianceOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalVarPopFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventApprovalVarPopOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventApprovalVarSampFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventApprovalVarSampOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input EventArrRelInsertInput {
  data: [EventInsertInput!]!
  onConflict: EventOnConflict
}

type EventAvgFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: Float
}

input EventAvgOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

input EventBoolExp {
  _and: [EventBoolExp!]
  _not: EventBoolExp
  _or: [EventBoolExp!]
  banner: FileUploadBoolExp
  bannerId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  end: TimestamptzComparisonExp
  eventApprovalSubmission: FormSubmissionBoolExp
  eventApprovalSubmissionId: BigintComparisonExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventFavorites: EventFavoriteBoolExp
  eventFavoritesAggregate: EventFavoriteAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isAutoAcceptingJoins: BooleanComparisonExp
  isPrivate: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  joinForm: FormBoolExp
  joinFormId: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  maxParticipants: SmallintComparisonExp
  meta: JsonbComparisonExp
  name: StringComparisonExp
  nextEventApprovalStep: EventApprovalStepBoolExp
  nextEventApprovalStepId: BigintComparisonExp
  pointsAwardedForAttendance: FloatComparisonExp
  price: FloatComparisonExp
  slug: StringComparisonExp
  start: TimestamptzComparisonExp
  state: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transactions: TransactionBoolExp
  transactionsAggregate: TransactionAggregateBoolExp
}

enum EventConstraint {
  event_event_approval_submission_id_unique
  event_pkey
  event_slug_unique
}

input EventDeleteAtPathInput {
  meta: [String!]
}

input EventDeleteElemInput {
  meta: Int
}

input EventDeleteKeyInput {
  meta: String
}

type EventFavorite {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  event: Event!
  eventId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type EventFavoriteAggregate {
  aggregate: EventFavoriteAggregateFields
  nodes: [EventFavorite!]!
}

input EventFavoriteAggregateBoolExp {
  count: eventFavoriteAggregateBoolExpCount
}

input eventFavoriteAggregateBoolExpCount {
  arguments: [EventFavoriteSelectColumn!]
  distinct: Boolean
  filter: EventFavoriteBoolExp
  predicate: IntComparisonExp!
}

type EventFavoriteAggregateFields {
  avg: EventFavoriteAvgFields
  count(columns: [EventFavoriteSelectColumn!], distinct: Boolean): Int!
  max: EventFavoriteMaxFields
  min: EventFavoriteMinFields
  stddev: EventFavoriteStddevFields
  stddevPop: EventFavoriteStddevPopFields
  stddevSamp: EventFavoriteStddevSampFields
  sum: EventFavoriteSumFields
  varPop: EventFavoriteVarPopFields
  varSamp: EventFavoriteVarSampFields
  variance: EventFavoriteVarianceFields
}

input EventFavoriteAggregateOrderBy {
  avg: EventFavoriteAvgOrderBy
  count: OrderBy
  max: EventFavoriteMaxOrderBy
  min: EventFavoriteMinOrderBy
  stddev: EventFavoriteStddevOrderBy
  stddevPop: EventFavoriteStddevPopOrderBy
  stddevSamp: EventFavoriteStddevSampOrderBy
  sum: EventFavoriteSumOrderBy
  varPop: EventFavoriteVarPopOrderBy
  varSamp: EventFavoriteVarSampOrderBy
  variance: EventFavoriteVarianceOrderBy
}

input EventFavoriteArrRelInsertInput {
  data: [EventFavoriteInsertInput!]!
  onConflict: EventFavoriteOnConflict
}

type EventFavoriteAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventFavoriteAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input EventFavoriteBoolExp {
  _and: [EventFavoriteBoolExp!]
  _not: EventFavoriteBoolExp
  _or: [EventFavoriteBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum EventFavoriteConstraint {
  event_favorite_pkey
}

input EventFavoriteIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  tenantScopeId: bigint
}

input EventFavoriteInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type EventFavoriteMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

input EventFavoriteMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventFavoriteMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

input EventFavoriteMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventFavoriteMutationResponse {
  affectedRows: Int!
  returning: [EventFavorite!]!
}

input EventFavoriteOnConflict {
  constraint: EventFavoriteConstraint!
  updateColumns: [EventFavoriteUpdateColumn!]! = []
  where: EventFavoriteBoolExp
}

input EventFavoriteOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input EventFavoritePkColumnsInput {
  id: bigint!
}

enum EventFavoriteSelectColumn {
  createdAt
  createdById
  deletedAt
  eventId
  hiddenAt
  id
  tenantScopeId
}

input EventFavoriteSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

type EventFavoriteStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventFavoriteStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventFavoriteStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventFavoriteStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventFavoriteStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventFavoriteStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input EventFavoriteStreamCursorInput {
  initialValue: EventFavoriteStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventFavoriteStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

type EventFavoriteSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  tenantScopeId: bigint
}

input EventFavoriteSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum EventFavoriteUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventId
  hiddenAt
  id
  tenantScopeId
}

input EventFavoriteUpdates {
  _inc: EventFavoriteIncInput
  _set: EventFavoriteSetInput
  where: EventFavoriteBoolExp!
}

type EventFavoriteVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventFavoriteVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventFavoriteVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventFavoriteVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type EventFavoriteVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantScopeId: Float
}

input EventFavoriteVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input EventIncInput {
  bannerId: bigint
  createdById: bigint
  eventApprovalSubmissionId: bigint
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: bigint
}

input EventInsertInput {
  banner: FileUploadObjRelInsertInput
  bannerId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmission: FormSubmissionObjRelInsertInput
  eventApprovalSubmissionId: bigint
  eventApprovals: EventApprovalArrRelInsertInput
  eventFavorites: EventFavoriteArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventOrganizes: EventOrganizeArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingJoins: Boolean
  isPrivate: Boolean
  isTemplate: Boolean
  joinForm: FormObjRelInsertInput
  joinFormId: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  nextEventApprovalStep: EventApprovalStepObjRelInsertInput
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transactions: TransactionArrRelInsertInput
}

type EventJoin {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  event: Event!
  eventId: bigint!
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!
  isPresent: Boolean
  joinedBy: User!
  joinedById: bigint!
  linkedMissionJoin: MissionJoin
  missionJoin: MissionJoin
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedBy: User
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedBy: User
  processedById: bigint
  qrCode: FileUpload
  qrCodeId: bigint
  state: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type EventJoinAggregate {
  aggregate: EventJoinAggregateFields
  nodes: [EventJoin!]!
}

input EventJoinAggregateBoolExp {
  bool_and: eventJoinAggregateBoolExpBool_and
  bool_or: eventJoinAggregateBoolExpBool_or
  count: eventJoinAggregateBoolExpCount
}

input eventJoinAggregateBoolExpBool_and {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpBool_or {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpCount {
  arguments: [EventJoinSelectColumn!]
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: IntComparisonExp!
}

type EventJoinAggregateFields {
  avg: EventJoinAvgFields
  count(columns: [EventJoinSelectColumn!], distinct: Boolean): Int!
  max: EventJoinMaxFields
  min: EventJoinMinFields
  stddev: EventJoinStddevFields
  stddevPop: EventJoinStddevPopFields
  stddevSamp: EventJoinStddevSampFields
  sum: EventJoinSumFields
  varPop: EventJoinVarPopFields
  varSamp: EventJoinVarSampFields
  variance: EventJoinVarianceFields
}

input EventJoinAggregateOrderBy {
  avg: EventJoinAvgOrderBy
  count: OrderBy
  max: EventJoinMaxOrderBy
  min: EventJoinMinOrderBy
  stddev: EventJoinStddevOrderBy
  stddevPop: EventJoinStddevPopOrderBy
  stddevSamp: EventJoinStddevSampOrderBy
  sum: EventJoinSumOrderBy
  varPop: EventJoinVarPopOrderBy
  varSamp: EventJoinVarSampOrderBy
  variance: EventJoinVarianceOrderBy
}

input EventJoinArrRelInsertInput {
  data: [EventJoinInsertInput!]!
  onConflict: EventJoinOnConflict
}

type EventJoinAvgFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantScopeId: Float
}

input EventJoinAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

input EventJoinBoolExp {
  _and: [EventJoinBoolExp!]
  _not: EventJoinBoolExp
  _or: [EventJoinBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isPresent: BooleanComparisonExp
  joinedBy: UserBoolExp
  joinedById: BigintComparisonExp
  linkedMissionJoin: MissionJoinBoolExp
  missionJoin: MissionJoinBoolExp
  missionJoinId: BigintComparisonExp
  participationProcessedAt: TimestamptzComparisonExp
  participationProcessedBy: UserBoolExp
  participationProcessedById: BigintComparisonExp
  participationProcessedVia: StringComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: UserBoolExp
  processedById: BigintComparisonExp
  qrCode: FileUploadBoolExp
  qrCodeId: BigintComparisonExp
  state: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum EventJoinConstraint {
  event_join_pkey
}

input EventJoinIncInput {
  createdById: bigint
  eventId: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedById: bigint
  processedById: bigint
  qrCodeId: bigint
  tenantScopeId: bigint
}

input EventJoinInsertInput {
  actions: ActionArrRelInsertInput
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventId: bigint
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPresent: Boolean
  joinedBy: UserObjRelInsertInput
  joinedById: bigint
  linkedMissionJoin: MissionJoinObjRelInsertInput
  missionJoin: MissionJoinObjRelInsertInput
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedBy: UserObjRelInsertInput
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedBy: UserObjRelInsertInput
  processedById: bigint
  qrCode: FileUploadObjRelInsertInput
  qrCodeId: bigint
  state: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type EventJoinMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantScopeId: bigint
}

input EventJoinMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedAt: OrderBy
  participationProcessedById: OrderBy
  participationProcessedVia: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type EventJoinMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantScopeId: bigint
}

input EventJoinMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedAt: OrderBy
  participationProcessedById: OrderBy
  participationProcessedVia: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type EventJoinMutationResponse {
  affectedRows: Int!
  returning: [EventJoin!]!
}

input EventJoinObjRelInsertInput {
  data: EventJoinInsertInput!
  onConflict: EventJoinOnConflict
}

input EventJoinOnConflict {
  constraint: EventJoinConstraint!
  updateColumns: [EventJoinUpdateColumn!]! = []
  where: EventJoinBoolExp
}

input EventJoinOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isPresent: OrderBy
  joinedBy: UserOrderBy
  joinedById: OrderBy
  linkedMissionJoin: MissionJoinOrderBy
  missionJoin: MissionJoinOrderBy
  missionJoinId: OrderBy
  participationProcessedAt: OrderBy
  participationProcessedBy: UserOrderBy
  participationProcessedById: OrderBy
  participationProcessedVia: OrderBy
  processedAt: OrderBy
  processedBy: UserOrderBy
  processedById: OrderBy
  qrCode: FileUploadOrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input EventJoinPkColumnsInput {
  id: bigint!
}

enum EventJoinSelectColumn {
  createdAt
  createdById
  deletedAt
  eventId
  formSubmissionId
  hiddenAt
  id
  isPresent
  joinedById
  missionJoinId
  participationProcessedAt
  participationProcessedById
  participationProcessedVia
  processedAt
  processedById
  qrCodeId
  state
  tenantScopeId
}

enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns {
  isPresent
}

enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns {
  isPresent
}

input EventJoinSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPresent: Boolean
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantScopeId: bigint
}

type EventJoinStddevFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantScopeId: Float
}

input EventJoinStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

type EventJoinStddevPopFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantScopeId: Float
}

input EventJoinStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

type EventJoinStddevSampFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantScopeId: Float
}

input EventJoinStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

input EventJoinStreamCursorInput {
  initialValue: EventJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventJoinStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPresent: Boolean
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantScopeId: bigint
}

type EventJoinSumFields {
  createdById: bigint
  eventId: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedById: bigint
  processedById: bigint
  qrCodeId: bigint
  tenantScopeId: bigint
}

input EventJoinSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

enum EventJoinUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventId
  formSubmissionId
  hiddenAt
  id
  isPresent
  joinedById
  missionJoinId
  participationProcessedAt
  participationProcessedById
  participationProcessedVia
  processedAt
  processedById
  qrCodeId
  state
  tenantScopeId
}

input EventJoinUpdates {
  _inc: EventJoinIncInput
  _set: EventJoinSetInput
  where: EventJoinBoolExp!
}

type EventJoinVarianceFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantScopeId: Float
}

input EventJoinVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

type EventJoinVarPopFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantScopeId: Float
}

input EventJoinVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

type EventJoinVarSampFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantScopeId: Float
}

input EventJoinVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantScopeId: OrderBy
}

type EventMaxFields {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantScopeId: bigint
}

input EventMaxOrderBy {
  bannerId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventApprovalSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  name: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type EventMinFields {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantScopeId: bigint
}

input EventMinOrderBy {
  bannerId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventApprovalSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  name: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type EventMutationResponse {
  affectedRows: Int!
  returning: [Event!]!
}

input EventObjRelInsertInput {
  data: EventInsertInput!
  onConflict: EventOnConflict
}

input EventOnConflict {
  constraint: EventConstraint!
  updateColumns: [EventUpdateColumn!]! = []
  where: EventBoolExp
}

input EventOrderBy {
  banner: FileUploadOrderBy
  bannerId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventApprovalSubmission: FormSubmissionOrderBy
  eventApprovalSubmissionId: OrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventFavoritesAggregate: EventFavoriteAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isAutoAcceptingJoins: OrderBy
  isPrivate: OrderBy
  isTemplate: OrderBy
  joinForm: FormOrderBy
  joinFormId: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  meta: OrderBy
  name: OrderBy
  nextEventApprovalStep: EventApprovalStepOrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transactionsAggregate: TransactionAggregateOrderBy
}

type EventOrganize {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  event: Event!
  eventId: bigint!
  eventSupervisors(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  hiddenAt: timestamptz
  id: bigint!
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  project: Project
  projectId: bigint
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  user: User
}

type EventOrganizeAggregate {
  aggregate: EventOrganizeAggregateFields
  nodes: [EventOrganize!]!
}

input EventOrganizeAggregateBoolExp {
  count: eventOrganizeAggregateBoolExpCount
}

input eventOrganizeAggregateBoolExpCount {
  arguments: [EventOrganizeSelectColumn!]
  distinct: Boolean
  filter: EventOrganizeBoolExp
  predicate: IntComparisonExp!
}

type EventOrganizeAggregateFields {
  avg: EventOrganizeAvgFields
  count(columns: [EventOrganizeSelectColumn!], distinct: Boolean): Int!
  max: EventOrganizeMaxFields
  min: EventOrganizeMinFields
  stddev: EventOrganizeStddevFields
  stddevPop: EventOrganizeStddevPopFields
  stddevSamp: EventOrganizeStddevSampFields
  sum: EventOrganizeSumFields
  varPop: EventOrganizeVarPopFields
  varSamp: EventOrganizeVarSampFields
  variance: EventOrganizeVarianceFields
}

input EventOrganizeAggregateOrderBy {
  avg: EventOrganizeAvgOrderBy
  count: OrderBy
  max: EventOrganizeMaxOrderBy
  min: EventOrganizeMinOrderBy
  stddev: EventOrganizeStddevOrderBy
  stddevPop: EventOrganizeStddevPopOrderBy
  stddevSamp: EventOrganizeStddevSampOrderBy
  sum: EventOrganizeSumOrderBy
  varPop: EventOrganizeVarPopOrderBy
  varSamp: EventOrganizeVarSampOrderBy
  variance: EventOrganizeVarianceOrderBy
}

input EventOrganizeArrRelInsertInput {
  data: [EventOrganizeInsertInput!]!
  onConflict: EventOrganizeOnConflict
}

type EventOrganizeAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
}

input EventOrganizeAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input EventOrganizeBoolExp {
  _and: [EventOrganizeBoolExp!]
  _not: EventOrganizeBoolExp
  _or: [EventOrganizeBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  eventSupervisors: EventSupervisorBoolExp
  eventSupervisorsAggregate: EventSupervisorAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  user: UserBoolExp
}

enum EventOrganizeConstraint {
  event_organize_pkey
}

input EventOrganizeIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input EventOrganizeInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  eventSupervisors: EventSupervisorArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  missions: MissionArrRelInsertInput
  project: ProjectObjRelInsertInput
  projectId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  user: UserObjRelInsertInput
}

type EventOrganizeMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input EventOrganizeMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type EventOrganizeMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input EventOrganizeMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type EventOrganizeMutationResponse {
  affectedRows: Int!
  returning: [EventOrganize!]!
}

input EventOrganizeObjRelInsertInput {
  data: EventOrganizeInsertInput!
  onConflict: EventOrganizeOnConflict
}

input EventOrganizeOnConflict {
  constraint: EventOrganizeConstraint!
  updateColumns: [EventOrganizeUpdateColumn!]! = []
  where: EventOrganizeBoolExp
}

input EventOrganizeOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  eventSupervisorsAggregate: EventSupervisorAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  missionsAggregate: MissionAggregateOrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  user: UserOrderBy
}

input EventOrganizePkColumnsInput {
  id: bigint!
}

enum EventOrganizeSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  eventId
  hiddenAt
  id
  projectId
  teamId
  tenantScopeId
}

input EventOrganizeSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

type EventOrganizeStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
}

input EventOrganizeStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type EventOrganizeStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
}

input EventOrganizeStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type EventOrganizeStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
}

input EventOrganizeStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input EventOrganizeStreamCursorInput {
  initialValue: EventOrganizeStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventOrganizeStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

type EventOrganizeSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input EventOrganizeSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum EventOrganizeUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  eventId
  hiddenAt
  id
  projectId
  teamId
  tenantScopeId
}

input EventOrganizeUpdates {
  _inc: EventOrganizeIncInput
  _set: EventOrganizeSetInput
  where: EventOrganizeBoolExp!
}

type EventOrganizeVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
}

input EventOrganizeVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type EventOrganizeVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
}

input EventOrganizeVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type EventOrganizeVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantScopeId: Float
}

input EventOrganizeVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input EventPkColumnsInput {
  id: bigint!
}

input EventPrependInput {
  meta: jsonb
}

enum EventSelectColumn {
  bannerId
  createdAt
  createdById
  deletedAt
  description
  end
  eventApprovalSubmissionId
  hiddenAt
  id
  isAutoAcceptingJoins
  isPrivate
  isTemplate
  joinFormId
  locationId
  maxParticipants
  meta
  name
  nextEventApprovalStepId
  pointsAwardedForAttendance
  price
  slug
  start
  state
  tenantScopeId
}

enum EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns {
  isAutoAcceptingJoins
  isPrivate
  isTemplate
}

enum EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns {
  isAutoAcceptingJoins
  isPrivate
  isTemplate
}

input EventSetInput {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingJoins: Boolean
  isPrivate: Boolean
  isTemplate: Boolean
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantScopeId: bigint
}

type EventStddevFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: Float
}

input EventStddevOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

type EventStddevPopFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: Float
}

input EventStddevPopOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

type EventStddevSampFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: Float
}

input EventStddevSampOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

input EventStreamCursorInput {
  initialValue: EventStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventStreamCursorValueInput {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingJoins: Boolean
  isPrivate: Boolean
  isTemplate: Boolean
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantScopeId: bigint
}

type EventSumFields {
  bannerId: bigint
  createdById: bigint
  eventApprovalSubmissionId: bigint
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: bigint
}

input EventSumOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

type EventSupervisor {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  eventOrganize: EventOrganize!
  eventOrganizeId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  title: String
  user: User!
  userId: bigint!
}

type EventSupervisorAggregate {
  aggregate: EventSupervisorAggregateFields
  nodes: [EventSupervisor!]!
}

input EventSupervisorAggregateBoolExp {
  count: eventSupervisorAggregateBoolExpCount
}

input eventSupervisorAggregateBoolExpCount {
  arguments: [EventSupervisorSelectColumn!]
  distinct: Boolean
  filter: EventSupervisorBoolExp
  predicate: IntComparisonExp!
}

type EventSupervisorAggregateFields {
  avg: EventSupervisorAvgFields
  count(columns: [EventSupervisorSelectColumn!], distinct: Boolean): Int!
  max: EventSupervisorMaxFields
  min: EventSupervisorMinFields
  stddev: EventSupervisorStddevFields
  stddevPop: EventSupervisorStddevPopFields
  stddevSamp: EventSupervisorStddevSampFields
  sum: EventSupervisorSumFields
  varPop: EventSupervisorVarPopFields
  varSamp: EventSupervisorVarSampFields
  variance: EventSupervisorVarianceFields
}

input EventSupervisorAggregateOrderBy {
  avg: EventSupervisorAvgOrderBy
  count: OrderBy
  max: EventSupervisorMaxOrderBy
  min: EventSupervisorMinOrderBy
  stddev: EventSupervisorStddevOrderBy
  stddevPop: EventSupervisorStddevPopOrderBy
  stddevSamp: EventSupervisorStddevSampOrderBy
  sum: EventSupervisorSumOrderBy
  varPop: EventSupervisorVarPopOrderBy
  varSamp: EventSupervisorVarSampOrderBy
  variance: EventSupervisorVarianceOrderBy
}

input EventSupervisorArrRelInsertInput {
  data: [EventSupervisorInsertInput!]!
  onConflict: EventSupervisorOnConflict
}

type EventSupervisorAvgFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantScopeId: Float
  userId: Float
}

input EventSupervisorAvgOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input EventSupervisorBoolExp {
  _and: [EventSupervisorBoolExp!]
  _not: EventSupervisorBoolExp
  _or: [EventSupervisorBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventOrganize: EventOrganizeBoolExp
  eventOrganizeId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  title: StringComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum EventSupervisorConstraint {
  event_supervisor_pkey
}

input EventSupervisorIncInput {
  createdById: bigint
  eventOrganizeId: bigint
  id: bigint
  tenantScopeId: bigint
  userId: bigint
}

input EventSupervisorInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventOrganize: EventOrganizeObjRelInsertInput
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  title: String
  user: UserObjRelInsertInput
  userId: bigint
}

type EventSupervisorMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
  title: String
  userId: bigint
}

input EventSupervisorMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventOrganizeId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  title: OrderBy
  userId: OrderBy
}

type EventSupervisorMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
  title: String
  userId: bigint
}

input EventSupervisorMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventOrganizeId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  title: OrderBy
  userId: OrderBy
}

type EventSupervisorMutationResponse {
  affectedRows: Int!
  returning: [EventSupervisor!]!
}

input EventSupervisorOnConflict {
  constraint: EventSupervisorConstraint!
  updateColumns: [EventSupervisorUpdateColumn!]! = []
  where: EventSupervisorBoolExp
}

input EventSupervisorOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventOrganize: EventOrganizeOrderBy
  eventOrganizeId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  title: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input EventSupervisorPkColumnsInput {
  id: bigint!
}

enum EventSupervisorSelectColumn {
  createdAt
  createdById
  deletedAt
  eventOrganizeId
  hiddenAt
  id
  tenantScopeId
  title
  userId
}

input EventSupervisorSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
  title: String
  userId: bigint
}

type EventSupervisorStddevFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantScopeId: Float
  userId: Float
}

input EventSupervisorStddevOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventSupervisorStddevPopFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantScopeId: Float
  userId: Float
}

input EventSupervisorStddevPopOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventSupervisorStddevSampFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantScopeId: Float
  userId: Float
}

input EventSupervisorStddevSampOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input EventSupervisorStreamCursorInput {
  initialValue: EventSupervisorStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventSupervisorStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
  title: String
  userId: bigint
}

type EventSupervisorSumFields {
  createdById: bigint
  eventOrganizeId: bigint
  id: bigint
  tenantScopeId: bigint
  userId: bigint
}

input EventSupervisorSumOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

enum EventSupervisorUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventOrganizeId
  hiddenAt
  id
  tenantScopeId
  title
  userId
}

input EventSupervisorUpdates {
  _inc: EventSupervisorIncInput
  _set: EventSupervisorSetInput
  where: EventSupervisorBoolExp!
}

type EventSupervisorVarianceFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantScopeId: Float
  userId: Float
}

input EventSupervisorVarianceOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventSupervisorVarPopFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantScopeId: Float
  userId: Float
}

input EventSupervisorVarPopOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type EventSupervisorVarSampFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantScopeId: Float
  userId: Float
}

input EventSupervisorVarSampOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

enum EventUpdateColumn {
  bannerId
  createdAt
  createdById
  deletedAt
  description
  end
  eventApprovalSubmissionId
  hiddenAt
  id
  isAutoAcceptingJoins
  isPrivate
  isTemplate
  joinFormId
  locationId
  maxParticipants
  meta
  name
  nextEventApprovalStepId
  pointsAwardedForAttendance
  price
  slug
  start
  state
  tenantScopeId
}

input EventUpdates {
  _append: EventAppendInput
  _deleteAtPath: EventDeleteAtPathInput
  _deleteElem: EventDeleteElemInput
  _deleteKey: EventDeleteKeyInput
  _inc: EventIncInput
  _prepend: EventPrependInput
  _set: EventSetInput
  where: EventBoolExp!
}

type EventVarianceFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: Float
}

input EventVarianceOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

type EventVarPopFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: Float
}

input EventVarPopOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

type EventVarSampFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantScopeId: Float
}

input EventVarSampOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantScopeId: OrderBy
}

type Expense {
  bankInfo: BankInfo!
  bankInfoId: bigint!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  expenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenseReportId: bigint!
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedBy: User
  processedById: bigint
  state: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transaction: Transaction
}

type ExpenseAggregate {
  aggregate: ExpenseAggregateFields
  nodes: [Expense!]!
}

input ExpenseAggregateBoolExp {
  count: expenseAggregateBoolExpCount
}

input expenseAggregateBoolExpCount {
  arguments: [ExpenseSelectColumn!]
  distinct: Boolean
  filter: ExpenseBoolExp
  predicate: IntComparisonExp!
}

type ExpenseAggregateFields {
  avg: ExpenseAvgFields
  count(columns: [ExpenseSelectColumn!], distinct: Boolean): Int!
  max: ExpenseMaxFields
  min: ExpenseMinFields
  stddev: ExpenseStddevFields
  stddevPop: ExpenseStddevPopFields
  stddevSamp: ExpenseStddevSampFields
  sum: ExpenseSumFields
  varPop: ExpenseVarPopFields
  varSamp: ExpenseVarSampFields
  variance: ExpenseVarianceFields
}

input ExpenseAggregateOrderBy {
  avg: ExpenseAvgOrderBy
  count: OrderBy
  max: ExpenseMaxOrderBy
  min: ExpenseMinOrderBy
  stddev: ExpenseStddevOrderBy
  stddevPop: ExpenseStddevPopOrderBy
  stddevSamp: ExpenseStddevSampOrderBy
  sum: ExpenseSumOrderBy
  varPop: ExpenseVarPopOrderBy
  varSamp: ExpenseVarSampOrderBy
  variance: ExpenseVarianceOrderBy
}

input ExpenseArrRelInsertInput {
  data: [ExpenseInsertInput!]!
  onConflict: ExpenseOnConflict
}

type ExpenseAvgFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantScopeId: Float
}

input ExpenseAvgOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

input ExpenseBoolExp {
  _and: [ExpenseBoolExp!]
  _not: ExpenseBoolExp
  _or: [ExpenseBoolExp!]
  bankInfo: BankInfoBoolExp
  bankInfoId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  expenseReportId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  lastNotifiedAt: TimestamptzComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: UserBoolExp
  processedById: BigintComparisonExp
  state: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transaction: TransactionBoolExp
}

enum ExpenseConstraint {
  expense_pkey
}

input ExpenseIncInput {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  processedById: bigint
  tenantScopeId: bigint
}

input ExpenseInsertInput {
  bankInfo: BankInfoObjRelInsertInput
  bankInfoId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseItems: ExpenseItemArrRelInsertInput
  expenseReportId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedBy: UserObjRelInsertInput
  processedById: bigint
  state: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transaction: TransactionObjRelInsertInput
}

type ExpenseItem {
  category: String!
  company: LegalUnit
  companyId: bigint
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  expense: Expense
  expenseId: bigint
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  payedAt: timestamptz
  quantity: smallint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  unitCost: Float!
}

type ExpenseItemAggregate {
  aggregate: ExpenseItemAggregateFields
  nodes: [ExpenseItem!]!
}

input ExpenseItemAggregateBoolExp {
  count: expenseItemAggregateBoolExpCount
}

input expenseItemAggregateBoolExpCount {
  arguments: [ExpenseItemSelectColumn!]
  distinct: Boolean
  filter: ExpenseItemBoolExp
  predicate: IntComparisonExp!
}

type ExpenseItemAggregateFields {
  avg: ExpenseItemAvgFields
  count(columns: [ExpenseItemSelectColumn!], distinct: Boolean): Int!
  max: ExpenseItemMaxFields
  min: ExpenseItemMinFields
  stddev: ExpenseItemStddevFields
  stddevPop: ExpenseItemStddevPopFields
  stddevSamp: ExpenseItemStddevSampFields
  sum: ExpenseItemSumFields
  varPop: ExpenseItemVarPopFields
  varSamp: ExpenseItemVarSampFields
  variance: ExpenseItemVarianceFields
}

input ExpenseItemAggregateOrderBy {
  avg: ExpenseItemAvgOrderBy
  count: OrderBy
  max: ExpenseItemMaxOrderBy
  min: ExpenseItemMinOrderBy
  stddev: ExpenseItemStddevOrderBy
  stddevPop: ExpenseItemStddevPopOrderBy
  stddevSamp: ExpenseItemStddevSampOrderBy
  sum: ExpenseItemSumOrderBy
  varPop: ExpenseItemVarPopOrderBy
  varSamp: ExpenseItemVarSampOrderBy
  variance: ExpenseItemVarianceOrderBy
}

input ExpenseItemArrRelInsertInput {
  data: [ExpenseItemInsertInput!]!
  onConflict: ExpenseItemOnConflict
}

type ExpenseItemAttachments {
  attachment: FileUpload!
  expenseItem: ExpenseItem!
  expenseItemId: bigint!
  fileUploadId: bigint!
}

type ExpenseItemAttachmentsAggregate {
  aggregate: ExpenseItemAttachmentsAggregateFields
  nodes: [ExpenseItemAttachments!]!
}

input ExpenseItemAttachmentsAggregateBoolExp {
  count: expenseItemAttachmentsAggregateBoolExpCount
}

input expenseItemAttachmentsAggregateBoolExpCount {
  arguments: [ExpenseItemAttachmentsSelectColumn!]
  distinct: Boolean
  filter: ExpenseItemAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type ExpenseItemAttachmentsAggregateFields {
  avg: ExpenseItemAttachmentsAvgFields
  count(columns: [ExpenseItemAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: ExpenseItemAttachmentsMaxFields
  min: ExpenseItemAttachmentsMinFields
  stddev: ExpenseItemAttachmentsStddevFields
  stddevPop: ExpenseItemAttachmentsStddevPopFields
  stddevSamp: ExpenseItemAttachmentsStddevSampFields
  sum: ExpenseItemAttachmentsSumFields
  varPop: ExpenseItemAttachmentsVarPopFields
  varSamp: ExpenseItemAttachmentsVarSampFields
  variance: ExpenseItemAttachmentsVarianceFields
}

input ExpenseItemAttachmentsAggregateOrderBy {
  avg: ExpenseItemAttachmentsAvgOrderBy
  count: OrderBy
  max: ExpenseItemAttachmentsMaxOrderBy
  min: ExpenseItemAttachmentsMinOrderBy
  stddev: ExpenseItemAttachmentsStddevOrderBy
  stddevPop: ExpenseItemAttachmentsStddevPopOrderBy
  stddevSamp: ExpenseItemAttachmentsStddevSampOrderBy
  sum: ExpenseItemAttachmentsSumOrderBy
  varPop: ExpenseItemAttachmentsVarPopOrderBy
  varSamp: ExpenseItemAttachmentsVarSampOrderBy
  variance: ExpenseItemAttachmentsVarianceOrderBy
}

input ExpenseItemAttachmentsArrRelInsertInput {
  data: [ExpenseItemAttachmentsInsertInput!]!
  onConflict: ExpenseItemAttachmentsOnConflict
}

type ExpenseItemAttachmentsAvgFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsAvgOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

input ExpenseItemAttachmentsBoolExp {
  _and: [ExpenseItemAttachmentsBoolExp!]
  _not: ExpenseItemAttachmentsBoolExp
  _or: [ExpenseItemAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  expenseItem: ExpenseItemBoolExp
  expenseItemId: BigintComparisonExp
  fileUploadId: BigintComparisonExp
}

enum ExpenseItemAttachmentsConstraint {
  expense_item_attachments_pkey
}

input ExpenseItemAttachmentsIncInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  expenseItem: ExpenseItemObjRelInsertInput
  expenseItemId: bigint
  fileUploadId: bigint
}

type ExpenseItemAttachmentsMaxFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsMaxOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsMinFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsMinOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [ExpenseItemAttachments!]!
}

input ExpenseItemAttachmentsOnConflict {
  constraint: ExpenseItemAttachmentsConstraint!
  updateColumns: [ExpenseItemAttachmentsUpdateColumn!]! = []
  where: ExpenseItemAttachmentsBoolExp
}

input ExpenseItemAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  expenseItem: ExpenseItemOrderBy
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

input ExpenseItemAttachmentsPkColumnsInput {
  expenseItemId: bigint!
  fileUploadId: bigint!
}

enum ExpenseItemAttachmentsSelectColumn {
  expenseItemId
  fileUploadId
}

input ExpenseItemAttachmentsSetInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

type ExpenseItemAttachmentsStddevFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsStddevOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsStddevPopFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsStddevPopOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsStddevSampFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsStddevSampOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

input ExpenseItemAttachmentsStreamCursorInput {
  initialValue: ExpenseItemAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ExpenseItemAttachmentsStreamCursorValueInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

type ExpenseItemAttachmentsSumFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsSumOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

enum ExpenseItemAttachmentsUpdateColumn {
  expenseItemId
  fileUploadId
}

input ExpenseItemAttachmentsUpdates {
  _inc: ExpenseItemAttachmentsIncInput
  _set: ExpenseItemAttachmentsSetInput
  where: ExpenseItemAttachmentsBoolExp!
}

type ExpenseItemAttachmentsVarianceFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsVarianceOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsVarPopFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsVarPopOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsVarSampFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsVarSampOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAvgFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantScopeId: Float
  unitCost: Float
}

input ExpenseItemAvgOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

input ExpenseItemBoolExp {
  _and: [ExpenseItemBoolExp!]
  _not: ExpenseItemBoolExp
  _or: [ExpenseItemBoolExp!]
  category: StringComparisonExp
  company: LegalUnitBoolExp
  companyId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  expenseItemAttachments: ExpenseItemAttachmentsBoolExp
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  quantity: SmallintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  unitCost: FloatComparisonExp
}

enum ExpenseItemConstraint {
  expense_item_pkey
}

input ExpenseItemIncInput {
  companyId: bigint
  createdById: bigint
  expenseId: bigint
  id: bigint
  quantity: smallint
  tenantScopeId: bigint
  unitCost: Float
}

input ExpenseItemInsertInput {
  category: String
  company: LegalUnitObjRelInsertInput
  companyId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  expenseItemAttachments: ExpenseItemAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  unitCost: Float
}

type ExpenseItemMaxFields {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantScopeId: bigint
  unitCost: Float
}

input ExpenseItemMaxOrderBy {
  category: OrderBy
  companyId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemMinFields {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantScopeId: bigint
  unitCost: Float
}

input ExpenseItemMinOrderBy {
  category: OrderBy
  companyId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemMutationResponse {
  affectedRows: Int!
  returning: [ExpenseItem!]!
}

input ExpenseItemObjRelInsertInput {
  data: ExpenseItemInsertInput!
  onConflict: ExpenseItemOnConflict
}

input ExpenseItemOnConflict {
  constraint: ExpenseItemConstraint!
  updateColumns: [ExpenseItemUpdateColumn!]! = []
  where: ExpenseItemBoolExp
}

input ExpenseItemOrderBy {
  category: OrderBy
  company: LegalUnitOrderBy
  companyId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

input ExpenseItemPkColumnsInput {
  id: bigint!
}

enum ExpenseItemSelectColumn {
  category
  companyId
  createdAt
  createdById
  deletedAt
  description
  expenseId
  hiddenAt
  id
  name
  payedAt
  quantity
  tenantScopeId
  unitCost
}

input ExpenseItemSetInput {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantScopeId: bigint
  unitCost: Float
}

type ExpenseItemStddevFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantScopeId: Float
  unitCost: Float
}

input ExpenseItemStddevOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemStddevPopFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantScopeId: Float
  unitCost: Float
}

input ExpenseItemStddevPopOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemStddevSampFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantScopeId: Float
  unitCost: Float
}

input ExpenseItemStddevSampOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

input ExpenseItemStreamCursorInput {
  initialValue: ExpenseItemStreamCursorValueInput!
  ordering: CursorOrdering
}

input ExpenseItemStreamCursorValueInput {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantScopeId: bigint
  unitCost: Float
}

type ExpenseItemSumFields {
  companyId: bigint
  createdById: bigint
  expenseId: bigint
  id: bigint
  quantity: smallint
  tenantScopeId: bigint
  unitCost: Float
}

input ExpenseItemSumOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

enum ExpenseItemUpdateColumn {
  category
  companyId
  createdAt
  createdById
  deletedAt
  description
  expenseId
  hiddenAt
  id
  name
  payedAt
  quantity
  tenantScopeId
  unitCost
}

input ExpenseItemUpdates {
  _inc: ExpenseItemIncInput
  _set: ExpenseItemSetInput
  where: ExpenseItemBoolExp!
}

type ExpenseItemVarianceFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantScopeId: Float
  unitCost: Float
}

input ExpenseItemVarianceOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemVarPopFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantScopeId: Float
  unitCost: Float
}

input ExpenseItemVarPopOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemVarSampFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantScopeId: Float
  unitCost: Float
}

input ExpenseItemVarSampOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantScopeId: OrderBy
  unitCost: OrderBy
}

type ExpenseMaxFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantScopeId: bigint
}

input ExpenseMaxOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type ExpenseMinFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantScopeId: bigint
}

input ExpenseMinOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type ExpenseMutationResponse {
  affectedRows: Int!
  returning: [Expense!]!
}

input ExpenseObjRelInsertInput {
  data: ExpenseInsertInput!
  onConflict: ExpenseOnConflict
}

input ExpenseOnConflict {
  constraint: ExpenseConstraint!
  updateColumns: [ExpenseUpdateColumn!]! = []
  where: ExpenseBoolExp
}

input ExpenseOrderBy {
  bankInfo: BankInfoOrderBy
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  expenseReportId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  processedAt: OrderBy
  processedBy: UserOrderBy
  processedById: OrderBy
  state: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transaction: TransactionOrderBy
}

input ExpensePkColumnsInput {
  id: bigint!
}

enum ExpenseSelectColumn {
  bankInfoId
  createdAt
  createdById
  deletedAt
  description
  expenseReportId
  hiddenAt
  id
  lastNotifiedAt
  processedAt
  processedById
  state
  tenantScopeId
}

input ExpenseSetInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantScopeId: bigint
}

type ExpenseStddevFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantScopeId: Float
}

input ExpenseStddevOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

type ExpenseStddevPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantScopeId: Float
}

input ExpenseStddevPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

type ExpenseStddevSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantScopeId: Float
}

input ExpenseStddevSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

input ExpenseStreamCursorInput {
  initialValue: ExpenseStreamCursorValueInput!
  ordering: CursorOrdering
}

input ExpenseStreamCursorValueInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantScopeId: bigint
}

type ExpenseSumFields {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  processedById: bigint
  tenantScopeId: bigint
}

input ExpenseSumOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

enum ExpenseUpdateColumn {
  bankInfoId
  createdAt
  createdById
  deletedAt
  description
  expenseReportId
  hiddenAt
  id
  lastNotifiedAt
  processedAt
  processedById
  state
  tenantScopeId
}

input ExpenseUpdates {
  _inc: ExpenseIncInput
  _set: ExpenseSetInput
  where: ExpenseBoolExp!
}

type ExpenseVarianceFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantScopeId: Float
}

input ExpenseVarianceOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

type ExpenseVarPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantScopeId: Float
}

input ExpenseVarPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

type ExpenseVarSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantScopeId: Float
}

input ExpenseVarSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantScopeId: OrderBy
}

type FileUpload {
  actorImage: ActorImage
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  fileLastModifiedAt: timestamptz!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  grants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  hiddenAt: timestamptz
  id: bigint!
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  name: String!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  signatureGrants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  signatureGrantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  signedGrantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  signedGrantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  size: Int!
  tags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  teamDocument: TeamDocument
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transactionAttachments(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): [TransactionAttachments!]!
  transactionAttachmentsAggregate(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): TransactionAttachmentsAggregate!
  type: String!
  url: String!
}

type FileUploadAggregate {
  aggregate: FileUploadAggregateFields
  nodes: [FileUpload!]!
}

input FileUploadAggregateBoolExp {
  count: fileUploadAggregateBoolExpCount
}

input fileUploadAggregateBoolExpCount {
  arguments: [FileUploadSelectColumn!]
  distinct: Boolean
  filter: FileUploadBoolExp
  predicate: IntComparisonExp!
}

type FileUploadAggregateFields {
  avg: FileUploadAvgFields
  count(columns: [FileUploadSelectColumn!], distinct: Boolean): Int!
  max: FileUploadMaxFields
  min: FileUploadMinFields
  stddev: FileUploadStddevFields
  stddevPop: FileUploadStddevPopFields
  stddevSamp: FileUploadStddevSampFields
  sum: FileUploadSumFields
  varPop: FileUploadVarPopFields
  varSamp: FileUploadVarSampFields
  variance: FileUploadVarianceFields
}

input FileUploadAggregateOrderBy {
  avg: FileUploadAvgOrderBy
  count: OrderBy
  max: FileUploadMaxOrderBy
  min: FileUploadMinOrderBy
  stddev: FileUploadStddevOrderBy
  stddevPop: FileUploadStddevPopOrderBy
  stddevSamp: FileUploadStddevSampOrderBy
  sum: FileUploadSumOrderBy
  varPop: FileUploadVarPopOrderBy
  varSamp: FileUploadVarSampOrderBy
  variance: FileUploadVarianceOrderBy
}

input FileUploadArrRelInsertInput {
  data: [FileUploadInsertInput!]!
  onConflict: FileUploadOnConflict
}

type FileUploadAvgFields {
  createdById: Float
  id: Float
  size: Float
  tenantScopeId: Float
}

input FileUploadAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

input FileUploadBoolExp {
  _and: [FileUploadBoolExp!]
  _not: FileUploadBoolExp
  _or: [FileUploadBoolExp!]
  actorImage: ActorImageBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItemAttachments: ExpenseItemAttachmentsBoolExp
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fileLastModifiedAt: TimestamptzComparisonExp
  formSubmissionAttachments: FormSubmissionAttachmentsBoolExp
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateBoolExp
  grantAllocateAttachments: GrantAllocateAttachmentsBoolExp
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateBoolExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  grantAttachments: GrantAttachmentsBoolExp
  grantAttachmentsAggregate: GrantAttachmentsAggregateBoolExp
  grants: GrantBoolExp
  grantsAggregate: GrantAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  locationImages: LocationImagesBoolExp
  locationImagesAggregate: LocationImagesAggregateBoolExp
  name: StringComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  signatureGrants: GrantBoolExp
  signatureGrantsAggregate: GrantAggregateBoolExp
  signedGrantAllocates: GrantAllocateBoolExp
  signedGrantAllocatesAggregate: GrantAllocateAggregateBoolExp
  size: IntComparisonExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamDocument: TeamDocumentBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transactionAttachments: TransactionAttachmentsBoolExp
  transactionAttachmentsAggregate: TransactionAttachmentsAggregateBoolExp
  type: StringComparisonExp
  url: StringComparisonExp
}

enum FileUploadConstraint {
  file_upload_pkey
  file_upload_url_unique
}

input FileUploadIncInput {
  createdById: bigint
  id: bigint
  size: Int
  tenantScopeId: bigint
}

input FileUploadInsertInput {
  actorImage: ActorImageObjRelInsertInput
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventJoins: EventJoinArrRelInsertInput
  events: EventArrRelInsertInput
  expenseItemAttachments: ExpenseItemAttachmentsArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  fileLastModifiedAt: timestamptz
  formSubmissionAttachments: FormSubmissionAttachmentsArrRelInsertInput
  grantAllocateAttachments: GrantAllocateAttachmentsArrRelInsertInput
  grantAllocates: GrantAllocateArrRelInsertInput
  grantAttachments: GrantAttachmentsArrRelInsertInput
  grants: GrantArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  locationImages: LocationImagesArrRelInsertInput
  name: String
  projects: ProjectArrRelInsertInput
  signatureGrants: GrantArrRelInsertInput
  signedGrantAllocates: GrantAllocateArrRelInsertInput
  size: Int
  tags: TagArrRelInsertInput
  teamDocument: TeamDocumentObjRelInsertInput
  teams: TeamArrRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transactionAttachments: TransactionAttachmentsArrRelInsertInput
  type: String
  url: String
}

type FileUploadMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantScopeId: bigint
  type: String
  url: String
}

input FileUploadMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  url: OrderBy
}

type FileUploadMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantScopeId: bigint
  type: String
  url: String
}

input FileUploadMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  url: OrderBy
}

type FileUploadMutationResponse {
  affectedRows: Int!
  returning: [FileUpload!]!
}

input FileUploadObjRelInsertInput {
  data: FileUploadInsertInput!
  onConflict: FileUploadOnConflict
}

input FileUploadOnConflict {
  constraint: FileUploadConstraint!
  updateColumns: [FileUploadUpdateColumn!]! = []
  where: FileUploadBoolExp
}

input FileUploadOrderBy {
  actorImage: ActorImageOrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fileLastModifiedAt: OrderBy
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateOrderBy
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateOrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  grantAttachmentsAggregate: GrantAttachmentsAggregateOrderBy
  grantsAggregate: GrantAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationImagesAggregate: LocationImagesAggregateOrderBy
  name: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  signatureGrantsAggregate: GrantAggregateOrderBy
  signedGrantAllocatesAggregate: GrantAllocateAggregateOrderBy
  size: OrderBy
  tagsAggregate: TagAggregateOrderBy
  teamDocument: TeamDocumentOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transactionAttachmentsAggregate: TransactionAttachmentsAggregateOrderBy
  type: OrderBy
  url: OrderBy
}

input FileUploadPkColumnsInput {
  id: bigint!
}

enum FileUploadSelectColumn {
  createdAt
  createdById
  deletedAt
  fileLastModifiedAt
  hiddenAt
  id
  name
  size
  tenantScopeId
  type
  url
}

input FileUploadSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantScopeId: bigint
  type: String
  url: String
}

type FileUploadStddevFields {
  createdById: Float
  id: Float
  size: Float
  tenantScopeId: Float
}

input FileUploadStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

type FileUploadStddevPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantScopeId: Float
}

input FileUploadStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

type FileUploadStddevSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantScopeId: Float
}

input FileUploadStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

input FileUploadStreamCursorInput {
  initialValue: FileUploadStreamCursorValueInput!
  ordering: CursorOrdering
}

input FileUploadStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantScopeId: bigint
  type: String
  url: String
}

type FileUploadSumFields {
  createdById: bigint
  id: bigint
  size: Int
  tenantScopeId: bigint
}

input FileUploadSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

enum FileUploadUpdateColumn {
  createdAt
  createdById
  deletedAt
  fileLastModifiedAt
  hiddenAt
  id
  name
  size
  tenantScopeId
  type
  url
}

input FileUploadUpdates {
  _inc: FileUploadIncInput
  _set: FileUploadSetInput
  where: FileUploadBoolExp!
}

type FileUploadVarianceFields {
  createdById: Float
  id: Float
  size: Float
  tenantScopeId: Float
}

input FileUploadVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

type FileUploadVarPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantScopeId: Float
}

input FileUploadVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

type FileUploadVarSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantScopeId: Float
}

input FileUploadVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantScopeId: OrderBy
}

input FloatComparisonExp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _isNull: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

type Follow {
  actor: Actor!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type FollowAggregate {
  aggregate: FollowAggregateFields
  nodes: [Follow!]!
}

input FollowAggregateBoolExp {
  count: followAggregateBoolExpCount
}

input followAggregateBoolExpCount {
  arguments: [FollowSelectColumn!]
  distinct: Boolean
  filter: FollowBoolExp
  predicate: IntComparisonExp!
}

type FollowAggregateFields {
  avg: FollowAvgFields
  count(columns: [FollowSelectColumn!], distinct: Boolean): Int!
  max: FollowMaxFields
  min: FollowMinFields
  stddev: FollowStddevFields
  stddevPop: FollowStddevPopFields
  stddevSamp: FollowStddevSampFields
  sum: FollowSumFields
  varPop: FollowVarPopFields
  varSamp: FollowVarSampFields
  variance: FollowVarianceFields
}

input FollowAggregateOrderBy {
  avg: FollowAvgOrderBy
  count: OrderBy
  max: FollowMaxOrderBy
  min: FollowMinOrderBy
  stddev: FollowStddevOrderBy
  stddevPop: FollowStddevPopOrderBy
  stddevSamp: FollowStddevSampOrderBy
  sum: FollowSumOrderBy
  varPop: FollowVarPopOrderBy
  varSamp: FollowVarSampOrderBy
  variance: FollowVarianceOrderBy
}

input FollowArrRelInsertInput {
  data: [FollowInsertInput!]!
  onConflict: FollowOnConflict
}

type FollowAvgFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantScopeId: Float
}

input FollowAvgOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input FollowBoolExp {
  _and: [FollowBoolExp!]
  _not: FollowBoolExp
  _or: [FollowBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  followedActorId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum FollowConstraint {
  follow_pkey
}

input FollowIncInput {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantScopeId: bigint
}

input FollowInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type FollowMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

input FollowMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FollowMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

input FollowMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FollowMutationResponse {
  affectedRows: Int!
  returning: [Follow!]!
}

input FollowOnConflict {
  constraint: FollowConstraint!
  updateColumns: [FollowUpdateColumn!]! = []
  where: FollowBoolExp
}

input FollowOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input FollowPkColumnsInput {
  id: bigint!
}

enum FollowSelectColumn {
  createdAt
  createdById
  deletedAt
  followedActorId
  hiddenAt
  id
  tenantScopeId
}

input FollowSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

type FollowStddevFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantScopeId: Float
}

input FollowStddevOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FollowStddevPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantScopeId: Float
}

input FollowStddevPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FollowStddevSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantScopeId: Float
}

input FollowStddevSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input FollowStreamCursorInput {
  initialValue: FollowStreamCursorValueInput!
  ordering: CursorOrdering
}

input FollowStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

type FollowSumFields {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantScopeId: bigint
}

input FollowSumOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum FollowUpdateColumn {
  createdAt
  createdById
  deletedAt
  followedActorId
  hiddenAt
  id
  tenantScopeId
}

input FollowUpdates {
  _inc: FollowIncInput
  _set: FollowSetInput
  where: FollowBoolExp!
}

type FollowVarianceFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantScopeId: Float
}

input FollowVarianceOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FollowVarPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantScopeId: Float
}

input FollowVarPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FollowVarSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantScopeId: Float
}

input FollowVarSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type Form {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  formSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  hiddenAt: timestamptz
  id: bigint!
  isAllowingEditingAnswers: Boolean!
  isAllowingMultipleAnswers: Boolean!
  isEnabled: Boolean!
  isLocked: Boolean!
  name: String!
  schema(path: String): jsonb!
  team: Team
  tenantById: Tenant
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String!
}

type FormAggregate {
  aggregate: FormAggregateFields
  nodes: [Form!]!
}

input FormAggregateBoolExp {
  bool_and: formAggregateBoolExpBool_and
  bool_or: formAggregateBoolExpBool_or
  count: formAggregateBoolExpCount
}

input formAggregateBoolExpBool_and {
  arguments: FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpBool_or {
  arguments: FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpCount {
  arguments: [FormSelectColumn!]
  distinct: Boolean
  filter: FormBoolExp
  predicate: IntComparisonExp!
}

type FormAggregateFields {
  avg: FormAvgFields
  count(columns: [FormSelectColumn!], distinct: Boolean): Int!
  max: FormMaxFields
  min: FormMinFields
  stddev: FormStddevFields
  stddevPop: FormStddevPopFields
  stddevSamp: FormStddevSampFields
  sum: FormSumFields
  varPop: FormVarPopFields
  varSamp: FormVarSampFields
  variance: FormVarianceFields
}

input FormAggregateOrderBy {
  avg: FormAvgOrderBy
  count: OrderBy
  max: FormMaxOrderBy
  min: FormMinOrderBy
  stddev: FormStddevOrderBy
  stddevPop: FormStddevPopOrderBy
  stddevSamp: FormStddevSampOrderBy
  sum: FormSumOrderBy
  varPop: FormVarPopOrderBy
  varSamp: FormVarSampOrderBy
  variance: FormVarianceOrderBy
}

input FormAppendInput {
  schema: jsonb
}

input FormArrRelInsertInput {
  data: [FormInsertInput!]!
  onConflict: FormOnConflict
}

type FormAvgFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input FormAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input FormBoolExp {
  _and: [FormBoolExp!]
  _not: FormBoolExp
  _or: [FormBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isAllowingEditingAnswers: BooleanComparisonExp
  isAllowingMultipleAnswers: BooleanComparisonExp
  isEnabled: BooleanComparisonExp
  isLocked: BooleanComparisonExp
  name: StringComparisonExp
  schema: JsonbComparisonExp
  team: TeamBoolExp
  tenantById: TenantBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
}

enum FormConstraint {
  form_pkey
}

input FormDeleteAtPathInput {
  schema: [String!]
}

input FormDeleteElemInput {
  schema: Int
}

input FormDeleteKeyInput {
  schema: String
}

input FormIncInput {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input FormInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isLocked: Boolean
  name: String
  schema: jsonb
  team: TeamObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
}

type FormMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantScopeId: bigint
  type: String
}

input FormMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type FormMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantScopeId: bigint
  type: String
}

input FormMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type FormMutationResponse {
  affectedRows: Int!
  returning: [Form!]!
}

input FormObjRelInsertInput {
  data: FormInsertInput!
  onConflict: FormOnConflict
}

input FormOnConflict {
  constraint: FormConstraint!
  updateColumns: [FormUpdateColumn!]! = []
  where: FormBoolExp
}

input FormOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isAllowingEditingAnswers: OrderBy
  isAllowingMultipleAnswers: OrderBy
  isEnabled: OrderBy
  isLocked: OrderBy
  name: OrderBy
  schema: OrderBy
  team: TeamOrderBy
  tenantById: TenantOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

input FormPkColumnsInput {
  id: bigint!
}

input FormPrependInput {
  schema: jsonb
}

enum FormSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
  name
  schema
  tenantScopeId
  type
}

enum FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns {
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
}

enum FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns {
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
}

input FormSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isLocked: Boolean
  name: String
  schema: jsonb
  tenantScopeId: bigint
  type: String
}

type FormStddevFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input FormStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormStddevPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input FormStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormStddevSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input FormStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input FormStreamCursorInput {
  initialValue: FormStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isLocked: Boolean
  name: String
  schema: jsonb
  tenantScopeId: bigint
  type: String
}

type FormSubmission {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  event: Event
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  form: Form!
  formId: bigint!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!
  submission(path: String): jsonb!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type FormSubmissionAggregate {
  aggregate: FormSubmissionAggregateFields
  nodes: [FormSubmission!]!
}

input FormSubmissionAggregateBoolExp {
  count: formSubmissionAggregateBoolExpCount
}

input formSubmissionAggregateBoolExpCount {
  arguments: [FormSubmissionSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionBoolExp
  predicate: IntComparisonExp!
}

type FormSubmissionAggregateFields {
  avg: FormSubmissionAvgFields
  count(columns: [FormSubmissionSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionMaxFields
  min: FormSubmissionMinFields
  stddev: FormSubmissionStddevFields
  stddevPop: FormSubmissionStddevPopFields
  stddevSamp: FormSubmissionStddevSampFields
  sum: FormSubmissionSumFields
  varPop: FormSubmissionVarPopFields
  varSamp: FormSubmissionVarSampFields
  variance: FormSubmissionVarianceFields
}

input FormSubmissionAggregateOrderBy {
  avg: FormSubmissionAvgOrderBy
  count: OrderBy
  max: FormSubmissionMaxOrderBy
  min: FormSubmissionMinOrderBy
  stddev: FormSubmissionStddevOrderBy
  stddevPop: FormSubmissionStddevPopOrderBy
  stddevSamp: FormSubmissionStddevSampOrderBy
  sum: FormSubmissionSumOrderBy
  varPop: FormSubmissionVarPopOrderBy
  varSamp: FormSubmissionVarSampOrderBy
  variance: FormSubmissionVarianceOrderBy
}

input FormSubmissionAppendInput {
  submission: jsonb
}

input FormSubmissionArrRelInsertInput {
  data: [FormSubmissionInsertInput!]!
  onConflict: FormSubmissionOnConflict
}

type FormSubmissionAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  formSubmission: FormSubmission!
  formSubmissionId: bigint!
}

type FormSubmissionAttachmentsAggregate {
  aggregate: FormSubmissionAttachmentsAggregateFields
  nodes: [FormSubmissionAttachments!]!
}

input FormSubmissionAttachmentsAggregateBoolExp {
  count: formSubmissionAttachmentsAggregateBoolExpCount
}

input formSubmissionAttachmentsAggregateBoolExpCount {
  arguments: [FormSubmissionAttachmentsSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type FormSubmissionAttachmentsAggregateFields {
  avg: FormSubmissionAttachmentsAvgFields
  count(columns: [FormSubmissionAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionAttachmentsMaxFields
  min: FormSubmissionAttachmentsMinFields
  stddev: FormSubmissionAttachmentsStddevFields
  stddevPop: FormSubmissionAttachmentsStddevPopFields
  stddevSamp: FormSubmissionAttachmentsStddevSampFields
  sum: FormSubmissionAttachmentsSumFields
  varPop: FormSubmissionAttachmentsVarPopFields
  varSamp: FormSubmissionAttachmentsVarSampFields
  variance: FormSubmissionAttachmentsVarianceFields
}

input FormSubmissionAttachmentsAggregateOrderBy {
  avg: FormSubmissionAttachmentsAvgOrderBy
  count: OrderBy
  max: FormSubmissionAttachmentsMaxOrderBy
  min: FormSubmissionAttachmentsMinOrderBy
  stddev: FormSubmissionAttachmentsStddevOrderBy
  stddevPop: FormSubmissionAttachmentsStddevPopOrderBy
  stddevSamp: FormSubmissionAttachmentsStddevSampOrderBy
  sum: FormSubmissionAttachmentsSumOrderBy
  varPop: FormSubmissionAttachmentsVarPopOrderBy
  varSamp: FormSubmissionAttachmentsVarSampOrderBy
  variance: FormSubmissionAttachmentsVarianceOrderBy
}

input FormSubmissionAttachmentsArrRelInsertInput {
  data: [FormSubmissionAttachmentsInsertInput!]!
  onConflict: FormSubmissionAttachmentsOnConflict
}

type FormSubmissionAttachmentsAvgFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

input FormSubmissionAttachmentsBoolExp {
  _and: [FormSubmissionAttachmentsBoolExp!]
  _not: FormSubmissionAttachmentsBoolExp
  _or: [FormSubmissionAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
}

enum FormSubmissionAttachmentsConstraint {
  form_submission_attachments_pkey
}

input FormSubmissionAttachmentsIncInput {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
}

type FormSubmissionAttachmentsMaxFields {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsMinFields {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [FormSubmissionAttachments!]!
}

input FormSubmissionAttachmentsOnConflict {
  constraint: FormSubmissionAttachmentsConstraint!
  updateColumns: [FormSubmissionAttachmentsUpdateColumn!]! = []
  where: FormSubmissionAttachmentsBoolExp
}

input FormSubmissionAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
}

input FormSubmissionAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  formSubmissionId: bigint!
}

enum FormSubmissionAttachmentsSelectColumn {
  fileUploadId
  formSubmissionId
}

input FormSubmissionAttachmentsSetInput {
  fileUploadId: bigint
  formSubmissionId: bigint
}

type FormSubmissionAttachmentsStddevFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsStddevPopFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsStddevSampFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

input FormSubmissionAttachmentsStreamCursorInput {
  initialValue: FormSubmissionAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormSubmissionAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  formSubmissionId: bigint
}

type FormSubmissionAttachmentsSumFields {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

enum FormSubmissionAttachmentsUpdateColumn {
  fileUploadId
  formSubmissionId
}

input FormSubmissionAttachmentsUpdates {
  _inc: FormSubmissionAttachmentsIncInput
  _set: FormSubmissionAttachmentsSetInput
  where: FormSubmissionAttachmentsBoolExp!
}

type FormSubmissionAttachmentsVarianceFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsVarPopFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsVarSampFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAvgFields {
  createdById: Float
  formId: Float
  id: Float
  tenantScopeId: Float
}

input FormSubmissionAvgOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input FormSubmissionBoolExp {
  _and: [FormSubmissionBoolExp!]
  _not: FormSubmissionBoolExp
  _or: [FormSubmissionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  form: FormBoolExp
  formId: BigintComparisonExp
  formSubmissionAttachments: FormSubmissionAttachmentsBoolExp
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  submission: JsonbComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum FormSubmissionConstraint {
  form_submission_pkey
}

input FormSubmissionDeleteAtPathInput {
  submission: [String!]
}

input FormSubmissionDeleteElemInput {
  submission: Int
}

input FormSubmissionDeleteKeyInput {
  submission: String
}

input FormSubmissionIncInput {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantScopeId: bigint
}

input FormSubmissionInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  form: FormObjRelInsertInput
  formId: bigint
  formSubmissionAttachments: FormSubmissionAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  teamJoins: TeamJoinArrRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type FormSubmissionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

input FormSubmissionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormSubmissionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantScopeId: bigint
}

input FormSubmissionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormSubmissionMutationResponse {
  affectedRows: Int!
  returning: [FormSubmission!]!
}

input FormSubmissionObjRelInsertInput {
  data: FormSubmissionInsertInput!
  onConflict: FormSubmissionOnConflict
}

input FormSubmissionOnConflict {
  constraint: FormSubmissionConstraint!
  updateColumns: [FormSubmissionUpdateColumn!]! = []
  where: FormSubmissionBoolExp
}

input FormSubmissionOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  form: FormOrderBy
  formId: OrderBy
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  submission: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input FormSubmissionPkColumnsInput {
  id: bigint!
}

input FormSubmissionPrependInput {
  submission: jsonb
}

enum FormSubmissionSelectColumn {
  createdAt
  createdById
  deletedAt
  formId
  hiddenAt
  id
  submission
  tenantScopeId
}

input FormSubmissionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantScopeId: bigint
}

type FormSubmissionStddevFields {
  createdById: Float
  formId: Float
  id: Float
  tenantScopeId: Float
}

input FormSubmissionStddevOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormSubmissionStddevPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantScopeId: Float
}

input FormSubmissionStddevPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormSubmissionStddevSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantScopeId: Float
}

input FormSubmissionStddevSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input FormSubmissionStreamCursorInput {
  initialValue: FormSubmissionStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormSubmissionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantScopeId: bigint
}

type FormSubmissionSumFields {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantScopeId: bigint
}

input FormSubmissionSumOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum FormSubmissionUpdateColumn {
  createdAt
  createdById
  deletedAt
  formId
  hiddenAt
  id
  submission
  tenantScopeId
}

input FormSubmissionUpdates {
  _append: FormSubmissionAppendInput
  _deleteAtPath: FormSubmissionDeleteAtPathInput
  _deleteElem: FormSubmissionDeleteElemInput
  _deleteKey: FormSubmissionDeleteKeyInput
  _inc: FormSubmissionIncInput
  _prepend: FormSubmissionPrependInput
  _set: FormSubmissionSetInput
  where: FormSubmissionBoolExp!
}

type FormSubmissionVarianceFields {
  createdById: Float
  formId: Float
  id: Float
  tenantScopeId: Float
}

input FormSubmissionVarianceOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormSubmissionVarPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantScopeId: Float
}

input FormSubmissionVarPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormSubmissionVarSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantScopeId: Float
}

input FormSubmissionVarSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormSumFields {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input FormSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum FormUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
  name
  schema
  tenantScopeId
  type
}

input FormUpdates {
  _append: FormAppendInput
  _deleteAtPath: FormDeleteAtPathInput
  _deleteElem: FormDeleteElemInput
  _deleteKey: FormDeleteKeyInput
  _inc: FormIncInput
  _prepend: FormPrependInput
  _set: FormSetInput
  where: FormBoolExp!
}

type FormVarianceFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input FormVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormVarPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input FormVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type FormVarSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input FormVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type Grant {
  askedAmount: Float!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  generatedDocument: FileUpload
  generatedDocumentId: bigint
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  receivedAmount: Float!
  receivedAmountProcessed: User
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signature: FileUpload
  signatureId: bigint
  state: String!
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type GrantAggregate {
  aggregate: GrantAggregateFields
  nodes: [Grant!]!
}

input GrantAggregateBoolExp {
  count: grantAggregateBoolExpCount
}

input grantAggregateBoolExpCount {
  arguments: [GrantSelectColumn!]
  distinct: Boolean
  filter: GrantBoolExp
  predicate: IntComparisonExp!
}

type GrantAggregateFields {
  avg: GrantAvgFields
  count(columns: [GrantSelectColumn!], distinct: Boolean): Int!
  max: GrantMaxFields
  min: GrantMinFields
  stddev: GrantStddevFields
  stddevPop: GrantStddevPopFields
  stddevSamp: GrantStddevSampFields
  sum: GrantSumFields
  varPop: GrantVarPopFields
  varSamp: GrantVarSampFields
  variance: GrantVarianceFields
}

input GrantAggregateOrderBy {
  avg: GrantAvgOrderBy
  count: OrderBy
  max: GrantMaxOrderBy
  min: GrantMinOrderBy
  stddev: GrantStddevOrderBy
  stddevPop: GrantStddevPopOrderBy
  stddevSamp: GrantStddevSampOrderBy
  sum: GrantSumOrderBy
  varPop: GrantVarPopOrderBy
  varSamp: GrantVarSampOrderBy
  variance: GrantVarianceOrderBy
}

type GrantAllocate {
  askedAmount: Float!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUpload
  generatedDocumentId: bigint
  grant: Grant!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedBy: User
  receivedAmountProcessedById: bigint
  signature: FileUpload
  signatureId: bigint
  state: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transaction: Transaction
  transactionId: bigint
}

type GrantAllocateAggregate {
  aggregate: GrantAllocateAggregateFields
  nodes: [GrantAllocate!]!
}

input GrantAllocateAggregateBoolExp {
  count: grantAllocateAggregateBoolExpCount
}

input grantAllocateAggregateBoolExpCount {
  arguments: [GrantAllocateSelectColumn!]
  distinct: Boolean
  filter: GrantAllocateBoolExp
  predicate: IntComparisonExp!
}

type GrantAllocateAggregateFields {
  avg: GrantAllocateAvgFields
  count(columns: [GrantAllocateSelectColumn!], distinct: Boolean): Int!
  max: GrantAllocateMaxFields
  min: GrantAllocateMinFields
  stddev: GrantAllocateStddevFields
  stddevPop: GrantAllocateStddevPopFields
  stddevSamp: GrantAllocateStddevSampFields
  sum: GrantAllocateSumFields
  varPop: GrantAllocateVarPopFields
  varSamp: GrantAllocateVarSampFields
  variance: GrantAllocateVarianceFields
}

input GrantAllocateAggregateOrderBy {
  avg: GrantAllocateAvgOrderBy
  count: OrderBy
  max: GrantAllocateMaxOrderBy
  min: GrantAllocateMinOrderBy
  stddev: GrantAllocateStddevOrderBy
  stddevPop: GrantAllocateStddevPopOrderBy
  stddevSamp: GrantAllocateStddevSampOrderBy
  sum: GrantAllocateSumOrderBy
  varPop: GrantAllocateVarPopOrderBy
  varSamp: GrantAllocateVarSampOrderBy
  variance: GrantAllocateVarianceOrderBy
}

input GrantAllocateArrRelInsertInput {
  data: [GrantAllocateInsertInput!]!
  onConflict: GrantAllocateOnConflict
}

type GrantAllocateAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  grantAllocate: GrantAllocate!
  grantAllocateId: bigint!
}

type GrantAllocateAttachmentsAggregate {
  aggregate: GrantAllocateAttachmentsAggregateFields
  nodes: [GrantAllocateAttachments!]!
}

input GrantAllocateAttachmentsAggregateBoolExp {
  count: grantAllocateAttachmentsAggregateBoolExpCount
}

input grantAllocateAttachmentsAggregateBoolExpCount {
  arguments: [GrantAllocateAttachmentsSelectColumn!]
  distinct: Boolean
  filter: GrantAllocateAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type GrantAllocateAttachmentsAggregateFields {
  avg: GrantAllocateAttachmentsAvgFields
  count(columns: [GrantAllocateAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: GrantAllocateAttachmentsMaxFields
  min: GrantAllocateAttachmentsMinFields
  stddev: GrantAllocateAttachmentsStddevFields
  stddevPop: GrantAllocateAttachmentsStddevPopFields
  stddevSamp: GrantAllocateAttachmentsStddevSampFields
  sum: GrantAllocateAttachmentsSumFields
  varPop: GrantAllocateAttachmentsVarPopFields
  varSamp: GrantAllocateAttachmentsVarSampFields
  variance: GrantAllocateAttachmentsVarianceFields
}

input GrantAllocateAttachmentsAggregateOrderBy {
  avg: GrantAllocateAttachmentsAvgOrderBy
  count: OrderBy
  max: GrantAllocateAttachmentsMaxOrderBy
  min: GrantAllocateAttachmentsMinOrderBy
  stddev: GrantAllocateAttachmentsStddevOrderBy
  stddevPop: GrantAllocateAttachmentsStddevPopOrderBy
  stddevSamp: GrantAllocateAttachmentsStddevSampOrderBy
  sum: GrantAllocateAttachmentsSumOrderBy
  varPop: GrantAllocateAttachmentsVarPopOrderBy
  varSamp: GrantAllocateAttachmentsVarSampOrderBy
  variance: GrantAllocateAttachmentsVarianceOrderBy
}

input GrantAllocateAttachmentsArrRelInsertInput {
  data: [GrantAllocateAttachmentsInsertInput!]!
  onConflict: GrantAllocateAttachmentsOnConflict
}

type GrantAllocateAttachmentsAvgFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

input GrantAllocateAttachmentsBoolExp {
  _and: [GrantAllocateAttachmentsBoolExp!]
  _not: GrantAllocateAttachmentsBoolExp
  _or: [GrantAllocateAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  grantAllocate: GrantAllocateBoolExp
  grantAllocateId: BigintComparisonExp
}

enum GrantAllocateAttachmentsConstraint {
  grant_allocate_attachments_pkey
}

input GrantAllocateAttachmentsIncInput {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  grantAllocate: GrantAllocateObjRelInsertInput
  grantAllocateId: bigint
}

type GrantAllocateAttachmentsMaxFields {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsMinFields {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [GrantAllocateAttachments!]!
}

input GrantAllocateAttachmentsOnConflict {
  constraint: GrantAllocateAttachmentsConstraint!
  updateColumns: [GrantAllocateAttachmentsUpdateColumn!]! = []
  where: GrantAllocateAttachmentsBoolExp
}

input GrantAllocateAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  grantAllocate: GrantAllocateOrderBy
  grantAllocateId: OrderBy
}

input GrantAllocateAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  grantAllocateId: bigint!
}

enum GrantAllocateAttachmentsSelectColumn {
  fileUploadId
  grantAllocateId
}

input GrantAllocateAttachmentsSetInput {
  fileUploadId: bigint
  grantAllocateId: bigint
}

type GrantAllocateAttachmentsStddevFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsStddevPopFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsStddevSampFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

input GrantAllocateAttachmentsStreamCursorInput {
  initialValue: GrantAllocateAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantAllocateAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  grantAllocateId: bigint
}

type GrantAllocateAttachmentsSumFields {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

enum GrantAllocateAttachmentsUpdateColumn {
  fileUploadId
  grantAllocateId
}

input GrantAllocateAttachmentsUpdates {
  _inc: GrantAllocateAttachmentsIncInput
  _set: GrantAllocateAttachmentsSetInput
  where: GrantAllocateAttachmentsBoolExp!
}

type GrantAllocateAttachmentsVarianceFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsVarPopFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsVarSampFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAvgFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantScopeId: Float
  transactionId: Float
}

input GrantAllocateAvgOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

input GrantAllocateBoolExp {
  _and: [GrantAllocateBoolExp!]
  _not: GrantAllocateBoolExp
  _or: [GrantAllocateBoolExp!]
  askedAmount: FloatComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  fileUpload: FileUploadBoolExp
  generatedDocumentId: BigintComparisonExp
  grant: GrantBoolExp
  grantAllocateAttachments: GrantAllocateAttachmentsBoolExp
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateBoolExp
  grantId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  receivedAmount: FloatComparisonExp
  receivedAmountProcessedAt: TimestamptzComparisonExp
  receivedAmountProcessedBy: UserBoolExp
  receivedAmountProcessedById: BigintComparisonExp
  signature: FileUploadBoolExp
  signatureId: BigintComparisonExp
  state: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transaction: TransactionBoolExp
  transactionId: BigintComparisonExp
}

enum GrantAllocateConstraint {
  grant_allocate_pkey
}

input GrantAllocateIncInput {
  askedAmount: Float
  createdById: bigint
  generatedDocumentId: bigint
  grantId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  tenantScopeId: bigint
  transactionId: bigint
}

input GrantAllocateInsertInput {
  askedAmount: Float
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUploadObjRelInsertInput
  generatedDocumentId: bigint
  grant: GrantObjRelInsertInput
  grantAllocateAttachments: GrantAllocateAttachmentsArrRelInsertInput
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedBy: UserObjRelInsertInput
  receivedAmountProcessedById: bigint
  signature: FileUploadObjRelInsertInput
  signatureId: bigint
  state: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transaction: TransactionObjRelInsertInput
  transactionId: bigint
}

type GrantAllocateMaxFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantScopeId: bigint
  transactionId: bigint
}

input GrantAllocateMaxOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

type GrantAllocateMinFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantScopeId: bigint
  transactionId: bigint
}

input GrantAllocateMinOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

type GrantAllocateMutationResponse {
  affectedRows: Int!
  returning: [GrantAllocate!]!
}

input GrantAllocateObjRelInsertInput {
  data: GrantAllocateInsertInput!
  onConflict: GrantAllocateOnConflict
}

input GrantAllocateOnConflict {
  constraint: GrantAllocateConstraint!
  updateColumns: [GrantAllocateUpdateColumn!]! = []
  where: GrantAllocateBoolExp
}

input GrantAllocateOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileUpload: FileUploadOrderBy
  generatedDocumentId: OrderBy
  grant: GrantOrderBy
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateOrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedBy: UserOrderBy
  receivedAmountProcessedById: OrderBy
  signature: FileUploadOrderBy
  signatureId: OrderBy
  state: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transaction: TransactionOrderBy
  transactionId: OrderBy
}

input GrantAllocatePkColumnsInput {
  id: bigint!
}

enum GrantAllocateSelectColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  generatedDocumentId
  grantId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  tenantScopeId
  transactionId
}

input GrantAllocateSetInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantScopeId: bigint
  transactionId: bigint
}

type GrantAllocateStddevFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantScopeId: Float
  transactionId: Float
}

input GrantAllocateStddevOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

type GrantAllocateStddevPopFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantScopeId: Float
  transactionId: Float
}

input GrantAllocateStddevPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

type GrantAllocateStddevSampFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantScopeId: Float
  transactionId: Float
}

input GrantAllocateStddevSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

input GrantAllocateStreamCursorInput {
  initialValue: GrantAllocateStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantAllocateStreamCursorValueInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantScopeId: bigint
  transactionId: bigint
}

type GrantAllocateSumFields {
  askedAmount: Float
  createdById: bigint
  generatedDocumentId: bigint
  grantId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  tenantScopeId: bigint
  transactionId: bigint
}

input GrantAllocateSumOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

enum GrantAllocateUpdateColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  generatedDocumentId
  grantId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  tenantScopeId
  transactionId
}

input GrantAllocateUpdates {
  _inc: GrantAllocateIncInput
  _set: GrantAllocateSetInput
  where: GrantAllocateBoolExp!
}

type GrantAllocateVarianceFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantScopeId: Float
  transactionId: Float
}

input GrantAllocateVarianceOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

type GrantAllocateVarPopFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantScopeId: Float
  transactionId: Float
}

input GrantAllocateVarPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

type GrantAllocateVarSampFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantScopeId: Float
  transactionId: Float
}

input GrantAllocateVarSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantScopeId: OrderBy
  transactionId: OrderBy
}

input GrantArrRelInsertInput {
  data: [GrantInsertInput!]!
  onConflict: GrantOnConflict
}

type GrantAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  grant: Grant!
  grantId: bigint!
}

type GrantAttachmentsAggregate {
  aggregate: GrantAttachmentsAggregateFields
  nodes: [GrantAttachments!]!
}

input GrantAttachmentsAggregateBoolExp {
  count: grantAttachmentsAggregateBoolExpCount
}

input grantAttachmentsAggregateBoolExpCount {
  arguments: [GrantAttachmentsSelectColumn!]
  distinct: Boolean
  filter: GrantAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type GrantAttachmentsAggregateFields {
  avg: GrantAttachmentsAvgFields
  count(columns: [GrantAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: GrantAttachmentsMaxFields
  min: GrantAttachmentsMinFields
  stddev: GrantAttachmentsStddevFields
  stddevPop: GrantAttachmentsStddevPopFields
  stddevSamp: GrantAttachmentsStddevSampFields
  sum: GrantAttachmentsSumFields
  varPop: GrantAttachmentsVarPopFields
  varSamp: GrantAttachmentsVarSampFields
  variance: GrantAttachmentsVarianceFields
}

input GrantAttachmentsAggregateOrderBy {
  avg: GrantAttachmentsAvgOrderBy
  count: OrderBy
  max: GrantAttachmentsMaxOrderBy
  min: GrantAttachmentsMinOrderBy
  stddev: GrantAttachmentsStddevOrderBy
  stddevPop: GrantAttachmentsStddevPopOrderBy
  stddevSamp: GrantAttachmentsStddevSampOrderBy
  sum: GrantAttachmentsSumOrderBy
  varPop: GrantAttachmentsVarPopOrderBy
  varSamp: GrantAttachmentsVarSampOrderBy
  variance: GrantAttachmentsVarianceOrderBy
}

input GrantAttachmentsArrRelInsertInput {
  data: [GrantAttachmentsInsertInput!]!
  onConflict: GrantAttachmentsOnConflict
}

type GrantAttachmentsAvgFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

input GrantAttachmentsBoolExp {
  _and: [GrantAttachmentsBoolExp!]
  _not: GrantAttachmentsBoolExp
  _or: [GrantAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  grant: GrantBoolExp
  grantId: BigintComparisonExp
}

enum GrantAttachmentsConstraint {
  grant_attachments_pkey
}

input GrantAttachmentsIncInput {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  grant: GrantObjRelInsertInput
  grantId: bigint
}

type GrantAttachmentsMaxFields {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsMinFields {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [GrantAttachments!]!
}

input GrantAttachmentsOnConflict {
  constraint: GrantAttachmentsConstraint!
  updateColumns: [GrantAttachmentsUpdateColumn!]! = []
  where: GrantAttachmentsBoolExp
}

input GrantAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  grant: GrantOrderBy
  grantId: OrderBy
}

input GrantAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  grantId: bigint!
}

enum GrantAttachmentsSelectColumn {
  fileUploadId
  grantId
}

input GrantAttachmentsSetInput {
  fileUploadId: bigint
  grantId: bigint
}

type GrantAttachmentsStddevFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsStddevPopFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsStddevSampFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

input GrantAttachmentsStreamCursorInput {
  initialValue: GrantAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  grantId: bigint
}

type GrantAttachmentsSumFields {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

enum GrantAttachmentsUpdateColumn {
  fileUploadId
  grantId
}

input GrantAttachmentsUpdates {
  _inc: GrantAttachmentsIncInput
  _set: GrantAttachmentsSetInput
  where: GrantAttachmentsBoolExp!
}

type GrantAttachmentsVarianceFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsVarPopFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsVarSampFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAvgFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantScopeId: Float
}

input GrantAvgOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input GrantBoolExp {
  _and: [GrantBoolExp!]
  _not: GrantBoolExp
  _or: [GrantBoolExp!]
  askedAmount: FloatComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  generatedDocument: FileUploadBoolExp
  generatedDocumentId: BigintComparisonExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  grantAttachments: GrantAttachmentsBoolExp
  grantAttachmentsAggregate: GrantAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  receivedAmount: FloatComparisonExp
  receivedAmountProcessed: UserBoolExp
  receivedAmountProcessedAt: TimestamptzComparisonExp
  receivedAmountProcessedById: BigintComparisonExp
  signature: FileUploadBoolExp
  signatureId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum GrantConstraint {
  grant_pkey
}

input GrantIncInput {
  askedAmount: Float
  createdById: bigint
  generatedDocumentId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input GrantInsertInput {
  askedAmount: Float
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  generatedDocument: FileUploadObjRelInsertInput
  generatedDocumentId: bigint
  grantAllocates: GrantAllocateArrRelInsertInput
  grantAttachments: GrantAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  projects: ProjectArrRelInsertInput
  receivedAmount: Float
  receivedAmountProcessed: UserObjRelInsertInput
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signature: FileUploadObjRelInsertInput
  signatureId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type GrantMaxFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

input GrantMaxOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocumentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type GrantMinFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

input GrantMinOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocumentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type GrantMutationResponse {
  affectedRows: Int!
  returning: [Grant!]!
}

input GrantObjRelInsertInput {
  data: GrantInsertInput!
  onConflict: GrantOnConflict
}

input GrantOnConflict {
  constraint: GrantConstraint!
  updateColumns: [GrantUpdateColumn!]! = []
  where: GrantBoolExp
}

input GrantOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocument: FileUploadOrderBy
  generatedDocumentId: OrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  grantAttachmentsAggregate: GrantAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  receivedAmount: OrderBy
  receivedAmountProcessed: UserOrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signature: FileUploadOrderBy
  signatureId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input GrantPkColumnsInput {
  id: bigint!
}

enum GrantSelectColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  generatedDocumentId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  teamId
  tenantScopeId
}

input GrantSetInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

type GrantStddevFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantScopeId: Float
}

input GrantStddevOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type GrantStddevPopFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantScopeId: Float
}

input GrantStddevPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type GrantStddevSampFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantScopeId: Float
}

input GrantStddevSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input GrantStreamCursorInput {
  initialValue: GrantStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantStreamCursorValueInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

type GrantSumFields {
  askedAmount: Float
  createdById: bigint
  generatedDocumentId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input GrantSumOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum GrantUpdateColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  generatedDocumentId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  teamId
  tenantScopeId
}

input GrantUpdates {
  _inc: GrantIncInput
  _set: GrantSetInput
  where: GrantBoolExp!
}

type GrantVarianceFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantScopeId: Float
}

input GrantVarianceOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type GrantVarPopFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantScopeId: Float
}

input GrantVarPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type GrantVarSampFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantScopeId: Float
}

input GrantVarSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar jsonb

input JsonbCastExp {
  String: StringComparisonExp
}

input JsonbComparisonExp {
  _cast: JsonbCastExp
  _containedIn: jsonb
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  _hasKey: String
  _hasKeysAll: [String!]
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

type LegalUnit {
  activityCategory: String
  actor: Actor!
  actorId: bigint!
  bankCode: Int
  bankInfos(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): [BankInfo!]!
  bankInfosAggregate(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): BankInfoAggregate!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  expenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  grandFundTeams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  grandFundTeamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  headquartersLocation: String
  headquartersNic: String
  id: bigint!
  isFranchise: Boolean!
  isFranchiseBrand: Boolean!
  legalCategory: String
  legalName: String!
  legalUnitLocations(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationsAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  legalUnits(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  legalUnitsAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  parent: LegalUnit
  parentId: bigint
  siren: String
  slug: String!
  type: String!
}

type LegalUnitAggregate {
  aggregate: LegalUnitAggregateFields
  nodes: [LegalUnit!]!
}

input LegalUnitAggregateBoolExp {
  bool_and: legalUnitAggregateBoolExpBool_and
  bool_or: legalUnitAggregateBoolExpBool_or
  count: legalUnitAggregateBoolExpCount
}

input legalUnitAggregateBoolExpBool_and {
  arguments: LegalUnitSelectColumnLegalUnitAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: LegalUnitBoolExp
  predicate: BooleanComparisonExp!
}

input legalUnitAggregateBoolExpBool_or {
  arguments: LegalUnitSelectColumnLegalUnitAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: LegalUnitBoolExp
  predicate: BooleanComparisonExp!
}

input legalUnitAggregateBoolExpCount {
  arguments: [LegalUnitSelectColumn!]
  distinct: Boolean
  filter: LegalUnitBoolExp
  predicate: IntComparisonExp!
}

type LegalUnitAggregateFields {
  avg: LegalUnitAvgFields
  count(columns: [LegalUnitSelectColumn!], distinct: Boolean): Int!
  max: LegalUnitMaxFields
  min: LegalUnitMinFields
  stddev: LegalUnitStddevFields
  stddevPop: LegalUnitStddevPopFields
  stddevSamp: LegalUnitStddevSampFields
  sum: LegalUnitSumFields
  varPop: LegalUnitVarPopFields
  varSamp: LegalUnitVarSampFields
  variance: LegalUnitVarianceFields
}

input LegalUnitAggregateOrderBy {
  avg: LegalUnitAvgOrderBy
  count: OrderBy
  max: LegalUnitMaxOrderBy
  min: LegalUnitMinOrderBy
  stddev: LegalUnitStddevOrderBy
  stddevPop: LegalUnitStddevPopOrderBy
  stddevSamp: LegalUnitStddevSampOrderBy
  sum: LegalUnitSumOrderBy
  varPop: LegalUnitVarPopOrderBy
  varSamp: LegalUnitVarSampOrderBy
  variance: LegalUnitVarianceOrderBy
}

input LegalUnitArrRelInsertInput {
  data: [LegalUnitInsertInput!]!
  onConflict: LegalUnitOnConflict
}

type LegalUnitAvgFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitAvgOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

input LegalUnitBoolExp {
  _and: [LegalUnitBoolExp!]
  _not: LegalUnitBoolExp
  _or: [LegalUnitBoolExp!]
  activityCategory: StringComparisonExp
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bankCode: IntComparisonExp
  bankInfos: BankInfoBoolExp
  bankInfosAggregate: BankInfoAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  grandFundTeams: TeamBoolExp
  grandFundTeamsAggregate: TeamAggregateBoolExp
  headquartersLocation: StringComparisonExp
  headquartersNic: StringComparisonExp
  id: BigintComparisonExp
  isFranchise: BooleanComparisonExp
  isFranchiseBrand: BooleanComparisonExp
  legalCategory: StringComparisonExp
  legalName: StringComparisonExp
  legalUnitLocations: LegalUnitLocationBoolExp
  legalUnitLocationsAggregate: LegalUnitLocationAggregateBoolExp
  legalUnits: LegalUnitBoolExp
  legalUnitsAggregate: LegalUnitAggregateBoolExp
  parent: LegalUnitBoolExp
  parentId: BigintComparisonExp
  siren: StringComparisonExp
  slug: StringComparisonExp
  type: StringComparisonExp
}

enum LegalUnitConstraint {
  legal_unit_actor_id_unique
  legal_unit_pkey
  legal_unit_slug_unique
}

input LegalUnitIncInput {
  actorId: bigint
  bankCode: Int
  createdById: bigint
  id: bigint
  parentId: bigint
}

input LegalUnitInsertInput {
  activityCategory: String
  actor: ActorObjRelInsertInput
  actorId: bigint
  bankCode: Int
  bankInfos: BankInfoArrRelInsertInput
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  expenseItems: ExpenseItemArrRelInsertInput
  grandFundTeams: TeamArrRelInsertInput
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  isFranchise: Boolean
  isFranchiseBrand: Boolean
  legalCategory: String
  legalName: String
  legalUnitLocations: LegalUnitLocationArrRelInsertInput
  legalUnits: LegalUnitArrRelInsertInput
  parent: LegalUnitObjRelInsertInput
  parentId: bigint
  siren: String
  slug: String
  type: String
}

type LegalUnitLocation {
  actor: Actor!
  actorId: bigint!
  bankLocationCode: Int
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  differentSiren: String
  id: bigint!
  legalName: String!
  legalUnit: LegalUnit
  legalUnitId: bigint
  location: Location
  locationId: bigint
  locationType: String!
  nic: String
  slug: String!
  user: User
}

type LegalUnitLocationAggregate {
  aggregate: LegalUnitLocationAggregateFields
  nodes: [LegalUnitLocation!]!
}

input LegalUnitLocationAggregateBoolExp {
  count: legalUnitLocationAggregateBoolExpCount
}

input legalUnitLocationAggregateBoolExpCount {
  arguments: [LegalUnitLocationSelectColumn!]
  distinct: Boolean
  filter: LegalUnitLocationBoolExp
  predicate: IntComparisonExp!
}

type LegalUnitLocationAggregateFields {
  avg: LegalUnitLocationAvgFields
  count(columns: [LegalUnitLocationSelectColumn!], distinct: Boolean): Int!
  max: LegalUnitLocationMaxFields
  min: LegalUnitLocationMinFields
  stddev: LegalUnitLocationStddevFields
  stddevPop: LegalUnitLocationStddevPopFields
  stddevSamp: LegalUnitLocationStddevSampFields
  sum: LegalUnitLocationSumFields
  varPop: LegalUnitLocationVarPopFields
  varSamp: LegalUnitLocationVarSampFields
  variance: LegalUnitLocationVarianceFields
}

input LegalUnitLocationAggregateOrderBy {
  avg: LegalUnitLocationAvgOrderBy
  count: OrderBy
  max: LegalUnitLocationMaxOrderBy
  min: LegalUnitLocationMinOrderBy
  stddev: LegalUnitLocationStddevOrderBy
  stddevPop: LegalUnitLocationStddevPopOrderBy
  stddevSamp: LegalUnitLocationStddevSampOrderBy
  sum: LegalUnitLocationSumOrderBy
  varPop: LegalUnitLocationVarPopOrderBy
  varSamp: LegalUnitLocationVarSampOrderBy
  variance: LegalUnitLocationVarianceOrderBy
}

input LegalUnitLocationArrRelInsertInput {
  data: [LegalUnitLocationInsertInput!]!
  onConflict: LegalUnitLocationOnConflict
}

type LegalUnitLocationAvgFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationAvgOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

input LegalUnitLocationBoolExp {
  _and: [LegalUnitLocationBoolExp!]
  _not: LegalUnitLocationBoolExp
  _or: [LegalUnitLocationBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bankLocationCode: IntComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  differentSiren: StringComparisonExp
  id: BigintComparisonExp
  legalName: StringComparisonExp
  legalUnit: LegalUnitBoolExp
  legalUnitId: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  locationType: StringComparisonExp
  nic: StringComparisonExp
  slug: StringComparisonExp
  user: UserBoolExp
}

enum LegalUnitLocationConstraint {
  legal_unit_location_actor_id_unique
  legal_unit_location_pkey
  legal_unit_location_slug_unique
}

input LegalUnitLocationIncInput {
  actorId: bigint
  bankLocationCode: Int
  createdById: bigint
  id: bigint
  legalUnitId: bigint
  locationId: bigint
}

input LegalUnitLocationInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  differentSiren: String
  id: bigint
  legalName: String
  legalUnit: LegalUnitObjRelInsertInput
  legalUnitId: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
  locationType: String
  nic: String
  slug: String
  user: UserObjRelInsertInput
}

type LegalUnitLocationMaxFields {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  differentSiren: String
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
  slug: String
}

input LegalUnitLocationMaxOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  differentSiren: OrderBy
  id: OrderBy
  legalName: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
  locationType: OrderBy
  nic: OrderBy
  slug: OrderBy
}

type LegalUnitLocationMinFields {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  differentSiren: String
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
  slug: String
}

input LegalUnitLocationMinOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  differentSiren: OrderBy
  id: OrderBy
  legalName: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
  locationType: OrderBy
  nic: OrderBy
  slug: OrderBy
}

type LegalUnitLocationMutationResponse {
  affectedRows: Int!
  returning: [LegalUnitLocation!]!
}

input LegalUnitLocationObjRelInsertInput {
  data: LegalUnitLocationInsertInput!
  onConflict: LegalUnitLocationOnConflict
}

input LegalUnitLocationOnConflict {
  constraint: LegalUnitLocationConstraint!
  updateColumns: [LegalUnitLocationUpdateColumn!]! = []
  where: LegalUnitLocationBoolExp
}

input LegalUnitLocationOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  differentSiren: OrderBy
  id: OrderBy
  legalName: OrderBy
  legalUnit: LegalUnitOrderBy
  legalUnitId: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  locationType: OrderBy
  nic: OrderBy
  slug: OrderBy
  user: UserOrderBy
}

input LegalUnitLocationPkColumnsInput {
  id: bigint!
}

enum LegalUnitLocationSelectColumn {
  actorId
  bankLocationCode
  createdAt
  createdById
  deletedAt
  differentSiren
  id
  legalName
  legalUnitId
  locationId
  locationType
  nic
  slug
}

input LegalUnitLocationSetInput {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  differentSiren: String
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
  slug: String
}

type LegalUnitLocationStddevFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationStddevOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationStddevPopFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationStddevPopOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationStddevSampFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationStddevSampOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

input LegalUnitLocationStreamCursorInput {
  initialValue: LegalUnitLocationStreamCursorValueInput!
  ordering: CursorOrdering
}

input LegalUnitLocationStreamCursorValueInput {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  differentSiren: String
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
  slug: String
}

type LegalUnitLocationSumFields {
  actorId: bigint
  bankLocationCode: Int
  createdById: bigint
  id: bigint
  legalUnitId: bigint
  locationId: bigint
}

input LegalUnitLocationSumOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

enum LegalUnitLocationUpdateColumn {
  actorId
  bankLocationCode
  createdAt
  createdById
  deletedAt
  differentSiren
  id
  legalName
  legalUnitId
  locationId
  locationType
  nic
  slug
}

input LegalUnitLocationUpdates {
  _inc: LegalUnitLocationIncInput
  _set: LegalUnitLocationSetInput
  where: LegalUnitLocationBoolExp!
}

type LegalUnitLocationVarianceFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationVarianceOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationVarPopFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationVarPopOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationVarSampFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationVarSampOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitMaxFields {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  slug: String
  type: String
}

input LegalUnitMaxOrderBy {
  activityCategory: OrderBy
  actorId: OrderBy
  bankCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  headquartersLocation: OrderBy
  headquartersNic: OrderBy
  id: OrderBy
  legalCategory: OrderBy
  legalName: OrderBy
  parentId: OrderBy
  siren: OrderBy
  slug: OrderBy
  type: OrderBy
}

type LegalUnitMinFields {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  slug: String
  type: String
}

input LegalUnitMinOrderBy {
  activityCategory: OrderBy
  actorId: OrderBy
  bankCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  headquartersLocation: OrderBy
  headquartersNic: OrderBy
  id: OrderBy
  legalCategory: OrderBy
  legalName: OrderBy
  parentId: OrderBy
  siren: OrderBy
  slug: OrderBy
  type: OrderBy
}

type LegalUnitMutationResponse {
  affectedRows: Int!
  returning: [LegalUnit!]!
}

input LegalUnitObjRelInsertInput {
  data: LegalUnitInsertInput!
  onConflict: LegalUnitOnConflict
}

input LegalUnitOnConflict {
  constraint: LegalUnitConstraint!
  updateColumns: [LegalUnitUpdateColumn!]! = []
  where: LegalUnitBoolExp
}

input LegalUnitOrderBy {
  activityCategory: OrderBy
  actor: ActorOrderBy
  actorId: OrderBy
  bankCode: OrderBy
  bankInfosAggregate: BankInfoAggregateOrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  grandFundTeamsAggregate: TeamAggregateOrderBy
  headquartersLocation: OrderBy
  headquartersNic: OrderBy
  id: OrderBy
  isFranchise: OrderBy
  isFranchiseBrand: OrderBy
  legalCategory: OrderBy
  legalName: OrderBy
  legalUnitLocationsAggregate: LegalUnitLocationAggregateOrderBy
  legalUnitsAggregate: LegalUnitAggregateOrderBy
  parent: LegalUnitOrderBy
  parentId: OrderBy
  siren: OrderBy
  slug: OrderBy
  type: OrderBy
}

input LegalUnitPkColumnsInput {
  id: bigint!
}

enum LegalUnitSelectColumn {
  activityCategory
  actorId
  bankCode
  createdAt
  createdById
  deletedAt
  headquartersLocation
  headquartersNic
  id
  isFranchise
  isFranchiseBrand
  legalCategory
  legalName
  parentId
  siren
  slug
  type
}

enum LegalUnitSelectColumnLegalUnitAggregateBoolExpBool_andArgumentsColumns {
  isFranchise
  isFranchiseBrand
}

enum LegalUnitSelectColumnLegalUnitAggregateBoolExpBool_orArgumentsColumns {
  isFranchise
  isFranchiseBrand
}

input LegalUnitSetInput {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  isFranchise: Boolean
  isFranchiseBrand: Boolean
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  slug: String
  type: String
}

type LegalUnitStddevFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitStddevOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitStddevPopFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitStddevPopOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitStddevSampFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitStddevSampOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

input LegalUnitStreamCursorInput {
  initialValue: LegalUnitStreamCursorValueInput!
  ordering: CursorOrdering
}

input LegalUnitStreamCursorValueInput {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  isFranchise: Boolean
  isFranchiseBrand: Boolean
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  slug: String
  type: String
}

type LegalUnitSumFields {
  actorId: bigint
  bankCode: Int
  createdById: bigint
  id: bigint
  parentId: bigint
}

input LegalUnitSumOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

enum LegalUnitUpdateColumn {
  activityCategory
  actorId
  bankCode
  createdAt
  createdById
  deletedAt
  headquartersLocation
  headquartersNic
  id
  isFranchise
  isFranchiseBrand
  legalCategory
  legalName
  parentId
  siren
  slug
  type
}

input LegalUnitUpdates {
  _inc: LegalUnitIncInput
  _set: LegalUnitSetInput
  where: LegalUnitBoolExp!
}

type LegalUnitVarianceFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitVarianceOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitVarPopFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitVarPopOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitVarSampFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitVarSampOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type Location {
  actor: Actor!
  actorId: bigint!
  address: Address
  addressId: bigint
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  details: String!
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  hiddenAt: timestamptz
  id: bigint!
  legalUnitLocations(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationsAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  link: String!
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  name: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  transactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  type: String!
  user: User
}

type LocationAggregate {
  aggregate: LocationAggregateFields
  nodes: [Location!]!
}

input LocationAggregateBoolExp {
  count: locationAggregateBoolExpCount
}

input locationAggregateBoolExpCount {
  arguments: [LocationSelectColumn!]
  distinct: Boolean
  filter: LocationBoolExp
  predicate: IntComparisonExp!
}

type LocationAggregateFields {
  avg: LocationAvgFields
  count(columns: [LocationSelectColumn!], distinct: Boolean): Int!
  max: LocationMaxFields
  min: LocationMinFields
  stddev: LocationStddevFields
  stddevPop: LocationStddevPopFields
  stddevSamp: LocationStddevSampFields
  sum: LocationSumFields
  varPop: LocationVarPopFields
  varSamp: LocationVarSampFields
  variance: LocationVarianceFields
}

input LocationAggregateOrderBy {
  avg: LocationAvgOrderBy
  count: OrderBy
  max: LocationMaxOrderBy
  min: LocationMinOrderBy
  stddev: LocationStddevOrderBy
  stddevPop: LocationStddevPopOrderBy
  stddevSamp: LocationStddevSampOrderBy
  sum: LocationSumOrderBy
  varPop: LocationVarPopOrderBy
  varSamp: LocationVarSampOrderBy
  variance: LocationVarianceOrderBy
}

input LocationArrRelInsertInput {
  data: [LocationInsertInput!]!
  onConflict: LocationOnConflict
}

type LocationAvgFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input LocationAvgOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input LocationBoolExp {
  _and: [LocationBoolExp!]
  _not: LocationBoolExp
  _or: [LocationBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  address: AddressBoolExp
  addressId: BigintComparisonExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  details: StringComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  legalUnitLocations: LegalUnitLocationBoolExp
  legalUnitLocationsAggregate: LegalUnitLocationAggregateBoolExp
  link: StringComparisonExp
  locationImages: LocationImagesBoolExp
  locationImagesAggregate: LocationImagesAggregateBoolExp
  name: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transactions: TransactionBoolExp
  transactionsAggregate: TransactionAggregateBoolExp
  type: StringComparisonExp
  user: UserBoolExp
}

enum LocationConstraint {
  location_pkey
}

type LocationImages {
  fileUpload: FileUpload!
  fileUploadId: bigint!
  location: Location!
  locationId: bigint!
}

type LocationImagesAggregate {
  aggregate: LocationImagesAggregateFields
  nodes: [LocationImages!]!
}

input LocationImagesAggregateBoolExp {
  count: locationImagesAggregateBoolExpCount
}

input locationImagesAggregateBoolExpCount {
  arguments: [LocationImagesSelectColumn!]
  distinct: Boolean
  filter: LocationImagesBoolExp
  predicate: IntComparisonExp!
}

type LocationImagesAggregateFields {
  avg: LocationImagesAvgFields
  count(columns: [LocationImagesSelectColumn!], distinct: Boolean): Int!
  max: LocationImagesMaxFields
  min: LocationImagesMinFields
  stddev: LocationImagesStddevFields
  stddevPop: LocationImagesStddevPopFields
  stddevSamp: LocationImagesStddevSampFields
  sum: LocationImagesSumFields
  varPop: LocationImagesVarPopFields
  varSamp: LocationImagesVarSampFields
  variance: LocationImagesVarianceFields
}

input LocationImagesAggregateOrderBy {
  avg: LocationImagesAvgOrderBy
  count: OrderBy
  max: LocationImagesMaxOrderBy
  min: LocationImagesMinOrderBy
  stddev: LocationImagesStddevOrderBy
  stddevPop: LocationImagesStddevPopOrderBy
  stddevSamp: LocationImagesStddevSampOrderBy
  sum: LocationImagesSumOrderBy
  varPop: LocationImagesVarPopOrderBy
  varSamp: LocationImagesVarSampOrderBy
  variance: LocationImagesVarianceOrderBy
}

input LocationImagesArrRelInsertInput {
  data: [LocationImagesInsertInput!]!
  onConflict: LocationImagesOnConflict
}

type LocationImagesAvgFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesAvgOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

input LocationImagesBoolExp {
  _and: [LocationImagesBoolExp!]
  _not: LocationImagesBoolExp
  _or: [LocationImagesBoolExp!]
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
}

enum LocationImagesConstraint {
  location_images_pkey
}

input LocationImagesIncInput {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesInsertInput {
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
}

type LocationImagesMaxFields {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesMaxOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesMinFields {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesMinOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesMutationResponse {
  affectedRows: Int!
  returning: [LocationImages!]!
}

input LocationImagesOnConflict {
  constraint: LocationImagesConstraint!
  updateColumns: [LocationImagesUpdateColumn!]! = []
  where: LocationImagesBoolExp
}

input LocationImagesOrderBy {
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
}

input LocationImagesPkColumnsInput {
  fileUploadId: bigint!
  locationId: bigint!
}

enum LocationImagesSelectColumn {
  fileUploadId
  locationId
}

input LocationImagesSetInput {
  fileUploadId: bigint
  locationId: bigint
}

type LocationImagesStddevFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesStddevOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesStddevPopFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesStddevPopOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesStddevSampFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesStddevSampOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

input LocationImagesStreamCursorInput {
  initialValue: LocationImagesStreamCursorValueInput!
  ordering: CursorOrdering
}

input LocationImagesStreamCursorValueInput {
  fileUploadId: bigint
  locationId: bigint
}

type LocationImagesSumFields {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesSumOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

enum LocationImagesUpdateColumn {
  fileUploadId
  locationId
}

input LocationImagesUpdates {
  _inc: LocationImagesIncInput
  _set: LocationImagesSetInput
  where: LocationImagesBoolExp!
}

type LocationImagesVarianceFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesVarianceOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesVarPopFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesVarPopOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesVarSampFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesVarSampOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

input LocationIncInput {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input LocationInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  address: AddressObjRelInsertInput
  addressId: bigint
  campuses: CampusArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  details: String
  events: EventArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  legalUnitLocations: LegalUnitLocationArrRelInsertInput
  link: String
  locationImages: LocationImagesArrRelInsertInput
  name: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transactions: TransactionArrRelInsertInput
  type: String
  user: UserObjRelInsertInput
}

type LocationMaxFields {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  details: String
  hiddenAt: timestamptz
  id: bigint
  link: String
  name: String
  tenantScopeId: bigint
  type: String
}

input LocationMaxOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  details: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  link: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type LocationMinFields {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  details: String
  hiddenAt: timestamptz
  id: bigint
  link: String
  name: String
  tenantScopeId: bigint
  type: String
}

input LocationMinOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  details: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  link: OrderBy
  name: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type LocationMutationResponse {
  affectedRows: Int!
  returning: [Location!]!
}

input LocationObjRelInsertInput {
  data: LocationInsertInput!
  onConflict: LocationOnConflict
}

input LocationOnConflict {
  constraint: LocationConstraint!
  updateColumns: [LocationUpdateColumn!]! = []
  where: LocationBoolExp
}

input LocationOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  address: AddressOrderBy
  addressId: OrderBy
  campusesAggregate: CampusAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  details: OrderBy
  eventsAggregate: EventAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  legalUnitLocationsAggregate: LegalUnitLocationAggregateOrderBy
  link: OrderBy
  locationImagesAggregate: LocationImagesAggregateOrderBy
  name: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transactionsAggregate: TransactionAggregateOrderBy
  type: OrderBy
  user: UserOrderBy
}

input LocationPkColumnsInput {
  id: bigint!
}

enum LocationSelectColumn {
  actorId
  addressId
  createdAt
  createdById
  deletedAt
  details
  hiddenAt
  id
  link
  name
  tenantScopeId
  type
}

input LocationSetInput {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  details: String
  hiddenAt: timestamptz
  id: bigint
  link: String
  name: String
  tenantScopeId: bigint
  type: String
}

type LocationStddevFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input LocationStddevOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type LocationStddevPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input LocationStddevPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type LocationStddevSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input LocationStddevSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input LocationStreamCursorInput {
  initialValue: LocationStreamCursorValueInput!
  ordering: CursorOrdering
}

input LocationStreamCursorValueInput {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  details: String
  hiddenAt: timestamptz
  id: bigint
  link: String
  name: String
  tenantScopeId: bigint
  type: String
}

type LocationSumFields {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input LocationSumOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum LocationUpdateColumn {
  actorId
  addressId
  createdAt
  createdById
  deletedAt
  details
  hiddenAt
  id
  link
  name
  tenantScopeId
  type
}

input LocationUpdates {
  _inc: LocationIncInput
  _set: LocationSetInput
  where: LocationBoolExp!
}

type LocationVarianceFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input LocationVarianceOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type LocationVarPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input LocationVarPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type LocationVarSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input LocationVarSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type Mission {
  color: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventManageId: bigint
  eventOrganize: EventOrganize
  hiddenAt: timestamptz
  id: bigint!
  isAutoAcceptingMembers: Boolean!
  isTemplate: Boolean!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  name: String!
  pointsMaximum: smallint!
  pointsMinimum: smallint!
  project: Project
  projectId: bigint
  quantity: smallint!
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type MissionAggregate {
  aggregate: MissionAggregateFields
  nodes: [Mission!]!
}

input MissionAggregateBoolExp {
  bool_and: missionAggregateBoolExpBool_and
  bool_or: missionAggregateBoolExpBool_or
  count: missionAggregateBoolExpCount
}

input missionAggregateBoolExpBool_and {
  arguments: MissionSelectColumnMissionAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: MissionBoolExp
  predicate: BooleanComparisonExp!
}

input missionAggregateBoolExpBool_or {
  arguments: MissionSelectColumnMissionAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: MissionBoolExp
  predicate: BooleanComparisonExp!
}

input missionAggregateBoolExpCount {
  arguments: [MissionSelectColumn!]
  distinct: Boolean
  filter: MissionBoolExp
  predicate: IntComparisonExp!
}

type MissionAggregateFields {
  avg: MissionAvgFields
  count(columns: [MissionSelectColumn!], distinct: Boolean): Int!
  max: MissionMaxFields
  min: MissionMinFields
  stddev: MissionStddevFields
  stddevPop: MissionStddevPopFields
  stddevSamp: MissionStddevSampFields
  sum: MissionSumFields
  varPop: MissionVarPopFields
  varSamp: MissionVarSampFields
  variance: MissionVarianceFields
}

input MissionAggregateOrderBy {
  avg: MissionAvgOrderBy
  count: OrderBy
  max: MissionMaxOrderBy
  min: MissionMinOrderBy
  stddev: MissionStddevOrderBy
  stddevPop: MissionStddevPopOrderBy
  stddevSamp: MissionStddevSampOrderBy
  sum: MissionSumOrderBy
  varPop: MissionVarPopOrderBy
  varSamp: MissionVarSampOrderBy
  variance: MissionVarianceOrderBy
}

input MissionArrRelInsertInput {
  data: [MissionInsertInput!]!
  onConflict: MissionOnConflict
}

type MissionAvgFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantScopeId: Float
}

input MissionAvgOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input MissionBoolExp {
  _and: [MissionBoolExp!]
  _not: MissionBoolExp
  _or: [MissionBoolExp!]
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventManageId: BigintComparisonExp
  eventOrganize: EventOrganizeBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isAutoAcceptingMembers: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  name: StringComparisonExp
  pointsMaximum: SmallintComparisonExp
  pointsMinimum: SmallintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  quantity: SmallintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum MissionConstraint {
  mission_pkey
}

input MissionIncInput {
  createdById: bigint
  eventManageId: bigint
  id: bigint
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantScopeId: bigint
}

input MissionInsertInput {
  color: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  eventOrganize: EventOrganizeObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingMembers: Boolean
  isTemplate: Boolean
  missionJoins: MissionJoinArrRelInsertInput
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  project: ProjectObjRelInsertInput
  projectId: bigint
  quantity: smallint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type MissionJoin {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoin
  eventJoinId: bigint
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!
  joinedBy: User!
  joinedById: bigint!
  mission: Mission!
  missionId: bigint!
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedBy: User
  processedById: bigint
  project: Project
  projectId: bigint
  state: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  user: User
}

type MissionJoinAggregate {
  aggregate: MissionJoinAggregateFields
  nodes: [MissionJoin!]!
}

input MissionJoinAggregateBoolExp {
  count: missionJoinAggregateBoolExpCount
}

input missionJoinAggregateBoolExpCount {
  arguments: [MissionJoinSelectColumn!]
  distinct: Boolean
  filter: MissionJoinBoolExp
  predicate: IntComparisonExp!
}

type MissionJoinAggregateFields {
  avg: MissionJoinAvgFields
  count(columns: [MissionJoinSelectColumn!], distinct: Boolean): Int!
  max: MissionJoinMaxFields
  min: MissionJoinMinFields
  stddev: MissionJoinStddevFields
  stddevPop: MissionJoinStddevPopFields
  stddevSamp: MissionJoinStddevSampFields
  sum: MissionJoinSumFields
  varPop: MissionJoinVarPopFields
  varSamp: MissionJoinVarSampFields
  variance: MissionJoinVarianceFields
}

input MissionJoinAggregateOrderBy {
  avg: MissionJoinAvgOrderBy
  count: OrderBy
  max: MissionJoinMaxOrderBy
  min: MissionJoinMinOrderBy
  stddev: MissionJoinStddevOrderBy
  stddevPop: MissionJoinStddevPopOrderBy
  stddevSamp: MissionJoinStddevSampOrderBy
  sum: MissionJoinSumOrderBy
  varPop: MissionJoinVarPopOrderBy
  varSamp: MissionJoinVarSampOrderBy
  variance: MissionJoinVarianceOrderBy
}

input MissionJoinArrRelInsertInput {
  data: [MissionJoinInsertInput!]!
  onConflict: MissionJoinOnConflict
}

type MissionJoinAvgFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantScopeId: Float
}

input MissionJoinAvgOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

input MissionJoinBoolExp {
  _and: [MissionJoinBoolExp!]
  _not: MissionJoinBoolExp
  _or: [MissionJoinBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  joinedBy: UserBoolExp
  joinedById: BigintComparisonExp
  mission: MissionBoolExp
  missionId: BigintComparisonExp
  points: SmallintComparisonExp
  pointsProcessedAt: TimestamptzComparisonExp
  pointsProcessedById: BigintComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: UserBoolExp
  processedById: BigintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  state: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  user: UserBoolExp
}

enum MissionJoinConstraint {
  mission_join_event_join_id_unique
  mission_join_pkey
}

input MissionJoinIncInput {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedById: bigint
  processedById: bigint
  projectId: bigint
  tenantScopeId: bigint
}

input MissionJoinInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  joinedBy: UserObjRelInsertInput
  joinedById: bigint
  mission: MissionObjRelInsertInput
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedBy: UserObjRelInsertInput
  processedById: bigint
  project: ProjectObjRelInsertInput
  projectId: bigint
  state: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  user: UserObjRelInsertInput
}

type MissionJoinMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantScopeId: bigint
}

input MissionJoinMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type MissionJoinMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantScopeId: bigint
}

input MissionJoinMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type MissionJoinMutationResponse {
  affectedRows: Int!
  returning: [MissionJoin!]!
}

input MissionJoinObjRelInsertInput {
  data: MissionJoinInsertInput!
  onConflict: MissionJoinOnConflict
}

input MissionJoinOnConflict {
  constraint: MissionJoinConstraint!
  updateColumns: [MissionJoinUpdateColumn!]! = []
  where: MissionJoinBoolExp
}

input MissionJoinOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedBy: UserOrderBy
  joinedById: OrderBy
  mission: MissionOrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  processedAt: OrderBy
  processedBy: UserOrderBy
  processedById: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  state: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  user: UserOrderBy
}

input MissionJoinPkColumnsInput {
  id: bigint!
}

enum MissionJoinSelectColumn {
  createdAt
  createdById
  deletedAt
  eventJoinId
  hiddenAt
  id
  joinedById
  missionId
  points
  pointsProcessedAt
  pointsProcessedById
  processedAt
  processedById
  projectId
  state
  tenantScopeId
}

input MissionJoinSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantScopeId: bigint
}

type MissionJoinStddevFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantScopeId: Float
}

input MissionJoinStddevOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

type MissionJoinStddevPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantScopeId: Float
}

input MissionJoinStddevPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

type MissionJoinStddevSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantScopeId: Float
}

input MissionJoinStddevSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

input MissionJoinStreamCursorInput {
  initialValue: MissionJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input MissionJoinStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantScopeId: bigint
}

type MissionJoinSumFields {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedById: bigint
  processedById: bigint
  projectId: bigint
  tenantScopeId: bigint
}

input MissionJoinSumOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

enum MissionJoinUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventJoinId
  hiddenAt
  id
  joinedById
  missionId
  points
  pointsProcessedAt
  pointsProcessedById
  processedAt
  processedById
  projectId
  state
  tenantScopeId
}

input MissionJoinUpdates {
  _inc: MissionJoinIncInput
  _set: MissionJoinSetInput
  where: MissionJoinBoolExp!
}

type MissionJoinVarianceFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantScopeId: Float
}

input MissionJoinVarianceOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

type MissionJoinVarPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantScopeId: Float
}

input MissionJoinVarPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

type MissionJoinVarSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantScopeId: Float
}

input MissionJoinVarSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantScopeId: OrderBy
}

type MissionMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantScopeId: bigint
}

input MissionMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type MissionMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantScopeId: bigint
}

input MissionMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type MissionMutationResponse {
  affectedRows: Int!
  returning: [Mission!]!
}

input MissionObjRelInsertInput {
  data: MissionInsertInput!
  onConflict: MissionOnConflict
}

input MissionOnConflict {
  constraint: MissionConstraint!
  updateColumns: [MissionUpdateColumn!]! = []
  where: MissionBoolExp
}

input MissionOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  eventOrganize: EventOrganizeOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isAutoAcceptingMembers: OrderBy
  isTemplate: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  quantity: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input MissionPkColumnsInput {
  id: bigint!
}

enum MissionSelectColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  eventManageId
  hiddenAt
  id
  isAutoAcceptingMembers
  isTemplate
  name
  pointsMaximum
  pointsMinimum
  projectId
  quantity
  teamId
  tenantScopeId
}

enum MissionSelectColumnMissionAggregateBoolExpBool_andArgumentsColumns {
  isAutoAcceptingMembers
  isTemplate
}

enum MissionSelectColumnMissionAggregateBoolExpBool_orArgumentsColumns {
  isAutoAcceptingMembers
  isTemplate
}

input MissionSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingMembers: Boolean
  isTemplate: Boolean
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantScopeId: bigint
}

type MissionStddevFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantScopeId: Float
}

input MissionStddevOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type MissionStddevPopFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantScopeId: Float
}

input MissionStddevPopOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type MissionStddevSampFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantScopeId: Float
}

input MissionStddevSampOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input MissionStreamCursorInput {
  initialValue: MissionStreamCursorValueInput!
  ordering: CursorOrdering
}

input MissionStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingMembers: Boolean
  isTemplate: Boolean
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantScopeId: bigint
}

type MissionSumFields {
  createdById: bigint
  eventManageId: bigint
  id: bigint
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantScopeId: bigint
}

input MissionSumOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum MissionUpdateColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  eventManageId
  hiddenAt
  id
  isAutoAcceptingMembers
  isTemplate
  name
  pointsMaximum
  pointsMinimum
  projectId
  quantity
  teamId
  tenantScopeId
}

input MissionUpdates {
  _inc: MissionIncInput
  _set: MissionSetInput
  where: MissionBoolExp!
}

type MissionVarianceFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantScopeId: Float
}

input MissionVarianceOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type MissionVarPopFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantScopeId: Float
}

input MissionVarPopOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type MissionVarSampFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantScopeId: Float
}

input MissionVarSampOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type Mutation {
  deleteAction(where: ActionBoolExp!): ActionMutationResponse
  deleteActionByPk(id: bigint!): Action
  deleteActor(where: ActorBoolExp!): ActorMutationResponse
  deleteActorByPk(id: bigint!): Actor
  deleteActorImage(where: ActorImageBoolExp!): ActorImageMutationResponse
  deleteActorImageByPk(id: bigint!): ActorImage
  deleteActorTag(where: ActorTagBoolExp!): ActorTagMutationResponse
  deleteActorTagByPk(id: bigint!): ActorTag
  deleteAddress(where: AddressBoolExp!): AddressMutationResponse
  deleteAddressByPk(id: bigint!): Address
  deleteBankAccount(where: BankAccountBoolExp!): BankAccountMutationResponse
  deleteBankAccountByPk(id: bigint!): BankAccount
  deleteBankInfo(where: BankInfoBoolExp!): BankInfoMutationResponse
  deleteBankInfoByPk(id: bigint!): BankInfo
  deleteCampus(where: CampusBoolExp!): CampusMutationResponse
  deleteCampusByPk(id: bigint!): Campus
  deleteCampusCluster(where: CampusClusterBoolExp!): CampusClusterMutationResponse
  deleteCampusClusterByPk(id: bigint!): CampusCluster
  deleteEvent(where: EventBoolExp!): EventMutationResponse
  deleteEventApproval(where: EventApprovalBoolExp!): EventApprovalMutationResponse
  deleteEventApprovalByPk(id: bigint!): EventApproval
  deleteEventApprovalStep(where: EventApprovalStepBoolExp!): EventApprovalStepMutationResponse
  deleteEventApprovalStepByPk(id: bigint!): EventApprovalStep
  deleteEventApprovalValidator(where: EventApprovalValidatorBoolExp!): EventApprovalValidatorMutationResponse
  deleteEventApprovalValidatorByPk(id: bigint!): EventApprovalValidator
  deleteEventByPk(id: bigint!): Event
  deleteEventFavorite(where: EventFavoriteBoolExp!): EventFavoriteMutationResponse
  deleteEventFavoriteByPk(id: bigint!): EventFavorite
  deleteEventJoin(where: EventJoinBoolExp!): EventJoinMutationResponse
  deleteEventJoinByPk(id: bigint!): EventJoin
  deleteEventOrganize(where: EventOrganizeBoolExp!): EventOrganizeMutationResponse
  deleteEventOrganizeByPk(id: bigint!): EventOrganize
  deleteEventSupervisor(where: EventSupervisorBoolExp!): EventSupervisorMutationResponse
  deleteEventSupervisorByPk(id: bigint!): EventSupervisor
  deleteExpense(where: ExpenseBoolExp!): ExpenseMutationResponse
  deleteExpenseByPk(id: bigint!): Expense
  deleteExpenseItem(where: ExpenseItemBoolExp!): ExpenseItemMutationResponse
  deleteExpenseItemAttachments(where: ExpenseItemAttachmentsBoolExp!): ExpenseItemAttachmentsMutationResponse
  deleteExpenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments
  deleteExpenseItemByPk(id: bigint!): ExpenseItem
  deleteFileUpload(where: FileUploadBoolExp!): FileUploadMutationResponse
  deleteFileUploadByPk(id: bigint!): FileUpload
  deleteFollow(where: FollowBoolExp!): FollowMutationResponse
  deleteFollowByPk(id: bigint!): Follow
  deleteForm(where: FormBoolExp!): FormMutationResponse
  deleteFormByPk(id: bigint!): Form
  deleteFormSubmission(where: FormSubmissionBoolExp!): FormSubmissionMutationResponse
  deleteFormSubmissionAttachments(where: FormSubmissionAttachmentsBoolExp!): FormSubmissionAttachmentsMutationResponse
  deleteFormSubmissionAttachmentsByPk(fileUploadId: bigint!, formSubmissionId: bigint!): FormSubmissionAttachments
  deleteFormSubmissionByPk(id: bigint!): FormSubmission
  deleteGrant(where: GrantBoolExp!): GrantMutationResponse
  deleteGrantAllocate(where: GrantAllocateBoolExp!): GrantAllocateMutationResponse
  deleteGrantAllocateAttachments(where: GrantAllocateAttachmentsBoolExp!): GrantAllocateAttachmentsMutationResponse
  deleteGrantAllocateAttachmentsByPk(fileUploadId: bigint!, grantAllocateId: bigint!): GrantAllocateAttachments
  deleteGrantAllocateByPk(id: bigint!): GrantAllocate
  deleteGrantAttachments(where: GrantAttachmentsBoolExp!): GrantAttachmentsMutationResponse
  deleteGrantAttachmentsByPk(fileUploadId: bigint!, grantId: bigint!): GrantAttachments
  deleteGrantByPk(id: bigint!): Grant
  deleteLegalUnit(where: LegalUnitBoolExp!): LegalUnitMutationResponse
  deleteLegalUnitByPk(id: bigint!): LegalUnit
  deleteLegalUnitLocation(where: LegalUnitLocationBoolExp!): LegalUnitLocationMutationResponse
  deleteLegalUnitLocationByPk(id: bigint!): LegalUnitLocation
  deleteLocation(where: LocationBoolExp!): LocationMutationResponse
  deleteLocationByPk(id: bigint!): Location
  deleteLocationImages(where: LocationImagesBoolExp!): LocationImagesMutationResponse
  deleteLocationImagesByPk(fileUploadId: bigint!, locationId: bigint!): LocationImages
  deleteMission(where: MissionBoolExp!): MissionMutationResponse
  deleteMissionByPk(id: bigint!): Mission
  deleteMissionJoin(where: MissionJoinBoolExp!): MissionJoinMutationResponse
  deleteMissionJoinByPk(id: bigint!): MissionJoin
  deleteProject(where: ProjectBoolExp!): ProjectMutationResponse
  deleteProjectByPk(id: bigint!): Project
  deleteProjectSupervisors(where: ProjectSupervisorsBoolExp!): ProjectSupervisorsMutationResponse
  deleteProjectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  deleteSocial(where: SocialBoolExp!): SocialMutationResponse
  deleteSocialByPk(id: bigint!): Social
  deleteTag(where: TagBoolExp!): TagMutationResponse
  deleteTagByPk(id: bigint!): Tag
  deleteTeam(where: TeamBoolExp!): TeamMutationResponse
  deleteTeamByPk(id: bigint!): Team
  deleteTeamDocument(where: TeamDocumentBoolExp!): TeamDocumentMutationResponse
  deleteTeamDocumentByPk(id: bigint!): TeamDocument
  deleteTeamHistory(where: TeamHistoryBoolExp!): TeamHistoryMutationResponse
  deleteTeamHistoryByPk(id: bigint!): TeamHistory
  deleteTeamJoin(where: TeamJoinBoolExp!): TeamJoinMutationResponse
  deleteTeamJoinByPk(id: bigint!): TeamJoin
  deleteTeamMember(where: TeamMemberBoolExp!): TeamMemberMutationResponse
  deleteTeamMemberByPk(id: bigint!): TeamMember
  deleteTeamMemberRole(where: TeamMemberRoleBoolExp!): TeamMemberRoleMutationResponse
  deleteTeamMemberRoleByPk(id: bigint!): TeamMemberRole
  deleteTeamRole(where: TeamRoleBoolExp!): TeamRoleMutationResponse
  deleteTeamRoleByPk(id: bigint!): TeamRole
  deleteTenant(where: TenantBoolExp!): TenantMutationResponse
  deleteTenantByPk(id: bigint!): Tenant
  deleteTenantMember(where: TenantMemberBoolExp!): TenantMemberMutationResponse
  deleteTenantMemberByPk(id: bigint!): TenantMember
  deleteTenantMemberRole(where: TenantMemberRoleBoolExp!): TenantMemberRoleMutationResponse
  deleteTenantMemberRoleByPk(id: bigint!): TenantMemberRole
  deleteTenantRole(where: TenantRoleBoolExp!): TenantRoleMutationResponse
  deleteTenantRoleByPk(id: bigint!): TenantRole
  deleteTransaction(where: TransactionBoolExp!): TransactionMutationResponse
  deleteTransactionAttachments(where: TransactionAttachmentsBoolExp!): TransactionAttachmentsMutationResponse
  deleteTransactionAttachmentsByPk(fileUploadId: bigint!, transactionId: bigint!): TransactionAttachments
  deleteTransactionByPk(id: bigint!): Transaction
  deleteUser(where: UserBoolExp!): UserMutationResponse
  deleteUserByPk(id: bigint!): User
  insertAction(objects: [ActionInsertInput!]!, onConflict: ActionOnConflict): ActionMutationResponse
  insertActionOne(object: ActionInsertInput!, onConflict: ActionOnConflict): Action
  insertActor(objects: [ActorInsertInput!]!, onConflict: ActorOnConflict): ActorMutationResponse
  insertActorImage(objects: [ActorImageInsertInput!]!, onConflict: ActorImageOnConflict): ActorImageMutationResponse
  insertActorImageOne(object: ActorImageInsertInput!, onConflict: ActorImageOnConflict): ActorImage
  insertActorOne(object: ActorInsertInput!, onConflict: ActorOnConflict): Actor
  insertActorTag(objects: [ActorTagInsertInput!]!, onConflict: ActorTagOnConflict): ActorTagMutationResponse
  insertActorTagOne(object: ActorTagInsertInput!, onConflict: ActorTagOnConflict): ActorTag
  insertAddress(objects: [AddressInsertInput!]!, onConflict: AddressOnConflict): AddressMutationResponse
  insertAddressOne(object: AddressInsertInput!, onConflict: AddressOnConflict): Address
  insertBankAccount(objects: [BankAccountInsertInput!]!, onConflict: BankAccountOnConflict): BankAccountMutationResponse
  insertBankAccountOne(object: BankAccountInsertInput!, onConflict: BankAccountOnConflict): BankAccount
  insertBankInfo(objects: [BankInfoInsertInput!]!, onConflict: BankInfoOnConflict): BankInfoMutationResponse
  insertBankInfoOne(object: BankInfoInsertInput!, onConflict: BankInfoOnConflict): BankInfo
  insertCampus(objects: [CampusInsertInput!]!, onConflict: CampusOnConflict): CampusMutationResponse
  insertCampusCluster(objects: [CampusClusterInsertInput!]!, onConflict: CampusClusterOnConflict): CampusClusterMutationResponse
  insertCampusClusterOne(object: CampusClusterInsertInput!, onConflict: CampusClusterOnConflict): CampusCluster
  insertCampusOne(object: CampusInsertInput!, onConflict: CampusOnConflict): Campus
  insertEvent(objects: [EventInsertInput!]!, onConflict: EventOnConflict): EventMutationResponse
  insertEventApproval(objects: [EventApprovalInsertInput!]!, onConflict: EventApprovalOnConflict): EventApprovalMutationResponse
  insertEventApprovalOne(object: EventApprovalInsertInput!, onConflict: EventApprovalOnConflict): EventApproval
  insertEventApprovalStep(objects: [EventApprovalStepInsertInput!]!, onConflict: EventApprovalStepOnConflict): EventApprovalStepMutationResponse
  insertEventApprovalStepOne(object: EventApprovalStepInsertInput!, onConflict: EventApprovalStepOnConflict): EventApprovalStep
  insertEventApprovalValidator(objects: [EventApprovalValidatorInsertInput!]!, onConflict: EventApprovalValidatorOnConflict): EventApprovalValidatorMutationResponse
  insertEventApprovalValidatorOne(object: EventApprovalValidatorInsertInput!, onConflict: EventApprovalValidatorOnConflict): EventApprovalValidator
  insertEventFavorite(objects: [EventFavoriteInsertInput!]!, onConflict: EventFavoriteOnConflict): EventFavoriteMutationResponse
  insertEventFavoriteOne(object: EventFavoriteInsertInput!, onConflict: EventFavoriteOnConflict): EventFavorite
  insertEventJoin(objects: [EventJoinInsertInput!]!, onConflict: EventJoinOnConflict): EventJoinMutationResponse
  insertEventJoinOne(object: EventJoinInsertInput!, onConflict: EventJoinOnConflict): EventJoin
  insertEventOne(object: EventInsertInput!, onConflict: EventOnConflict): Event
  insertEventOrganize(objects: [EventOrganizeInsertInput!]!, onConflict: EventOrganizeOnConflict): EventOrganizeMutationResponse
  insertEventOrganizeOne(object: EventOrganizeInsertInput!, onConflict: EventOrganizeOnConflict): EventOrganize
  insertEventSupervisor(objects: [EventSupervisorInsertInput!]!, onConflict: EventSupervisorOnConflict): EventSupervisorMutationResponse
  insertEventSupervisorOne(object: EventSupervisorInsertInput!, onConflict: EventSupervisorOnConflict): EventSupervisor
  insertExpense(objects: [ExpenseInsertInput!]!, onConflict: ExpenseOnConflict): ExpenseMutationResponse
  insertExpenseItem(objects: [ExpenseItemInsertInput!]!, onConflict: ExpenseItemOnConflict): ExpenseItemMutationResponse
  insertExpenseItemAttachments(objects: [ExpenseItemAttachmentsInsertInput!]!, onConflict: ExpenseItemAttachmentsOnConflict): ExpenseItemAttachmentsMutationResponse
  insertExpenseItemAttachmentsOne(object: ExpenseItemAttachmentsInsertInput!, onConflict: ExpenseItemAttachmentsOnConflict): ExpenseItemAttachments
  insertExpenseItemOne(object: ExpenseItemInsertInput!, onConflict: ExpenseItemOnConflict): ExpenseItem
  insertExpenseOne(object: ExpenseInsertInput!, onConflict: ExpenseOnConflict): Expense
  insertFileUpload(objects: [FileUploadInsertInput!]!, onConflict: FileUploadOnConflict): FileUploadMutationResponse
  insertFileUploadOne(object: FileUploadInsertInput!, onConflict: FileUploadOnConflict): FileUpload
  insertFollow(objects: [FollowInsertInput!]!, onConflict: FollowOnConflict): FollowMutationResponse
  insertFollowOne(object: FollowInsertInput!, onConflict: FollowOnConflict): Follow
  insertForm(objects: [FormInsertInput!]!, onConflict: FormOnConflict): FormMutationResponse
  insertFormOne(object: FormInsertInput!, onConflict: FormOnConflict): Form
  insertFormSubmission(objects: [FormSubmissionInsertInput!]!, onConflict: FormSubmissionOnConflict): FormSubmissionMutationResponse
  insertFormSubmissionAttachments(objects: [FormSubmissionAttachmentsInsertInput!]!, onConflict: FormSubmissionAttachmentsOnConflict): FormSubmissionAttachmentsMutationResponse
  insertFormSubmissionAttachmentsOne(object: FormSubmissionAttachmentsInsertInput!, onConflict: FormSubmissionAttachmentsOnConflict): FormSubmissionAttachments
  insertFormSubmissionOne(object: FormSubmissionInsertInput!, onConflict: FormSubmissionOnConflict): FormSubmission
  insertGrant(objects: [GrantInsertInput!]!, onConflict: GrantOnConflict): GrantMutationResponse
  insertGrantAllocate(objects: [GrantAllocateInsertInput!]!, onConflict: GrantAllocateOnConflict): GrantAllocateMutationResponse
  insertGrantAllocateAttachments(objects: [GrantAllocateAttachmentsInsertInput!]!, onConflict: GrantAllocateAttachmentsOnConflict): GrantAllocateAttachmentsMutationResponse
  insertGrantAllocateAttachmentsOne(object: GrantAllocateAttachmentsInsertInput!, onConflict: GrantAllocateAttachmentsOnConflict): GrantAllocateAttachments
  insertGrantAllocateOne(object: GrantAllocateInsertInput!, onConflict: GrantAllocateOnConflict): GrantAllocate
  insertGrantAttachments(objects: [GrantAttachmentsInsertInput!]!, onConflict: GrantAttachmentsOnConflict): GrantAttachmentsMutationResponse
  insertGrantAttachmentsOne(object: GrantAttachmentsInsertInput!, onConflict: GrantAttachmentsOnConflict): GrantAttachments
  insertGrantOne(object: GrantInsertInput!, onConflict: GrantOnConflict): Grant
  insertLegalUnit(objects: [LegalUnitInsertInput!]!, onConflict: LegalUnitOnConflict): LegalUnitMutationResponse
  insertLegalUnitLocation(objects: [LegalUnitLocationInsertInput!]!, onConflict: LegalUnitLocationOnConflict): LegalUnitLocationMutationResponse
  insertLegalUnitLocationOne(object: LegalUnitLocationInsertInput!, onConflict: LegalUnitLocationOnConflict): LegalUnitLocation
  insertLegalUnitOne(object: LegalUnitInsertInput!, onConflict: LegalUnitOnConflict): LegalUnit
  insertLocation(objects: [LocationInsertInput!]!, onConflict: LocationOnConflict): LocationMutationResponse
  insertLocationImages(objects: [LocationImagesInsertInput!]!, onConflict: LocationImagesOnConflict): LocationImagesMutationResponse
  insertLocationImagesOne(object: LocationImagesInsertInput!, onConflict: LocationImagesOnConflict): LocationImages
  insertLocationOne(object: LocationInsertInput!, onConflict: LocationOnConflict): Location
  insertMission(objects: [MissionInsertInput!]!, onConflict: MissionOnConflict): MissionMutationResponse
  insertMissionJoin(objects: [MissionJoinInsertInput!]!, onConflict: MissionJoinOnConflict): MissionJoinMutationResponse
  insertMissionJoinOne(object: MissionJoinInsertInput!, onConflict: MissionJoinOnConflict): MissionJoin
  insertMissionOne(object: MissionInsertInput!, onConflict: MissionOnConflict): Mission
  insertProject(objects: [ProjectInsertInput!]!, onConflict: ProjectOnConflict): ProjectMutationResponse
  insertProjectOne(object: ProjectInsertInput!, onConflict: ProjectOnConflict): Project
  insertProjectSupervisors(objects: [ProjectSupervisorsInsertInput!]!, onConflict: ProjectSupervisorsOnConflict): ProjectSupervisorsMutationResponse
  insertProjectSupervisorsOne(object: ProjectSupervisorsInsertInput!, onConflict: ProjectSupervisorsOnConflict): ProjectSupervisors
  insertSocial(objects: [SocialInsertInput!]!, onConflict: SocialOnConflict): SocialMutationResponse
  insertSocialOne(object: SocialInsertInput!, onConflict: SocialOnConflict): Social
  insertTag(objects: [TagInsertInput!]!, onConflict: TagOnConflict): TagMutationResponse
  insertTagOne(object: TagInsertInput!, onConflict: TagOnConflict): Tag
  insertTeam(objects: [TeamInsertInput!]!, onConflict: TeamOnConflict): TeamMutationResponse
  insertTeamDocument(objects: [TeamDocumentInsertInput!]!, onConflict: TeamDocumentOnConflict): TeamDocumentMutationResponse
  insertTeamDocumentOne(object: TeamDocumentInsertInput!, onConflict: TeamDocumentOnConflict): TeamDocument
  insertTeamHistory(objects: [TeamHistoryInsertInput!]!, onConflict: TeamHistoryOnConflict): TeamHistoryMutationResponse
  insertTeamHistoryOne(object: TeamHistoryInsertInput!, onConflict: TeamHistoryOnConflict): TeamHistory
  insertTeamJoin(objects: [TeamJoinInsertInput!]!, onConflict: TeamJoinOnConflict): TeamJoinMutationResponse
  insertTeamJoinOne(object: TeamJoinInsertInput!, onConflict: TeamJoinOnConflict): TeamJoin
  insertTeamMember(objects: [TeamMemberInsertInput!]!, onConflict: TeamMemberOnConflict): TeamMemberMutationResponse
  insertTeamMemberOne(object: TeamMemberInsertInput!, onConflict: TeamMemberOnConflict): TeamMember
  insertTeamMemberRole(objects: [TeamMemberRoleInsertInput!]!, onConflict: TeamMemberRoleOnConflict): TeamMemberRoleMutationResponse
  insertTeamMemberRoleOne(object: TeamMemberRoleInsertInput!, onConflict: TeamMemberRoleOnConflict): TeamMemberRole
  insertTeamOne(object: TeamInsertInput!, onConflict: TeamOnConflict): Team
  insertTeamRole(objects: [TeamRoleInsertInput!]!, onConflict: TeamRoleOnConflict): TeamRoleMutationResponse
  insertTeamRoleOne(object: TeamRoleInsertInput!, onConflict: TeamRoleOnConflict): TeamRole
  insertTenant(objects: [TenantInsertInput!]!, onConflict: TenantOnConflict): TenantMutationResponse
  insertTenantMember(objects: [TenantMemberInsertInput!]!, onConflict: TenantMemberOnConflict): TenantMemberMutationResponse
  insertTenantMemberOne(object: TenantMemberInsertInput!, onConflict: TenantMemberOnConflict): TenantMember
  insertTenantMemberRole(objects: [TenantMemberRoleInsertInput!]!, onConflict: TenantMemberRoleOnConflict): TenantMemberRoleMutationResponse
  insertTenantMemberRoleOne(object: TenantMemberRoleInsertInput!, onConflict: TenantMemberRoleOnConflict): TenantMemberRole
  insertTenantOne(object: TenantInsertInput!, onConflict: TenantOnConflict): Tenant
  insertTenantRole(objects: [TenantRoleInsertInput!]!, onConflict: TenantRoleOnConflict): TenantRoleMutationResponse
  insertTenantRoleOne(object: TenantRoleInsertInput!, onConflict: TenantRoleOnConflict): TenantRole
  insertTransaction(objects: [TransactionInsertInput!]!, onConflict: TransactionOnConflict): TransactionMutationResponse
  insertTransactionAttachments(objects: [TransactionAttachmentsInsertInput!]!, onConflict: TransactionAttachmentsOnConflict): TransactionAttachmentsMutationResponse
  insertTransactionAttachmentsOne(object: TransactionAttachmentsInsertInput!, onConflict: TransactionAttachmentsOnConflict): TransactionAttachments
  insertTransactionOne(object: TransactionInsertInput!, onConflict: TransactionOnConflict): Transaction
  insertUser(objects: [UserInsertInput!]!, onConflict: UserOnConflict): UserMutationResponse
  insertUserOne(object: UserInsertInput!, onConflict: UserOnConflict): User
  updateAction(_inc: ActionIncInput, _set: ActionSetInput, where: ActionBoolExp!): ActionMutationResponse
  updateActionByPk(_inc: ActionIncInput, _set: ActionSetInput, pkColumns: ActionPkColumnsInput!): Action
  updateActionMany(updates: [ActionUpdates!]!): [ActionMutationResponse]
  updateActor(_inc: ActorIncInput, _set: ActorSetInput, where: ActorBoolExp!): ActorMutationResponse
  updateActorByPk(_inc: ActorIncInput, _set: ActorSetInput, pkColumns: ActorPkColumnsInput!): Actor
  updateActorImage(_inc: ActorImageIncInput, _set: ActorImageSetInput, where: ActorImageBoolExp!): ActorImageMutationResponse
  updateActorImageByPk(_inc: ActorImageIncInput, _set: ActorImageSetInput, pkColumns: ActorImagePkColumnsInput!): ActorImage
  updateActorImageMany(updates: [ActorImageUpdates!]!): [ActorImageMutationResponse]
  updateActorMany(updates: [ActorUpdates!]!): [ActorMutationResponse]
  updateActorTag(_inc: ActorTagIncInput, _set: ActorTagSetInput, where: ActorTagBoolExp!): ActorTagMutationResponse
  updateActorTagByPk(_inc: ActorTagIncInput, _set: ActorTagSetInput, pkColumns: ActorTagPkColumnsInput!): ActorTag
  updateActorTagMany(updates: [ActorTagUpdates!]!): [ActorTagMutationResponse]
  updateAddress(_inc: AddressIncInput, _set: AddressSetInput, where: AddressBoolExp!): AddressMutationResponse
  updateAddressByPk(_inc: AddressIncInput, _set: AddressSetInput, pkColumns: AddressPkColumnsInput!): Address
  updateAddressMany(updates: [AddressUpdates!]!): [AddressMutationResponse]
  updateBankAccount(_inc: BankAccountIncInput, _set: BankAccountSetInput, where: BankAccountBoolExp!): BankAccountMutationResponse
  updateBankAccountByPk(_inc: BankAccountIncInput, _set: BankAccountSetInput, pkColumns: BankAccountPkColumnsInput!): BankAccount
  updateBankAccountMany(updates: [BankAccountUpdates!]!): [BankAccountMutationResponse]
  updateBankInfo(_inc: BankInfoIncInput, _set: BankInfoSetInput, where: BankInfoBoolExp!): BankInfoMutationResponse
  updateBankInfoByPk(_inc: BankInfoIncInput, _set: BankInfoSetInput, pkColumns: BankInfoPkColumnsInput!): BankInfo
  updateBankInfoMany(updates: [BankInfoUpdates!]!): [BankInfoMutationResponse]
  updateCampus(_inc: CampusIncInput, _set: CampusSetInput, where: CampusBoolExp!): CampusMutationResponse
  updateCampusByPk(_inc: CampusIncInput, _set: CampusSetInput, pkColumns: CampusPkColumnsInput!): Campus
  updateCampusCluster(_inc: CampusClusterIncInput, _set: CampusClusterSetInput, where: CampusClusterBoolExp!): CampusClusterMutationResponse
  updateCampusClusterByPk(_inc: CampusClusterIncInput, _set: CampusClusterSetInput, pkColumns: CampusClusterPkColumnsInput!): CampusCluster
  updateCampusClusterMany(updates: [CampusClusterUpdates!]!): [CampusClusterMutationResponse]
  updateCampusMany(updates: [CampusUpdates!]!): [CampusMutationResponse]
  updateEvent(_append: EventAppendInput, _deleteAtPath: EventDeleteAtPathInput, _deleteElem: EventDeleteElemInput, _deleteKey: EventDeleteKeyInput, _inc: EventIncInput, _prepend: EventPrependInput, _set: EventSetInput, where: EventBoolExp!): EventMutationResponse
  updateEventApproval(_inc: EventApprovalIncInput, _set: EventApprovalSetInput, where: EventApprovalBoolExp!): EventApprovalMutationResponse
  updateEventApprovalByPk(_inc: EventApprovalIncInput, _set: EventApprovalSetInput, pkColumns: EventApprovalPkColumnsInput!): EventApproval
  updateEventApprovalMany(updates: [EventApprovalUpdates!]!): [EventApprovalMutationResponse]
  updateEventApprovalStep(_inc: EventApprovalStepIncInput, _set: EventApprovalStepSetInput, where: EventApprovalStepBoolExp!): EventApprovalStepMutationResponse
  updateEventApprovalStepByPk(_inc: EventApprovalStepIncInput, _set: EventApprovalStepSetInput, pkColumns: EventApprovalStepPkColumnsInput!): EventApprovalStep
  updateEventApprovalStepMany(updates: [EventApprovalStepUpdates!]!): [EventApprovalStepMutationResponse]
  updateEventApprovalValidator(_inc: EventApprovalValidatorIncInput, _set: EventApprovalValidatorSetInput, where: EventApprovalValidatorBoolExp!): EventApprovalValidatorMutationResponse
  updateEventApprovalValidatorByPk(_inc: EventApprovalValidatorIncInput, _set: EventApprovalValidatorSetInput, pkColumns: EventApprovalValidatorPkColumnsInput!): EventApprovalValidator
  updateEventApprovalValidatorMany(updates: [EventApprovalValidatorUpdates!]!): [EventApprovalValidatorMutationResponse]
  updateEventByPk(_append: EventAppendInput, _deleteAtPath: EventDeleteAtPathInput, _deleteElem: EventDeleteElemInput, _deleteKey: EventDeleteKeyInput, _inc: EventIncInput, _prepend: EventPrependInput, _set: EventSetInput, pkColumns: EventPkColumnsInput!): Event
  updateEventFavorite(_inc: EventFavoriteIncInput, _set: EventFavoriteSetInput, where: EventFavoriteBoolExp!): EventFavoriteMutationResponse
  updateEventFavoriteByPk(_inc: EventFavoriteIncInput, _set: EventFavoriteSetInput, pkColumns: EventFavoritePkColumnsInput!): EventFavorite
  updateEventFavoriteMany(updates: [EventFavoriteUpdates!]!): [EventFavoriteMutationResponse]
  updateEventJoin(_inc: EventJoinIncInput, _set: EventJoinSetInput, where: EventJoinBoolExp!): EventJoinMutationResponse
  updateEventJoinByPk(_inc: EventJoinIncInput, _set: EventJoinSetInput, pkColumns: EventJoinPkColumnsInput!): EventJoin
  updateEventJoinMany(updates: [EventJoinUpdates!]!): [EventJoinMutationResponse]
  updateEventMany(updates: [EventUpdates!]!): [EventMutationResponse]
  updateEventOrganize(_inc: EventOrganizeIncInput, _set: EventOrganizeSetInput, where: EventOrganizeBoolExp!): EventOrganizeMutationResponse
  updateEventOrganizeByPk(_inc: EventOrganizeIncInput, _set: EventOrganizeSetInput, pkColumns: EventOrganizePkColumnsInput!): EventOrganize
  updateEventOrganizeMany(updates: [EventOrganizeUpdates!]!): [EventOrganizeMutationResponse]
  updateEventSupervisor(_inc: EventSupervisorIncInput, _set: EventSupervisorSetInput, where: EventSupervisorBoolExp!): EventSupervisorMutationResponse
  updateEventSupervisorByPk(_inc: EventSupervisorIncInput, _set: EventSupervisorSetInput, pkColumns: EventSupervisorPkColumnsInput!): EventSupervisor
  updateEventSupervisorMany(updates: [EventSupervisorUpdates!]!): [EventSupervisorMutationResponse]
  updateExpense(_inc: ExpenseIncInput, _set: ExpenseSetInput, where: ExpenseBoolExp!): ExpenseMutationResponse
  updateExpenseByPk(_inc: ExpenseIncInput, _set: ExpenseSetInput, pkColumns: ExpensePkColumnsInput!): Expense
  updateExpenseItem(_inc: ExpenseItemIncInput, _set: ExpenseItemSetInput, where: ExpenseItemBoolExp!): ExpenseItemMutationResponse
  updateExpenseItemAttachments(_inc: ExpenseItemAttachmentsIncInput, _set: ExpenseItemAttachmentsSetInput, where: ExpenseItemAttachmentsBoolExp!): ExpenseItemAttachmentsMutationResponse
  updateExpenseItemAttachmentsByPk(_inc: ExpenseItemAttachmentsIncInput, _set: ExpenseItemAttachmentsSetInput, pkColumns: ExpenseItemAttachmentsPkColumnsInput!): ExpenseItemAttachments
  updateExpenseItemAttachmentsMany(updates: [ExpenseItemAttachmentsUpdates!]!): [ExpenseItemAttachmentsMutationResponse]
  updateExpenseItemByPk(_inc: ExpenseItemIncInput, _set: ExpenseItemSetInput, pkColumns: ExpenseItemPkColumnsInput!): ExpenseItem
  updateExpenseItemMany(updates: [ExpenseItemUpdates!]!): [ExpenseItemMutationResponse]
  updateExpenseMany(updates: [ExpenseUpdates!]!): [ExpenseMutationResponse]
  updateFileUpload(_inc: FileUploadIncInput, _set: FileUploadSetInput, where: FileUploadBoolExp!): FileUploadMutationResponse
  updateFileUploadByPk(_inc: FileUploadIncInput, _set: FileUploadSetInput, pkColumns: FileUploadPkColumnsInput!): FileUpload
  updateFileUploadMany(updates: [FileUploadUpdates!]!): [FileUploadMutationResponse]
  updateFollow(_inc: FollowIncInput, _set: FollowSetInput, where: FollowBoolExp!): FollowMutationResponse
  updateFollowByPk(_inc: FollowIncInput, _set: FollowSetInput, pkColumns: FollowPkColumnsInput!): Follow
  updateFollowMany(updates: [FollowUpdates!]!): [FollowMutationResponse]
  updateForm(_append: FormAppendInput, _deleteAtPath: FormDeleteAtPathInput, _deleteElem: FormDeleteElemInput, _deleteKey: FormDeleteKeyInput, _inc: FormIncInput, _prepend: FormPrependInput, _set: FormSetInput, where: FormBoolExp!): FormMutationResponse
  updateFormByPk(_append: FormAppendInput, _deleteAtPath: FormDeleteAtPathInput, _deleteElem: FormDeleteElemInput, _deleteKey: FormDeleteKeyInput, _inc: FormIncInput, _prepend: FormPrependInput, _set: FormSetInput, pkColumns: FormPkColumnsInput!): Form
  updateFormMany(updates: [FormUpdates!]!): [FormMutationResponse]
  updateFormSubmission(_append: FormSubmissionAppendInput, _deleteAtPath: FormSubmissionDeleteAtPathInput, _deleteElem: FormSubmissionDeleteElemInput, _deleteKey: FormSubmissionDeleteKeyInput, _inc: FormSubmissionIncInput, _prepend: FormSubmissionPrependInput, _set: FormSubmissionSetInput, where: FormSubmissionBoolExp!): FormSubmissionMutationResponse
  updateFormSubmissionAttachments(_inc: FormSubmissionAttachmentsIncInput, _set: FormSubmissionAttachmentsSetInput, where: FormSubmissionAttachmentsBoolExp!): FormSubmissionAttachmentsMutationResponse
  updateFormSubmissionAttachmentsByPk(_inc: FormSubmissionAttachmentsIncInput, _set: FormSubmissionAttachmentsSetInput, pkColumns: FormSubmissionAttachmentsPkColumnsInput!): FormSubmissionAttachments
  updateFormSubmissionAttachmentsMany(updates: [FormSubmissionAttachmentsUpdates!]!): [FormSubmissionAttachmentsMutationResponse]
  updateFormSubmissionByPk(_append: FormSubmissionAppendInput, _deleteAtPath: FormSubmissionDeleteAtPathInput, _deleteElem: FormSubmissionDeleteElemInput, _deleteKey: FormSubmissionDeleteKeyInput, _inc: FormSubmissionIncInput, _prepend: FormSubmissionPrependInput, _set: FormSubmissionSetInput, pkColumns: FormSubmissionPkColumnsInput!): FormSubmission
  updateFormSubmissionMany(updates: [FormSubmissionUpdates!]!): [FormSubmissionMutationResponse]
  updateGrant(_inc: GrantIncInput, _set: GrantSetInput, where: GrantBoolExp!): GrantMutationResponse
  updateGrantAllocate(_inc: GrantAllocateIncInput, _set: GrantAllocateSetInput, where: GrantAllocateBoolExp!): GrantAllocateMutationResponse
  updateGrantAllocateAttachments(_inc: GrantAllocateAttachmentsIncInput, _set: GrantAllocateAttachmentsSetInput, where: GrantAllocateAttachmentsBoolExp!): GrantAllocateAttachmentsMutationResponse
  updateGrantAllocateAttachmentsByPk(_inc: GrantAllocateAttachmentsIncInput, _set: GrantAllocateAttachmentsSetInput, pkColumns: GrantAllocateAttachmentsPkColumnsInput!): GrantAllocateAttachments
  updateGrantAllocateAttachmentsMany(updates: [GrantAllocateAttachmentsUpdates!]!): [GrantAllocateAttachmentsMutationResponse]
  updateGrantAllocateByPk(_inc: GrantAllocateIncInput, _set: GrantAllocateSetInput, pkColumns: GrantAllocatePkColumnsInput!): GrantAllocate
  updateGrantAllocateMany(updates: [GrantAllocateUpdates!]!): [GrantAllocateMutationResponse]
  updateGrantAttachments(_inc: GrantAttachmentsIncInput, _set: GrantAttachmentsSetInput, where: GrantAttachmentsBoolExp!): GrantAttachmentsMutationResponse
  updateGrantAttachmentsByPk(_inc: GrantAttachmentsIncInput, _set: GrantAttachmentsSetInput, pkColumns: GrantAttachmentsPkColumnsInput!): GrantAttachments
  updateGrantAttachmentsMany(updates: [GrantAttachmentsUpdates!]!): [GrantAttachmentsMutationResponse]
  updateGrantByPk(_inc: GrantIncInput, _set: GrantSetInput, pkColumns: GrantPkColumnsInput!): Grant
  updateGrantMany(updates: [GrantUpdates!]!): [GrantMutationResponse]
  updateLegalUnit(_inc: LegalUnitIncInput, _set: LegalUnitSetInput, where: LegalUnitBoolExp!): LegalUnitMutationResponse
  updateLegalUnitByPk(_inc: LegalUnitIncInput, _set: LegalUnitSetInput, pkColumns: LegalUnitPkColumnsInput!): LegalUnit
  updateLegalUnitLocation(_inc: LegalUnitLocationIncInput, _set: LegalUnitLocationSetInput, where: LegalUnitLocationBoolExp!): LegalUnitLocationMutationResponse
  updateLegalUnitLocationByPk(_inc: LegalUnitLocationIncInput, _set: LegalUnitLocationSetInput, pkColumns: LegalUnitLocationPkColumnsInput!): LegalUnitLocation
  updateLegalUnitLocationMany(updates: [LegalUnitLocationUpdates!]!): [LegalUnitLocationMutationResponse]
  updateLegalUnitMany(updates: [LegalUnitUpdates!]!): [LegalUnitMutationResponse]
  updateLocation(_inc: LocationIncInput, _set: LocationSetInput, where: LocationBoolExp!): LocationMutationResponse
  updateLocationByPk(_inc: LocationIncInput, _set: LocationSetInput, pkColumns: LocationPkColumnsInput!): Location
  updateLocationImages(_inc: LocationImagesIncInput, _set: LocationImagesSetInput, where: LocationImagesBoolExp!): LocationImagesMutationResponse
  updateLocationImagesByPk(_inc: LocationImagesIncInput, _set: LocationImagesSetInput, pkColumns: LocationImagesPkColumnsInput!): LocationImages
  updateLocationImagesMany(updates: [LocationImagesUpdates!]!): [LocationImagesMutationResponse]
  updateLocationMany(updates: [LocationUpdates!]!): [LocationMutationResponse]
  updateMission(_inc: MissionIncInput, _set: MissionSetInput, where: MissionBoolExp!): MissionMutationResponse
  updateMissionByPk(_inc: MissionIncInput, _set: MissionSetInput, pkColumns: MissionPkColumnsInput!): Mission
  updateMissionJoin(_inc: MissionJoinIncInput, _set: MissionJoinSetInput, where: MissionJoinBoolExp!): MissionJoinMutationResponse
  updateMissionJoinByPk(_inc: MissionJoinIncInput, _set: MissionJoinSetInput, pkColumns: MissionJoinPkColumnsInput!): MissionJoin
  updateMissionJoinMany(updates: [MissionJoinUpdates!]!): [MissionJoinMutationResponse]
  updateMissionMany(updates: [MissionUpdates!]!): [MissionMutationResponse]
  updateProject(_inc: ProjectIncInput, _set: ProjectSetInput, where: ProjectBoolExp!): ProjectMutationResponse
  updateProjectByPk(_inc: ProjectIncInput, _set: ProjectSetInput, pkColumns: ProjectPkColumnsInput!): Project
  updateProjectMany(updates: [ProjectUpdates!]!): [ProjectMutationResponse]
  updateProjectSupervisors(_inc: ProjectSupervisorsIncInput, _set: ProjectSupervisorsSetInput, where: ProjectSupervisorsBoolExp!): ProjectSupervisorsMutationResponse
  updateProjectSupervisorsByPk(_inc: ProjectSupervisorsIncInput, _set: ProjectSupervisorsSetInput, pkColumns: ProjectSupervisorsPkColumnsInput!): ProjectSupervisors
  updateProjectSupervisorsMany(updates: [ProjectSupervisorsUpdates!]!): [ProjectSupervisorsMutationResponse]
  updateSocial(_inc: SocialIncInput, _set: SocialSetInput, where: SocialBoolExp!): SocialMutationResponse
  updateSocialByPk(_inc: SocialIncInput, _set: SocialSetInput, pkColumns: SocialPkColumnsInput!): Social
  updateSocialMany(updates: [SocialUpdates!]!): [SocialMutationResponse]
  updateTag(_inc: TagIncInput, _set: TagSetInput, where: TagBoolExp!): TagMutationResponse
  updateTagByPk(_inc: TagIncInput, _set: TagSetInput, pkColumns: TagPkColumnsInput!): Tag
  updateTagMany(updates: [TagUpdates!]!): [TagMutationResponse]
  updateTeam(_inc: TeamIncInput, _set: TeamSetInput, where: TeamBoolExp!): TeamMutationResponse
  updateTeamByPk(_inc: TeamIncInput, _set: TeamSetInput, pkColumns: TeamPkColumnsInput!): Team
  updateTeamDocument(_inc: TeamDocumentIncInput, _set: TeamDocumentSetInput, where: TeamDocumentBoolExp!): TeamDocumentMutationResponse
  updateTeamDocumentByPk(_inc: TeamDocumentIncInput, _set: TeamDocumentSetInput, pkColumns: TeamDocumentPkColumnsInput!): TeamDocument
  updateTeamDocumentMany(updates: [TeamDocumentUpdates!]!): [TeamDocumentMutationResponse]
  updateTeamHistory(_inc: TeamHistoryIncInput, _set: TeamHistorySetInput, where: TeamHistoryBoolExp!): TeamHistoryMutationResponse
  updateTeamHistoryByPk(_inc: TeamHistoryIncInput, _set: TeamHistorySetInput, pkColumns: TeamHistoryPkColumnsInput!): TeamHistory
  updateTeamHistoryMany(updates: [TeamHistoryUpdates!]!): [TeamHistoryMutationResponse]
  updateTeamJoin(_inc: TeamJoinIncInput, _set: TeamJoinSetInput, where: TeamJoinBoolExp!): TeamJoinMutationResponse
  updateTeamJoinByPk(_inc: TeamJoinIncInput, _set: TeamJoinSetInput, pkColumns: TeamJoinPkColumnsInput!): TeamJoin
  updateTeamJoinMany(updates: [TeamJoinUpdates!]!): [TeamJoinMutationResponse]
  updateTeamMany(updates: [TeamUpdates!]!): [TeamMutationResponse]
  updateTeamMember(_inc: TeamMemberIncInput, _set: TeamMemberSetInput, where: TeamMemberBoolExp!): TeamMemberMutationResponse
  updateTeamMemberByPk(_inc: TeamMemberIncInput, _set: TeamMemberSetInput, pkColumns: TeamMemberPkColumnsInput!): TeamMember
  updateTeamMemberMany(updates: [TeamMemberUpdates!]!): [TeamMemberMutationResponse]
  updateTeamMemberRole(_inc: TeamMemberRoleIncInput, _set: TeamMemberRoleSetInput, where: TeamMemberRoleBoolExp!): TeamMemberRoleMutationResponse
  updateTeamMemberRoleByPk(_inc: TeamMemberRoleIncInput, _set: TeamMemberRoleSetInput, pkColumns: TeamMemberRolePkColumnsInput!): TeamMemberRole
  updateTeamMemberRoleMany(updates: [TeamMemberRoleUpdates!]!): [TeamMemberRoleMutationResponse]
  updateTeamRole(_inc: TeamRoleIncInput, _set: TeamRoleSetInput, where: TeamRoleBoolExp!): TeamRoleMutationResponse
  updateTeamRoleByPk(_inc: TeamRoleIncInput, _set: TeamRoleSetInput, pkColumns: TeamRolePkColumnsInput!): TeamRole
  updateTeamRoleMany(updates: [TeamRoleUpdates!]!): [TeamRoleMutationResponse]
  updateTenant(_inc: TenantIncInput, _set: TenantSetInput, where: TenantBoolExp!): TenantMutationResponse
  updateTenantByPk(_inc: TenantIncInput, _set: TenantSetInput, pkColumns: TenantPkColumnsInput!): Tenant
  updateTenantMany(updates: [TenantUpdates!]!): [TenantMutationResponse]
  updateTenantMember(_inc: TenantMemberIncInput, _set: TenantMemberSetInput, where: TenantMemberBoolExp!): TenantMemberMutationResponse
  updateTenantMemberByPk(_inc: TenantMemberIncInput, _set: TenantMemberSetInput, pkColumns: TenantMemberPkColumnsInput!): TenantMember
  updateTenantMemberMany(updates: [TenantMemberUpdates!]!): [TenantMemberMutationResponse]
  updateTenantMemberRole(_inc: TenantMemberRoleIncInput, _set: TenantMemberRoleSetInput, where: TenantMemberRoleBoolExp!): TenantMemberRoleMutationResponse
  updateTenantMemberRoleByPk(_inc: TenantMemberRoleIncInput, _set: TenantMemberRoleSetInput, pkColumns: TenantMemberRolePkColumnsInput!): TenantMemberRole
  updateTenantMemberRoleMany(updates: [TenantMemberRoleUpdates!]!): [TenantMemberRoleMutationResponse]
  updateTenantRole(_inc: TenantRoleIncInput, _set: TenantRoleSetInput, where: TenantRoleBoolExp!): TenantRoleMutationResponse
  updateTenantRoleByPk(_inc: TenantRoleIncInput, _set: TenantRoleSetInput, pkColumns: TenantRolePkColumnsInput!): TenantRole
  updateTenantRoleMany(updates: [TenantRoleUpdates!]!): [TenantRoleMutationResponse]
  updateTransaction(_inc: TransactionIncInput, _set: TransactionSetInput, where: TransactionBoolExp!): TransactionMutationResponse
  updateTransactionAttachments(_inc: TransactionAttachmentsIncInput, _set: TransactionAttachmentsSetInput, where: TransactionAttachmentsBoolExp!): TransactionAttachmentsMutationResponse
  updateTransactionAttachmentsByPk(_inc: TransactionAttachmentsIncInput, _set: TransactionAttachmentsSetInput, pkColumns: TransactionAttachmentsPkColumnsInput!): TransactionAttachments
  updateTransactionAttachmentsMany(updates: [TransactionAttachmentsUpdates!]!): [TransactionAttachmentsMutationResponse]
  updateTransactionByPk(_inc: TransactionIncInput, _set: TransactionSetInput, pkColumns: TransactionPkColumnsInput!): Transaction
  updateTransactionMany(updates: [TransactionUpdates!]!): [TransactionMutationResponse]
  updateUser(_inc: UserIncInput, _set: UserSetInput, where: UserBoolExp!): UserMutationResponse
  updateUserByPk(_inc: UserIncInput, _set: UserSetInput, pkColumns: UserPkColumnsInput!): User
  updateUserMany(updates: [UserUpdates!]!): [UserMutationResponse]
  login(dto: LoginInput!): UserLogin!
  logout: Boolean!
  singleUpload(file: Upload!, bucket: String, entityName: String, entityId: String): FileUpload
}

enum OrderBy {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

type Project {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  banner: FileUpload
  bannerId: bigint
  budget: Float!
  color: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  end: timestamptz
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  grant: Grant
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint!
  isPrivate: Boolean!
  isTemplate: Boolean!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  name: String!
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  regularEventInterval: String!
  slug: String!
  start: timestamptz
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  transactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  type: String!
}

type ProjectAggregate {
  aggregate: ProjectAggregateFields
  nodes: [Project!]!
}

input ProjectAggregateBoolExp {
  bool_and: projectAggregateBoolExpBool_and
  bool_or: projectAggregateBoolExpBool_or
  count: projectAggregateBoolExpCount
}

input projectAggregateBoolExpBool_and {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpBool_or {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpCount {
  arguments: [ProjectSelectColumn!]
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: IntComparisonExp!
}

type ProjectAggregateFields {
  avg: ProjectAvgFields
  count(columns: [ProjectSelectColumn!], distinct: Boolean): Int!
  max: ProjectMaxFields
  min: ProjectMinFields
  stddev: ProjectStddevFields
  stddevPop: ProjectStddevPopFields
  stddevSamp: ProjectStddevSampFields
  sum: ProjectSumFields
  varPop: ProjectVarPopFields
  varSamp: ProjectVarSampFields
  variance: ProjectVarianceFields
}

input ProjectAggregateOrderBy {
  avg: ProjectAvgOrderBy
  count: OrderBy
  max: ProjectMaxOrderBy
  min: ProjectMinOrderBy
  stddev: ProjectStddevOrderBy
  stddevPop: ProjectStddevPopOrderBy
  stddevSamp: ProjectStddevSampOrderBy
  sum: ProjectSumOrderBy
  varPop: ProjectVarPopOrderBy
  varSamp: ProjectVarSampOrderBy
  variance: ProjectVarianceOrderBy
}

input ProjectArrRelInsertInput {
  data: [ProjectInsertInput!]!
  onConflict: ProjectOnConflict
}

type ProjectAvgFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input ProjectAvgOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input ProjectBoolExp {
  _and: [ProjectBoolExp!]
  _not: ProjectBoolExp
  _or: [ProjectBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  banner: FileUploadBoolExp
  bannerId: BigintComparisonExp
  budget: FloatComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  end: TimestamptzComparisonExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  grant: GrantBoolExp
  grantId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isPrivate: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  name: StringComparisonExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  regularEventInterval: StringComparisonExp
  slug: StringComparisonExp
  start: TimestamptzComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transactions: TransactionBoolExp
  transactionsAggregate: TransactionAggregateBoolExp
  type: StringComparisonExp
}

enum ProjectConstraint {
  project_pkey
}

input ProjectIncInput {
  bannerId: bigint
  budget: Float
  createdById: bigint
  grantId: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input ProjectInsertInput {
  actions: ActionArrRelInsertInput
  banner: FileUploadObjRelInsertInput
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventOrganizes: EventOrganizeArrRelInsertInput
  grant: GrantObjRelInsertInput
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  missionJoins: MissionJoinArrRelInsertInput
  missions: MissionArrRelInsertInput
  name: String
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  regularEventInterval: String
  slug: String
  start: timestamptz
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transactions: TransactionArrRelInsertInput
  type: String
}

type ProjectMaxFields {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

input ProjectMaxOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  start: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type ProjectMinFields {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

input ProjectMinOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  start: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type ProjectMutationResponse {
  affectedRows: Int!
  returning: [Project!]!
}

input ProjectObjRelInsertInput {
  data: ProjectInsertInput!
  onConflict: ProjectOnConflict
}

input ProjectOnConflict {
  constraint: ProjectConstraint!
  updateColumns: [ProjectUpdateColumn!]! = []
  where: ProjectBoolExp
}

input ProjectOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  banner: FileUploadOrderBy
  bannerId: OrderBy
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  grant: GrantOrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isPrivate: OrderBy
  isTemplate: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  missionsAggregate: MissionAggregateOrderBy
  name: OrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  start: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transactionsAggregate: TransactionAggregateOrderBy
  type: OrderBy
}

input ProjectPkColumnsInput {
  id: bigint!
}

enum ProjectSelectColumn {
  bannerId
  budget
  color
  createdAt
  createdById
  deletedAt
  description
  end
  grantId
  hiddenAt
  id
  isPrivate
  isTemplate
  name
  regularEventInterval
  slug
  start
  teamId
  tenantScopeId
  type
}

enum ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns {
  isPrivate
  isTemplate
}

enum ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns {
  isPrivate
  isTemplate
}

input ProjectSetInput {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

type ProjectStddevFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input ProjectStddevOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type ProjectStddevPopFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input ProjectStddevPopOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type ProjectStddevSampFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input ProjectStddevSampOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input ProjectStreamCursorInput {
  initialValue: ProjectStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectStreamCursorValueInput {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

type ProjectSumFields {
  bannerId: bigint
  budget: Float
  createdById: bigint
  grantId: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input ProjectSumOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type ProjectSupervisors {
  project: Project!
  projectId: bigint!
  teamMember: TeamMember!
  teamMemberId: bigint!
}

type ProjectSupervisorsAggregate {
  aggregate: ProjectSupervisorsAggregateFields
  nodes: [ProjectSupervisors!]!
}

input ProjectSupervisorsAggregateBoolExp {
  count: projectSupervisorsAggregateBoolExpCount
}

input projectSupervisorsAggregateBoolExpCount {
  arguments: [ProjectSupervisorsSelectColumn!]
  distinct: Boolean
  filter: ProjectSupervisorsBoolExp
  predicate: IntComparisonExp!
}

type ProjectSupervisorsAggregateFields {
  avg: ProjectSupervisorsAvgFields
  count(columns: [ProjectSupervisorsSelectColumn!], distinct: Boolean): Int!
  max: ProjectSupervisorsMaxFields
  min: ProjectSupervisorsMinFields
  stddev: ProjectSupervisorsStddevFields
  stddevPop: ProjectSupervisorsStddevPopFields
  stddevSamp: ProjectSupervisorsStddevSampFields
  sum: ProjectSupervisorsSumFields
  varPop: ProjectSupervisorsVarPopFields
  varSamp: ProjectSupervisorsVarSampFields
  variance: ProjectSupervisorsVarianceFields
}

input ProjectSupervisorsAggregateOrderBy {
  avg: ProjectSupervisorsAvgOrderBy
  count: OrderBy
  max: ProjectSupervisorsMaxOrderBy
  min: ProjectSupervisorsMinOrderBy
  stddev: ProjectSupervisorsStddevOrderBy
  stddevPop: ProjectSupervisorsStddevPopOrderBy
  stddevSamp: ProjectSupervisorsStddevSampOrderBy
  sum: ProjectSupervisorsSumOrderBy
  varPop: ProjectSupervisorsVarPopOrderBy
  varSamp: ProjectSupervisorsVarSampOrderBy
  variance: ProjectSupervisorsVarianceOrderBy
}

input ProjectSupervisorsArrRelInsertInput {
  data: [ProjectSupervisorsInsertInput!]!
  onConflict: ProjectSupervisorsOnConflict
}

type ProjectSupervisorsAvgFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsAvgOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsBoolExp {
  _and: [ProjectSupervisorsBoolExp!]
  _not: ProjectSupervisorsBoolExp
  _or: [ProjectSupervisorsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

enum ProjectSupervisorsConstraint {
  project_supervisors_pkey
}

input ProjectSupervisorsIncInput {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

type ProjectSupervisorsMaxFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsMaxOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsMinFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsMinOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsMutationResponse {
  affectedRows: Int!
  returning: [ProjectSupervisors!]!
}

input ProjectSupervisorsOnConflict {
  constraint: ProjectSupervisorsConstraint!
  updateColumns: [ProjectSupervisorsUpdateColumn!]! = []
  where: ProjectSupervisorsBoolExp
}

input ProjectSupervisorsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsPkColumnsInput {
  projectId: bigint!
  teamMemberId: bigint!
}

enum ProjectSupervisorsSelectColumn {
  projectId
  teamMemberId
}

input ProjectSupervisorsSetInput {
  projectId: bigint
  teamMemberId: bigint
}

type ProjectSupervisorsStddevFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsStddevPopFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsStddevSampFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsStreamCursorInput {
  initialValue: ProjectSupervisorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectSupervisorsStreamCursorValueInput {
  projectId: bigint
  teamMemberId: bigint
}

type ProjectSupervisorsSumFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsSumOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

enum ProjectSupervisorsUpdateColumn {
  projectId
  teamMemberId
}

input ProjectSupervisorsUpdates {
  _inc: ProjectSupervisorsIncInput
  _set: ProjectSupervisorsSetInput
  where: ProjectSupervisorsBoolExp!
}

type ProjectSupervisorsVarianceFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarianceOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsVarPopFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsVarSampFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

enum ProjectUpdateColumn {
  bannerId
  budget
  color
  createdAt
  createdById
  deletedAt
  description
  end
  grantId
  hiddenAt
  id
  isPrivate
  isTemplate
  name
  regularEventInterval
  slug
  start
  teamId
  tenantScopeId
  type
}

input ProjectUpdates {
  _inc: ProjectIncInput
  _set: ProjectSetInput
  where: ProjectBoolExp!
}

type ProjectVarianceFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input ProjectVarianceOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type ProjectVarPopFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input ProjectVarPopOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type ProjectVarSampFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input ProjectVarSampOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type Query {
  action(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actionByPk(id: bigint!): Action
  actor(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  actorByPk(id: bigint!): Actor
  actorImage(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImageAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorImageByPk(id: bigint!): ActorImage
  actorTag(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): [ActorTag!]!
  actorTagAggregate(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): ActorTagAggregate!
  actorTagByPk(id: bigint!): ActorTag
  address(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): [Address!]!
  addressAggregate(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): AddressAggregate!
  addressByPk(id: bigint!): Address
  bankAccount(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): [BankAccount!]!
  bankAccountAggregate(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): BankAccountAggregate!
  bankAccountByPk(id: bigint!): BankAccount
  bankInfo(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): [BankInfo!]!
  bankInfoAggregate(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): BankInfoAggregate!
  bankInfoByPk(id: bigint!): BankInfo
  campus(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  campusByPk(id: bigint!): Campus
  campusCluster(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  campusClusterAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  campusClusterByPk(id: bigint!): CampusCluster
  event(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  eventApproval(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventApprovalByPk(id: bigint!): EventApproval
  eventApprovalStep(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovalStepByPk(id: bigint!): EventApprovalStep
  eventApprovalValidator(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): [EventApprovalValidator!]!
  eventApprovalValidatorAggregate(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): EventApprovalValidatorAggregate!
  eventApprovalValidatorByPk(id: bigint!): EventApprovalValidator
  eventByPk(id: bigint!): Event
  eventFavorite(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoriteAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventFavoriteByPk(id: bigint!): EventFavorite
  eventJoin(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventJoinByPk(id: bigint!): EventJoin
  eventOrganize(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizeAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  eventOrganizeByPk(id: bigint!): EventOrganize
  eventSupervisor(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  eventSupervisorByPk(id: bigint!): EventSupervisor
  expense(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expenseAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  expenseByPk(id: bigint!): Expense
  expenseItem(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  expenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments
  expenseItemByPk(id: bigint!): ExpenseItem
  fileUpload(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  fileUploadByPk(id: bigint!): FileUpload
  follow(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  followByPk(id: bigint!): Follow
  form(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  formByPk(id: bigint!): Form
  formSubmission(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  formSubmissionAttachmentsByPk(fileUploadId: bigint!, formSubmissionId: bigint!): FormSubmissionAttachments
  formSubmissionByPk(id: bigint!): FormSubmission
  grant(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  grantAllocate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocateAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantAllocateAttachmentsByPk(fileUploadId: bigint!, grantAllocateId: bigint!): GrantAllocateAttachments
  grantAllocateByPk(id: bigint!): GrantAllocate
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  grantAttachmentsByPk(fileUploadId: bigint!, grantId: bigint!): GrantAttachments
  grantByPk(id: bigint!): Grant
  legalUnit(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  legalUnitAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  legalUnitByPk(id: bigint!): LegalUnit
  legalUnitLocation(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  legalUnitLocationByPk(id: bigint!): LegalUnitLocation
  location(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  locationByPk(id: bigint!): Location
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  locationImagesByPk(fileUploadId: bigint!, locationId: bigint!): LocationImages
  mission(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  missionByPk(id: bigint!): Mission
  missionJoin(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missionJoinByPk(id: bigint!): MissionJoin
  project(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  projectByPk(id: bigint!): Project
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  social(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  socialByPk(id: bigint!): Social
  tag(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  tagByPk(id: bigint!): Tag
  team(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  teamByPk(id: bigint!): Team
  teamDocument(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): [TeamDocument!]!
  teamDocumentAggregate(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): TeamDocumentAggregate!
  teamDocumentByPk(id: bigint!): TeamDocument
  teamHistory(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoryAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamHistoryByPk(id: bigint!): TeamHistory
  teamJoin(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamJoinByPk(id: bigint!): TeamJoin
  teamMember(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMemberAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMemberByPk(id: bigint!): TeamMember
  teamMemberRole(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): [TeamMemberRole!]!
  teamMemberRoleAggregate(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): TeamMemberRoleAggregate!
  teamMemberRoleByPk(id: bigint!): TeamMemberRole
  teamRole(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): [TeamRole!]!
  teamRoleAggregate(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): TeamRoleAggregate!
  teamRoleByPk(id: bigint!): TeamRole
  tenant(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  tenantAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  tenantByPk(id: bigint!): Tenant
  tenantMember(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): [TenantMember!]!
  tenantMemberAggregate(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): TenantMemberAggregate!
  tenantMemberByPk(id: bigint!): TenantMember
  tenantMemberRole(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): [TenantMemberRole!]!
  tenantMemberRoleAggregate(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): TenantMemberRoleAggregate!
  tenantMemberRoleByPk(id: bigint!): TenantMemberRole
  tenantRole(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): [TenantRole!]!
  tenantRoleAggregate(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): TenantRoleAggregate!
  tenantRoleByPk(id: bigint!): TenantRole
  transaction(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  transactionAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  transactionAttachments(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): [TransactionAttachments!]!
  transactionAttachmentsAggregate(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): TransactionAttachmentsAggregate!
  transactionAttachmentsByPk(fileUploadId: bigint!, transactionId: bigint!): TransactionAttachments
  transactionByPk(id: bigint!): Transaction
  user(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  userAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
  userByPk(id: bigint!): User
  me: UserLogin!
  searchLocation(query: String!): [GeocodeAddress!]!
  getFirstResultLink(query: String!): String!
  eventLogs(id: bigint!): [Log!]!
  transactionLogs(id: bigint!): [Log!]!
  teamLogs(id: bigint!): [Log!]!
  tenantLogs(id: bigint!): [Log!]!
  searchFrenchCompany(query: SearchCompanyQuery!): [CompanyInfo!]!
  processReceipt(key: String!): ProcessedReceipt
}

scalar smallint

input SmallintComparisonExp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _isNull: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type Social {
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  order: smallint!
  pseudo: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String!
  url: String!
}

type SocialAggregate {
  aggregate: SocialAggregateFields
  nodes: [Social!]!
}

input SocialAggregateBoolExp {
  count: socialAggregateBoolExpCount
}

input socialAggregateBoolExpCount {
  arguments: [SocialSelectColumn!]
  distinct: Boolean
  filter: SocialBoolExp
  predicate: IntComparisonExp!
}

type SocialAggregateFields {
  avg: SocialAvgFields
  count(columns: [SocialSelectColumn!], distinct: Boolean): Int!
  max: SocialMaxFields
  min: SocialMinFields
  stddev: SocialStddevFields
  stddevPop: SocialStddevPopFields
  stddevSamp: SocialStddevSampFields
  sum: SocialSumFields
  varPop: SocialVarPopFields
  varSamp: SocialVarSampFields
  variance: SocialVarianceFields
}

input SocialAggregateOrderBy {
  avg: SocialAvgOrderBy
  count: OrderBy
  max: SocialMaxOrderBy
  min: SocialMinOrderBy
  stddev: SocialStddevOrderBy
  stddevPop: SocialStddevPopOrderBy
  stddevSamp: SocialStddevSampOrderBy
  sum: SocialSumOrderBy
  varPop: SocialVarPopOrderBy
  varSamp: SocialVarSampOrderBy
  variance: SocialVarianceOrderBy
}

input SocialArrRelInsertInput {
  data: [SocialInsertInput!]!
  onConflict: SocialOnConflict
}

type SocialAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantScopeId: Float
}

input SocialAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

input SocialBoolExp {
  _and: [SocialBoolExp!]
  _not: SocialBoolExp
  _or: [SocialBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  order: SmallintComparisonExp
  pseudo: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

enum SocialConstraint {
  social_pkey
}

input SocialIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantScopeId: bigint
}

input SocialInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
  url: String
}

type SocialMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantScopeId: bigint
  type: String
  url: String
}

input SocialMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  url: OrderBy
}

type SocialMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantScopeId: bigint
  type: String
  url: String
}

input SocialMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  url: OrderBy
}

type SocialMutationResponse {
  affectedRows: Int!
  returning: [Social!]!
}

input SocialOnConflict {
  constraint: SocialConstraint!
  updateColumns: [SocialUpdateColumn!]! = []
  where: SocialBoolExp
}

input SocialOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  url: OrderBy
}

input SocialPkColumnsInput {
  id: bigint!
}

enum SocialSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  order
  pseudo
  tenantScopeId
  type
  url
}

input SocialSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantScopeId: bigint
  type: String
  url: String
}

type SocialStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantScopeId: Float
}

input SocialStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

type SocialStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantScopeId: Float
}

input SocialStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

type SocialStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantScopeId: Float
}

input SocialStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

input SocialStreamCursorInput {
  initialValue: SocialStreamCursorValueInput!
  ordering: CursorOrdering
}

input SocialStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantScopeId: bigint
  type: String
  url: String
}

type SocialSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantScopeId: bigint
}

input SocialSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

enum SocialUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  order
  pseudo
  tenantScopeId
  type
  url
}

input SocialUpdates {
  _inc: SocialIncInput
  _set: SocialSetInput
  where: SocialBoolExp!
}

type SocialVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantScopeId: Float
}

input SocialVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

type SocialVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantScopeId: Float
}

input SocialVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

type SocialVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantScopeId: Float
}

input SocialVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantScopeId: OrderBy
}

input StringArrayComparisonExp {
  _containedIn: [String!]
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _isNull: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _iregex: String
  _isNull: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _niregex: String
  _nlike: String
  _nregex: String
  _nsimilar: String
  _regex: String
  _similar: String
}

type Subscription {
  action(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actionByPk(id: bigint!): Action
  actionStream(batchSize: Int!, cursor: [ActionStreamCursorInput]!, where: ActionBoolExp): [Action!]!
  actor(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  actorByPk(id: bigint!): Actor
  actorImage(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImageAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorImageByPk(id: bigint!): ActorImage
  actorImageStream(batchSize: Int!, cursor: [ActorImageStreamCursorInput]!, where: ActorImageBoolExp): [ActorImage!]!
  actorStream(batchSize: Int!, cursor: [ActorStreamCursorInput]!, where: ActorBoolExp): [Actor!]!
  actorTag(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): [ActorTag!]!
  actorTagAggregate(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): ActorTagAggregate!
  actorTagByPk(id: bigint!): ActorTag
  actorTagStream(batchSize: Int!, cursor: [ActorTagStreamCursorInput]!, where: ActorTagBoolExp): [ActorTag!]!
  address(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): [Address!]!
  addressAggregate(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): AddressAggregate!
  addressByPk(id: bigint!): Address
  addressStream(batchSize: Int!, cursor: [AddressStreamCursorInput]!, where: AddressBoolExp): [Address!]!
  bankAccount(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): [BankAccount!]!
  bankAccountAggregate(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): BankAccountAggregate!
  bankAccountByPk(id: bigint!): BankAccount
  bankAccountStream(batchSize: Int!, cursor: [BankAccountStreamCursorInput]!, where: BankAccountBoolExp): [BankAccount!]!
  bankInfo(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): [BankInfo!]!
  bankInfoAggregate(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): BankInfoAggregate!
  bankInfoByPk(id: bigint!): BankInfo
  bankInfoStream(batchSize: Int!, cursor: [BankInfoStreamCursorInput]!, where: BankInfoBoolExp): [BankInfo!]!
  campus(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  campusByPk(id: bigint!): Campus
  campusCluster(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  campusClusterAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  campusClusterByPk(id: bigint!): CampusCluster
  campusClusterStream(batchSize: Int!, cursor: [CampusClusterStreamCursorInput]!, where: CampusClusterBoolExp): [CampusCluster!]!
  campusStream(batchSize: Int!, cursor: [CampusStreamCursorInput]!, where: CampusBoolExp): [Campus!]!
  event(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  eventApproval(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventApprovalByPk(id: bigint!): EventApproval
  eventApprovalStep(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovalStepByPk(id: bigint!): EventApprovalStep
  eventApprovalStepStream(batchSize: Int!, cursor: [EventApprovalStepStreamCursorInput]!, where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStream(batchSize: Int!, cursor: [EventApprovalStreamCursorInput]!, where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalValidator(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): [EventApprovalValidator!]!
  eventApprovalValidatorAggregate(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): EventApprovalValidatorAggregate!
  eventApprovalValidatorByPk(id: bigint!): EventApprovalValidator
  eventApprovalValidatorStream(batchSize: Int!, cursor: [EventApprovalValidatorStreamCursorInput]!, where: EventApprovalValidatorBoolExp): [EventApprovalValidator!]!
  eventByPk(id: bigint!): Event
  eventFavorite(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoriteAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventFavoriteByPk(id: bigint!): EventFavorite
  eventFavoriteStream(batchSize: Int!, cursor: [EventFavoriteStreamCursorInput]!, where: EventFavoriteBoolExp): [EventFavorite!]!
  eventJoin(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventJoinByPk(id: bigint!): EventJoin
  eventJoinStream(batchSize: Int!, cursor: [EventJoinStreamCursorInput]!, where: EventJoinBoolExp): [EventJoin!]!
  eventOrganize(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizeAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  eventOrganizeByPk(id: bigint!): EventOrganize
  eventOrganizeStream(batchSize: Int!, cursor: [EventOrganizeStreamCursorInput]!, where: EventOrganizeBoolExp): [EventOrganize!]!
  eventStream(batchSize: Int!, cursor: [EventStreamCursorInput]!, where: EventBoolExp): [Event!]!
  eventSupervisor(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  eventSupervisorByPk(id: bigint!): EventSupervisor
  eventSupervisorStream(batchSize: Int!, cursor: [EventSupervisorStreamCursorInput]!, where: EventSupervisorBoolExp): [EventSupervisor!]!
  expense(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expenseAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  expenseByPk(id: bigint!): Expense
  expenseItem(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  expenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments
  expenseItemAttachmentsStream(batchSize: Int!, cursor: [ExpenseItemAttachmentsStreamCursorInput]!, where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemByPk(id: bigint!): ExpenseItem
  expenseItemStream(batchSize: Int!, cursor: [ExpenseItemStreamCursorInput]!, where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseStream(batchSize: Int!, cursor: [ExpenseStreamCursorInput]!, where: ExpenseBoolExp): [Expense!]!
  fileUpload(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  fileUploadByPk(id: bigint!): FileUpload
  fileUploadStream(batchSize: Int!, cursor: [FileUploadStreamCursorInput]!, where: FileUploadBoolExp): [FileUpload!]!
  follow(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  followByPk(id: bigint!): Follow
  followStream(batchSize: Int!, cursor: [FollowStreamCursorInput]!, where: FollowBoolExp): [Follow!]!
  form(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  formByPk(id: bigint!): Form
  formStream(batchSize: Int!, cursor: [FormStreamCursorInput]!, where: FormBoolExp): [Form!]!
  formSubmission(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  formSubmissionAttachmentsByPk(fileUploadId: bigint!, formSubmissionId: bigint!): FormSubmissionAttachments
  formSubmissionAttachmentsStream(batchSize: Int!, cursor: [FormSubmissionAttachmentsStreamCursorInput]!, where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionByPk(id: bigint!): FormSubmission
  formSubmissionStream(batchSize: Int!, cursor: [FormSubmissionStreamCursorInput]!, where: FormSubmissionBoolExp): [FormSubmission!]!
  grant(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  grantAllocate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocateAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantAllocateAttachmentsByPk(fileUploadId: bigint!, grantAllocateId: bigint!): GrantAllocateAttachments
  grantAllocateAttachmentsStream(batchSize: Int!, cursor: [GrantAllocateAttachmentsStreamCursorInput]!, where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateByPk(id: bigint!): GrantAllocate
  grantAllocateStream(batchSize: Int!, cursor: [GrantAllocateStreamCursorInput]!, where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  grantAttachmentsByPk(fileUploadId: bigint!, grantId: bigint!): GrantAttachments
  grantAttachmentsStream(batchSize: Int!, cursor: [GrantAttachmentsStreamCursorInput]!, where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantByPk(id: bigint!): Grant
  grantStream(batchSize: Int!, cursor: [GrantStreamCursorInput]!, where: GrantBoolExp): [Grant!]!
  legalUnit(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  legalUnitAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  legalUnitByPk(id: bigint!): LegalUnit
  legalUnitLocation(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  legalUnitLocationByPk(id: bigint!): LegalUnitLocation
  legalUnitLocationStream(batchSize: Int!, cursor: [LegalUnitLocationStreamCursorInput]!, where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitStream(batchSize: Int!, cursor: [LegalUnitStreamCursorInput]!, where: LegalUnitBoolExp): [LegalUnit!]!
  location(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  locationByPk(id: bigint!): Location
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  locationImagesByPk(fileUploadId: bigint!, locationId: bigint!): LocationImages
  locationImagesStream(batchSize: Int!, cursor: [LocationImagesStreamCursorInput]!, where: LocationImagesBoolExp): [LocationImages!]!
  locationStream(batchSize: Int!, cursor: [LocationStreamCursorInput]!, where: LocationBoolExp): [Location!]!
  mission(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  missionByPk(id: bigint!): Mission
  missionJoin(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missionJoinByPk(id: bigint!): MissionJoin
  missionJoinStream(batchSize: Int!, cursor: [MissionJoinStreamCursorInput]!, where: MissionJoinBoolExp): [MissionJoin!]!
  missionStream(batchSize: Int!, cursor: [MissionStreamCursorInput]!, where: MissionBoolExp): [Mission!]!
  project(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  projectByPk(id: bigint!): Project
  projectStream(batchSize: Int!, cursor: [ProjectStreamCursorInput]!, where: ProjectBoolExp): [Project!]!
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  projectSupervisorsStream(batchSize: Int!, cursor: [ProjectSupervisorsStreamCursorInput]!, where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  social(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  socialByPk(id: bigint!): Social
  socialStream(batchSize: Int!, cursor: [SocialStreamCursorInput]!, where: SocialBoolExp): [Social!]!
  tag(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  tagByPk(id: bigint!): Tag
  tagStream(batchSize: Int!, cursor: [TagStreamCursorInput]!, where: TagBoolExp): [Tag!]!
  team(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  teamByPk(id: bigint!): Team
  teamDocument(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): [TeamDocument!]!
  teamDocumentAggregate(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): TeamDocumentAggregate!
  teamDocumentByPk(id: bigint!): TeamDocument
  teamDocumentStream(batchSize: Int!, cursor: [TeamDocumentStreamCursorInput]!, where: TeamDocumentBoolExp): [TeamDocument!]!
  teamHistory(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoryAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamHistoryByPk(id: bigint!): TeamHistory
  teamHistoryStream(batchSize: Int!, cursor: [TeamHistoryStreamCursorInput]!, where: TeamHistoryBoolExp): [TeamHistory!]!
  teamJoin(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamJoinByPk(id: bigint!): TeamJoin
  teamJoinStream(batchSize: Int!, cursor: [TeamJoinStreamCursorInput]!, where: TeamJoinBoolExp): [TeamJoin!]!
  teamMember(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMemberAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMemberByPk(id: bigint!): TeamMember
  teamMemberRole(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): [TeamMemberRole!]!
  teamMemberRoleAggregate(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): TeamMemberRoleAggregate!
  teamMemberRoleByPk(id: bigint!): TeamMemberRole
  teamMemberRoleStream(batchSize: Int!, cursor: [TeamMemberRoleStreamCursorInput]!, where: TeamMemberRoleBoolExp): [TeamMemberRole!]!
  teamMemberStream(batchSize: Int!, cursor: [TeamMemberStreamCursorInput]!, where: TeamMemberBoolExp): [TeamMember!]!
  teamRole(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): [TeamRole!]!
  teamRoleAggregate(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): TeamRoleAggregate!
  teamRoleByPk(id: bigint!): TeamRole
  teamRoleStream(batchSize: Int!, cursor: [TeamRoleStreamCursorInput]!, where: TeamRoleBoolExp): [TeamRole!]!
  teamStream(batchSize: Int!, cursor: [TeamStreamCursorInput]!, where: TeamBoolExp): [Team!]!
  tenant(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  tenantAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  tenantByPk(id: bigint!): Tenant
  tenantMember(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): [TenantMember!]!
  tenantMemberAggregate(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): TenantMemberAggregate!
  tenantMemberByPk(id: bigint!): TenantMember
  tenantMemberRole(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): [TenantMemberRole!]!
  tenantMemberRoleAggregate(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): TenantMemberRoleAggregate!
  tenantMemberRoleByPk(id: bigint!): TenantMemberRole
  tenantMemberRoleStream(batchSize: Int!, cursor: [TenantMemberRoleStreamCursorInput]!, where: TenantMemberRoleBoolExp): [TenantMemberRole!]!
  tenantMemberStream(batchSize: Int!, cursor: [TenantMemberStreamCursorInput]!, where: TenantMemberBoolExp): [TenantMember!]!
  tenantRole(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): [TenantRole!]!
  tenantRoleAggregate(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): TenantRoleAggregate!
  tenantRoleByPk(id: bigint!): TenantRole
  tenantRoleStream(batchSize: Int!, cursor: [TenantRoleStreamCursorInput]!, where: TenantRoleBoolExp): [TenantRole!]!
  tenantStream(batchSize: Int!, cursor: [TenantStreamCursorInput]!, where: TenantBoolExp): [Tenant!]!
  transaction(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  transactionAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  transactionAttachments(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): [TransactionAttachments!]!
  transactionAttachmentsAggregate(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): TransactionAttachmentsAggregate!
  transactionAttachmentsByPk(fileUploadId: bigint!, transactionId: bigint!): TransactionAttachments
  transactionAttachmentsStream(batchSize: Int!, cursor: [TransactionAttachmentsStreamCursorInput]!, where: TransactionAttachmentsBoolExp): [TransactionAttachments!]!
  transactionByPk(id: bigint!): Transaction
  transactionStream(batchSize: Int!, cursor: [TransactionStreamCursorInput]!, where: TransactionBoolExp): [Transaction!]!
  user(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  userAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
  userByPk(id: bigint!): User
  userStream(batchSize: Int!, cursor: [UserStreamCursorInput]!, where: UserBoolExp): [User!]!
}

type Tag {
  actorTag: ActorTag
  color: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  hiddenAt: timestamptz
  id: bigint!
  image: FileUpload
  imageId: bigint
  name: String!
  slug: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String!
}

type TagAggregate {
  aggregate: TagAggregateFields
  nodes: [Tag!]!
}

input TagAggregateBoolExp {
  count: tagAggregateBoolExpCount
}

input tagAggregateBoolExpCount {
  arguments: [TagSelectColumn!]
  distinct: Boolean
  filter: TagBoolExp
  predicate: IntComparisonExp!
}

type TagAggregateFields {
  avg: TagAvgFields
  count(columns: [TagSelectColumn!], distinct: Boolean): Int!
  max: TagMaxFields
  min: TagMinFields
  stddev: TagStddevFields
  stddevPop: TagStddevPopFields
  stddevSamp: TagStddevSampFields
  sum: TagSumFields
  varPop: TagVarPopFields
  varSamp: TagVarSampFields
  variance: TagVarianceFields
}

input TagAggregateOrderBy {
  avg: TagAvgOrderBy
  count: OrderBy
  max: TagMaxOrderBy
  min: TagMinOrderBy
  stddev: TagStddevOrderBy
  stddevPop: TagStddevPopOrderBy
  stddevSamp: TagStddevSampOrderBy
  sum: TagSumOrderBy
  varPop: TagVarPopOrderBy
  varSamp: TagVarSampOrderBy
  variance: TagVarianceOrderBy
}

input TagArrRelInsertInput {
  data: [TagInsertInput!]!
  onConflict: TagOnConflict
}

type TagAvgFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input TagAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

input TagBoolExp {
  _and: [TagBoolExp!]
  _not: TagBoolExp
  _or: [TagBoolExp!]
  actorTag: ActorTagBoolExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  image: FileUploadBoolExp
  imageId: BigintComparisonExp
  name: StringComparisonExp
  slug: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
}

enum TagConstraint {
  tag_pkey
}

input TagIncInput {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
}

input TagInsertInput {
  actorTag: ActorTagObjRelInsertInput
  color: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  image: FileUploadObjRelInsertInput
  imageId: bigint
  name: String
  slug: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
}

type TagMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantScopeId: bigint
  type: String
}

input TagMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type TagMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantScopeId: bigint
  type: String
}

input TagMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type TagMutationResponse {
  affectedRows: Int!
  returning: [Tag!]!
}

input TagObjRelInsertInput {
  data: TagInsertInput!
  onConflict: TagOnConflict
}

input TagOnConflict {
  constraint: TagConstraint!
  updateColumns: [TagUpdateColumn!]! = []
  where: TagBoolExp
}

input TagOrderBy {
  actorTag: ActorTagOrderBy
  color: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  image: FileUploadOrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

input TagPkColumnsInput {
  id: bigint!
}

enum TagSelectColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  imageId
  name
  slug
  tenantScopeId
  type
}

input TagSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantScopeId: bigint
  type: String
}

type TagStddevFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input TagStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type TagStddevPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input TagStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type TagStddevSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input TagStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

input TagStreamCursorInput {
  initialValue: TagStreamCursorValueInput!
  ordering: CursorOrdering
}

input TagStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantScopeId: bigint
  type: String
}

type TagSumFields {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantScopeId: bigint
}

input TagSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

enum TagUpdateColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  imageId
  name
  slug
  tenantScopeId
  type
}

input TagUpdates {
  _inc: TagIncInput
  _set: TagSetInput
  where: TagBoolExp!
}

type TagVarianceFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input TagVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type TagVarPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input TagVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type TagVarSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantScopeId: Float
}

input TagVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantScopeId: OrderBy
}

type Team {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actor: Actor!
  actorId: bigint!
  bankAccounts(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): [BankAccount!]!
  bankAccountsAggregate(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): BankAccountAggregate!
  childrenTeams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  childrenTeamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String!
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  grantFund: LegalUnit
  grants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  hiddenAt: timestamptz
  id: bigint!
  isJoinFormActive: Boolean!
  isOnboardingComplete: Boolean!
  joinForm: Form!
  joinFormId: bigint!
  managersCategoryName: String!
  membersCategoryName: String!
  membershipDuration: String!
  membershipFees: Float!
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  parent: Team
  parentId: bigint
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  slug: String!
  teamDocuments(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): [TeamDocument!]!
  teamDocumentsAggregate(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): TeamDocumentAggregate!
  teamHistories(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoriesAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamRoles(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): [TeamRole!]!
  teamRolesAggregate(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): TeamRoleAggregate!
  tenantGrantFundId: bigint
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String!
  video: FileUpload
  videoId: bigint
}

type TeamAggregate {
  aggregate: TeamAggregateFields
  nodes: [Team!]!
}

input TeamAggregateBoolExp {
  bool_and: teamAggregateBoolExpBool_and
  bool_or: teamAggregateBoolExpBool_or
  count: teamAggregateBoolExpCount
}

input teamAggregateBoolExpBool_and {
  arguments: TeamSelectColumnTeamAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TeamBoolExp
  predicate: BooleanComparisonExp!
}

input teamAggregateBoolExpBool_or {
  arguments: TeamSelectColumnTeamAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TeamBoolExp
  predicate: BooleanComparisonExp!
}

input teamAggregateBoolExpCount {
  arguments: [TeamSelectColumn!]
  distinct: Boolean
  filter: TeamBoolExp
  predicate: IntComparisonExp!
}

type TeamAggregateFields {
  avg: TeamAvgFields
  count(columns: [TeamSelectColumn!], distinct: Boolean): Int!
  max: TeamMaxFields
  min: TeamMinFields
  stddev: TeamStddevFields
  stddevPop: TeamStddevPopFields
  stddevSamp: TeamStddevSampFields
  sum: TeamSumFields
  varPop: TeamVarPopFields
  varSamp: TeamVarSampFields
  variance: TeamVarianceFields
}

input TeamAggregateOrderBy {
  avg: TeamAvgOrderBy
  count: OrderBy
  max: TeamMaxOrderBy
  min: TeamMinOrderBy
  stddev: TeamStddevOrderBy
  stddevPop: TeamStddevPopOrderBy
  stddevSamp: TeamStddevSampOrderBy
  sum: TeamSumOrderBy
  varPop: TeamVarPopOrderBy
  varSamp: TeamVarSampOrderBy
  variance: TeamVarianceOrderBy
}

input TeamArrRelInsertInput {
  data: [TeamInsertInput!]!
  onConflict: TeamOnConflict
}

type TeamAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantScopeId: Float
  videoId: Float
}

input TeamAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

input TeamBoolExp {
  _and: [TeamBoolExp!]
  _not: TeamBoolExp
  _or: [TeamBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bankAccounts: BankAccountBoolExp
  bankAccountsAggregate: BankAccountAggregateBoolExp
  childrenTeams: TeamBoolExp
  childrenTeamsAggregate: TeamAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  directorsCategoryName: StringComparisonExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  expectingPresidentEmail: StringComparisonExp
  expectingSecretaryEmail: StringComparisonExp
  expectingTreasurerEmail: StringComparisonExp
  grantFund: LegalUnitBoolExp
  grants: GrantBoolExp
  grantsAggregate: GrantAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isJoinFormActive: BooleanComparisonExp
  isOnboardingComplete: BooleanComparisonExp
  joinForm: FormBoolExp
  joinFormId: BigintComparisonExp
  managersCategoryName: StringComparisonExp
  membersCategoryName: StringComparisonExp
  membershipDuration: StringComparisonExp
  membershipFees: FloatComparisonExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  parent: TeamBoolExp
  parentId: BigintComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  slug: StringComparisonExp
  teamDocuments: TeamDocumentBoolExp
  teamDocumentsAggregate: TeamDocumentAggregateBoolExp
  teamHistories: TeamHistoryBoolExp
  teamHistoriesAggregate: TeamHistoryAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamRoles: TeamRoleBoolExp
  teamRolesAggregate: TeamRoleAggregateBoolExp
  tenantGrantFundId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
  video: FileUploadBoolExp
  videoId: BigintComparisonExp
}

enum TeamConstraint {
  team_actor_id_unique
  team_join_form_id_unique
  team_pkey
  team_slug_unique
}

type TeamDocument {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  file: FileUpload
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  team: Team
  teamId: bigint
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String!
  yearVersion: smallint
}

type TeamDocumentAggregate {
  aggregate: TeamDocumentAggregateFields
  nodes: [TeamDocument!]!
}

input TeamDocumentAggregateBoolExp {
  count: teamDocumentAggregateBoolExpCount
}

input teamDocumentAggregateBoolExpCount {
  arguments: [TeamDocumentSelectColumn!]
  distinct: Boolean
  filter: TeamDocumentBoolExp
  predicate: IntComparisonExp!
}

type TeamDocumentAggregateFields {
  avg: TeamDocumentAvgFields
  count(columns: [TeamDocumentSelectColumn!], distinct: Boolean): Int!
  max: TeamDocumentMaxFields
  min: TeamDocumentMinFields
  stddev: TeamDocumentStddevFields
  stddevPop: TeamDocumentStddevPopFields
  stddevSamp: TeamDocumentStddevSampFields
  sum: TeamDocumentSumFields
  varPop: TeamDocumentVarPopFields
  varSamp: TeamDocumentVarSampFields
  variance: TeamDocumentVarianceFields
}

input TeamDocumentAggregateOrderBy {
  avg: TeamDocumentAvgOrderBy
  count: OrderBy
  max: TeamDocumentMaxOrderBy
  min: TeamDocumentMinOrderBy
  stddev: TeamDocumentStddevOrderBy
  stddevPop: TeamDocumentStddevPopOrderBy
  stddevSamp: TeamDocumentStddevSampOrderBy
  sum: TeamDocumentSumOrderBy
  varPop: TeamDocumentVarPopOrderBy
  varSamp: TeamDocumentVarSampOrderBy
  variance: TeamDocumentVarianceOrderBy
}

input TeamDocumentArrRelInsertInput {
  data: [TeamDocumentInsertInput!]!
  onConflict: TeamDocumentOnConflict
}

type TeamDocumentAvgFields {
  createdById: Float
  fileId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
  yearVersion: Float
}

input TeamDocumentAvgOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

input TeamDocumentBoolExp {
  _and: [TeamDocumentBoolExp!]
  _not: TeamDocumentBoolExp
  _or: [TeamDocumentBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  file: FileUploadBoolExp
  fileId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
  yearVersion: SmallintComparisonExp
}

enum TeamDocumentConstraint {
  team_document_file_id_unique
  team_document_pkey
}

input TeamDocumentIncInput {
  createdById: bigint
  fileId: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
  yearVersion: smallint
}

input TeamDocumentInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  file: FileUploadObjRelInsertInput
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
  yearVersion: smallint
}

type TeamDocumentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantScopeId: bigint
  type: String
  yearVersion: smallint
}

input TeamDocumentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type TeamDocumentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantScopeId: bigint
  type: String
  yearVersion: smallint
}

input TeamDocumentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type TeamDocumentMutationResponse {
  affectedRows: Int!
  returning: [TeamDocument!]!
}

input TeamDocumentObjRelInsertInput {
  data: TeamDocumentInsertInput!
  onConflict: TeamDocumentOnConflict
}

input TeamDocumentOnConflict {
  constraint: TeamDocumentConstraint!
  updateColumns: [TeamDocumentUpdateColumn!]! = []
  where: TeamDocumentBoolExp
}

input TeamDocumentOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  file: FileUploadOrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

input TeamDocumentPkColumnsInput {
  id: bigint!
}

enum TeamDocumentSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  fileId
  hiddenAt
  id
  name
  teamId
  tenantScopeId
  type
  yearVersion
}

input TeamDocumentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantScopeId: bigint
  type: String
  yearVersion: smallint
}

type TeamDocumentStddevFields {
  createdById: Float
  fileId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
  yearVersion: Float
}

input TeamDocumentStddevOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

type TeamDocumentStddevPopFields {
  createdById: Float
  fileId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
  yearVersion: Float
}

input TeamDocumentStddevPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

type TeamDocumentStddevSampFields {
  createdById: Float
  fileId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
  yearVersion: Float
}

input TeamDocumentStddevSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

input TeamDocumentStreamCursorInput {
  initialValue: TeamDocumentStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamDocumentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantScopeId: bigint
  type: String
  yearVersion: smallint
}

type TeamDocumentSumFields {
  createdById: bigint
  fileId: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
  yearVersion: smallint
}

input TeamDocumentSumOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

enum TeamDocumentUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  fileId
  hiddenAt
  id
  name
  teamId
  tenantScopeId
  type
  yearVersion
}

input TeamDocumentUpdates {
  _inc: TeamDocumentIncInput
  _set: TeamDocumentSetInput
  where: TeamDocumentBoolExp!
}

type TeamDocumentVarianceFields {
  createdById: Float
  fileId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
  yearVersion: Float
}

input TeamDocumentVarianceOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

type TeamDocumentVarPopFields {
  createdById: Float
  fileId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
  yearVersion: Float
}

input TeamDocumentVarPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

type TeamDocumentVarSampFields {
  createdById: Float
  fileId: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
  yearVersion: Float
}

input TeamDocumentVarSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  yearVersion: OrderBy
}

type TeamHistory {
  approximateDate: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz!
  eventType: String!
  hiddenAt: timestamptz
  id: bigint!
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type TeamHistoryAggregate {
  aggregate: TeamHistoryAggregateFields
  nodes: [TeamHistory!]!
}

input TeamHistoryAggregateBoolExp {
  count: teamHistoryAggregateBoolExpCount
}

input teamHistoryAggregateBoolExpCount {
  arguments: [TeamHistorySelectColumn!]
  distinct: Boolean
  filter: TeamHistoryBoolExp
  predicate: IntComparisonExp!
}

type TeamHistoryAggregateFields {
  avg: TeamHistoryAvgFields
  count(columns: [TeamHistorySelectColumn!], distinct: Boolean): Int!
  max: TeamHistoryMaxFields
  min: TeamHistoryMinFields
  stddev: TeamHistoryStddevFields
  stddevPop: TeamHistoryStddevPopFields
  stddevSamp: TeamHistoryStddevSampFields
  sum: TeamHistorySumFields
  varPop: TeamHistoryVarPopFields
  varSamp: TeamHistoryVarSampFields
  variance: TeamHistoryVarianceFields
}

input TeamHistoryAggregateOrderBy {
  avg: TeamHistoryAvgOrderBy
  count: OrderBy
  max: TeamHistoryMaxOrderBy
  min: TeamHistoryMinOrderBy
  stddev: TeamHistoryStddevOrderBy
  stddevPop: TeamHistoryStddevPopOrderBy
  stddevSamp: TeamHistoryStddevSampOrderBy
  sum: TeamHistorySumOrderBy
  varPop: TeamHistoryVarPopOrderBy
  varSamp: TeamHistoryVarSampOrderBy
  variance: TeamHistoryVarianceOrderBy
}

input TeamHistoryArrRelInsertInput {
  data: [TeamHistoryInsertInput!]!
  onConflict: TeamHistoryOnConflict
}

type TeamHistoryAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamHistoryAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input TeamHistoryBoolExp {
  _and: [TeamHistoryBoolExp!]
  _not: TeamHistoryBoolExp
  _or: [TeamHistoryBoolExp!]
  approximateDate: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventDate: TimestamptzComparisonExp
  eventType: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum TeamHistoryConstraint {
  team_history_pkey
}

input TeamHistoryIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamHistoryInsertInput {
  approximateDate: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type TeamHistoryMaxFields {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamHistoryMaxOrderBy {
  approximateDate: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventDate: OrderBy
  eventType: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamHistoryMinFields {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamHistoryMinOrderBy {
  approximateDate: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventDate: OrderBy
  eventType: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamHistoryMutationResponse {
  affectedRows: Int!
  returning: [TeamHistory!]!
}

input TeamHistoryOnConflict {
  constraint: TeamHistoryConstraint!
  updateColumns: [TeamHistoryUpdateColumn!]! = []
  where: TeamHistoryBoolExp
}

input TeamHistoryOrderBy {
  approximateDate: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventDate: OrderBy
  eventType: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input TeamHistoryPkColumnsInput {
  id: bigint!
}

enum TeamHistorySelectColumn {
  approximateDate
  createdAt
  createdById
  deletedAt
  eventDate
  eventType
  hiddenAt
  id
  teamId
  tenantScopeId
}

input TeamHistorySetInput {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

type TeamHistoryStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamHistoryStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamHistoryStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamHistoryStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamHistoryStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamHistoryStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input TeamHistoryStreamCursorInput {
  initialValue: TeamHistoryStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamHistoryStreamCursorValueInput {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

type TeamHistorySumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamHistorySumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum TeamHistoryUpdateColumn {
  approximateDate
  createdAt
  createdById
  deletedAt
  eventDate
  eventType
  hiddenAt
  id
  teamId
  tenantScopeId
}

input TeamHistoryUpdates {
  _inc: TeamHistoryIncInput
  _set: TeamHistorySetInput
  where: TeamHistoryBoolExp!
}

type TeamHistoryVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamHistoryVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamHistoryVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamHistoryVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamHistoryVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamHistoryVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input TeamIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  joinFormId: bigint
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantScopeId: bigint
  videoId: bigint
}

input TeamInsertInput {
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorId: bigint
  bankAccounts: BankAccountArrRelInsertInput
  childrenTeams: TeamArrRelInsertInput
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  eventOrganizes: EventOrganizeArrRelInsertInput
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  grantFund: LegalUnitObjRelInsertInput
  grants: GrantArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isJoinFormActive: Boolean
  isOnboardingComplete: Boolean
  joinForm: FormObjRelInsertInput
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  missions: MissionArrRelInsertInput
  parent: TeamObjRelInsertInput
  parentId: bigint
  projects: ProjectArrRelInsertInput
  slug: String
  teamDocuments: TeamDocumentArrRelInsertInput
  teamHistories: TeamHistoryArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamRoles: TeamRoleArrRelInsertInput
  tenantGrantFundId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
  video: FileUploadObjRelInsertInput
  videoId: bigint
}

type TeamJoin {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!
  joinedBy: User!
  joinedById: bigint!
  processedAt: timestamptz
  processedBy: User
  processedById: bigint
  state: String!
  team: Team!
  teamId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type TeamJoinAggregate {
  aggregate: TeamJoinAggregateFields
  nodes: [TeamJoin!]!
}

input TeamJoinAggregateBoolExp {
  count: teamJoinAggregateBoolExpCount
}

input teamJoinAggregateBoolExpCount {
  arguments: [TeamJoinSelectColumn!]
  distinct: Boolean
  filter: TeamJoinBoolExp
  predicate: IntComparisonExp!
}

type TeamJoinAggregateFields {
  avg: TeamJoinAvgFields
  count(columns: [TeamJoinSelectColumn!], distinct: Boolean): Int!
  max: TeamJoinMaxFields
  min: TeamJoinMinFields
  stddev: TeamJoinStddevFields
  stddevPop: TeamJoinStddevPopFields
  stddevSamp: TeamJoinStddevSampFields
  sum: TeamJoinSumFields
  varPop: TeamJoinVarPopFields
  varSamp: TeamJoinVarSampFields
  variance: TeamJoinVarianceFields
}

input TeamJoinAggregateOrderBy {
  avg: TeamJoinAvgOrderBy
  count: OrderBy
  max: TeamJoinMaxOrderBy
  min: TeamJoinMinOrderBy
  stddev: TeamJoinStddevOrderBy
  stddevPop: TeamJoinStddevPopOrderBy
  stddevSamp: TeamJoinStddevSampOrderBy
  sum: TeamJoinSumOrderBy
  varPop: TeamJoinVarPopOrderBy
  varSamp: TeamJoinVarSampOrderBy
  variance: TeamJoinVarianceOrderBy
}

input TeamJoinArrRelInsertInput {
  data: [TeamJoinInsertInput!]!
  onConflict: TeamJoinOnConflict
}

type TeamJoinAvgFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamJoinAvgOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input TeamJoinBoolExp {
  _and: [TeamJoinBoolExp!]
  _not: TeamJoinBoolExp
  _or: [TeamJoinBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  joinedBy: UserBoolExp
  joinedById: BigintComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: UserBoolExp
  processedById: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum TeamJoinConstraint {
  team_join_pkey
}

input TeamJoinIncInput {
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  processedById: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamJoinInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedBy: UserObjRelInsertInput
  joinedById: bigint
  processedAt: timestamptz
  processedBy: UserObjRelInsertInput
  processedById: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type TeamJoinMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

input TeamJoinMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamJoinMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

input TeamJoinMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamJoinMutationResponse {
  affectedRows: Int!
  returning: [TeamJoin!]!
}

input TeamJoinOnConflict {
  constraint: TeamJoinConstraint!
  updateColumns: [TeamJoinUpdateColumn!]! = []
  where: TeamJoinBoolExp
}

input TeamJoinOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedBy: UserOrderBy
  joinedById: OrderBy
  processedAt: OrderBy
  processedBy: UserOrderBy
  processedById: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input TeamJoinPkColumnsInput {
  id: bigint!
}

enum TeamJoinSelectColumn {
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  joinedById
  processedAt
  processedById
  state
  teamId
  tenantScopeId
}

input TeamJoinSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

type TeamJoinStddevFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamJoinStddevOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamJoinStddevPopFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamJoinStddevPopOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamJoinStddevSampFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamJoinStddevSampOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input TeamJoinStreamCursorInput {
  initialValue: TeamJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamJoinStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  state: String
  teamId: bigint
  tenantScopeId: bigint
}

type TeamJoinSumFields {
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  processedById: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamJoinSumOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum TeamJoinUpdateColumn {
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  joinedById
  processedAt
  processedById
  state
  teamId
  tenantScopeId
}

input TeamJoinUpdates {
  _inc: TeamJoinIncInput
  _set: TeamJoinSetInput
  where: TeamJoinBoolExp!
}

type TeamJoinVarianceFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamJoinVarianceOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamJoinVarPopFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamJoinVarPopOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamJoinVarSampFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamJoinVarSampOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  slug: String
  tenantGrantFundId: bigint
  tenantScopeId: bigint
  type: String
  videoId: bigint
}

input TeamMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  expectingPresidentEmail: OrderBy
  expectingSecretaryEmail: OrderBy
  expectingTreasurerEmail: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipDuration: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  slug: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

type TeamMember {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  permissions: Int!
  start: timestamptz!
  supervisedProjects(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  supervisedProjectsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  team: Team!
  teamId: bigint!
  teamMemberRoles(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): [TeamMemberRole!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): TeamMemberRoleAggregate!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  user: User!
  userId: bigint!
}

type TeamMemberAggregate {
  aggregate: TeamMemberAggregateFields
  nodes: [TeamMember!]!
}

input TeamMemberAggregateBoolExp {
  count: teamMemberAggregateBoolExpCount
}

input teamMemberAggregateBoolExpCount {
  arguments: [TeamMemberSelectColumn!]
  distinct: Boolean
  filter: TeamMemberBoolExp
  predicate: IntComparisonExp!
}

type TeamMemberAggregateFields {
  avg: TeamMemberAvgFields
  count(columns: [TeamMemberSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberMaxFields
  min: TeamMemberMinFields
  stddev: TeamMemberStddevFields
  stddevPop: TeamMemberStddevPopFields
  stddevSamp: TeamMemberStddevSampFields
  sum: TeamMemberSumFields
  varPop: TeamMemberVarPopFields
  varSamp: TeamMemberVarSampFields
  variance: TeamMemberVarianceFields
}

input TeamMemberAggregateOrderBy {
  avg: TeamMemberAvgOrderBy
  count: OrderBy
  max: TeamMemberMaxOrderBy
  min: TeamMemberMinOrderBy
  stddev: TeamMemberStddevOrderBy
  stddevPop: TeamMemberStddevPopOrderBy
  stddevSamp: TeamMemberStddevSampOrderBy
  sum: TeamMemberSumOrderBy
  varPop: TeamMemberVarPopOrderBy
  varSamp: TeamMemberVarSampOrderBy
  variance: TeamMemberVarianceOrderBy
}

input TeamMemberArrRelInsertInput {
  data: [TeamMemberInsertInput!]!
  onConflict: TeamMemberOnConflict
}

type TeamMemberAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input TeamMemberAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input TeamMemberBoolExp {
  _and: [TeamMemberBoolExp!]
  _not: TeamMemberBoolExp
  _or: [TeamMemberBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  permissions: IntComparisonExp
  start: TimestamptzComparisonExp
  supervisedProjects: ProjectSupervisorsBoolExp
  supervisedProjectsAggregate: ProjectSupervisorsAggregateBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamMemberRoles: TeamMemberRoleBoolExp
  teamMemberRolesAggregate: TeamMemberRoleAggregateBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum TeamMemberConstraint {
  team_member_pkey
}

input TeamMemberIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input TeamMemberInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  supervisedProjects: ProjectSupervisorsArrRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  teamMemberRoles: TeamMemberRoleArrRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  user: UserObjRelInsertInput
  userId: bigint
}

type TeamMemberMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input TeamMemberMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  start: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TeamMemberMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input TeamMemberMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  start: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TeamMemberMutationResponse {
  affectedRows: Int!
  returning: [TeamMember!]!
}

input TeamMemberObjRelInsertInput {
  data: TeamMemberInsertInput!
  onConflict: TeamMemberOnConflict
}

input TeamMemberOnConflict {
  constraint: TeamMemberConstraint!
  updateColumns: [TeamMemberUpdateColumn!]! = []
  where: TeamMemberBoolExp
}

input TeamMemberOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  start: OrderBy
  supervisedProjectsAggregate: ProjectSupervisorsAggregateOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamMemberRolesAggregate: TeamMemberRoleAggregateOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input TeamMemberPkColumnsInput {
  id: bigint!
}

type TeamMemberRole {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  teamMember: TeamMember!
  teamMemberId: bigint!
  teamRole: TeamRole!
  teamRoleId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type TeamMemberRoleAggregate {
  aggregate: TeamMemberRoleAggregateFields
  nodes: [TeamMemberRole!]!
}

input TeamMemberRoleAggregateBoolExp {
  count: teamMemberRoleAggregateBoolExpCount
}

input teamMemberRoleAggregateBoolExpCount {
  arguments: [TeamMemberRoleSelectColumn!]
  distinct: Boolean
  filter: TeamMemberRoleBoolExp
  predicate: IntComparisonExp!
}

type TeamMemberRoleAggregateFields {
  avg: TeamMemberRoleAvgFields
  count(columns: [TeamMemberRoleSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberRoleMaxFields
  min: TeamMemberRoleMinFields
  stddev: TeamMemberRoleStddevFields
  stddevPop: TeamMemberRoleStddevPopFields
  stddevSamp: TeamMemberRoleStddevSampFields
  sum: TeamMemberRoleSumFields
  varPop: TeamMemberRoleVarPopFields
  varSamp: TeamMemberRoleVarSampFields
  variance: TeamMemberRoleVarianceFields
}

input TeamMemberRoleAggregateOrderBy {
  avg: TeamMemberRoleAvgOrderBy
  count: OrderBy
  max: TeamMemberRoleMaxOrderBy
  min: TeamMemberRoleMinOrderBy
  stddev: TeamMemberRoleStddevOrderBy
  stddevPop: TeamMemberRoleStddevPopOrderBy
  stddevSamp: TeamMemberRoleStddevSampOrderBy
  sum: TeamMemberRoleSumOrderBy
  varPop: TeamMemberRoleVarPopOrderBy
  varSamp: TeamMemberRoleVarSampOrderBy
  variance: TeamMemberRoleVarianceOrderBy
}

input TeamMemberRoleArrRelInsertInput {
  data: [TeamMemberRoleInsertInput!]!
  onConflict: TeamMemberRoleOnConflict
}

type TeamMemberRoleAvgFields {
  createdById: Float
  id: Float
  teamMemberId: Float
  teamRoleId: Float
  tenantScopeId: Float
}

input TeamMemberRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

input TeamMemberRoleBoolExp {
  _and: [TeamMemberRoleBoolExp!]
  _not: TeamMemberRoleBoolExp
  _or: [TeamMemberRoleBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
  teamRole: TeamRoleBoolExp
  teamRoleId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum TeamMemberRoleConstraint {
  team_member_role_pkey
}

input TeamMemberRoleIncInput {
  createdById: bigint
  id: bigint
  teamMemberId: bigint
  teamRoleId: bigint
  tenantScopeId: bigint
}

input TeamMemberRoleInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
  teamRole: TeamRoleObjRelInsertInput
  teamRoleId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type TeamMemberRoleMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamMemberId: bigint
  teamRoleId: bigint
  tenantScopeId: bigint
}

input TeamMemberRoleMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TeamMemberRoleMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamMemberId: bigint
  teamRoleId: bigint
  tenantScopeId: bigint
}

input TeamMemberRoleMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TeamMemberRoleMutationResponse {
  affectedRows: Int!
  returning: [TeamMemberRole!]!
}

input TeamMemberRoleOnConflict {
  constraint: TeamMemberRoleConstraint!
  updateColumns: [TeamMemberRoleUpdateColumn!]! = []
  where: TeamMemberRoleBoolExp
}

input TeamMemberRoleOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
  teamRole: TeamRoleOrderBy
  teamRoleId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input TeamMemberRolePkColumnsInput {
  id: bigint!
}

enum TeamMemberRoleSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  teamMemberId
  teamRoleId
  tenantScopeId
}

input TeamMemberRoleSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamMemberId: bigint
  teamRoleId: bigint
  tenantScopeId: bigint
}

type TeamMemberRoleStddevFields {
  createdById: Float
  id: Float
  teamMemberId: Float
  teamRoleId: Float
  tenantScopeId: Float
}

input TeamMemberRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TeamMemberRoleStddevPopFields {
  createdById: Float
  id: Float
  teamMemberId: Float
  teamRoleId: Float
  tenantScopeId: Float
}

input TeamMemberRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TeamMemberRoleStddevSampFields {
  createdById: Float
  id: Float
  teamMemberId: Float
  teamRoleId: Float
  tenantScopeId: Float
}

input TeamMemberRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

input TeamMemberRoleStreamCursorInput {
  initialValue: TeamMemberRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMemberRoleStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamMemberId: bigint
  teamRoleId: bigint
  tenantScopeId: bigint
}

type TeamMemberRoleSumFields {
  createdById: bigint
  id: bigint
  teamMemberId: bigint
  teamRoleId: bigint
  tenantScopeId: bigint
}

input TeamMemberRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

enum TeamMemberRoleUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  teamMemberId
  teamRoleId
  tenantScopeId
}

input TeamMemberRoleUpdates {
  _inc: TeamMemberRoleIncInput
  _set: TeamMemberRoleSetInput
  where: TeamMemberRoleBoolExp!
}

type TeamMemberRoleVarianceFields {
  createdById: Float
  id: Float
  teamMemberId: Float
  teamRoleId: Float
  tenantScopeId: Float
}

input TeamMemberRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TeamMemberRoleVarPopFields {
  createdById: Float
  id: Float
  teamMemberId: Float
  teamRoleId: Float
  tenantScopeId: Float
}

input TeamMemberRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TeamMemberRoleVarSampFields {
  createdById: Float
  id: Float
  teamMemberId: Float
  teamRoleId: Float
  tenantScopeId: Float
}

input TeamMemberRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamMemberId: OrderBy
  teamRoleId: OrderBy
  tenantScopeId: OrderBy
}

enum TeamMemberSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  permissions
  start
  teamId
  tenantScopeId
  userId
}

input TeamMemberSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

type TeamMemberStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input TeamMemberStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TeamMemberStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input TeamMemberStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TeamMemberStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input TeamMemberStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input TeamMemberStreamCursorInput {
  initialValue: TeamMemberStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMemberStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

type TeamMemberSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantScopeId: bigint
  userId: bigint
}

input TeamMemberSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

enum TeamMemberUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  permissions
  start
  teamId
  tenantScopeId
  userId
}

input TeamMemberUpdates {
  _inc: TeamMemberIncInput
  _set: TeamMemberSetInput
  where: TeamMemberBoolExp!
}

type TeamMemberVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input TeamMemberVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TeamMemberVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input TeamMemberVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TeamMemberVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantScopeId: Float
  userId: Float
}

input TeamMemberVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TeamMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  slug: String
  tenantGrantFundId: bigint
  tenantScopeId: bigint
  type: String
  videoId: bigint
}

input TeamMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  expectingPresidentEmail: OrderBy
  expectingSecretaryEmail: OrderBy
  expectingTreasurerEmail: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipDuration: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  slug: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

type TeamMutationResponse {
  affectedRows: Int!
  returning: [Team!]!
}

input TeamObjRelInsertInput {
  data: TeamInsertInput!
  onConflict: TeamOnConflict
}

input TeamOnConflict {
  constraint: TeamConstraint!
  updateColumns: [TeamUpdateColumn!]! = []
  where: TeamBoolExp
}

input TeamOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  actorId: OrderBy
  bankAccountsAggregate: BankAccountAggregateOrderBy
  childrenTeamsAggregate: TeamAggregateOrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  expectingPresidentEmail: OrderBy
  expectingSecretaryEmail: OrderBy
  expectingTreasurerEmail: OrderBy
  grantFund: LegalUnitOrderBy
  grantsAggregate: GrantAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isJoinFormActive: OrderBy
  isOnboardingComplete: OrderBy
  joinForm: FormOrderBy
  joinFormId: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipDuration: OrderBy
  membershipFees: OrderBy
  missionsAggregate: MissionAggregateOrderBy
  parent: TeamOrderBy
  parentId: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  slug: OrderBy
  teamDocumentsAggregate: TeamDocumentAggregateOrderBy
  teamHistoriesAggregate: TeamHistoryAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamRolesAggregate: TeamRoleAggregateOrderBy
  tenantGrantFundId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
  video: FileUploadOrderBy
  videoId: OrderBy
}

input TeamPkColumnsInput {
  id: bigint!
}

type TeamRole {
  color: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  permissions: [String!]!
  team: Team!
  teamId: bigint!
  teamMemberRoles(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): [TeamMemberRole!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): TeamMemberRoleAggregate!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String
}

type TeamRoleAggregate {
  aggregate: TeamRoleAggregateFields
  nodes: [TeamRole!]!
}

input TeamRoleAggregateBoolExp {
  count: teamRoleAggregateBoolExpCount
}

input teamRoleAggregateBoolExpCount {
  arguments: [TeamRoleSelectColumn!]
  distinct: Boolean
  filter: TeamRoleBoolExp
  predicate: IntComparisonExp!
}

type TeamRoleAggregateFields {
  avg: TeamRoleAvgFields
  count(columns: [TeamRoleSelectColumn!], distinct: Boolean): Int!
  max: TeamRoleMaxFields
  min: TeamRoleMinFields
  stddev: TeamRoleStddevFields
  stddevPop: TeamRoleStddevPopFields
  stddevSamp: TeamRoleStddevSampFields
  sum: TeamRoleSumFields
  varPop: TeamRoleVarPopFields
  varSamp: TeamRoleVarSampFields
  variance: TeamRoleVarianceFields
}

input TeamRoleAggregateOrderBy {
  avg: TeamRoleAvgOrderBy
  count: OrderBy
  max: TeamRoleMaxOrderBy
  min: TeamRoleMinOrderBy
  stddev: TeamRoleStddevOrderBy
  stddevPop: TeamRoleStddevPopOrderBy
  stddevSamp: TeamRoleStddevSampOrderBy
  sum: TeamRoleSumOrderBy
  varPop: TeamRoleVarPopOrderBy
  varSamp: TeamRoleVarSampOrderBy
  variance: TeamRoleVarianceOrderBy
}

input TeamRoleArrRelInsertInput {
  data: [TeamRoleInsertInput!]!
  onConflict: TeamRoleOnConflict
}

type TeamRoleAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input TeamRoleBoolExp {
  _and: [TeamRoleBoolExp!]
  _not: TeamRoleBoolExp
  _or: [TeamRoleBoolExp!]
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  permissions: StringArrayComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamMemberRoles: TeamMemberRoleBoolExp
  teamMemberRolesAggregate: TeamMemberRoleAggregateBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
}

enum TeamRoleConstraint {
  team_role_pkey
}

input TeamRoleIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamRoleInsertInput {
  color: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  team: TeamObjRelInsertInput
  teamId: bigint
  teamMemberRoles: TeamMemberRoleArrRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
}

type TeamRoleMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

input TeamRoleMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type TeamRoleMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

input TeamRoleMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type TeamRoleMutationResponse {
  affectedRows: Int!
  returning: [TeamRole!]!
}

input TeamRoleObjRelInsertInput {
  data: TeamRoleInsertInput!
  onConflict: TeamRoleOnConflict
}

input TeamRoleOnConflict {
  constraint: TeamRoleConstraint!
  updateColumns: [TeamRoleUpdateColumn!]! = []
  where: TeamRoleBoolExp
}

input TeamRoleOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamMemberRolesAggregate: TeamMemberRoleAggregateOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

input TeamRolePkColumnsInput {
  id: bigint!
}

enum TeamRoleSelectColumn {
  color
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  permissions
  teamId
  tenantScopeId
  type
}

input TeamRoleSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

type TeamRoleStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamRoleStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamRoleStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

input TeamRoleStreamCursorInput {
  initialValue: TeamRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamRoleStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  teamId: bigint
  tenantScopeId: bigint
  type: String
}

type TeamRoleSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantScopeId: bigint
}

input TeamRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum TeamRoleUpdateColumn {
  color
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  permissions
  teamId
  tenantScopeId
  type
}

input TeamRoleUpdates {
  _inc: TeamRoleIncInput
  _set: TeamRoleSetInput
  where: TeamRoleBoolExp!
}

type TeamRoleVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamRoleVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

type TeamRoleVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantScopeId: Float
}

input TeamRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantScopeId: OrderBy
}

enum TeamSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  directorsCategoryName
  expectingPresidentEmail
  expectingSecretaryEmail
  expectingTreasurerEmail
  hiddenAt
  id
  isJoinFormActive
  isOnboardingComplete
  joinFormId
  managersCategoryName
  membersCategoryName
  membershipDuration
  membershipFees
  parentId
  slug
  tenantGrantFundId
  tenantScopeId
  type
  videoId
}

enum TeamSelectColumnTeamAggregateBoolExpBool_andArgumentsColumns {
  isJoinFormActive
  isOnboardingComplete
}

enum TeamSelectColumnTeamAggregateBoolExpBool_orArgumentsColumns {
  isJoinFormActive
  isOnboardingComplete
}

input TeamSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  isJoinFormActive: Boolean
  isOnboardingComplete: Boolean
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  slug: String
  tenantGrantFundId: bigint
  tenantScopeId: bigint
  type: String
  videoId: bigint
}

type TeamStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantScopeId: Float
  videoId: Float
}

input TeamStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

type TeamStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantScopeId: Float
  videoId: Float
}

input TeamStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

type TeamStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantScopeId: Float
  videoId: Float
}

input TeamStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

input TeamStreamCursorInput {
  initialValue: TeamStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  isJoinFormActive: Boolean
  isOnboardingComplete: Boolean
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  slug: String
  tenantGrantFundId: bigint
  tenantScopeId: bigint
  type: String
  videoId: bigint
}

type TeamSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  joinFormId: bigint
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantScopeId: bigint
  videoId: bigint
}

input TeamSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

enum TeamUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  directorsCategoryName
  expectingPresidentEmail
  expectingSecretaryEmail
  expectingTreasurerEmail
  hiddenAt
  id
  isJoinFormActive
  isOnboardingComplete
  joinFormId
  managersCategoryName
  membersCategoryName
  membershipDuration
  membershipFees
  parentId
  slug
  tenantGrantFundId
  tenantScopeId
  type
  videoId
}

input TeamUpdates {
  _inc: TeamIncInput
  _set: TeamSetInput
  where: TeamBoolExp!
}

type TeamVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantScopeId: Float
  videoId: Float
}

input TeamVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

type TeamVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantScopeId: Float
  videoId: Float
}

input TeamVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

type TeamVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantScopeId: Float
  videoId: Float
}

input TeamVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantScopeId: OrderBy
  videoId: OrderBy
}

type Tenant {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actor: Actor!
  actorId: bigint!
  actorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorTags(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): [ActorTag!]!
  actorTagsAggregate(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): ActorTagAggregate!
  actors(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorsAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  bankAccounts(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): [BankAccount!]!
  bankAccountsAggregate(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): BankAccountAggregate!
  bankInfos(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): [BankInfo!]!
  bankInfosAggregate(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): BankInfoAggregate!
  campusClusters(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  campusClustersAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  domain: String!
  eventApprovalSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovalValidators(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): [EventApprovalValidator!]!
  eventApprovalValidatorsAggregate(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): EventApprovalValidatorAggregate!
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventFavorites(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoritesAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  eventSupervisors(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  eventValidationForm: Form
  eventValidationFormId: bigint
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  fileUploads(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadsAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  follows(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followsAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  formSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  forms(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formsAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  id: bigint!
  isOidcEnabled: Boolean!
  locations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  oidcCallbackUri: String!
  oidcClientId: String!
  oidcClientSecret: String!
  oidcDiscoveryUrl: String!
  oidcName: String!
  oidcScopes: String!
  pointName: String!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  socials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  tags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  teamDocuments(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): [TeamDocument!]!
  teamDocumentsAggregate(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): TeamDocumentAggregate!
  teamHistories(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoriesAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMemberRoles(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): [TeamMemberRole!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): TeamMemberRoleAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamRoles(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): [TeamRole!]!
  teamRolesAggregate(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): TeamRoleAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenantMemberRoles(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): [TenantMemberRole!]!
  tenantMemberRolesAggregate(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): TenantMemberRoleAggregate!
  tenantMembers(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): [TenantMember!]!
  tenantMembersAggregate(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): TenantMemberAggregate!
  tenantRoles(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): [TenantRole!]!
  tenantRolesAggregate(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): TenantRoleAggregate!
  transactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  transactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  users(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  usersAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
}

type TenantAggregate {
  aggregate: TenantAggregateFields
  nodes: [Tenant!]!
}

input TenantAggregateBoolExp {
  bool_and: tenantAggregateBoolExpBool_and
  bool_or: tenantAggregateBoolExpBool_or
  count: tenantAggregateBoolExpCount
}

input tenantAggregateBoolExpBool_and {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpBool_or {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpCount {
  arguments: [TenantSelectColumn!]
  distinct: Boolean
  filter: TenantBoolExp
  predicate: IntComparisonExp!
}

type TenantAggregateFields {
  avg: TenantAvgFields
  count(columns: [TenantSelectColumn!], distinct: Boolean): Int!
  max: TenantMaxFields
  min: TenantMinFields
  stddev: TenantStddevFields
  stddevPop: TenantStddevPopFields
  stddevSamp: TenantStddevSampFields
  sum: TenantSumFields
  varPop: TenantVarPopFields
  varSamp: TenantVarSampFields
  variance: TenantVarianceFields
}

input TenantAggregateOrderBy {
  avg: TenantAvgOrderBy
  count: OrderBy
  max: TenantMaxOrderBy
  min: TenantMinOrderBy
  stddev: TenantStddevOrderBy
  stddevPop: TenantStddevPopOrderBy
  stddevSamp: TenantStddevSampOrderBy
  sum: TenantSumOrderBy
  varPop: TenantVarPopOrderBy
  varSamp: TenantVarSampOrderBy
  variance: TenantVarianceOrderBy
}

input TenantArrRelInsertInput {
  data: [TenantInsertInput!]!
  onConflict: TenantOnConflict
}

type TenantAvgFields {
  actorId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

input TenantBoolExp {
  _and: [TenantBoolExp!]
  _not: TenantBoolExp
  _or: [TenantBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actorTags: ActorTagBoolExp
  actorTagsAggregate: ActorTagAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  bankAccounts: BankAccountBoolExp
  bankAccountsAggregate: BankAccountAggregateBoolExp
  bankInfos: BankInfoBoolExp
  bankInfosAggregate: BankInfoAggregateBoolExp
  campusClusters: CampusClusterBoolExp
  campusClustersAggregate: CampusClusterAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  domain: StringComparisonExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovalValidators: EventApprovalValidatorBoolExp
  eventApprovalValidatorsAggregate: EventApprovalValidatorAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventFavorites: EventFavoriteBoolExp
  eventFavoritesAggregate: EventFavoriteAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  eventSupervisors: EventSupervisorBoolExp
  eventSupervisorsAggregate: EventSupervisorAggregateBoolExp
  eventValidationForm: FormBoolExp
  eventValidationFormId: BigintComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  grants: GrantBoolExp
  grantsAggregate: GrantAggregateBoolExp
  id: BigintComparisonExp
  isOidcEnabled: BooleanComparisonExp
  locations: LocationBoolExp
  locationsAggregate: LocationAggregateBoolExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  oidcCallbackUri: StringComparisonExp
  oidcClientId: StringComparisonExp
  oidcClientSecret: StringComparisonExp
  oidcDiscoveryUrl: StringComparisonExp
  oidcName: StringComparisonExp
  oidcScopes: StringComparisonExp
  pointName: StringComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamDocuments: TeamDocumentBoolExp
  teamDocumentsAggregate: TeamDocumentAggregateBoolExp
  teamHistories: TeamHistoryBoolExp
  teamHistoriesAggregate: TeamHistoryAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMemberRoles: TeamMemberRoleBoolExp
  teamMemberRolesAggregate: TeamMemberRoleAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamRoles: TeamRoleBoolExp
  teamRolesAggregate: TeamRoleAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenantMemberRoles: TenantMemberRoleBoolExp
  tenantMemberRolesAggregate: TenantMemberRoleAggregateBoolExp
  tenantMembers: TenantMemberBoolExp
  tenantMembersAggregate: TenantMemberAggregateBoolExp
  tenantRoles: TenantRoleBoolExp
  tenantRolesAggregate: TenantRoleAggregateBoolExp
  transactions: TransactionBoolExp
  transactionsAggregate: TransactionAggregateBoolExp
  users: UserBoolExp
  usersAggregate: UserAggregateBoolExp
}

enum TenantConstraint {
  tenant_actor_id_unique
  tenant_domain_unique
  tenant_event_validation_form_id_unique
  tenant_oidc_name_unique
  tenant_pkey
}

input TenantIncInput {
  actorId: bigint
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
}

input TenantInsertInput {
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorId: bigint
  actorImages: ActorImageArrRelInsertInput
  actorTags: ActorTagArrRelInsertInput
  actors: ActorArrRelInsertInput
  bankAccounts: BankAccountArrRelInsertInput
  bankInfos: BankInfoArrRelInsertInput
  campusClusters: CampusClusterArrRelInsertInput
  campuses: CampusArrRelInsertInput
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovalValidators: EventApprovalValidatorArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventFavorites: EventFavoriteArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventOrganizes: EventOrganizeArrRelInsertInput
  eventSupervisors: EventSupervisorArrRelInsertInput
  eventValidationForm: FormObjRelInsertInput
  eventValidationFormId: bigint
  events: EventArrRelInsertInput
  expenseItems: ExpenseItemArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  follows: FollowArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  grantAllocates: GrantAllocateArrRelInsertInput
  grants: GrantArrRelInsertInput
  id: bigint
  isOidcEnabled: Boolean
  locations: LocationArrRelInsertInput
  missionJoins: MissionJoinArrRelInsertInput
  missions: MissionArrRelInsertInput
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
  projects: ProjectArrRelInsertInput
  socials: SocialArrRelInsertInput
  tags: TagArrRelInsertInput
  teamDocuments: TeamDocumentArrRelInsertInput
  teamHistories: TeamHistoryArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMemberRoles: TeamMemberRoleArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamRoles: TeamRoleArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenantMemberRoles: TenantMemberRoleArrRelInsertInput
  tenantMembers: TenantMemberArrRelInsertInput
  tenantRoles: TenantRoleArrRelInsertInput
  transactions: TransactionArrRelInsertInput
  users: UserArrRelInsertInput
}

type TenantMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

input TenantMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  oidcCallbackUri: OrderBy
  oidcClientId: OrderBy
  oidcClientSecret: OrderBy
  oidcDiscoveryUrl: OrderBy
  oidcName: OrderBy
  oidcScopes: OrderBy
  pointName: OrderBy
}

type TenantMember {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  permissions: Int!
  start: timestamptz!
  tenantMemberRoles(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): [TenantMemberRole!]!
  tenantMemberRolesAggregate(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): TenantMemberRoleAggregate!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  user: User!
  userId: bigint!
}

type TenantMemberAggregate {
  aggregate: TenantMemberAggregateFields
  nodes: [TenantMember!]!
}

input TenantMemberAggregateBoolExp {
  count: tenantMemberAggregateBoolExpCount
}

input tenantMemberAggregateBoolExpCount {
  arguments: [TenantMemberSelectColumn!]
  distinct: Boolean
  filter: TenantMemberBoolExp
  predicate: IntComparisonExp!
}

type TenantMemberAggregateFields {
  avg: TenantMemberAvgFields
  count(columns: [TenantMemberSelectColumn!], distinct: Boolean): Int!
  max: TenantMemberMaxFields
  min: TenantMemberMinFields
  stddev: TenantMemberStddevFields
  stddevPop: TenantMemberStddevPopFields
  stddevSamp: TenantMemberStddevSampFields
  sum: TenantMemberSumFields
  varPop: TenantMemberVarPopFields
  varSamp: TenantMemberVarSampFields
  variance: TenantMemberVarianceFields
}

input TenantMemberAggregateOrderBy {
  avg: TenantMemberAvgOrderBy
  count: OrderBy
  max: TenantMemberMaxOrderBy
  min: TenantMemberMinOrderBy
  stddev: TenantMemberStddevOrderBy
  stddevPop: TenantMemberStddevPopOrderBy
  stddevSamp: TenantMemberStddevSampOrderBy
  sum: TenantMemberSumOrderBy
  varPop: TenantMemberVarPopOrderBy
  varSamp: TenantMemberVarSampOrderBy
  variance: TenantMemberVarianceOrderBy
}

input TenantMemberArrRelInsertInput {
  data: [TenantMemberInsertInput!]!
  onConflict: TenantMemberOnConflict
}

type TenantMemberAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  tenantScopeId: Float
  userId: Float
}

input TenantMemberAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input TenantMemberBoolExp {
  _and: [TenantMemberBoolExp!]
  _not: TenantMemberBoolExp
  _or: [TenantMemberBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  permissions: IntComparisonExp
  start: TimestamptzComparisonExp
  tenantMemberRoles: TenantMemberRoleBoolExp
  tenantMemberRolesAggregate: TenantMemberRoleAggregateBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum TenantMemberConstraint {
  tenant_member_pkey
}

input TenantMemberIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  tenantScopeId: bigint
  userId: bigint
}

input TenantMemberInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  tenantMemberRoles: TenantMemberRoleArrRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  user: UserObjRelInsertInput
  userId: bigint
}

type TenantMemberMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  tenantScopeId: bigint
  userId: bigint
}

input TenantMemberMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  start: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TenantMemberMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  tenantScopeId: bigint
  userId: bigint
}

input TenantMemberMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  start: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TenantMemberMutationResponse {
  affectedRows: Int!
  returning: [TenantMember!]!
}

input TenantMemberObjRelInsertInput {
  data: TenantMemberInsertInput!
  onConflict: TenantMemberOnConflict
}

input TenantMemberOnConflict {
  constraint: TenantMemberConstraint!
  updateColumns: [TenantMemberUpdateColumn!]! = []
  where: TenantMemberBoolExp
}

input TenantMemberOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  start: OrderBy
  tenantMemberRolesAggregate: TenantMemberRoleAggregateOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input TenantMemberPkColumnsInput {
  id: bigint!
}

type TenantMemberRole {
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenantMember: TenantMember!
  tenantMemberId: bigint!
  tenantRole: TenantRole!
  tenantRoleId: bigint!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type TenantMemberRoleAggregate {
  aggregate: TenantMemberRoleAggregateFields
  nodes: [TenantMemberRole!]!
}

input TenantMemberRoleAggregateBoolExp {
  count: tenantMemberRoleAggregateBoolExpCount
}

input tenantMemberRoleAggregateBoolExpCount {
  arguments: [TenantMemberRoleSelectColumn!]
  distinct: Boolean
  filter: TenantMemberRoleBoolExp
  predicate: IntComparisonExp!
}

type TenantMemberRoleAggregateFields {
  avg: TenantMemberRoleAvgFields
  count(columns: [TenantMemberRoleSelectColumn!], distinct: Boolean): Int!
  max: TenantMemberRoleMaxFields
  min: TenantMemberRoleMinFields
  stddev: TenantMemberRoleStddevFields
  stddevPop: TenantMemberRoleStddevPopFields
  stddevSamp: TenantMemberRoleStddevSampFields
  sum: TenantMemberRoleSumFields
  varPop: TenantMemberRoleVarPopFields
  varSamp: TenantMemberRoleVarSampFields
  variance: TenantMemberRoleVarianceFields
}

input TenantMemberRoleAggregateOrderBy {
  avg: TenantMemberRoleAvgOrderBy
  count: OrderBy
  max: TenantMemberRoleMaxOrderBy
  min: TenantMemberRoleMinOrderBy
  stddev: TenantMemberRoleStddevOrderBy
  stddevPop: TenantMemberRoleStddevPopOrderBy
  stddevSamp: TenantMemberRoleStddevSampOrderBy
  sum: TenantMemberRoleSumOrderBy
  varPop: TenantMemberRoleVarPopOrderBy
  varSamp: TenantMemberRoleVarSampOrderBy
  variance: TenantMemberRoleVarianceOrderBy
}

input TenantMemberRoleArrRelInsertInput {
  data: [TenantMemberRoleInsertInput!]!
  onConflict: TenantMemberRoleOnConflict
}

type TenantMemberRoleAvgFields {
  createdById: Float
  id: Float
  tenantMemberId: Float
  tenantRoleId: Float
  tenantScopeId: Float
}

input TenantMemberRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

input TenantMemberRoleBoolExp {
  _and: [TenantMemberRoleBoolExp!]
  _not: TenantMemberRoleBoolExp
  _or: [TenantMemberRoleBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenantMember: TenantMemberBoolExp
  tenantMemberId: BigintComparisonExp
  tenantRole: TenantRoleBoolExp
  tenantRoleId: BigintComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum TenantMemberRoleConstraint {
  tenant_member_role_pkey
}

input TenantMemberRoleIncInput {
  createdById: bigint
  id: bigint
  tenantMemberId: bigint
  tenantRoleId: bigint
  tenantScopeId: bigint
}

input TenantMemberRoleInsertInput {
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantMember: TenantMemberObjRelInsertInput
  tenantMemberId: bigint
  tenantRole: TenantRoleObjRelInsertInput
  tenantRoleId: bigint
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type TenantMemberRoleMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantMemberId: bigint
  tenantRoleId: bigint
  tenantScopeId: bigint
}

input TenantMemberRoleMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TenantMemberRoleMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantMemberId: bigint
  tenantRoleId: bigint
  tenantScopeId: bigint
}

input TenantMemberRoleMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TenantMemberRoleMutationResponse {
  affectedRows: Int!
  returning: [TenantMemberRole!]!
}

input TenantMemberRoleOnConflict {
  constraint: TenantMemberRoleConstraint!
  updateColumns: [TenantMemberRoleUpdateColumn!]! = []
  where: TenantMemberRoleBoolExp
}

input TenantMemberRoleOrderBy {
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantMember: TenantMemberOrderBy
  tenantMemberId: OrderBy
  tenantRole: TenantRoleOrderBy
  tenantRoleId: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input TenantMemberRolePkColumnsInput {
  id: bigint!
}

enum TenantMemberRoleSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantMemberId
  tenantRoleId
  tenantScopeId
}

input TenantMemberRoleSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantMemberId: bigint
  tenantRoleId: bigint
  tenantScopeId: bigint
}

type TenantMemberRoleStddevFields {
  createdById: Float
  id: Float
  tenantMemberId: Float
  tenantRoleId: Float
  tenantScopeId: Float
}

input TenantMemberRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TenantMemberRoleStddevPopFields {
  createdById: Float
  id: Float
  tenantMemberId: Float
  tenantRoleId: Float
  tenantScopeId: Float
}

input TenantMemberRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TenantMemberRoleStddevSampFields {
  createdById: Float
  id: Float
  tenantMemberId: Float
  tenantRoleId: Float
  tenantScopeId: Float
}

input TenantMemberRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

input TenantMemberRoleStreamCursorInput {
  initialValue: TenantMemberRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input TenantMemberRoleStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantMemberId: bigint
  tenantRoleId: bigint
  tenantScopeId: bigint
}

type TenantMemberRoleSumFields {
  createdById: bigint
  id: bigint
  tenantMemberId: bigint
  tenantRoleId: bigint
  tenantScopeId: bigint
}

input TenantMemberRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

enum TenantMemberRoleUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantMemberId
  tenantRoleId
  tenantScopeId
}

input TenantMemberRoleUpdates {
  _inc: TenantMemberRoleIncInput
  _set: TenantMemberRoleSetInput
  where: TenantMemberRoleBoolExp!
}

type TenantMemberRoleVarianceFields {
  createdById: Float
  id: Float
  tenantMemberId: Float
  tenantRoleId: Float
  tenantScopeId: Float
}

input TenantMemberRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TenantMemberRoleVarPopFields {
  createdById: Float
  id: Float
  tenantMemberId: Float
  tenantRoleId: Float
  tenantScopeId: Float
}

input TenantMemberRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

type TenantMemberRoleVarSampFields {
  createdById: Float
  id: Float
  tenantMemberId: Float
  tenantRoleId: Float
  tenantScopeId: Float
}

input TenantMemberRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantMemberId: OrderBy
  tenantRoleId: OrderBy
  tenantScopeId: OrderBy
}

enum TenantMemberSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  permissions
  start
  tenantScopeId
  userId
}

input TenantMemberSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  tenantScopeId: bigint
  userId: bigint
}

type TenantMemberStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  tenantScopeId: Float
  userId: Float
}

input TenantMemberStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TenantMemberStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  tenantScopeId: Float
  userId: Float
}

input TenantMemberStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TenantMemberStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  tenantScopeId: Float
  userId: Float
}

input TenantMemberStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

input TenantMemberStreamCursorInput {
  initialValue: TenantMemberStreamCursorValueInput!
  ordering: CursorOrdering
}

input TenantMemberStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  start: timestamptz
  tenantScopeId: bigint
  userId: bigint
}

type TenantMemberSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  tenantScopeId: bigint
  userId: bigint
}

input TenantMemberSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

enum TenantMemberUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  permissions
  start
  tenantScopeId
  userId
}

input TenantMemberUpdates {
  _inc: TenantMemberIncInput
  _set: TenantMemberSetInput
  where: TenantMemberBoolExp!
}

type TenantMemberVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  tenantScopeId: Float
  userId: Float
}

input TenantMemberVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TenantMemberVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  tenantScopeId: Float
  userId: Float
}

input TenantMemberVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TenantMemberVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  tenantScopeId: Float
  userId: Float
}

input TenantMemberVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  userId: OrderBy
}

type TenantMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

input TenantMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  oidcCallbackUri: OrderBy
  oidcClientId: OrderBy
  oidcClientSecret: OrderBy
  oidcDiscoveryUrl: OrderBy
  oidcName: OrderBy
  oidcScopes: OrderBy
  pointName: OrderBy
}

type TenantMutationResponse {
  affectedRows: Int!
  returning: [Tenant!]!
}

input TenantObjRelInsertInput {
  data: TenantInsertInput!
  onConflict: TenantOnConflict
}

input TenantOnConflict {
  constraint: TenantConstraint!
  updateColumns: [TenantUpdateColumn!]! = []
  where: TenantBoolExp
}

input TenantOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  actorId: OrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorTagsAggregate: ActorTagAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  bankAccountsAggregate: BankAccountAggregateOrderBy
  bankInfosAggregate: BankInfoAggregateOrderBy
  campusClustersAggregate: CampusClusterAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalValidatorsAggregate: EventApprovalValidatorAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventFavoritesAggregate: EventFavoriteAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  eventSupervisorsAggregate: EventSupervisorAggregateOrderBy
  eventValidationForm: FormOrderBy
  eventValidationFormId: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  grantsAggregate: GrantAggregateOrderBy
  id: OrderBy
  isOidcEnabled: OrderBy
  locationsAggregate: LocationAggregateOrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  missionsAggregate: MissionAggregateOrderBy
  oidcCallbackUri: OrderBy
  oidcClientId: OrderBy
  oidcClientSecret: OrderBy
  oidcDiscoveryUrl: OrderBy
  oidcName: OrderBy
  oidcScopes: OrderBy
  pointName: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  teamDocumentsAggregate: TeamDocumentAggregateOrderBy
  teamHistoriesAggregate: TeamHistoryAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMemberRolesAggregate: TeamMemberRoleAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamRolesAggregate: TeamRoleAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenantMemberRolesAggregate: TenantMemberRoleAggregateOrderBy
  tenantMembersAggregate: TenantMemberAggregateOrderBy
  tenantRolesAggregate: TenantRoleAggregateOrderBy
  transactionsAggregate: TransactionAggregateOrderBy
  usersAggregate: UserAggregateOrderBy
}

input TenantPkColumnsInput {
  id: bigint!
}

type TenantRole {
  color: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  permissions: [String!]!
  tenantMemberRoles(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): [TenantMemberRole!]!
  tenantMemberRolesAggregate(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): TenantMemberRoleAggregate!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  type: String
}

type TenantRoleAggregate {
  aggregate: TenantRoleAggregateFields
  nodes: [TenantRole!]!
}

input TenantRoleAggregateBoolExp {
  count: tenantRoleAggregateBoolExpCount
}

input tenantRoleAggregateBoolExpCount {
  arguments: [TenantRoleSelectColumn!]
  distinct: Boolean
  filter: TenantRoleBoolExp
  predicate: IntComparisonExp!
}

type TenantRoleAggregateFields {
  avg: TenantRoleAvgFields
  count(columns: [TenantRoleSelectColumn!], distinct: Boolean): Int!
  max: TenantRoleMaxFields
  min: TenantRoleMinFields
  stddev: TenantRoleStddevFields
  stddevPop: TenantRoleStddevPopFields
  stddevSamp: TenantRoleStddevSampFields
  sum: TenantRoleSumFields
  varPop: TenantRoleVarPopFields
  varSamp: TenantRoleVarSampFields
  variance: TenantRoleVarianceFields
}

input TenantRoleAggregateOrderBy {
  avg: TenantRoleAvgOrderBy
  count: OrderBy
  max: TenantRoleMaxOrderBy
  min: TenantRoleMinOrderBy
  stddev: TenantRoleStddevOrderBy
  stddevPop: TenantRoleStddevPopOrderBy
  stddevSamp: TenantRoleStddevSampOrderBy
  sum: TenantRoleSumOrderBy
  varPop: TenantRoleVarPopOrderBy
  varSamp: TenantRoleVarSampOrderBy
  variance: TenantRoleVarianceOrderBy
}

input TenantRoleArrRelInsertInput {
  data: [TenantRoleInsertInput!]!
  onConflict: TenantRoleOnConflict
}

type TenantRoleAvgFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input TenantRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input TenantRoleBoolExp {
  _and: [TenantRoleBoolExp!]
  _not: TenantRoleBoolExp
  _or: [TenantRoleBoolExp!]
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  permissions: StringArrayComparisonExp
  tenantMemberRoles: TenantMemberRoleBoolExp
  tenantMemberRolesAggregate: TenantMemberRoleAggregateBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  type: StringComparisonExp
}

enum TenantRoleConstraint {
  tenant_role_pkey
}

input TenantRoleIncInput {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input TenantRoleInsertInput {
  color: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  tenantMemberRoles: TenantMemberRoleArrRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  type: String
}

type TenantRoleMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  tenantScopeId: bigint
  type: String
}

input TenantRoleMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type TenantRoleMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  tenantScopeId: bigint
  type: String
}

input TenantRoleMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

type TenantRoleMutationResponse {
  affectedRows: Int!
  returning: [TenantRole!]!
}

input TenantRoleObjRelInsertInput {
  data: TenantRoleInsertInput!
  onConflict: TenantRoleOnConflict
}

input TenantRoleOnConflict {
  constraint: TenantRoleConstraint!
  updateColumns: [TenantRoleUpdateColumn!]! = []
  where: TenantRoleBoolExp
}

input TenantRoleOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  tenantMemberRolesAggregate: TenantMemberRoleAggregateOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  type: OrderBy
}

input TenantRolePkColumnsInput {
  id: bigint!
}

enum TenantRoleSelectColumn {
  color
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  permissions
  tenantScopeId
  type
}

input TenantRoleSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  tenantScopeId: bigint
  type: String
}

type TenantRoleStddevFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input TenantRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type TenantRoleStddevPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input TenantRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type TenantRoleStddevSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input TenantRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

input TenantRoleStreamCursorInput {
  initialValue: TenantRoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input TenantRoleStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  tenantScopeId: bigint
  type: String
}

type TenantRoleSumFields {
  createdById: bigint
  id: bigint
  tenantScopeId: bigint
}

input TenantRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum TenantRoleUpdateColumn {
  color
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  permissions
  tenantScopeId
  type
}

input TenantRoleUpdates {
  _inc: TenantRoleIncInput
  _set: TenantRoleSetInput
  where: TenantRoleBoolExp!
}

type TenantRoleVarianceFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input TenantRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type TenantRoleVarPopFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input TenantRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

type TenantRoleVarSampFields {
  createdById: Float
  id: Float
  tenantScopeId: Float
}

input TenantRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantScopeId: OrderBy
}

enum TenantSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  domain
  eventValidationFormId
  id
  isOidcEnabled
  oidcCallbackUri
  oidcClientId
  oidcClientSecret
  oidcDiscoveryUrl
  oidcName
  oidcScopes
  pointName
}

enum TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns {
  isOidcEnabled
}

enum TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns {
  isOidcEnabled
}

input TenantSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  isOidcEnabled: Boolean
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

type TenantStddevFields {
  actorId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantStddevPopFields {
  actorId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantStddevSampFields {
  actorId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

input TenantStreamCursorInput {
  initialValue: TenantStreamCursorValueInput!
  ordering: CursorOrdering
}

input TenantStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  isOidcEnabled: Boolean
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

type TenantSumFields {
  actorId: bigint
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
}

input TenantSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

enum TenantUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  domain
  eventValidationFormId
  id
  isOidcEnabled
  oidcCallbackUri
  oidcClientId
  oidcClientSecret
  oidcDiscoveryUrl
  oidcName
  oidcScopes
  pointName
}

input TenantUpdates {
  _inc: TenantIncInput
  _set: TenantSetInput
  where: TenantBoolExp!
}

type TenantVarianceFields {
  actorId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantVarPopFields {
  actorId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantVarSampFields {
  actorId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

scalar timestamptz

input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

type Transaction {
  amount: Float!
  bankAccount: BankAccount!
  bankAccountId: bigint!
  category: String!
  createdAt: timestamptz!
  createdBy: User
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  event: Event
  eventId: bigint
  expense: Expense
  expenseId: bigint
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  hiddenAt: timestamptz
  id: bigint!
  initiatedBy: User
  initiatedById: bigint
  initiatedByType: String!
  isOnline: Boolean!
  location: Location
  locationId: bigint
  method: String!
  payedAt: timestamptz!
  payedBy: Actor!
  payedById: bigint!
  project: Project
  projectId: bigint
  receivedBy: Actor!
  receivedById: bigint!
  state: String!
  tenantScope: Tenant!
  tenantScopeId: bigint!
  transactionAttachments(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): [TransactionAttachments!]!
  transactionAttachmentsAggregate(distinctOn: [TransactionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionAttachmentsOrderBy!], where: TransactionAttachmentsBoolExp): TransactionAttachmentsAggregate!
}

type TransactionAggregate {
  aggregate: TransactionAggregateFields
  nodes: [Transaction!]!
}

input TransactionAggregateBoolExp {
  bool_and: transactionAggregateBoolExpBool_and
  bool_or: transactionAggregateBoolExpBool_or
  count: transactionAggregateBoolExpCount
}

input transactionAggregateBoolExpBool_and {
  arguments: TransactionSelectColumnTransactionAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TransactionBoolExp
  predicate: BooleanComparisonExp!
}

input transactionAggregateBoolExpBool_or {
  arguments: TransactionSelectColumnTransactionAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TransactionBoolExp
  predicate: BooleanComparisonExp!
}

input transactionAggregateBoolExpCount {
  arguments: [TransactionSelectColumn!]
  distinct: Boolean
  filter: TransactionBoolExp
  predicate: IntComparisonExp!
}

type TransactionAggregateFields {
  avg: TransactionAvgFields
  count(columns: [TransactionSelectColumn!], distinct: Boolean): Int!
  max: TransactionMaxFields
  min: TransactionMinFields
  stddev: TransactionStddevFields
  stddevPop: TransactionStddevPopFields
  stddevSamp: TransactionStddevSampFields
  sum: TransactionSumFields
  varPop: TransactionVarPopFields
  varSamp: TransactionVarSampFields
  variance: TransactionVarianceFields
}

input TransactionAggregateOrderBy {
  avg: TransactionAvgOrderBy
  count: OrderBy
  max: TransactionMaxOrderBy
  min: TransactionMinOrderBy
  stddev: TransactionStddevOrderBy
  stddevPop: TransactionStddevPopOrderBy
  stddevSamp: TransactionStddevSampOrderBy
  sum: TransactionSumOrderBy
  varPop: TransactionVarPopOrderBy
  varSamp: TransactionVarSampOrderBy
  variance: TransactionVarianceOrderBy
}

input TransactionArrRelInsertInput {
  data: [TransactionInsertInput!]!
  onConflict: TransactionOnConflict
}

type TransactionAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  transaction: Transaction!
  transactionId: bigint!
}

type TransactionAttachmentsAggregate {
  aggregate: TransactionAttachmentsAggregateFields
  nodes: [TransactionAttachments!]!
}

input TransactionAttachmentsAggregateBoolExp {
  count: transactionAttachmentsAggregateBoolExpCount
}

input transactionAttachmentsAggregateBoolExpCount {
  arguments: [TransactionAttachmentsSelectColumn!]
  distinct: Boolean
  filter: TransactionAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type TransactionAttachmentsAggregateFields {
  avg: TransactionAttachmentsAvgFields
  count(columns: [TransactionAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: TransactionAttachmentsMaxFields
  min: TransactionAttachmentsMinFields
  stddev: TransactionAttachmentsStddevFields
  stddevPop: TransactionAttachmentsStddevPopFields
  stddevSamp: TransactionAttachmentsStddevSampFields
  sum: TransactionAttachmentsSumFields
  varPop: TransactionAttachmentsVarPopFields
  varSamp: TransactionAttachmentsVarSampFields
  variance: TransactionAttachmentsVarianceFields
}

input TransactionAttachmentsAggregateOrderBy {
  avg: TransactionAttachmentsAvgOrderBy
  count: OrderBy
  max: TransactionAttachmentsMaxOrderBy
  min: TransactionAttachmentsMinOrderBy
  stddev: TransactionAttachmentsStddevOrderBy
  stddevPop: TransactionAttachmentsStddevPopOrderBy
  stddevSamp: TransactionAttachmentsStddevSampOrderBy
  sum: TransactionAttachmentsSumOrderBy
  varPop: TransactionAttachmentsVarPopOrderBy
  varSamp: TransactionAttachmentsVarSampOrderBy
  variance: TransactionAttachmentsVarianceOrderBy
}

input TransactionAttachmentsArrRelInsertInput {
  data: [TransactionAttachmentsInsertInput!]!
  onConflict: TransactionAttachmentsOnConflict
}

type TransactionAttachmentsAvgFields {
  fileUploadId: Float
  transactionId: Float
}

input TransactionAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

input TransactionAttachmentsBoolExp {
  _and: [TransactionAttachmentsBoolExp!]
  _not: TransactionAttachmentsBoolExp
  _or: [TransactionAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  transaction: TransactionBoolExp
  transactionId: BigintComparisonExp
}

enum TransactionAttachmentsConstraint {
  transaction_attachments_pkey
}

input TransactionAttachmentsIncInput {
  fileUploadId: bigint
  transactionId: bigint
}

input TransactionAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  transaction: TransactionObjRelInsertInput
  transactionId: bigint
}

type TransactionAttachmentsMaxFields {
  fileUploadId: bigint
  transactionId: bigint
}

input TransactionAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

type TransactionAttachmentsMinFields {
  fileUploadId: bigint
  transactionId: bigint
}

input TransactionAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

type TransactionAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [TransactionAttachments!]!
}

input TransactionAttachmentsOnConflict {
  constraint: TransactionAttachmentsConstraint!
  updateColumns: [TransactionAttachmentsUpdateColumn!]! = []
  where: TransactionAttachmentsBoolExp
}

input TransactionAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  transaction: TransactionOrderBy
  transactionId: OrderBy
}

input TransactionAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  transactionId: bigint!
}

enum TransactionAttachmentsSelectColumn {
  fileUploadId
  transactionId
}

input TransactionAttachmentsSetInput {
  fileUploadId: bigint
  transactionId: bigint
}

type TransactionAttachmentsStddevFields {
  fileUploadId: Float
  transactionId: Float
}

input TransactionAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

type TransactionAttachmentsStddevPopFields {
  fileUploadId: Float
  transactionId: Float
}

input TransactionAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

type TransactionAttachmentsStddevSampFields {
  fileUploadId: Float
  transactionId: Float
}

input TransactionAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

input TransactionAttachmentsStreamCursorInput {
  initialValue: TransactionAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input TransactionAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  transactionId: bigint
}

type TransactionAttachmentsSumFields {
  fileUploadId: bigint
  transactionId: bigint
}

input TransactionAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

enum TransactionAttachmentsUpdateColumn {
  fileUploadId
  transactionId
}

input TransactionAttachmentsUpdates {
  _inc: TransactionAttachmentsIncInput
  _set: TransactionAttachmentsSetInput
  where: TransactionAttachmentsBoolExp!
}

type TransactionAttachmentsVarianceFields {
  fileUploadId: Float
  transactionId: Float
}

input TransactionAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

type TransactionAttachmentsVarPopFields {
  fileUploadId: Float
  transactionId: Float
}

input TransactionAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

type TransactionAttachmentsVarSampFields {
  fileUploadId: Float
  transactionId: Float
}

input TransactionAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  transactionId: OrderBy
}

type TransactionAvgFields {
  amount: Float
  bankAccountId: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  tenantScopeId: Float
}

input TransactionAvgOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

input TransactionBoolExp {
  _and: [TransactionBoolExp!]
  _not: TransactionBoolExp
  _or: [TransactionBoolExp!]
  amount: FloatComparisonExp
  bankAccount: BankAccountBoolExp
  bankAccountId: BigintComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  initiatedBy: UserBoolExp
  initiatedById: BigintComparisonExp
  initiatedByType: StringComparisonExp
  isOnline: BooleanComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  method: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedBy: ActorBoolExp
  payedById: BigintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  receivedBy: ActorBoolExp
  receivedById: BigintComparisonExp
  state: StringComparisonExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
  transactionAttachments: TransactionAttachmentsBoolExp
  transactionAttachmentsAggregate: TransactionAttachmentsAggregateBoolExp
}

enum TransactionConstraint {
  transaction_expense_id_unique
  transaction_pkey
}

input TransactionIncInput {
  amount: Float
  bankAccountId: bigint
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  initiatedById: bigint
  locationId: bigint
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  tenantScopeId: bigint
}

input TransactionInsertInput {
  amount: Float
  bankAccount: BankAccountObjRelInsertInput
  bankAccountId: bigint
  category: String
  createdAt: timestamptz
  createdBy: UserObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  grantAllocates: GrantAllocateArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  initiatedBy: UserObjRelInsertInput
  initiatedById: bigint
  initiatedByType: String
  isOnline: Boolean
  location: LocationObjRelInsertInput
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedBy: ActorObjRelInsertInput
  payedById: bigint
  project: ProjectObjRelInsertInput
  projectId: bigint
  receivedBy: ActorObjRelInsertInput
  receivedById: bigint
  state: String
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
  transactionAttachments: TransactionAttachmentsArrRelInsertInput
}

type TransactionMaxFields {
  amount: Float
  bankAccountId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  initiatedByType: String
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  state: String
  tenantScopeId: bigint
}

input TransactionMaxOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  initiatedByType: OrderBy
  locationId: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type TransactionMinFields {
  amount: Float
  bankAccountId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  initiatedByType: String
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  state: String
  tenantScopeId: bigint
}

input TransactionMinOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  initiatedByType: OrderBy
  locationId: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  state: OrderBy
  tenantScopeId: OrderBy
}

type TransactionMutationResponse {
  affectedRows: Int!
  returning: [Transaction!]!
}

input TransactionObjRelInsertInput {
  data: TransactionInsertInput!
  onConflict: TransactionOnConflict
}

input TransactionOnConflict {
  constraint: TransactionConstraint!
  updateColumns: [TransactionUpdateColumn!]! = []
  where: TransactionBoolExp
}

input TransactionOrderBy {
  amount: OrderBy
  bankAccount: BankAccountOrderBy
  bankAccountId: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedBy: UserOrderBy
  initiatedById: OrderBy
  initiatedByType: OrderBy
  isOnline: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedBy: ActorOrderBy
  payedById: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  receivedBy: ActorOrderBy
  receivedById: OrderBy
  state: OrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
  transactionAttachmentsAggregate: TransactionAttachmentsAggregateOrderBy
}

input TransactionPkColumnsInput {
  id: bigint!
}

enum TransactionSelectColumn {
  amount
  bankAccountId
  category
  createdAt
  createdById
  deletedAt
  description
  eventId
  expenseId
  hiddenAt
  id
  initiatedById
  initiatedByType
  isOnline
  locationId
  method
  payedAt
  payedById
  projectId
  receivedById
  state
  tenantScopeId
}

enum TransactionSelectColumnTransactionAggregateBoolExpBool_andArgumentsColumns {
  isOnline
}

enum TransactionSelectColumnTransactionAggregateBoolExpBool_orArgumentsColumns {
  isOnline
}

input TransactionSetInput {
  amount: Float
  bankAccountId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  initiatedByType: String
  isOnline: Boolean
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  state: String
  tenantScopeId: bigint
}

type TransactionStddevFields {
  amount: Float
  bankAccountId: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  tenantScopeId: Float
}

input TransactionStddevOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

type TransactionStddevPopFields {
  amount: Float
  bankAccountId: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  tenantScopeId: Float
}

input TransactionStddevPopOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

type TransactionStddevSampFields {
  amount: Float
  bankAccountId: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  tenantScopeId: Float
}

input TransactionStddevSampOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

input TransactionStreamCursorInput {
  initialValue: TransactionStreamCursorValueInput!
  ordering: CursorOrdering
}

input TransactionStreamCursorValueInput {
  amount: Float
  bankAccountId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  initiatedByType: String
  isOnline: Boolean
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  state: String
  tenantScopeId: bigint
}

type TransactionSumFields {
  amount: Float
  bankAccountId: bigint
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  initiatedById: bigint
  locationId: bigint
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  tenantScopeId: bigint
}

input TransactionSumOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

enum TransactionUpdateColumn {
  amount
  bankAccountId
  category
  createdAt
  createdById
  deletedAt
  description
  eventId
  expenseId
  hiddenAt
  id
  initiatedById
  initiatedByType
  isOnline
  locationId
  method
  payedAt
  payedById
  projectId
  receivedById
  state
  tenantScopeId
}

input TransactionUpdates {
  _inc: TransactionIncInput
  _set: TransactionSetInput
  where: TransactionBoolExp!
}

type TransactionVarianceFields {
  amount: Float
  bankAccountId: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  tenantScopeId: Float
}

input TransactionVarianceOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

type TransactionVarPopFields {
  amount: Float
  bankAccountId: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  tenantScopeId: Float
}

input TransactionVarPopOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

type TransactionVarSampFields {
  amount: Float
  bankAccountId: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  tenantScopeId: Float
}

input TransactionVarSampOrderBy {
  amount: OrderBy
  bankAccountId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  tenantScopeId: OrderBy
}

type User {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actor: Actor!
  actorId: bigint!
  createdActions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  createdActionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  createdActorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  createdActorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  createdActorTags(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): [ActorTag!]!
  createdActorTagsAggregate(distinctOn: [ActorTagSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagOrderBy!], where: ActorTagBoolExp): ActorTagAggregate!
  createdActors(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  createdActorsAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  createdAddresses(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): [Address!]!
  createdAddressesAggregate(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): AddressAggregate!
  createdAt: timestamptz!
  createdBankAccounts(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): [BankAccount!]!
  createdBankAccountsAggregate(distinctOn: [BankAccountSelectColumn!], limit: Int, offset: Int, orderBy: [BankAccountOrderBy!], where: BankAccountBoolExp): BankAccountAggregate!
  createdBankInfos(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): [BankInfo!]!
  createdBankInfosAggregate(distinctOn: [BankInfoSelectColumn!], limit: Int, offset: Int, orderBy: [BankInfoOrderBy!], where: BankInfoBoolExp): BankInfoAggregate!
  createdBy: User
  createdById: bigint
  createdCampusClusters(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  createdCampusClustersAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  createdCampuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  createdCampusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  createdEventApprovalSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  createdEventApprovalStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  createdEventApprovalValidators(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): [EventApprovalValidator!]!
  createdEventApprovalValidatorsAggregate(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): EventApprovalValidatorAggregate!
  createdEventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  createdEventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  createdEventFavorites(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  createdEventFavoritesAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  createdEventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  createdEventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  createdEventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  createdEventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  createdEventSupervisors(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  createdEventSupervisorsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  createdEvents(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  createdEventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  createdExpenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  createdExpenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  createdExpenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  createdExpensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  createdFileUploads(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  createdFileUploadsAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  createdFormSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  createdFormSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  createdForms(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  createdFormsAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  createdGrantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  createdGrantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  createdGrants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  createdGrantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  createdLegalUnitLocations(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  createdLegalUnitLocationsAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  createdLegalUnits(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  createdLegalUnitsAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  createdLocations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  createdLocationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  createdMissionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  createdMissionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  createdMissions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  createdMissionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  createdProjects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  createdProjectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  createdSocials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  createdSocialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  createdTags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  createdTagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  createdTeamDocuments(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): [TeamDocument!]!
  createdTeamDocumentsAggregate(distinctOn: [TeamDocumentSelectColumn!], limit: Int, offset: Int, orderBy: [TeamDocumentOrderBy!], where: TeamDocumentBoolExp): TeamDocumentAggregate!
  createdTeamHistories(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  createdTeamHistoriesAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  createdTeamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  createdTeamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  createdTeamMemberRoles(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): [TeamMemberRole!]!
  createdTeamMemberRolesAggregate(distinctOn: [TeamMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRoleOrderBy!], where: TeamMemberRoleBoolExp): TeamMemberRoleAggregate!
  createdTeamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  createdTeamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  createdTeamRoles(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): [TeamRole!]!
  createdTeamRolesAggregate(distinctOn: [TeamRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TeamRoleOrderBy!], where: TeamRoleBoolExp): TeamRoleAggregate!
  createdTeams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  createdTeamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  createdTenantMembers(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): [TenantMember!]!
  createdTenantMembersAggregate(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): TenantMemberAggregate!
  createdTenantRoles(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): [TenantRole!]!
  createdTenantRolesAggregate(distinctOn: [TenantRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantRoleOrderBy!], where: TenantRoleBoolExp): TenantRoleAggregate!
  createdTenants(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  createdTenantsAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  createdTransactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  createdTransactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  createdUsers(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  createdUsersAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
  deletedAt: timestamptz
  eventApprovalValidators(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): [EventApprovalValidator!]!
  eventApprovalValidatorsAggregate(distinctOn: [EventApprovalValidatorSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalValidatorOrderBy!], where: EventApprovalValidatorBoolExp): EventApprovalValidatorAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  firstName: String!
  following(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followingAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  hiddenAt: timestamptz
  id: bigint!
  initiatedTransactions(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): [Transaction!]!
  initiatedTransactionsAggregate(distinctOn: [TransactionSelectColumn!], limit: Int, offset: Int, orderBy: [TransactionOrderBy!], where: TransactionBoolExp): TransactionAggregate!
  isBot: Boolean!
  isDarkModePreferred: Boolean!
  isDataAnonymizedOnDeactivation: Boolean!
  isDataExportedOnDeactivation: Boolean!
  isIntroductionFinished: Boolean!
  isOnboardingFinished: Boolean!
  lastName: String!
  middleNames: [String!]!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  passwordHash: String
  points: Float!
  pointsProcessedActions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  pointsProcessedActionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  pointsProcessedMissionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  pointsProcessedMissionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  processedEventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  processedEventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  processedExpenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  processedExpensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  processedMissionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  processedMissionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  processedParticipationEventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  processedParticipationEventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  processedReceivedAmountGrantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  processedReceivedAmountGrantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  processedReceivedAmountGrants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  processedReceivedAmountGrantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  processedTeamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  processedTeamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  slug: String!
  supervisedEvents(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  supervisedEventsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMemberships(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembershipsAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  tenantMemberRoles(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): [TenantMemberRole!]!
  tenantMemberRolesAggregate(distinctOn: [TenantMemberRoleSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberRoleOrderBy!], where: TenantMemberRoleBoolExp): TenantMemberRoleAggregate!
  tenantMemberships(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): [TenantMember!]!
  tenantMembershipsAggregate(distinctOn: [TenantMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TenantMemberOrderBy!], where: TenantMemberBoolExp): TenantMemberAggregate!
  tenantScope: Tenant!
  tenantScopeId: bigint!
}

type UserAggregate {
  aggregate: UserAggregateFields
  nodes: [User!]!
}

input UserAggregateBoolExp {
  bool_and: userAggregateBoolExpBool_and
  bool_or: userAggregateBoolExpBool_or
  count: userAggregateBoolExpCount
}

input userAggregateBoolExpBool_and {
  arguments: UserSelectColumnUserAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: UserBoolExp
  predicate: BooleanComparisonExp!
}

input userAggregateBoolExpBool_or {
  arguments: UserSelectColumnUserAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: UserBoolExp
  predicate: BooleanComparisonExp!
}

input userAggregateBoolExpCount {
  arguments: [UserSelectColumn!]
  distinct: Boolean
  filter: UserBoolExp
  predicate: IntComparisonExp!
}

type UserAggregateFields {
  avg: UserAvgFields
  count(columns: [UserSelectColumn!], distinct: Boolean): Int!
  max: UserMaxFields
  min: UserMinFields
  stddev: UserStddevFields
  stddevPop: UserStddevPopFields
  stddevSamp: UserStddevSampFields
  sum: UserSumFields
  varPop: UserVarPopFields
  varSamp: UserVarSampFields
  variance: UserVarianceFields
}

input UserAggregateOrderBy {
  avg: UserAvgOrderBy
  count: OrderBy
  max: UserMaxOrderBy
  min: UserMinOrderBy
  stddev: UserStddevOrderBy
  stddevPop: UserStddevPopOrderBy
  stddevSamp: UserStddevSampOrderBy
  sum: UserSumOrderBy
  varPop: UserVarPopOrderBy
  varSamp: UserVarSampOrderBy
  variance: UserVarianceOrderBy
}

input UserArrRelInsertInput {
  data: [UserInsertInput!]!
  onConflict: UserOnConflict
}

type UserAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  points: Float
  tenantScopeId: Float
}

input UserAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

input UserBoolExp {
  _and: [UserBoolExp!]
  _not: UserBoolExp
  _or: [UserBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdActions: ActionBoolExp
  createdActionsAggregate: ActionAggregateBoolExp
  createdActorImages: ActorImageBoolExp
  createdActorImagesAggregate: ActorImageAggregateBoolExp
  createdActorTags: ActorTagBoolExp
  createdActorTagsAggregate: ActorTagAggregateBoolExp
  createdActors: ActorBoolExp
  createdActorsAggregate: ActorAggregateBoolExp
  createdAddresses: AddressBoolExp
  createdAddressesAggregate: AddressAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBankAccounts: BankAccountBoolExp
  createdBankAccountsAggregate: BankAccountAggregateBoolExp
  createdBankInfos: BankInfoBoolExp
  createdBankInfosAggregate: BankInfoAggregateBoolExp
  createdBy: UserBoolExp
  createdById: BigintComparisonExp
  createdCampusClusters: CampusClusterBoolExp
  createdCampusClustersAggregate: CampusClusterAggregateBoolExp
  createdCampuses: CampusBoolExp
  createdCampusesAggregate: CampusAggregateBoolExp
  createdEventApprovalSteps: EventApprovalStepBoolExp
  createdEventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  createdEventApprovalValidators: EventApprovalValidatorBoolExp
  createdEventApprovalValidatorsAggregate: EventApprovalValidatorAggregateBoolExp
  createdEventApprovals: EventApprovalBoolExp
  createdEventApprovalsAggregate: EventApprovalAggregateBoolExp
  createdEventFavorites: EventFavoriteBoolExp
  createdEventFavoritesAggregate: EventFavoriteAggregateBoolExp
  createdEventJoins: EventJoinBoolExp
  createdEventJoinsAggregate: EventJoinAggregateBoolExp
  createdEventOrganizes: EventOrganizeBoolExp
  createdEventOrganizesAggregate: EventOrganizeAggregateBoolExp
  createdEventSupervisors: EventSupervisorBoolExp
  createdEventSupervisorsAggregate: EventSupervisorAggregateBoolExp
  createdEvents: EventBoolExp
  createdEventsAggregate: EventAggregateBoolExp
  createdExpenseItems: ExpenseItemBoolExp
  createdExpenseItemsAggregate: ExpenseItemAggregateBoolExp
  createdExpenses: ExpenseBoolExp
  createdExpensesAggregate: ExpenseAggregateBoolExp
  createdFileUploads: FileUploadBoolExp
  createdFileUploadsAggregate: FileUploadAggregateBoolExp
  createdFormSubmissions: FormSubmissionBoolExp
  createdFormSubmissionsAggregate: FormSubmissionAggregateBoolExp
  createdForms: FormBoolExp
  createdFormsAggregate: FormAggregateBoolExp
  createdGrantAllocates: GrantAllocateBoolExp
  createdGrantAllocatesAggregate: GrantAllocateAggregateBoolExp
  createdGrants: GrantBoolExp
  createdGrantsAggregate: GrantAggregateBoolExp
  createdLegalUnitLocations: LegalUnitLocationBoolExp
  createdLegalUnitLocationsAggregate: LegalUnitLocationAggregateBoolExp
  createdLegalUnits: LegalUnitBoolExp
  createdLegalUnitsAggregate: LegalUnitAggregateBoolExp
  createdLocations: LocationBoolExp
  createdLocationsAggregate: LocationAggregateBoolExp
  createdMissionJoins: MissionJoinBoolExp
  createdMissionJoinsAggregate: MissionJoinAggregateBoolExp
  createdMissions: MissionBoolExp
  createdMissionsAggregate: MissionAggregateBoolExp
  createdProjects: ProjectBoolExp
  createdProjectsAggregate: ProjectAggregateBoolExp
  createdSocials: SocialBoolExp
  createdSocialsAggregate: SocialAggregateBoolExp
  createdTags: TagBoolExp
  createdTagsAggregate: TagAggregateBoolExp
  createdTeamDocuments: TeamDocumentBoolExp
  createdTeamDocumentsAggregate: TeamDocumentAggregateBoolExp
  createdTeamHistories: TeamHistoryBoolExp
  createdTeamHistoriesAggregate: TeamHistoryAggregateBoolExp
  createdTeamJoins: TeamJoinBoolExp
  createdTeamJoinsAggregate: TeamJoinAggregateBoolExp
  createdTeamMemberRoles: TeamMemberRoleBoolExp
  createdTeamMemberRolesAggregate: TeamMemberRoleAggregateBoolExp
  createdTeamMembers: TeamMemberBoolExp
  createdTeamMembersAggregate: TeamMemberAggregateBoolExp
  createdTeamRoles: TeamRoleBoolExp
  createdTeamRolesAggregate: TeamRoleAggregateBoolExp
  createdTeams: TeamBoolExp
  createdTeamsAggregate: TeamAggregateBoolExp
  createdTenantMembers: TenantMemberBoolExp
  createdTenantMembersAggregate: TenantMemberAggregateBoolExp
  createdTenantRoles: TenantRoleBoolExp
  createdTenantRolesAggregate: TenantRoleAggregateBoolExp
  createdTenants: TenantBoolExp
  createdTenantsAggregate: TenantAggregateBoolExp
  createdTransactions: TransactionBoolExp
  createdTransactionsAggregate: TransactionAggregateBoolExp
  createdUsers: UserBoolExp
  createdUsersAggregate: UserAggregateBoolExp
  deletedAt: TimestamptzComparisonExp
  eventApprovalValidators: EventApprovalValidatorBoolExp
  eventApprovalValidatorsAggregate: EventApprovalValidatorAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  firstName: StringComparisonExp
  following: FollowBoolExp
  followingAggregate: FollowAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  initiatedTransactions: TransactionBoolExp
  initiatedTransactionsAggregate: TransactionAggregateBoolExp
  isBot: BooleanComparisonExp
  isDarkModePreferred: BooleanComparisonExp
  isDataAnonymizedOnDeactivation: BooleanComparisonExp
  isDataExportedOnDeactivation: BooleanComparisonExp
  isIntroductionFinished: BooleanComparisonExp
  isOnboardingFinished: BooleanComparisonExp
  lastName: StringComparisonExp
  middleNames: StringArrayComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  passwordHash: StringComparisonExp
  points: FloatComparisonExp
  pointsProcessedActions: ActionBoolExp
  pointsProcessedActionsAggregate: ActionAggregateBoolExp
  pointsProcessedMissionJoins: MissionJoinBoolExp
  pointsProcessedMissionJoinsAggregate: MissionJoinAggregateBoolExp
  processedEventJoins: EventJoinBoolExp
  processedEventJoinsAggregate: EventJoinAggregateBoolExp
  processedExpenses: ExpenseBoolExp
  processedExpensesAggregate: ExpenseAggregateBoolExp
  processedMissionJoins: MissionJoinBoolExp
  processedMissionJoinsAggregate: MissionJoinAggregateBoolExp
  processedParticipationEventJoins: EventJoinBoolExp
  processedParticipationEventJoinsAggregate: EventJoinAggregateBoolExp
  processedReceivedAmountGrantAllocates: GrantAllocateBoolExp
  processedReceivedAmountGrantAllocatesAggregate: GrantAllocateAggregateBoolExp
  processedReceivedAmountGrants: GrantBoolExp
  processedReceivedAmountGrantsAggregate: GrantAggregateBoolExp
  processedTeamJoins: TeamJoinBoolExp
  processedTeamJoinsAggregate: TeamJoinAggregateBoolExp
  slug: StringComparisonExp
  supervisedEvents: EventSupervisorBoolExp
  supervisedEventsAggregate: EventSupervisorAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMemberships: TeamMemberBoolExp
  teamMembershipsAggregate: TeamMemberAggregateBoolExp
  tenantMemberRoles: TenantMemberRoleBoolExp
  tenantMemberRolesAggregate: TenantMemberRoleAggregateBoolExp
  tenantMemberships: TenantMemberBoolExp
  tenantMembershipsAggregate: TenantMemberAggregateBoolExp
  tenantScope: TenantBoolExp
  tenantScopeId: BigintComparisonExp
}

enum UserConstraint {
  user_actor_id_unique
  user_pkey
  user_slug_unique
}

input UserIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  points: Float
  tenantScopeId: bigint
}

input UserInsertInput {
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdActions: ActionArrRelInsertInput
  createdActorImages: ActorImageArrRelInsertInput
  createdActorTags: ActorTagArrRelInsertInput
  createdActors: ActorArrRelInsertInput
  createdAddresses: AddressArrRelInsertInput
  createdAt: timestamptz
  createdBankAccounts: BankAccountArrRelInsertInput
  createdBankInfos: BankInfoArrRelInsertInput
  createdBy: UserObjRelInsertInput
  createdById: bigint
  createdCampusClusters: CampusClusterArrRelInsertInput
  createdCampuses: CampusArrRelInsertInput
  createdEventApprovalSteps: EventApprovalStepArrRelInsertInput
  createdEventApprovalValidators: EventApprovalValidatorArrRelInsertInput
  createdEventApprovals: EventApprovalArrRelInsertInput
  createdEventFavorites: EventFavoriteArrRelInsertInput
  createdEventJoins: EventJoinArrRelInsertInput
  createdEventOrganizes: EventOrganizeArrRelInsertInput
  createdEventSupervisors: EventSupervisorArrRelInsertInput
  createdEvents: EventArrRelInsertInput
  createdExpenseItems: ExpenseItemArrRelInsertInput
  createdExpenses: ExpenseArrRelInsertInput
  createdFileUploads: FileUploadArrRelInsertInput
  createdFormSubmissions: FormSubmissionArrRelInsertInput
  createdForms: FormArrRelInsertInput
  createdGrantAllocates: GrantAllocateArrRelInsertInput
  createdGrants: GrantArrRelInsertInput
  createdLegalUnitLocations: LegalUnitLocationArrRelInsertInput
  createdLegalUnits: LegalUnitArrRelInsertInput
  createdLocations: LocationArrRelInsertInput
  createdMissionJoins: MissionJoinArrRelInsertInput
  createdMissions: MissionArrRelInsertInput
  createdProjects: ProjectArrRelInsertInput
  createdSocials: SocialArrRelInsertInput
  createdTags: TagArrRelInsertInput
  createdTeamDocuments: TeamDocumentArrRelInsertInput
  createdTeamHistories: TeamHistoryArrRelInsertInput
  createdTeamJoins: TeamJoinArrRelInsertInput
  createdTeamMemberRoles: TeamMemberRoleArrRelInsertInput
  createdTeamMembers: TeamMemberArrRelInsertInput
  createdTeamRoles: TeamRoleArrRelInsertInput
  createdTeams: TeamArrRelInsertInput
  createdTenantMembers: TenantMemberArrRelInsertInput
  createdTenantRoles: TenantRoleArrRelInsertInput
  createdTenants: TenantArrRelInsertInput
  createdTransactions: TransactionArrRelInsertInput
  createdUsers: UserArrRelInsertInput
  deletedAt: timestamptz
  eventApprovalValidators: EventApprovalValidatorArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  firstName: String
  following: FollowArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  initiatedTransactions: TransactionArrRelInsertInput
  isBot: Boolean
  isDarkModePreferred: Boolean
  isDataAnonymizedOnDeactivation: Boolean
  isDataExportedOnDeactivation: Boolean
  isIntroductionFinished: Boolean
  isOnboardingFinished: Boolean
  lastName: String
  middleNames: [String!]
  missionJoins: MissionJoinArrRelInsertInput
  passwordHash: String
  points: Float
  pointsProcessedActions: ActionArrRelInsertInput
  pointsProcessedMissionJoins: MissionJoinArrRelInsertInput
  processedEventJoins: EventJoinArrRelInsertInput
  processedExpenses: ExpenseArrRelInsertInput
  processedMissionJoins: MissionJoinArrRelInsertInput
  processedParticipationEventJoins: EventJoinArrRelInsertInput
  processedReceivedAmountGrantAllocates: GrantAllocateArrRelInsertInput
  processedReceivedAmountGrants: GrantArrRelInsertInput
  processedTeamJoins: TeamJoinArrRelInsertInput
  slug: String
  supervisedEvents: EventSupervisorArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMemberships: TeamMemberArrRelInsertInput
  tenantMemberRoles: TenantMemberRoleArrRelInsertInput
  tenantMemberships: TenantMemberArrRelInsertInput
  tenantScope: TenantObjRelInsertInput
  tenantScopeId: bigint
}

type UserMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: [String!]
  passwordHash: String
  points: Float
  slug: String
  tenantScopeId: bigint
}

input UserMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  middleNames: OrderBy
  passwordHash: OrderBy
  points: OrderBy
  slug: OrderBy
  tenantScopeId: OrderBy
}

type UserMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: [String!]
  passwordHash: String
  points: Float
  slug: String
  tenantScopeId: bigint
}

input UserMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  middleNames: OrderBy
  passwordHash: OrderBy
  points: OrderBy
  slug: OrderBy
  tenantScopeId: OrderBy
}

type UserMutationResponse {
  affectedRows: Int!
  returning: [User!]!
}

input UserObjRelInsertInput {
  data: UserInsertInput!
  onConflict: UserOnConflict
}

input UserOnConflict {
  constraint: UserConstraint!
  updateColumns: [UserUpdateColumn!]! = []
  where: UserBoolExp
}

input UserOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  actorId: OrderBy
  createdActionsAggregate: ActionAggregateOrderBy
  createdActorImagesAggregate: ActorImageAggregateOrderBy
  createdActorTagsAggregate: ActorTagAggregateOrderBy
  createdActorsAggregate: ActorAggregateOrderBy
  createdAddressesAggregate: AddressAggregateOrderBy
  createdAt: OrderBy
  createdBankAccountsAggregate: BankAccountAggregateOrderBy
  createdBankInfosAggregate: BankInfoAggregateOrderBy
  createdBy: UserOrderBy
  createdById: OrderBy
  createdCampusClustersAggregate: CampusClusterAggregateOrderBy
  createdCampusesAggregate: CampusAggregateOrderBy
  createdEventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  createdEventApprovalValidatorsAggregate: EventApprovalValidatorAggregateOrderBy
  createdEventApprovalsAggregate: EventApprovalAggregateOrderBy
  createdEventFavoritesAggregate: EventFavoriteAggregateOrderBy
  createdEventJoinsAggregate: EventJoinAggregateOrderBy
  createdEventOrganizesAggregate: EventOrganizeAggregateOrderBy
  createdEventSupervisorsAggregate: EventSupervisorAggregateOrderBy
  createdEventsAggregate: EventAggregateOrderBy
  createdExpenseItemsAggregate: ExpenseItemAggregateOrderBy
  createdExpensesAggregate: ExpenseAggregateOrderBy
  createdFileUploadsAggregate: FileUploadAggregateOrderBy
  createdFormSubmissionsAggregate: FormSubmissionAggregateOrderBy
  createdFormsAggregate: FormAggregateOrderBy
  createdGrantAllocatesAggregate: GrantAllocateAggregateOrderBy
  createdGrantsAggregate: GrantAggregateOrderBy
  createdLegalUnitLocationsAggregate: LegalUnitLocationAggregateOrderBy
  createdLegalUnitsAggregate: LegalUnitAggregateOrderBy
  createdLocationsAggregate: LocationAggregateOrderBy
  createdMissionJoinsAggregate: MissionJoinAggregateOrderBy
  createdMissionsAggregate: MissionAggregateOrderBy
  createdProjectsAggregate: ProjectAggregateOrderBy
  createdSocialsAggregate: SocialAggregateOrderBy
  createdTagsAggregate: TagAggregateOrderBy
  createdTeamDocumentsAggregate: TeamDocumentAggregateOrderBy
  createdTeamHistoriesAggregate: TeamHistoryAggregateOrderBy
  createdTeamJoinsAggregate: TeamJoinAggregateOrderBy
  createdTeamMemberRolesAggregate: TeamMemberRoleAggregateOrderBy
  createdTeamMembersAggregate: TeamMemberAggregateOrderBy
  createdTeamRolesAggregate: TeamRoleAggregateOrderBy
  createdTeamsAggregate: TeamAggregateOrderBy
  createdTenantMembersAggregate: TenantMemberAggregateOrderBy
  createdTenantRolesAggregate: TenantRoleAggregateOrderBy
  createdTenantsAggregate: TenantAggregateOrderBy
  createdTransactionsAggregate: TransactionAggregateOrderBy
  createdUsersAggregate: UserAggregateOrderBy
  deletedAt: OrderBy
  eventApprovalValidatorsAggregate: EventApprovalValidatorAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  firstName: OrderBy
  followingAggregate: FollowAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedTransactionsAggregate: TransactionAggregateOrderBy
  isBot: OrderBy
  isDarkModePreferred: OrderBy
  isDataAnonymizedOnDeactivation: OrderBy
  isDataExportedOnDeactivation: OrderBy
  isIntroductionFinished: OrderBy
  isOnboardingFinished: OrderBy
  lastName: OrderBy
  middleNames: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  passwordHash: OrderBy
  points: OrderBy
  pointsProcessedActionsAggregate: ActionAggregateOrderBy
  pointsProcessedMissionJoinsAggregate: MissionJoinAggregateOrderBy
  processedEventJoinsAggregate: EventJoinAggregateOrderBy
  processedExpensesAggregate: ExpenseAggregateOrderBy
  processedMissionJoinsAggregate: MissionJoinAggregateOrderBy
  processedParticipationEventJoinsAggregate: EventJoinAggregateOrderBy
  processedReceivedAmountGrantAllocatesAggregate: GrantAllocateAggregateOrderBy
  processedReceivedAmountGrantsAggregate: GrantAggregateOrderBy
  processedTeamJoinsAggregate: TeamJoinAggregateOrderBy
  slug: OrderBy
  supervisedEventsAggregate: EventSupervisorAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembershipsAggregate: TeamMemberAggregateOrderBy
  tenantMemberRolesAggregate: TenantMemberRoleAggregateOrderBy
  tenantMembershipsAggregate: TenantMemberAggregateOrderBy
  tenantScope: TenantOrderBy
  tenantScopeId: OrderBy
}

input UserPkColumnsInput {
  id: bigint!
}

enum UserSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  firstName
  hiddenAt
  id
  isBot
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
  lastName
  middleNames
  passwordHash
  points
  slug
  tenantScopeId
}

enum UserSelectColumnUserAggregateBoolExpBool_andArgumentsColumns {
  isBot
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
}

enum UserSelectColumnUserAggregateBoolExpBool_orArgumentsColumns {
  isBot
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
}

input UserSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  isBot: Boolean
  isDarkModePreferred: Boolean
  isDataAnonymizedOnDeactivation: Boolean
  isDataExportedOnDeactivation: Boolean
  isIntroductionFinished: Boolean
  isOnboardingFinished: Boolean
  lastName: String
  middleNames: [String!]
  passwordHash: String
  points: Float
  slug: String
  tenantScopeId: bigint
}

type UserStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  points: Float
  tenantScopeId: Float
}

input UserStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

type UserStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  points: Float
  tenantScopeId: Float
}

input UserStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

type UserStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  points: Float
  tenantScopeId: Float
}

input UserStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

input UserStreamCursorInput {
  initialValue: UserStreamCursorValueInput!
  ordering: CursorOrdering
}

input UserStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  isBot: Boolean
  isDarkModePreferred: Boolean
  isDataAnonymizedOnDeactivation: Boolean
  isDataExportedOnDeactivation: Boolean
  isIntroductionFinished: Boolean
  isOnboardingFinished: Boolean
  lastName: String
  middleNames: [String!]
  passwordHash: String
  points: Float
  slug: String
  tenantScopeId: bigint
}

type UserSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  points: Float
  tenantScopeId: bigint
}

input UserSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

enum UserUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  firstName
  hiddenAt
  id
  isBot
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
  lastName
  middleNames
  passwordHash
  points
  slug
  tenantScopeId
}

input UserUpdates {
  _inc: UserIncInput
  _set: UserSetInput
  where: UserBoolExp!
}

type UserVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  points: Float
  tenantScopeId: Float
}

input UserVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

type UserVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  points: Float
  tenantScopeId: Float
}

input UserVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

type UserVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  points: Float
  tenantScopeId: Float
}

input UserVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  points: OrderBy
  tenantScopeId: OrderBy
}

input LoginInput {
  username: String!
  password: String!
}

type UserLogin {
  user: User!
  canManageTenant: Boolean!
  onboardingTeams: [Team!]!
}

type GeocodeAddress {
  latitude: Float!
  longitude: Float!
  category: String!
  name: String!
  streetNumber: String!
  street: String!
  zip: String!
  city: String!
  state: String!
  country: String!
  geoapifyId: String!
}

type Log {
  id: String!
  createdAt: timestamptz!
  createdBy: User
  eventType: String!
  context: String!
  entityName: String!
  entityId: bigint!
  diff: jsonb!
  note: String!
  team: Team
  event: Event
  user: User
  tenant: Tenant
}

type AddressInfo {
  streetNumber: Int
  streetType: String!
  streetName: String!
  city: String!
  cityCode: String!
}

type CompanyInfo {
  nationalId: String!
  type: String
  activity: String
  name: String!
  address: AddressInfo!
}

input AddressInfoInput {
  streetNumber: Int!
  streetType: String!
  streetName: String!
  city: String!
  cityCode: String!
}

input SearchCompanyQuery {
  name: String!
  address: AddressInfoInput
}

type LineItem {
  name: String!
  quantity: Int!
  price: Float!
}

type ProcessedReceipt {
  amount: Float
  lineItems: [LineItem!]!
  address: String!
  tax: Float
  date: String
  vendorName: String
  phone: String
}

scalar Upload

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}