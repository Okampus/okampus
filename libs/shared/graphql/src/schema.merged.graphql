directive @cached(ttl: Int! = 60, refresh: Boolean! = false) on QUERY

type Account {
  bank: Bank
  bankId: bigint
  children(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): [Account!]!
  childrenAggregate(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): AccountAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  finances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  name: String!
  parent: Account
  parentId: bigint
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type AccountAggregate {
  aggregate: AccountAggregateFields
  nodes: [Account!]!
}

input AccountAggregateBoolExp {
  count: accountAggregateBoolExpCount
}

input accountAggregateBoolExpCount {
  arguments: [AccountSelectColumn!]
  distinct: Boolean
  filter: AccountBoolExp
  predicate: IntComparisonExp!
}

type AccountAggregateFields {
  avg: AccountAvgFields
  count(columns: [AccountSelectColumn!], distinct: Boolean): Int!
  max: AccountMaxFields
  min: AccountMinFields
  stddev: AccountStddevFields
  stddevPop: AccountStddevPopFields
  stddevSamp: AccountStddevSampFields
  sum: AccountSumFields
  varPop: AccountVarPopFields
  varSamp: AccountVarSampFields
  variance: AccountVarianceFields
}

input AccountAggregateOrderBy {
  avg: AccountAvgOrderBy
  count: OrderBy
  max: AccountMaxOrderBy
  min: AccountMinOrderBy
  stddev: AccountStddevOrderBy
  stddevPop: AccountStddevPopOrderBy
  stddevSamp: AccountStddevSampOrderBy
  sum: AccountSumOrderBy
  varPop: AccountVarPopOrderBy
  varSamp: AccountVarSampOrderBy
  variance: AccountVarianceOrderBy
}

input AccountArrRelInsertInput {
  data: [AccountInsertInput!]!
  onConflict: AccountOnConflict
}

type AccountAvgFields {
  bankId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantId: Float
}

input AccountAvgOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input AccountBoolExp {
  _and: [AccountBoolExp!]
  _not: AccountBoolExp
  _or: [AccountBoolExp!]
  bank: BankBoolExp
  bankId: BigintComparisonExp
  children: AccountBoolExp
  childrenAggregate: AccountAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  parent: AccountBoolExp
  parentId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum AccountConstraint {
  account_pkey
}

input AccountIncInput {
  bankId: bigint
  createdById: bigint
  id: bigint
  parentId: bigint
  teamId: bigint
  tenantId: bigint
}

input AccountInsertInput {
  bank: BankObjRelInsertInput
  bankId: bigint
  children: AccountArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  finances: FinanceArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  parent: AccountObjRelInsertInput
  parentId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type AccountMaxFields {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

input AccountMaxOrderBy {
  bankId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type AccountMinFields {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

input AccountMinOrderBy {
  bankId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type AccountMutationResponse {
  affectedRows: Int!
  returning: [Account!]!
}

input AccountObjRelInsertInput {
  data: AccountInsertInput!
  onConflict: AccountOnConflict
}

input AccountOnConflict {
  constraint: AccountConstraint!
  updateColumns: [AccountUpdateColumn!]! = []
  where: AccountBoolExp
}

input AccountOrderBy {
  bank: BankOrderBy
  bankId: OrderBy
  childrenAggregate: AccountAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  financesAggregate: FinanceAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  parent: AccountOrderBy
  parentId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input AccountPkColumnsInput {
  id: bigint!
}

enum AccountSelectColumn {
  bankId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  parentId
  teamId
  tenantId
  type
}

input AccountSetInput {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

type AccountStddevFields {
  bankId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantId: Float
}

input AccountStddevOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type AccountStddevPopFields {
  bankId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantId: Float
}

input AccountStddevPopOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type AccountStddevSampFields {
  bankId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantId: Float
}

input AccountStddevSampOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input AccountStreamCursorInput {
  initialValue: AccountStreamCursorValueInput!
  ordering: CursorOrdering
}

input AccountStreamCursorValueInput {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  parentId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

type AccountSumFields {
  bankId: bigint
  createdById: bigint
  id: bigint
  parentId: bigint
  teamId: bigint
  tenantId: bigint
}

input AccountSumOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum AccountUpdateColumn {
  bankId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  parentId
  teamId
  tenantId
  type
}

input AccountUpdates {
  _inc: AccountIncInput
  _set: AccountSetInput
  where: AccountBoolExp!
}

type AccountVarianceFields {
  bankId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantId: Float
}

input AccountVarianceOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type AccountVarPopFields {
  bankId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantId: Float
}

input AccountVarPopOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type AccountVarSampFields {
  bankId: Float
  createdById: Float
  id: Float
  parentId: Float
  teamId: Float
  tenantId: Float
}

input AccountVarSampOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Action {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventJoin: EventJoin
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedBy: Individual
  pointsProcessedById: bigint
  project: Project
  projectId: bigint
  state: String!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  user: User!
  userId: bigint!
}

type ActionAggregate {
  aggregate: ActionAggregateFields
  nodes: [Action!]!
}

input ActionAggregateBoolExp {
  count: actionAggregateBoolExpCount
}

input actionAggregateBoolExpCount {
  arguments: [ActionSelectColumn!]
  distinct: Boolean
  filter: ActionBoolExp
  predicate: IntComparisonExp!
}

type ActionAggregateFields {
  avg: ActionAvgFields
  count(columns: [ActionSelectColumn!], distinct: Boolean): Int!
  max: ActionMaxFields
  min: ActionMinFields
  stddev: ActionStddevFields
  stddevPop: ActionStddevPopFields
  stddevSamp: ActionStddevSampFields
  sum: ActionSumFields
  varPop: ActionVarPopFields
  varSamp: ActionVarSampFields
  variance: ActionVarianceFields
}

input ActionAggregateOrderBy {
  avg: ActionAvgOrderBy
  count: OrderBy
  max: ActionMaxOrderBy
  min: ActionMinOrderBy
  stddev: ActionStddevOrderBy
  stddevPop: ActionStddevPopOrderBy
  stddevSamp: ActionStddevSampOrderBy
  sum: ActionSumOrderBy
  varPop: ActionVarPopOrderBy
  varSamp: ActionVarSampOrderBy
  variance: ActionVarianceOrderBy
}

input ActionArrRelInsertInput {
  data: [ActionInsertInput!]!
  onConflict: ActionOnConflict
}

type ActionAvgFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ActionAvgOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ActionBoolExp {
  _and: [ActionBoolExp!]
  _not: ActionBoolExp
  _or: [ActionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  points: SmallintComparisonExp
  pointsProcessedAt: TimestamptzComparisonExp
  pointsProcessedBy: IndividualBoolExp
  pointsProcessedById: BigintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum ActionConstraint {
  action_pkey
}

input ActionIncInput {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  points: smallint
  pointsProcessedById: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ActionInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedBy: IndividualObjRelInsertInput
  pointsProcessedById: bigint
  project: ProjectObjRelInsertInput
  projectId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  user: UserObjRelInsertInput
  userId: bigint
}

type ActionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ActionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ActionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ActionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ActionMutationResponse {
  affectedRows: Int!
  returning: [Action!]!
}

input ActionOnConflict {
  constraint: ActionConstraint!
  updateColumns: [ActionUpdateColumn!]! = []
  where: ActionBoolExp
}

input ActionOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedBy: IndividualOrderBy
  pointsProcessedById: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input ActionPkColumnsInput {
  id: bigint!
}

enum ActionSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  eventJoinId
  hiddenAt
  id
  name
  points
  pointsProcessedAt
  pointsProcessedById
  projectId
  state
  teamId
  tenantId
  userId
}

input ActionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type ActionStddevFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ActionStddevOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ActionStddevPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ActionStddevPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ActionStddevSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ActionStddevSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ActionStreamCursorInput {
  initialValue: ActionStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type ActionSumFields {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  points: smallint
  pointsProcessedById: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input ActionSumOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ActionUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  eventJoinId
  hiddenAt
  id
  name
  points
  pointsProcessedAt
  pointsProcessedById
  projectId
  state
  teamId
  tenantId
  userId
}

input ActionUpdates {
  _inc: ActionIncInput
  _set: ActionSetInput
  where: ActionBoolExp!
}

type ActionVarianceFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ActionVarianceOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ActionVarPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ActionVarPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ActionVarSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  pointsProcessedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input ActionVarSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type Actor {
  actorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  banks(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): [Bank!]!
  banksAggregate(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): BankAggregate!
  bio: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  email: String!
  followers(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followersAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  hiddenAt: timestamptz
  ical: String!
  id: bigint!
  individual: Individual
  legalUnit: LegalUnit
  legalUnitLocation: LegalUnitLocation
  locations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  name: String!
  ownedBots(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): [Bot!]!
  ownedBotsAggregate(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): BotAggregate!
  payedFinances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  payedFinancesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  receivedFinances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  receivedFinancesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  reports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  shortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  slug: String!
  socials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  status: String!
  team: Team
  tenant: Tenant!
  tenantId: bigint!
  website: String!
}

type ActorAggregate {
  aggregate: ActorAggregateFields
  nodes: [Actor!]!
}

input ActorAggregateBoolExp {
  count: actorAggregateBoolExpCount
}

input actorAggregateBoolExpCount {
  arguments: [ActorSelectColumn!]
  distinct: Boolean
  filter: ActorBoolExp
  predicate: IntComparisonExp!
}

type ActorAggregateFields {
  avg: ActorAvgFields
  count(columns: [ActorSelectColumn!], distinct: Boolean): Int!
  max: ActorMaxFields
  min: ActorMinFields
  stddev: ActorStddevFields
  stddevPop: ActorStddevPopFields
  stddevSamp: ActorStddevSampFields
  sum: ActorSumFields
  varPop: ActorVarPopFields
  varSamp: ActorVarSampFields
  variance: ActorVarianceFields
}

input ActorAggregateOrderBy {
  avg: ActorAvgOrderBy
  count: OrderBy
  max: ActorMaxOrderBy
  min: ActorMinOrderBy
  stddev: ActorStddevOrderBy
  stddevPop: ActorStddevPopOrderBy
  stddevSamp: ActorStddevSampOrderBy
  sum: ActorSumOrderBy
  varPop: ActorVarPopOrderBy
  varSamp: ActorVarSampOrderBy
  variance: ActorVarianceOrderBy
}

input ActorArrRelInsertInput {
  data: [ActorInsertInput!]!
  onConflict: ActorOnConflict
}

type ActorAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ActorBoolExp {
  _and: [ActorBoolExp!]
  _not: ActorBoolExp
  _or: [ActorBoolExp!]
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  banks: BankBoolExp
  banksAggregate: BankAggregateBoolExp
  bio: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  email: StringComparisonExp
  followers: FollowBoolExp
  followersAggregate: FollowAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  ical: StringComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  legalUnit: LegalUnitBoolExp
  legalUnitLocation: LegalUnitLocationBoolExp
  locations: LocationBoolExp
  locationsAggregate: LocationAggregateBoolExp
  name: StringComparisonExp
  ownedBots: BotBoolExp
  ownedBotsAggregate: BotAggregateBoolExp
  payedFinances: FinanceBoolExp
  payedFinancesAggregate: FinanceAggregateBoolExp
  receivedFinances: FinanceBoolExp
  receivedFinancesAggregate: FinanceAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  slug: StringComparisonExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  status: StringComparisonExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  website: StringComparisonExp
}

enum ActorConstraint {
  actor_ical_unique
  actor_pkey
  actor_slug_unique
}

type ActorImage {
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  image: FileUpload!
  imageId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ActorImageAggregate {
  aggregate: ActorImageAggregateFields
  nodes: [ActorImage!]!
}

input ActorImageAggregateBoolExp {
  count: actorImageAggregateBoolExpCount
}

input actorImageAggregateBoolExpCount {
  arguments: [ActorImageSelectColumn!]
  distinct: Boolean
  filter: ActorImageBoolExp
  predicate: IntComparisonExp!
}

type ActorImageAggregateFields {
  avg: ActorImageAvgFields
  count(columns: [ActorImageSelectColumn!], distinct: Boolean): Int!
  max: ActorImageMaxFields
  min: ActorImageMinFields
  stddev: ActorImageStddevFields
  stddevPop: ActorImageStddevPopFields
  stddevSamp: ActorImageStddevSampFields
  sum: ActorImageSumFields
  varPop: ActorImageVarPopFields
  varSamp: ActorImageVarSampFields
  variance: ActorImageVarianceFields
}

input ActorImageAggregateOrderBy {
  avg: ActorImageAvgOrderBy
  count: OrderBy
  max: ActorImageMaxOrderBy
  min: ActorImageMinOrderBy
  stddev: ActorImageStddevOrderBy
  stddevPop: ActorImageStddevPopOrderBy
  stddevSamp: ActorImageStddevSampOrderBy
  sum: ActorImageSumOrderBy
  varPop: ActorImageVarPopOrderBy
  varSamp: ActorImageVarSampOrderBy
  variance: ActorImageVarianceOrderBy
}

input ActorImageArrRelInsertInput {
  data: [ActorImageInsertInput!]!
  onConflict: ActorImageOnConflict
}

type ActorImageAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input ActorImageBoolExp {
  _and: [ActorImageBoolExp!]
  _not: ActorImageBoolExp
  _or: [ActorImageBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  image: FileUploadBoolExp
  imageId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ActorImageConstraint {
  actor_image_image_id_unique
  actor_image_pkey
}

input ActorImageIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input ActorImageInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  image: FileUploadObjRelInsertInput
  imageId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ActorImageMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantId: bigint
  type: String
}

input ActorImageMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ActorImageMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantId: bigint
  type: String
}

input ActorImageMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ActorImageMutationResponse {
  affectedRows: Int!
  returning: [ActorImage!]!
}

input ActorImageObjRelInsertInput {
  data: ActorImageInsertInput!
  onConflict: ActorImageOnConflict
}

input ActorImageOnConflict {
  constraint: ActorImageConstraint!
  updateColumns: [ActorImageUpdateColumn!]! = []
  where: ActorImageBoolExp
}

input ActorImageOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  image: FileUploadOrderBy
  imageId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ActorImagePkColumnsInput {
  id: bigint!
}

enum ActorImageSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  tenantId
  type
}

input ActorImageSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantId: bigint
  type: String
}

type ActorImageStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input ActorImageStreamCursorInput {
  initialValue: ActorImageStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorImageStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  tenantId: bigint
  type: String
}

type ActorImageSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input ActorImageSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

enum ActorImageUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  imageId
  tenantId
  type
}

input ActorImageUpdates {
  _inc: ActorImageIncInput
  _set: ActorImageSetInput
  where: ActorImageBoolExp!
}

type ActorImageVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type ActorImageVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input ActorImageVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input ActorIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ActorInsertInput {
  actorImages: ActorImageArrRelInsertInput
  actorTags: ActorTagsArrRelInsertInput
  banks: BankArrRelInsertInput
  bio: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  email: String
  followers: FollowArrRelInsertInput
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individual: IndividualObjRelInsertInput
  legalUnit: LegalUnitObjRelInsertInput
  legalUnitLocation: LegalUnitLocationObjRelInsertInput
  locations: LocationArrRelInsertInput
  name: String
  ownedBots: BotArrRelInsertInput
  payedFinances: FinanceArrRelInsertInput
  receivedFinances: FinanceArrRelInsertInput
  reports: ReportArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  slug: String
  socials: SocialArrRelInsertInput
  status: String
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  website: String
}

type ActorMaxFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  name: String
  slug: String
  status: String
  tenantId: bigint
  website: String
}

input ActorMaxOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  status: OrderBy
  tenantId: OrderBy
  website: OrderBy
}

type ActorMinFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  name: String
  slug: String
  status: String
  tenantId: bigint
  website: String
}

input ActorMinOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  status: OrderBy
  tenantId: OrderBy
  website: OrderBy
}

type ActorMutationResponse {
  affectedRows: Int!
  returning: [Actor!]!
}

input ActorObjRelInsertInput {
  data: ActorInsertInput!
  onConflict: ActorOnConflict
}

input ActorOnConflict {
  constraint: ActorConstraint!
  updateColumns: [ActorUpdateColumn!]! = []
  where: ActorBoolExp
}

input ActorOrderBy {
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorTagsAggregate: ActorTagsAggregateOrderBy
  banksAggregate: BankAggregateOrderBy
  bio: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  followersAggregate: FollowAggregateOrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  legalUnit: LegalUnitOrderBy
  legalUnitLocation: LegalUnitLocationOrderBy
  locationsAggregate: LocationAggregateOrderBy
  name: OrderBy
  ownedBotsAggregate: BotAggregateOrderBy
  payedFinancesAggregate: FinanceAggregateOrderBy
  receivedFinancesAggregate: FinanceAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  slug: OrderBy
  socialsAggregate: SocialAggregateOrderBy
  status: OrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  website: OrderBy
}

input ActorPkColumnsInput {
  id: bigint!
}

enum ActorSelectColumn {
  bio
  createdAt
  createdById
  deletedAt
  email
  hiddenAt
  ical
  id
  name
  slug
  status
  tenantId
  website
}

input ActorSetInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  name: String
  slug: String
  status: String
  tenantId: bigint
  website: String
}

type ActorStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ActorStreamCursorInput {
  initialValue: ActorStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorStreamCursorValueInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  name: String
  slug: String
  status: String
  tenantId: bigint
  website: String
}

type ActorSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ActorSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorTags {
  actor: Actor!
  actorId: bigint!
  tag: Tag!
  tagId: bigint!
}

type ActorTagsAggregate {
  aggregate: ActorTagsAggregateFields
  nodes: [ActorTags!]!
}

input ActorTagsAggregateBoolExp {
  count: actorTagsAggregateBoolExpCount
}

input actorTagsAggregateBoolExpCount {
  arguments: [ActorTagsSelectColumn!]
  distinct: Boolean
  filter: ActorTagsBoolExp
  predicate: IntComparisonExp!
}

type ActorTagsAggregateFields {
  avg: ActorTagsAvgFields
  count(columns: [ActorTagsSelectColumn!], distinct: Boolean): Int!
  max: ActorTagsMaxFields
  min: ActorTagsMinFields
  stddev: ActorTagsStddevFields
  stddevPop: ActorTagsStddevPopFields
  stddevSamp: ActorTagsStddevSampFields
  sum: ActorTagsSumFields
  varPop: ActorTagsVarPopFields
  varSamp: ActorTagsVarSampFields
  variance: ActorTagsVarianceFields
}

input ActorTagsAggregateOrderBy {
  avg: ActorTagsAvgOrderBy
  count: OrderBy
  max: ActorTagsMaxOrderBy
  min: ActorTagsMinOrderBy
  stddev: ActorTagsStddevOrderBy
  stddevPop: ActorTagsStddevPopOrderBy
  stddevSamp: ActorTagsStddevSampOrderBy
  sum: ActorTagsSumOrderBy
  varPop: ActorTagsVarPopOrderBy
  varSamp: ActorTagsVarSampOrderBy
  variance: ActorTagsVarianceOrderBy
}

input ActorTagsArrRelInsertInput {
  data: [ActorTagsInsertInput!]!
  onConflict: ActorTagsOnConflict
}

type ActorTagsAvgFields {
  actorId: Float
  tagId: Float
}

input ActorTagsAvgOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

input ActorTagsBoolExp {
  _and: [ActorTagsBoolExp!]
  _not: ActorTagsBoolExp
  _or: [ActorTagsBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum ActorTagsConstraint {
  actor_tags_pkey
}

input ActorTagsIncInput {
  actorId: bigint
  tagId: bigint
}

input ActorTagsInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type ActorTagsMaxFields {
  actorId: bigint
  tagId: bigint
}

input ActorTagsMaxOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsMinFields {
  actorId: bigint
  tagId: bigint
}

input ActorTagsMinOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsMutationResponse {
  affectedRows: Int!
  returning: [ActorTags!]!
}

input ActorTagsOnConflict {
  constraint: ActorTagsConstraint!
  updateColumns: [ActorTagsUpdateColumn!]! = []
  where: ActorTagsBoolExp
}

input ActorTagsOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input ActorTagsPkColumnsInput {
  actorId: bigint!
  tagId: bigint!
}

enum ActorTagsSelectColumn {
  actorId
  tagId
}

input ActorTagsSetInput {
  actorId: bigint
  tagId: bigint
}

type ActorTagsStddevFields {
  actorId: Float
  tagId: Float
}

input ActorTagsStddevOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsStddevPopFields {
  actorId: Float
  tagId: Float
}

input ActorTagsStddevPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsStddevSampFields {
  actorId: Float
  tagId: Float
}

input ActorTagsStddevSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

input ActorTagsStreamCursorInput {
  initialValue: ActorTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ActorTagsStreamCursorValueInput {
  actorId: bigint
  tagId: bigint
}

type ActorTagsSumFields {
  actorId: bigint
  tagId: bigint
}

input ActorTagsSumOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

enum ActorTagsUpdateColumn {
  actorId
  tagId
}

input ActorTagsUpdates {
  _inc: ActorTagsIncInput
  _set: ActorTagsSetInput
  where: ActorTagsBoolExp!
}

type ActorTagsVarianceFields {
  actorId: Float
  tagId: Float
}

input ActorTagsVarianceOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsVarPopFields {
  actorId: Float
  tagId: Float
}

input ActorTagsVarPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

type ActorTagsVarSampFields {
  actorId: Float
  tagId: Float
}

input ActorTagsVarSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

enum ActorUpdateColumn {
  bio
  createdAt
  createdById
  deletedAt
  email
  hiddenAt
  ical
  id
  name
  slug
  status
  tenantId
  website
}

input ActorUpdates {
  _inc: ActorIncInput
  _set: ActorSetInput
  where: ActorBoolExp!
}

type ActorVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ActorVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ActorVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Address {
  category: String!
  city: String!
  country: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint!
  latitude: Float
  locations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  longitude: Float
  name: String!
  state: String!
  street: String!
  streetNumber: String!
  zip: String!
}

type AddressAggregate {
  aggregate: AddressAggregateFields
  nodes: [Address!]!
}

input AddressAggregateBoolExp {
  count: addressAggregateBoolExpCount
}

input addressAggregateBoolExpCount {
  arguments: [AddressSelectColumn!]
  distinct: Boolean
  filter: AddressBoolExp
  predicate: IntComparisonExp!
}

type AddressAggregateFields {
  avg: AddressAvgFields
  count(columns: [AddressSelectColumn!], distinct: Boolean): Int!
  max: AddressMaxFields
  min: AddressMinFields
  stddev: AddressStddevFields
  stddevPop: AddressStddevPopFields
  stddevSamp: AddressStddevSampFields
  sum: AddressSumFields
  varPop: AddressVarPopFields
  varSamp: AddressVarSampFields
  variance: AddressVarianceFields
}

input AddressAggregateOrderBy {
  avg: AddressAvgOrderBy
  count: OrderBy
  max: AddressMaxOrderBy
  min: AddressMinOrderBy
  stddev: AddressStddevOrderBy
  stddevPop: AddressStddevPopOrderBy
  stddevSamp: AddressStddevSampOrderBy
  sum: AddressSumOrderBy
  varPop: AddressVarPopOrderBy
  varSamp: AddressVarSampOrderBy
  variance: AddressVarianceOrderBy
}

input AddressArrRelInsertInput {
  data: [AddressInsertInput!]!
  onConflict: AddressOnConflict
}

type AddressAvgFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

input AddressBoolExp {
  _and: [AddressBoolExp!]
  _not: AddressBoolExp
  _or: [AddressBoolExp!]
  category: StringComparisonExp
  city: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  geoapifyId: StringComparisonExp
  id: BigintComparisonExp
  latitude: FloatComparisonExp
  locations: LocationBoolExp
  locationsAggregate: LocationAggregateBoolExp
  longitude: FloatComparisonExp
  name: StringComparisonExp
  state: StringComparisonExp
  street: StringComparisonExp
  streetNumber: StringComparisonExp
  zip: StringComparisonExp
}

enum AddressConstraint {
  address_pkey
}

input AddressIncInput {
  createdById: bigint
  id: bigint
  latitude: Float
  longitude: Float
}

input AddressInsertInput {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  locations: LocationArrRelInsertInput
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

type AddressMaxFields {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

input AddressMaxOrderBy {
  category: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  geoapifyId: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  streetNumber: OrderBy
  zip: OrderBy
}

type AddressMinFields {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

input AddressMinOrderBy {
  category: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  geoapifyId: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  streetNumber: OrderBy
  zip: OrderBy
}

type AddressMutationResponse {
  affectedRows: Int!
  returning: [Address!]!
}

input AddressObjRelInsertInput {
  data: AddressInsertInput!
  onConflict: AddressOnConflict
}

input AddressOnConflict {
  constraint: AddressConstraint!
  updateColumns: [AddressUpdateColumn!]! = []
  where: AddressBoolExp
}

input AddressOrderBy {
  category: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  geoapifyId: OrderBy
  id: OrderBy
  latitude: OrderBy
  locationsAggregate: LocationAggregateOrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  streetNumber: OrderBy
  zip: OrderBy
}

input AddressPkColumnsInput {
  id: bigint!
}

enum AddressSelectColumn {
  category
  city
  country
  createdAt
  createdById
  deletedAt
  geoapifyId
  id
  latitude
  longitude
  name
  state
  street
  streetNumber
  zip
}

input AddressSetInput {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

type AddressStddevFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressStddevPopFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressStddevSampFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

input AddressStreamCursorInput {
  initialValue: AddressStreamCursorValueInput!
  ordering: CursorOrdering
}

input AddressStreamCursorValueInput {
  category: String
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  geoapifyId: String
  id: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  streetNumber: String
  zip: String
}

type AddressSumFields {
  createdById: bigint
  id: bigint
  latitude: Float
  longitude: Float
}

input AddressSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

enum AddressUpdateColumn {
  category
  city
  country
  createdAt
  createdById
  deletedAt
  geoapifyId
  id
  latitude
  longitude
  name
  state
  street
  streetNumber
  zip
}

input AddressUpdates {
  _inc: AddressIncInput
  _set: AddressSetInput
  where: AddressBoolExp!
}

type AddressVarianceFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressVarPopFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type AddressVarSampFields {
  createdById: Float
  id: Float
  latitude: Float
  longitude: Float
}

input AddressVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  latitude: OrderBy
  longitude: OrderBy
}

type Bank {
  accounts(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): [Account!]!
  accountsAggregate(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): AccountAggregate!
  actor: Actor!
  actorId: bigint!
  bicSwift: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  hiddenAt: timestamptz
  holderName: String!
  iban: String!
  id: bigint!
  legalUnitLocation: LegalUnitLocation
  legalUnitLocationId: bigint
  tenant: Tenant!
  tenantId: bigint!
}

type BankAggregate {
  aggregate: BankAggregateFields
  nodes: [Bank!]!
}

input BankAggregateBoolExp {
  count: bankAggregateBoolExpCount
}

input bankAggregateBoolExpCount {
  arguments: [BankSelectColumn!]
  distinct: Boolean
  filter: BankBoolExp
  predicate: IntComparisonExp!
}

type BankAggregateFields {
  avg: BankAvgFields
  count(columns: [BankSelectColumn!], distinct: Boolean): Int!
  max: BankMaxFields
  min: BankMinFields
  stddev: BankStddevFields
  stddevPop: BankStddevPopFields
  stddevSamp: BankStddevSampFields
  sum: BankSumFields
  varPop: BankVarPopFields
  varSamp: BankVarSampFields
  variance: BankVarianceFields
}

input BankAggregateOrderBy {
  avg: BankAvgOrderBy
  count: OrderBy
  max: BankMaxOrderBy
  min: BankMinOrderBy
  stddev: BankStddevOrderBy
  stddevPop: BankStddevPopOrderBy
  stddevSamp: BankStddevSampOrderBy
  sum: BankSumOrderBy
  varPop: BankVarPopOrderBy
  varSamp: BankVarSampOrderBy
  variance: BankVarianceOrderBy
}

input BankArrRelInsertInput {
  data: [BankInsertInput!]!
  onConflict: BankOnConflict
}

type BankAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  legalUnitLocationId: Float
  tenantId: Float
}

input BankAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

input BankBoolExp {
  _and: [BankBoolExp!]
  _not: BankBoolExp
  _or: [BankBoolExp!]
  accounts: AccountBoolExp
  accountsAggregate: AccountAggregateBoolExp
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bicSwift: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  holderName: StringComparisonExp
  iban: StringComparisonExp
  id: BigintComparisonExp
  legalUnitLocation: LegalUnitLocationBoolExp
  legalUnitLocationId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum BankConstraint {
  bank_pkey
}

input BankIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  legalUnitLocationId: bigint
  tenantId: bigint
}

input BankInsertInput {
  accounts: AccountArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorId: bigint
  bicSwift: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  expenses: ExpenseArrRelInsertInput
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  legalUnitLocation: LegalUnitLocationObjRelInsertInput
  legalUnitLocationId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type BankMaxFields {
  actorId: bigint
  bicSwift: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  legalUnitLocationId: bigint
  tenantId: bigint
}

input BankMaxOrderBy {
  actorId: OrderBy
  bicSwift: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  iban: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

type BankMinFields {
  actorId: bigint
  bicSwift: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  legalUnitLocationId: bigint
  tenantId: bigint
}

input BankMinOrderBy {
  actorId: OrderBy
  bicSwift: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  iban: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

type BankMutationResponse {
  affectedRows: Int!
  returning: [Bank!]!
}

input BankObjRelInsertInput {
  data: BankInsertInput!
  onConflict: BankOnConflict
}

input BankOnConflict {
  constraint: BankConstraint!
  updateColumns: [BankUpdateColumn!]! = []
  where: BankBoolExp
}

input BankOrderBy {
  accountsAggregate: AccountAggregateOrderBy
  actor: ActorOrderBy
  actorId: OrderBy
  bicSwift: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  iban: OrderBy
  id: OrderBy
  legalUnitLocation: LegalUnitLocationOrderBy
  legalUnitLocationId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input BankPkColumnsInput {
  id: bigint!
}

enum BankSelectColumn {
  actorId
  bicSwift
  createdAt
  createdById
  deletedAt
  hiddenAt
  holderName
  iban
  id
  legalUnitLocationId
  tenantId
}

input BankSetInput {
  actorId: bigint
  bicSwift: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  legalUnitLocationId: bigint
  tenantId: bigint
}

type BankStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  legalUnitLocationId: Float
  tenantId: Float
}

input BankStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

type BankStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  legalUnitLocationId: Float
  tenantId: Float
}

input BankStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

type BankStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  legalUnitLocationId: Float
  tenantId: Float
}

input BankStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

input BankStreamCursorInput {
  initialValue: BankStreamCursorValueInput!
  ordering: CursorOrdering
}

input BankStreamCursorValueInput {
  actorId: bigint
  bicSwift: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  holderName: String
  iban: String
  id: bigint
  legalUnitLocationId: bigint
  tenantId: bigint
}

type BankSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  legalUnitLocationId: bigint
  tenantId: bigint
}

input BankSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

enum BankUpdateColumn {
  actorId
  bicSwift
  createdAt
  createdById
  deletedAt
  hiddenAt
  holderName
  iban
  id
  legalUnitLocationId
  tenantId
}

input BankUpdates {
  _inc: BankIncInput
  _set: BankSetInput
  where: BankBoolExp!
}

type BankVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  legalUnitLocationId: Float
  tenantId: Float
}

input BankVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

type BankVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  legalUnitLocationId: Float
  tenantId: Float
}

input BankVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

type BankVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  legalUnitLocationId: Float
  tenantId: Float
}

input BankVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitLocationId: OrderBy
  tenantId: OrderBy
}

scalar bigint

input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type Bot {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual!
  individualId: bigint!
  owner: Actor!
  ownerId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type BotAggregate {
  aggregate: BotAggregateFields
  nodes: [Bot!]!
}

input BotAggregateBoolExp {
  count: botAggregateBoolExpCount
}

input botAggregateBoolExpCount {
  arguments: [BotSelectColumn!]
  distinct: Boolean
  filter: BotBoolExp
  predicate: IntComparisonExp!
}

type BotAggregateFields {
  avg: BotAvgFields
  count(columns: [BotSelectColumn!], distinct: Boolean): Int!
  max: BotMaxFields
  min: BotMinFields
  stddev: BotStddevFields
  stddevPop: BotStddevPopFields
  stddevSamp: BotStddevSampFields
  sum: BotSumFields
  varPop: BotVarPopFields
  varSamp: BotVarSampFields
  variance: BotVarianceFields
}

input BotAggregateOrderBy {
  avg: BotAvgOrderBy
  count: OrderBy
  max: BotMaxOrderBy
  min: BotMinOrderBy
  stddev: BotStddevOrderBy
  stddevPop: BotStddevPopOrderBy
  stddevSamp: BotStddevSampOrderBy
  sum: BotSumOrderBy
  varPop: BotVarPopOrderBy
  varSamp: BotVarSampOrderBy
  variance: BotVarianceOrderBy
}

input BotArrRelInsertInput {
  data: [BotInsertInput!]!
  onConflict: BotOnConflict
}

type BotAvgFields {
  createdById: Float
  id: Float
  individualId: Float
  ownerId: Float
  tenantId: Float
}

input BotAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

input BotBoolExp {
  _and: [BotBoolExp!]
  _not: BotBoolExp
  _or: [BotBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
  owner: ActorBoolExp
  ownerId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum BotConstraint {
  bot_individual_id_unique
  bot_pkey
}

input BotIncInput {
  createdById: bigint
  id: bigint
  individualId: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
  owner: ActorObjRelInsertInput
  ownerId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type BotMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotMutationResponse {
  affectedRows: Int!
  returning: [Bot!]!
}

input BotObjRelInsertInput {
  data: BotInsertInput!
  onConflict: BotOnConflict
}

input BotOnConflict {
  constraint: BotConstraint!
  updateColumns: [BotUpdateColumn!]! = []
  where: BotBoolExp
}

input BotOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
  owner: ActorOrderBy
  ownerId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input BotPkColumnsInput {
  id: bigint!
}

enum BotSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  individualId
  ownerId
  tenantId
}

input BotSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  ownerId: bigint
  tenantId: bigint
}

type BotStddevFields {
  createdById: Float
  id: Float
  individualId: Float
  ownerId: Float
  tenantId: Float
}

input BotStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotStddevPopFields {
  createdById: Float
  id: Float
  individualId: Float
  ownerId: Float
  tenantId: Float
}

input BotStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotStddevSampFields {
  createdById: Float
  id: Float
  individualId: Float
  ownerId: Float
  tenantId: Float
}

input BotStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

input BotStreamCursorInput {
  initialValue: BotStreamCursorValueInput!
  ordering: CursorOrdering
}

input BotStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  ownerId: bigint
  tenantId: bigint
}

type BotSumFields {
  createdById: bigint
  id: bigint
  individualId: bigint
  ownerId: bigint
  tenantId: bigint
}

input BotSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

enum BotUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  individualId
  ownerId
  tenantId
}

input BotUpdates {
  _inc: BotIncInput
  _set: BotSetInput
  where: BotBoolExp!
}

type BotVarianceFields {
  createdById: Float
  id: Float
  individualId: Float
  ownerId: Float
  tenantId: Float
}

input BotVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotVarPopFields {
  createdById: Float
  id: Float
  individualId: Float
  ownerId: Float
  tenantId: Float
}

input BotVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type BotVarSampFields {
  createdById: Float
  id: Float
  individualId: Float
  ownerId: Float
  tenantId: Float
}

input BotVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

type Campus {
  campusCluster: CampusCluster!
  campusClusterId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  location: Location!
  locationId: bigint!
  name: String!
  tenant: Tenant!
  tenantId: bigint!
}

type CampusAggregate {
  aggregate: CampusAggregateFields
  nodes: [Campus!]!
}

input CampusAggregateBoolExp {
  count: campusAggregateBoolExpCount
}

input campusAggregateBoolExpCount {
  arguments: [CampusSelectColumn!]
  distinct: Boolean
  filter: CampusBoolExp
  predicate: IntComparisonExp!
}

type CampusAggregateFields {
  avg: CampusAvgFields
  count(columns: [CampusSelectColumn!], distinct: Boolean): Int!
  max: CampusMaxFields
  min: CampusMinFields
  stddev: CampusStddevFields
  stddevPop: CampusStddevPopFields
  stddevSamp: CampusStddevSampFields
  sum: CampusSumFields
  varPop: CampusVarPopFields
  varSamp: CampusVarSampFields
  variance: CampusVarianceFields
}

input CampusAggregateOrderBy {
  avg: CampusAvgOrderBy
  count: OrderBy
  max: CampusMaxOrderBy
  min: CampusMinOrderBy
  stddev: CampusStddevOrderBy
  stddevPop: CampusStddevPopOrderBy
  stddevSamp: CampusStddevSampOrderBy
  sum: CampusSumOrderBy
  varPop: CampusVarPopOrderBy
  varSamp: CampusVarSampOrderBy
  variance: CampusVarianceOrderBy
}

input CampusArrRelInsertInput {
  data: [CampusInsertInput!]!
  onConflict: CampusOnConflict
}

type CampusAvgFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantId: Float
}

input CampusAvgOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

input CampusBoolExp {
  _and: [CampusBoolExp!]
  _not: CampusBoolExp
  _or: [CampusBoolExp!]
  campusCluster: CampusClusterBoolExp
  campusClusterId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  name: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

type CampusCluster {
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  tenant: Tenant!
  tenantId: bigint!
  tenantOrganizes(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): [TenantOrganize!]!
  tenantOrganizesAggregate(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): TenantOrganizeAggregate!
}

type CampusClusterAggregate {
  aggregate: CampusClusterAggregateFields
  nodes: [CampusCluster!]!
}

input CampusClusterAggregateBoolExp {
  count: campusClusterAggregateBoolExpCount
}

input campusClusterAggregateBoolExpCount {
  arguments: [CampusClusterSelectColumn!]
  distinct: Boolean
  filter: CampusClusterBoolExp
  predicate: IntComparisonExp!
}

type CampusClusterAggregateFields {
  avg: CampusClusterAvgFields
  count(columns: [CampusClusterSelectColumn!], distinct: Boolean): Int!
  max: CampusClusterMaxFields
  min: CampusClusterMinFields
  stddev: CampusClusterStddevFields
  stddevPop: CampusClusterStddevPopFields
  stddevSamp: CampusClusterStddevSampFields
  sum: CampusClusterSumFields
  varPop: CampusClusterVarPopFields
  varSamp: CampusClusterVarSampFields
  variance: CampusClusterVarianceFields
}

input CampusClusterAggregateOrderBy {
  avg: CampusClusterAvgOrderBy
  count: OrderBy
  max: CampusClusterMaxOrderBy
  min: CampusClusterMinOrderBy
  stddev: CampusClusterStddevOrderBy
  stddevPop: CampusClusterStddevPopOrderBy
  stddevSamp: CampusClusterStddevSampOrderBy
  sum: CampusClusterSumOrderBy
  varPop: CampusClusterVarPopOrderBy
  varSamp: CampusClusterVarSampOrderBy
  variance: CampusClusterVarianceOrderBy
}

input CampusClusterArrRelInsertInput {
  data: [CampusClusterInsertInput!]!
  onConflict: CampusClusterOnConflict
}

type CampusClusterAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusClusterAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CampusClusterBoolExp {
  _and: [CampusClusterBoolExp!]
  _not: CampusClusterBoolExp
  _or: [CampusClusterBoolExp!]
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tenantOrganizes: TenantOrganizeBoolExp
  tenantOrganizesAggregate: TenantOrganizeAggregateBoolExp
}

enum CampusClusterConstraint {
  campus_cluster_pkey
}

input CampusClusterIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CampusClusterInsertInput {
  campuses: CampusArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tenantOrganizes: TenantOrganizeArrRelInsertInput
}

type CampusClusterMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

input CampusClusterMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

type CampusClusterMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

input CampusClusterMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

type CampusClusterMutationResponse {
  affectedRows: Int!
  returning: [CampusCluster!]!
}

input CampusClusterObjRelInsertInput {
  data: CampusClusterInsertInput!
  onConflict: CampusClusterOnConflict
}

input CampusClusterOnConflict {
  constraint: CampusClusterConstraint!
  updateColumns: [CampusClusterUpdateColumn!]! = []
  where: CampusClusterBoolExp
}

input CampusClusterOrderBy {
  campusesAggregate: CampusAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tenantOrganizesAggregate: TenantOrganizeAggregateOrderBy
}

input CampusClusterPkColumnsInput {
  id: bigint!
}

enum CampusClusterSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  tenantId
}

input CampusClusterSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

type CampusClusterStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusClusterStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusClusterStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusClusterStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusClusterStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusClusterStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CampusClusterStreamCursorInput {
  initialValue: CampusClusterStreamCursorValueInput!
  ordering: CursorOrdering
}

input CampusClusterStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

type CampusClusterSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CampusClusterSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CampusClusterUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  tenantId
}

input CampusClusterUpdates {
  _inc: CampusClusterIncInput
  _set: CampusClusterSetInput
  where: CampusClusterBoolExp!
}

type CampusClusterVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusClusterVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusClusterVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusClusterVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CampusClusterVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CampusClusterVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CampusConstraint {
  campus_pkey
}

input CampusIncInput {
  campusClusterId: bigint
  createdById: bigint
  id: bigint
  locationId: bigint
  tenantId: bigint
}

input CampusInsertInput {
  campusCluster: CampusClusterObjRelInsertInput
  campusClusterId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
  name: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CampusMaxFields {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantId: bigint
}

input CampusMaxOrderBy {
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationId: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

type CampusMinFields {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantId: bigint
}

input CampusMinOrderBy {
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationId: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

type CampusMutationResponse {
  affectedRows: Int!
  returning: [Campus!]!
}

input CampusOnConflict {
  constraint: CampusConstraint!
  updateColumns: [CampusUpdateColumn!]! = []
  where: CampusBoolExp
}

input CampusOrderBy {
  campusCluster: CampusClusterOrderBy
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  name: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CampusPkColumnsInput {
  id: bigint!
}

enum CampusSelectColumn {
  campusClusterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  locationId
  name
  tenantId
}

input CampusSetInput {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantId: bigint
}

type CampusStddevFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantId: Float
}

input CampusStddevOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

type CampusStddevPopFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantId: Float
}

input CampusStddevPopOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

type CampusStddevSampFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantId: Float
}

input CampusStddevSampOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

input CampusStreamCursorInput {
  initialValue: CampusStreamCursorValueInput!
  ordering: CursorOrdering
}

input CampusStreamCursorValueInput {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationId: bigint
  name: String
  tenantId: bigint
}

type CampusSumFields {
  campusClusterId: bigint
  createdById: bigint
  id: bigint
  locationId: bigint
  tenantId: bigint
}

input CampusSumOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

enum CampusUpdateColumn {
  campusClusterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  locationId
  name
  tenantId
}

input CampusUpdates {
  _inc: CampusIncInput
  _set: CampusSetInput
  where: CampusBoolExp!
}

type CampusVarianceFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantId: Float
}

input CampusVarianceOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

type CampusVarPopFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantId: Float
}

input CampusVarPopOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

type CampusVarSampFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  locationId: Float
  tenantId: Float
}

input CampusVarSampOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  locationId: OrderBy
  tenantId: OrderBy
}

type Canteen {
  canteenFoods(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodsAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenMenus(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenusAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  hiddenAt: timestamptz
  id: bigint!
  team: Team
  tenant: Tenant!
  tenantId: bigint!
}

type CanteenAggregate {
  aggregate: CanteenAggregateFields
  nodes: [Canteen!]!
}

input CanteenAggregateBoolExp {
  count: canteenAggregateBoolExpCount
}

input canteenAggregateBoolExpCount {
  arguments: [CanteenSelectColumn!]
  distinct: Boolean
  filter: CanteenBoolExp
  predicate: IntComparisonExp!
}

type CanteenAggregateFields {
  avg: CanteenAvgFields
  count(columns: [CanteenSelectColumn!], distinct: Boolean): Int!
  max: CanteenMaxFields
  min: CanteenMinFields
  stddev: CanteenStddevFields
  stddevPop: CanteenStddevPopFields
  stddevSamp: CanteenStddevSampFields
  sum: CanteenSumFields
  varPop: CanteenVarPopFields
  varSamp: CanteenVarSampFields
  variance: CanteenVarianceFields
}

input CanteenAggregateOrderBy {
  avg: CanteenAvgOrderBy
  count: OrderBy
  max: CanteenMaxOrderBy
  min: CanteenMinOrderBy
  stddev: CanteenStddevOrderBy
  stddevPop: CanteenStddevPopOrderBy
  stddevSamp: CanteenStddevSampOrderBy
  sum: CanteenSumOrderBy
  varPop: CanteenVarPopOrderBy
  varSamp: CanteenVarSampOrderBy
  variance: CanteenVarianceOrderBy
}

input CanteenArrRelInsertInput {
  data: [CanteenInsertInput!]!
  onConflict: CanteenOnConflict
}

type CanteenAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenBoolExp {
  _and: [CanteenBoolExp!]
  _not: CanteenBoolExp
  _or: [CanteenBoolExp!]
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum CanteenConstraint {
  canteen_pkey
}

type CanteenFood {
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type CanteenFoodAggregate {
  aggregate: CanteenFoodAggregateFields
  nodes: [CanteenFood!]!
}

input CanteenFoodAggregateBoolExp {
  count: canteenFoodAggregateBoolExpCount
}

input canteenFoodAggregateBoolExpCount {
  arguments: [CanteenFoodSelectColumn!]
  distinct: Boolean
  filter: CanteenFoodBoolExp
  predicate: IntComparisonExp!
}

type CanteenFoodAggregateFields {
  avg: CanteenFoodAvgFields
  count(columns: [CanteenFoodSelectColumn!], distinct: Boolean): Int!
  max: CanteenFoodMaxFields
  min: CanteenFoodMinFields
  stddev: CanteenFoodStddevFields
  stddevPop: CanteenFoodStddevPopFields
  stddevSamp: CanteenFoodStddevSampFields
  sum: CanteenFoodSumFields
  varPop: CanteenFoodVarPopFields
  varSamp: CanteenFoodVarSampFields
  variance: CanteenFoodVarianceFields
}

input CanteenFoodAggregateOrderBy {
  avg: CanteenFoodAvgOrderBy
  count: OrderBy
  max: CanteenFoodMaxOrderBy
  min: CanteenFoodMinOrderBy
  stddev: CanteenFoodStddevOrderBy
  stddevPop: CanteenFoodStddevPopOrderBy
  stddevSamp: CanteenFoodStddevSampOrderBy
  sum: CanteenFoodSumOrderBy
  varPop: CanteenFoodVarPopOrderBy
  varSamp: CanteenFoodVarSampOrderBy
  variance: CanteenFoodVarianceOrderBy
}

input CanteenFoodArrRelInsertInput {
  data: [CanteenFoodInsertInput!]!
  onConflict: CanteenFoodOnConflict
}

type CanteenFoodAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenFoodBoolExp {
  _and: [CanteenFoodBoolExp!]
  _not: CanteenFoodBoolExp
  _or: [CanteenFoodBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum CanteenFoodConstraint {
  canteen_food_pkey
}

input CanteenFoodIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenFoodInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CanteenFoodMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenFoodMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenFoodMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodMutationResponse {
  affectedRows: Int!
  returning: [CanteenFood!]!
}

input CanteenFoodOnConflict {
  constraint: CanteenFoodConstraint!
  updateColumns: [CanteenFoodUpdateColumn!]! = []
  where: CanteenFoodBoolExp
}

input CanteenFoodOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CanteenFoodPkColumnsInput {
  id: bigint!
}

enum CanteenFoodSelectColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenFoodSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenFoodStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenFoodStreamCursorInput {
  initialValue: CanteenFoodStreamCursorValueInput!
  ordering: CursorOrdering
}

input CanteenFoodStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenFoodSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenFoodSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CanteenFoodUpdateColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenFoodUpdates {
  _inc: CanteenFoodIncInput
  _set: CanteenFoodSetInput
  where: CanteenFoodBoolExp!
}

type CanteenFoodVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenFoodVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenFoodVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenInsertInput {
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CanteenMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenu {
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type CanteenMenuAggregate {
  aggregate: CanteenMenuAggregateFields
  nodes: [CanteenMenu!]!
}

input CanteenMenuAggregateBoolExp {
  count: canteenMenuAggregateBoolExpCount
}

input canteenMenuAggregateBoolExpCount {
  arguments: [CanteenMenuSelectColumn!]
  distinct: Boolean
  filter: CanteenMenuBoolExp
  predicate: IntComparisonExp!
}

type CanteenMenuAggregateFields {
  avg: CanteenMenuAvgFields
  count(columns: [CanteenMenuSelectColumn!], distinct: Boolean): Int!
  max: CanteenMenuMaxFields
  min: CanteenMenuMinFields
  stddev: CanteenMenuStddevFields
  stddevPop: CanteenMenuStddevPopFields
  stddevSamp: CanteenMenuStddevSampFields
  sum: CanteenMenuSumFields
  varPop: CanteenMenuVarPopFields
  varSamp: CanteenMenuVarSampFields
  variance: CanteenMenuVarianceFields
}

input CanteenMenuAggregateOrderBy {
  avg: CanteenMenuAvgOrderBy
  count: OrderBy
  max: CanteenMenuMaxOrderBy
  min: CanteenMenuMinOrderBy
  stddev: CanteenMenuStddevOrderBy
  stddevPop: CanteenMenuStddevPopOrderBy
  stddevSamp: CanteenMenuStddevSampOrderBy
  sum: CanteenMenuSumOrderBy
  varPop: CanteenMenuVarPopOrderBy
  varSamp: CanteenMenuVarSampOrderBy
  variance: CanteenMenuVarianceOrderBy
}

input CanteenMenuArrRelInsertInput {
  data: [CanteenMenuInsertInput!]!
  onConflict: CanteenMenuOnConflict
}

type CanteenMenuAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenMenuBoolExp {
  _and: [CanteenMenuBoolExp!]
  _not: CanteenMenuBoolExp
  _or: [CanteenMenuBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum CanteenMenuConstraint {
  canteen_menu_pkey
}

input CanteenMenuIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenMenuInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type CanteenMenuMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMenuMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMenuMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuMutationResponse {
  affectedRows: Int!
  returning: [CanteenMenu!]!
}

input CanteenMenuOnConflict {
  constraint: CanteenMenuConstraint!
  updateColumns: [CanteenMenuUpdateColumn!]! = []
  where: CanteenMenuBoolExp
}

input CanteenMenuOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CanteenMenuPkColumnsInput {
  id: bigint!
}

enum CanteenMenuSelectColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenMenuSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenMenuStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenMenuStreamCursorInput {
  initialValue: CanteenMenuStreamCursorValueInput!
  ordering: CursorOrdering
}

input CanteenMenuStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenMenuSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenMenuSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CanteenMenuUpdateColumn {
  canteenId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input CanteenMenuUpdates {
  _inc: CanteenMenuIncInput
  _set: CanteenMenuSetInput
  where: CanteenMenuBoolExp!
}

type CanteenMenuVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMenuVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenMenuVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input CanteenMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenMutationResponse {
  affectedRows: Int!
  returning: [Canteen!]!
}

input CanteenObjRelInsertInput {
  data: CanteenInsertInput!
  onConflict: CanteenOnConflict
}

input CanteenOnConflict {
  constraint: CanteenConstraint!
  updateColumns: [CanteenUpdateColumn!]! = []
  where: CanteenBoolExp
}

input CanteenOrderBy {
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input CanteenPkColumnsInput {
  id: bigint!
}

enum CanteenSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
}

input CanteenSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input CanteenStreamCursorInput {
  initialValue: CanteenStreamCursorValueInput!
  ordering: CursorOrdering
}

input CanteenStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type CanteenSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input CanteenSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum CanteenUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
}

input CanteenUpdates {
  _inc: CanteenIncInput
  _set: CanteenSetInput
  where: CanteenBoolExp!
}

type CanteenVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type CanteenVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input CanteenVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroup {
  classGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  hiddenAt: timestamptz
  id: bigint!
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  team: Team
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ClassGroupAggregate {
  aggregate: ClassGroupAggregateFields
  nodes: [ClassGroup!]!
}

input ClassGroupAggregateBoolExp {
  count: classGroupAggregateBoolExpCount
}

input classGroupAggregateBoolExpCount {
  arguments: [ClassGroupSelectColumn!]
  distinct: Boolean
  filter: ClassGroupBoolExp
  predicate: IntComparisonExp!
}

type ClassGroupAggregateFields {
  avg: ClassGroupAvgFields
  count(columns: [ClassGroupSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupMaxFields
  min: ClassGroupMinFields
  stddev: ClassGroupStddevFields
  stddevPop: ClassGroupStddevPopFields
  stddevSamp: ClassGroupStddevSampFields
  sum: ClassGroupSumFields
  varPop: ClassGroupVarPopFields
  varSamp: ClassGroupVarSampFields
  variance: ClassGroupVarianceFields
}

input ClassGroupAggregateOrderBy {
  avg: ClassGroupAvgOrderBy
  count: OrderBy
  max: ClassGroupMaxOrderBy
  min: ClassGroupMinOrderBy
  stddev: ClassGroupStddevOrderBy
  stddevPop: ClassGroupStddevPopOrderBy
  stddevSamp: ClassGroupStddevSampOrderBy
  sum: ClassGroupSumOrderBy
  varPop: ClassGroupVarPopOrderBy
  varSamp: ClassGroupVarSampOrderBy
  variance: ClassGroupVarianceOrderBy
}

input ClassGroupArrRelInsertInput {
  data: [ClassGroupInsertInput!]!
  onConflict: ClassGroupOnConflict
}

type ClassGroupAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ClassGroupBoolExp {
  _and: [ClassGroupBoolExp!]
  _not: ClassGroupBoolExp
  _or: [ClassGroupBoolExp!]
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ClassGroupConstraint {
  class_group_pkey
}

input ClassGroupIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ClassGroupInsertInput {
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ClassGroupMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

input ClassGroupMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ClassGroupMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

input ClassGroupMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ClassGroupMutationResponse {
  affectedRows: Int!
  returning: [ClassGroup!]!
}

input ClassGroupObjRelInsertInput {
  data: ClassGroupInsertInput!
  onConflict: ClassGroupOnConflict
}

input ClassGroupOnConflict {
  constraint: ClassGroupConstraint!
  updateColumns: [ClassGroupUpdateColumn!]! = []
  where: ClassGroupBoolExp
}

input ClassGroupOrderBy {
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ClassGroupPkColumnsInput {
  id: bigint!
}

enum ClassGroupSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
  type
}

input ClassGroupSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

type ClassGroupStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ClassGroupStreamCursorInput {
  initialValue: ClassGroupStreamCursorValueInput!
  ordering: CursorOrdering
}

input ClassGroupStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

type ClassGroupSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ClassGroupSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupTeacher {
  classGroup: ClassGroup!
  classGroupId: bigint!
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  startDate: timestamptz!
  tenant: Tenant!
  tenantId: bigint!
  user: User!
  userId: bigint!
}

type ClassGroupTeacherAggregate {
  aggregate: ClassGroupTeacherAggregateFields
  nodes: [ClassGroupTeacher!]!
}

input ClassGroupTeacherAggregateBoolExp {
  count: classGroupTeacherAggregateBoolExpCount
}

input classGroupTeacherAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherBoolExp
  predicate: IntComparisonExp!
}

type ClassGroupTeacherAggregateFields {
  avg: ClassGroupTeacherAvgFields
  count(columns: [ClassGroupTeacherSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherMaxFields
  min: ClassGroupTeacherMinFields
  stddev: ClassGroupTeacherStddevFields
  stddevPop: ClassGroupTeacherStddevPopFields
  stddevSamp: ClassGroupTeacherStddevSampFields
  sum: ClassGroupTeacherSumFields
  varPop: ClassGroupTeacherVarPopFields
  varSamp: ClassGroupTeacherVarSampFields
  variance: ClassGroupTeacherVarianceFields
}

input ClassGroupTeacherAggregateOrderBy {
  avg: ClassGroupTeacherAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherMaxOrderBy
  min: ClassGroupTeacherMinOrderBy
  stddev: ClassGroupTeacherStddevOrderBy
  stddevPop: ClassGroupTeacherStddevPopOrderBy
  stddevSamp: ClassGroupTeacherStddevSampOrderBy
  sum: ClassGroupTeacherSumOrderBy
  varPop: ClassGroupTeacherVarPopOrderBy
  varSamp: ClassGroupTeacherVarSampOrderBy
  variance: ClassGroupTeacherVarianceOrderBy
}

input ClassGroupTeacherArrRelInsertInput {
  data: [ClassGroupTeacherInsertInput!]!
  onConflict: ClassGroupTeacherOnConflict
}

type ClassGroupTeacherAvgFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherAvgOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ClassGroupTeacherBoolExp {
  _and: [ClassGroupTeacherBoolExp!]
  _not: ClassGroupTeacherBoolExp
  _or: [ClassGroupTeacherBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  startDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum ClassGroupTeacherConstraint {
  class_group_teacher_pkey
}

input ClassGroupTeacherIncInput {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  user: UserObjRelInsertInput
  userId: bigint
}

type ClassGroupTeacherMaxFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherMaxOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherMinFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherMinOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherMutationResponse {
  affectedRows: Int!
  returning: [ClassGroupTeacher!]!
}

input ClassGroupTeacherObjRelInsertInput {
  data: ClassGroupTeacherInsertInput!
  onConflict: ClassGroupTeacherOnConflict
}

input ClassGroupTeacherOnConflict {
  constraint: ClassGroupTeacherConstraint!
  updateColumns: [ClassGroupTeacherUpdateColumn!]! = []
  where: ClassGroupTeacherBoolExp
}

input ClassGroupTeacherOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input ClassGroupTeacherPkColumnsInput {
  id: bigint!
}

enum ClassGroupTeacherSelectColumn {
  classGroupId
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  startDate
  tenantId
  userId
}

input ClassGroupTeacherSetInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

type ClassGroupTeacherStddevFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherStddevOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherStddevPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherStddevPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherStddevSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherStddevSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ClassGroupTeacherStreamCursorInput {
  initialValue: ClassGroupTeacherStreamCursorValueInput!
  ordering: CursorOrdering
}

input ClassGroupTeacherStreamCursorValueInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

type ClassGroupTeacherSubjects {
  classGroupTeacher: ClassGroupTeacher!
  classGroupTeacherId: bigint!
  subject: Subject!
  subjectId: bigint!
}

type ClassGroupTeacherSubjectsAggregate {
  aggregate: ClassGroupTeacherSubjectsAggregateFields
  nodes: [ClassGroupTeacherSubjects!]!
}

input ClassGroupTeacherSubjectsAggregateBoolExp {
  count: classGroupTeacherSubjectsAggregateBoolExpCount
}

input classGroupTeacherSubjectsAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSubjectsSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherSubjectsBoolExp
  predicate: IntComparisonExp!
}

type ClassGroupTeacherSubjectsAggregateFields {
  avg: ClassGroupTeacherSubjectsAvgFields
  count(columns: [ClassGroupTeacherSubjectsSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherSubjectsMaxFields
  min: ClassGroupTeacherSubjectsMinFields
  stddev: ClassGroupTeacherSubjectsStddevFields
  stddevPop: ClassGroupTeacherSubjectsStddevPopFields
  stddevSamp: ClassGroupTeacherSubjectsStddevSampFields
  sum: ClassGroupTeacherSubjectsSumFields
  varPop: ClassGroupTeacherSubjectsVarPopFields
  varSamp: ClassGroupTeacherSubjectsVarSampFields
  variance: ClassGroupTeacherSubjectsVarianceFields
}

input ClassGroupTeacherSubjectsAggregateOrderBy {
  avg: ClassGroupTeacherSubjectsAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherSubjectsMaxOrderBy
  min: ClassGroupTeacherSubjectsMinOrderBy
  stddev: ClassGroupTeacherSubjectsStddevOrderBy
  stddevPop: ClassGroupTeacherSubjectsStddevPopOrderBy
  stddevSamp: ClassGroupTeacherSubjectsStddevSampOrderBy
  sum: ClassGroupTeacherSubjectsSumOrderBy
  varPop: ClassGroupTeacherSubjectsVarPopOrderBy
  varSamp: ClassGroupTeacherSubjectsVarSampOrderBy
  variance: ClassGroupTeacherSubjectsVarianceOrderBy
}

input ClassGroupTeacherSubjectsArrRelInsertInput {
  data: [ClassGroupTeacherSubjectsInsertInput!]!
  onConflict: ClassGroupTeacherSubjectsOnConflict
}

type ClassGroupTeacherSubjectsAvgFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsAvgOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

input ClassGroupTeacherSubjectsBoolExp {
  _and: [ClassGroupTeacherSubjectsBoolExp!]
  _not: ClassGroupTeacherSubjectsBoolExp
  _or: [ClassGroupTeacherSubjectsBoolExp!]
  classGroupTeacher: ClassGroupTeacherBoolExp
  classGroupTeacherId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

enum ClassGroupTeacherSubjectsConstraint {
  class_group_teacher_subjects_pkey
}

input ClassGroupTeacherSubjectsIncInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsInsertInput {
  classGroupTeacher: ClassGroupTeacherObjRelInsertInput
  classGroupTeacherId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

type ClassGroupTeacherSubjectsMaxFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsMaxOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsMinFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsMinOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsMutationResponse {
  affectedRows: Int!
  returning: [ClassGroupTeacherSubjects!]!
}

input ClassGroupTeacherSubjectsOnConflict {
  constraint: ClassGroupTeacherSubjectsConstraint!
  updateColumns: [ClassGroupTeacherSubjectsUpdateColumn!]! = []
  where: ClassGroupTeacherSubjectsBoolExp
}

input ClassGroupTeacherSubjectsOrderBy {
  classGroupTeacher: ClassGroupTeacherOrderBy
  classGroupTeacherId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

input ClassGroupTeacherSubjectsPkColumnsInput {
  classGroupTeacherId: bigint!
  subjectId: bigint!
}

enum ClassGroupTeacherSubjectsSelectColumn {
  classGroupTeacherId
  subjectId
}

input ClassGroupTeacherSubjectsSetInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

type ClassGroupTeacherSubjectsStddevFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsStddevOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsStddevPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsStddevPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsStddevSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsStddevSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

input ClassGroupTeacherSubjectsStreamCursorInput {
  initialValue: ClassGroupTeacherSubjectsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ClassGroupTeacherSubjectsStreamCursorValueInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

type ClassGroupTeacherSubjectsSumFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

input ClassGroupTeacherSubjectsSumOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

enum ClassGroupTeacherSubjectsUpdateColumn {
  classGroupTeacherId
  subjectId
}

input ClassGroupTeacherSubjectsUpdates {
  _inc: ClassGroupTeacherSubjectsIncInput
  _set: ClassGroupTeacherSubjectsSetInput
  where: ClassGroupTeacherSubjectsBoolExp!
}

type ClassGroupTeacherSubjectsVarianceFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsVarianceOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsVarPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsVarPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSubjectsVarSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

input ClassGroupTeacherSubjectsVarSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

type ClassGroupTeacherSumFields {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input ClassGroupTeacherSumOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ClassGroupTeacherUpdateColumn {
  classGroupId
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  startDate
  tenantId
  userId
}

input ClassGroupTeacherUpdates {
  _inc: ClassGroupTeacherIncInput
  _set: ClassGroupTeacherSetInput
  where: ClassGroupTeacherBoolExp!
}

type ClassGroupTeacherVarianceFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherVarianceOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherVarPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherVarPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ClassGroupTeacherVarSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input ClassGroupTeacherVarSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ClassGroupUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  tenantId
  type
}

input ClassGroupUpdates {
  _inc: ClassGroupIncInput
  _set: ClassGroupSetInput
  where: ClassGroupBoolExp!
}

type ClassGroupVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ClassGroupVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input ClassGroupVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Cohort {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  team: Team
  tenant: Tenant!
  tenantId: bigint!
  year: smallint!
}

type CohortAggregate {
  aggregate: CohortAggregateFields
  nodes: [Cohort!]!
}

input CohortAggregateBoolExp {
  count: cohortAggregateBoolExpCount
}

input cohortAggregateBoolExpCount {
  arguments: [CohortSelectColumn!]
  distinct: Boolean
  filter: CohortBoolExp
  predicate: IntComparisonExp!
}

type CohortAggregateFields {
  avg: CohortAvgFields
  count(columns: [CohortSelectColumn!], distinct: Boolean): Int!
  max: CohortMaxFields
  min: CohortMinFields
  stddev: CohortStddevFields
  stddevPop: CohortStddevPopFields
  stddevSamp: CohortStddevSampFields
  sum: CohortSumFields
  varPop: CohortVarPopFields
  varSamp: CohortVarSampFields
  variance: CohortVarianceFields
}

input CohortAggregateOrderBy {
  avg: CohortAvgOrderBy
  count: OrderBy
  max: CohortMaxOrderBy
  min: CohortMinOrderBy
  stddev: CohortStddevOrderBy
  stddevPop: CohortStddevPopOrderBy
  stddevSamp: CohortStddevSampOrderBy
  sum: CohortSumOrderBy
  varPop: CohortVarPopOrderBy
  varSamp: CohortVarSampOrderBy
  variance: CohortVarianceOrderBy
}

input CohortArrRelInsertInput {
  data: [CohortInsertInput!]!
  onConflict: CohortOnConflict
}

type CohortAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

input CohortBoolExp {
  _and: [CohortBoolExp!]
  _not: CohortBoolExp
  _or: [CohortBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  year: SmallintComparisonExp
}

enum CohortConstraint {
  cohort_pkey
}

input CohortIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  year: smallint
}

type CohortMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortMutationResponse {
  affectedRows: Int!
  returning: [Cohort!]!
}

input CohortObjRelInsertInput {
  data: CohortInsertInput!
  onConflict: CohortOnConflict
}

input CohortOnConflict {
  constraint: CohortConstraint!
  updateColumns: [CohortUpdateColumn!]! = []
  where: CohortBoolExp
}

input CohortOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  year: OrderBy
}

input CohortPkColumnsInput {
  id: bigint!
}

enum CohortSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  year
}

input CohortSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

type CohortStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

input CohortStreamCursorInput {
  initialValue: CohortStreamCursorValueInput!
  ordering: CursorOrdering
}

input CohortStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

type CohortSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

input CohortSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

enum CohortUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  year
}

input CohortUpdates {
  _inc: CohortIncInput
  _set: CohortSetInput
  where: CohortBoolExp!
}

type CohortVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type CohortVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

input CohortVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

type Content {
  children(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  childrenAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  favorites(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoritesAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  hiddenAt: timestamptz
  id: bigint!
  isAnonymous: Boolean!
  issue: Issue
  parent: Content
  parentId: bigint
  reactions(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionsAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  replies(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  repliesAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  replyingTo: Content
  replyingToId: bigint
  reports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  team: Team
  teamId: bigint
  tenant: Tenant!
  tenantId: bigint!
  text: String!
  thread: Thread
  validations(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationsAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  views(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): [View!]!
  viewsAggregate(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): ViewAggregate!
  votes(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  votesAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
}

type ContentAggregate {
  aggregate: ContentAggregateFields
  nodes: [Content!]!
}

input ContentAggregateBoolExp {
  bool_and: contentAggregateBoolExpBool_and
  bool_or: contentAggregateBoolExpBool_or
  count: contentAggregateBoolExpCount
}

input contentAggregateBoolExpBool_and {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpBool_or {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpCount {
  arguments: [ContentSelectColumn!]
  distinct: Boolean
  filter: ContentBoolExp
  predicate: IntComparisonExp!
}

type ContentAggregateFields {
  avg: ContentAvgFields
  count(columns: [ContentSelectColumn!], distinct: Boolean): Int!
  max: ContentMaxFields
  min: ContentMinFields
  stddev: ContentStddevFields
  stddevPop: ContentStddevPopFields
  stddevSamp: ContentStddevSampFields
  sum: ContentSumFields
  varPop: ContentVarPopFields
  varSamp: ContentVarSampFields
  variance: ContentVarianceFields
}

input ContentAggregateOrderBy {
  avg: ContentAvgOrderBy
  count: OrderBy
  max: ContentMaxOrderBy
  min: ContentMinOrderBy
  stddev: ContentStddevOrderBy
  stddevPop: ContentStddevPopOrderBy
  stddevSamp: ContentStddevSampOrderBy
  sum: ContentSumOrderBy
  varPop: ContentVarPopOrderBy
  varSamp: ContentVarSampOrderBy
  variance: ContentVarianceOrderBy
}

input ContentArrRelInsertInput {
  data: [ContentInsertInput!]!
  onConflict: ContentOnConflict
}

type ContentAttachments {
  content: Content!
  contentId: bigint!
  fileUpload: FileUpload!
  fileUploadId: bigint!
}

type ContentAttachmentsAggregate {
  aggregate: ContentAttachmentsAggregateFields
  nodes: [ContentAttachments!]!
}

input ContentAttachmentsAggregateBoolExp {
  count: contentAttachmentsAggregateBoolExpCount
}

input contentAttachmentsAggregateBoolExpCount {
  arguments: [ContentAttachmentsSelectColumn!]
  distinct: Boolean
  filter: ContentAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type ContentAttachmentsAggregateFields {
  avg: ContentAttachmentsAvgFields
  count(columns: [ContentAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: ContentAttachmentsMaxFields
  min: ContentAttachmentsMinFields
  stddev: ContentAttachmentsStddevFields
  stddevPop: ContentAttachmentsStddevPopFields
  stddevSamp: ContentAttachmentsStddevSampFields
  sum: ContentAttachmentsSumFields
  varPop: ContentAttachmentsVarPopFields
  varSamp: ContentAttachmentsVarSampFields
  variance: ContentAttachmentsVarianceFields
}

input ContentAttachmentsAggregateOrderBy {
  avg: ContentAttachmentsAvgOrderBy
  count: OrderBy
  max: ContentAttachmentsMaxOrderBy
  min: ContentAttachmentsMinOrderBy
  stddev: ContentAttachmentsStddevOrderBy
  stddevPop: ContentAttachmentsStddevPopOrderBy
  stddevSamp: ContentAttachmentsStddevSampOrderBy
  sum: ContentAttachmentsSumOrderBy
  varPop: ContentAttachmentsVarPopOrderBy
  varSamp: ContentAttachmentsVarSampOrderBy
  variance: ContentAttachmentsVarianceOrderBy
}

input ContentAttachmentsArrRelInsertInput {
  data: [ContentAttachmentsInsertInput!]!
  onConflict: ContentAttachmentsOnConflict
}

type ContentAttachmentsAvgFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsAvgOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

input ContentAttachmentsBoolExp {
  _and: [ContentAttachmentsBoolExp!]
  _not: ContentAttachmentsBoolExp
  _or: [ContentAttachmentsBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
}

enum ContentAttachmentsConstraint {
  content_attachments_pkey
}

input ContentAttachmentsIncInput {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
}

type ContentAttachmentsMaxFields {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsMaxOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsMinFields {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsMinOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [ContentAttachments!]!
}

input ContentAttachmentsOnConflict {
  constraint: ContentAttachmentsConstraint!
  updateColumns: [ContentAttachmentsUpdateColumn!]! = []
  where: ContentAttachmentsBoolExp
}

input ContentAttachmentsOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
}

input ContentAttachmentsPkColumnsInput {
  contentId: bigint!
  fileUploadId: bigint!
}

enum ContentAttachmentsSelectColumn {
  contentId
  fileUploadId
}

input ContentAttachmentsSetInput {
  contentId: bigint
  fileUploadId: bigint
}

type ContentAttachmentsStddevFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsStddevOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsStddevPopFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsStddevPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsStddevSampFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsStddevSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

input ContentAttachmentsStreamCursorInput {
  initialValue: ContentAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentAttachmentsStreamCursorValueInput {
  contentId: bigint
  fileUploadId: bigint
}

type ContentAttachmentsSumFields {
  contentId: bigint
  fileUploadId: bigint
}

input ContentAttachmentsSumOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

enum ContentAttachmentsUpdateColumn {
  contentId
  fileUploadId
}

input ContentAttachmentsUpdates {
  _inc: ContentAttachmentsIncInput
  _set: ContentAttachmentsSetInput
  where: ContentAttachmentsBoolExp!
}

type ContentAttachmentsVarianceFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsVarianceOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsVarPopFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsVarPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAttachmentsVarSampFields {
  contentId: Float
  fileUploadId: Float
}

input ContentAttachmentsVarSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

type ContentAvgFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

input ContentAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input ContentBoolExp {
  _and: [ContentBoolExp!]
  _not: ContentBoolExp
  _or: [ContentBoolExp!]
  children: ContentBoolExp
  childrenAggregate: ContentAggregateBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isAnonymous: BooleanComparisonExp
  issue: IssueBoolExp
  parent: ContentBoolExp
  parentId: BigintComparisonExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  replies: ContentBoolExp
  repliesAggregate: ContentAggregateBoolExp
  replyingTo: ContentBoolExp
  replyingToId: BigintComparisonExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  text: StringComparisonExp
  thread: ThreadBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  views: ViewBoolExp
  viewsAggregate: ViewAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

enum ContentConstraint {
  content_pkey
}

input ContentIncInput {
  createdById: bigint
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
}

input ContentInsertInput {
  children: ContentArrRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  favorites: FavoriteArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  issue: IssueObjRelInsertInput
  parent: ContentObjRelInsertInput
  parentId: bigint
  reactions: ReactionArrRelInsertInput
  replies: ContentArrRelInsertInput
  replyingTo: ContentObjRelInsertInput
  replyingToId: bigint
  reports: ReportArrRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  text: String
  thread: ThreadObjRelInsertInput
  validations: ValidationArrRelInsertInput
  views: ViewArrRelInsertInput
  votes: VoteArrRelInsertInput
}

type ContentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

input ContentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

type ContentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

input ContentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

type ContentMutationResponse {
  affectedRows: Int!
  returning: [Content!]!
}

input ContentObjRelInsertInput {
  data: ContentInsertInput!
  onConflict: ContentOnConflict
}

input ContentOnConflict {
  constraint: ContentConstraint!
  updateColumns: [ContentUpdateColumn!]! = []
  where: ContentBoolExp
}

input ContentOrderBy {
  childrenAggregate: ContentAggregateOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isAnonymous: OrderBy
  issue: IssueOrderBy
  parent: ContentOrderBy
  parentId: OrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  repliesAggregate: ContentAggregateOrderBy
  replyingTo: ContentOrderBy
  replyingToId: OrderBy
  reportsAggregate: ReportAggregateOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  text: OrderBy
  thread: ThreadOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  viewsAggregate: ViewAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

input ContentPkColumnsInput {
  id: bigint!
}

enum ContentSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAnonymous
  parentId
  replyingToId
  teamId
  tenantId
  text
}

enum ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns {
  isAnonymous
}

enum ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns {
  isAnonymous
}

input ContentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

type ContentStddevFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

input ContentStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ContentStddevPopFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

input ContentStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ContentStddevSampFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

input ContentStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input ContentStreamCursorInput {
  initialValue: ContentStreamCursorValueInput!
  ordering: CursorOrdering
}

input ContentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

type ContentSumFields {
  createdById: bigint
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
}

input ContentSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum ContentUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAnonymous
  parentId
  replyingToId
  teamId
  tenantId
  text
}

input ContentUpdates {
  _inc: ContentIncInput
  _set: ContentSetInput
  where: ContentBoolExp!
}

type ContentVarianceFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

input ContentVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ContentVarPopFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

input ContentVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ContentVarSampFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

input ContentVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum CursorOrdering {
  ASC
  DESC
}

type Document {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  file: FileUpload
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  subject: Subject
  subjectId: bigint
  team: Team
  teamId: bigint
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  yearVersion: smallint
}

type DocumentAggregate {
  aggregate: DocumentAggregateFields
  nodes: [Document!]!
}

input DocumentAggregateBoolExp {
  count: documentAggregateBoolExpCount
}

input documentAggregateBoolExpCount {
  arguments: [DocumentSelectColumn!]
  distinct: Boolean
  filter: DocumentBoolExp
  predicate: IntComparisonExp!
}

type DocumentAggregateFields {
  avg: DocumentAvgFields
  count(columns: [DocumentSelectColumn!], distinct: Boolean): Int!
  max: DocumentMaxFields
  min: DocumentMinFields
  stddev: DocumentStddevFields
  stddevPop: DocumentStddevPopFields
  stddevSamp: DocumentStddevSampFields
  sum: DocumentSumFields
  varPop: DocumentVarPopFields
  varSamp: DocumentVarSampFields
  variance: DocumentVarianceFields
}

input DocumentAggregateOrderBy {
  avg: DocumentAvgOrderBy
  count: OrderBy
  max: DocumentMaxOrderBy
  min: DocumentMinOrderBy
  stddev: DocumentStddevOrderBy
  stddevPop: DocumentStddevPopOrderBy
  stddevSamp: DocumentStddevSampOrderBy
  sum: DocumentSumOrderBy
  varPop: DocumentVarPopOrderBy
  varSamp: DocumentVarSampOrderBy
  variance: DocumentVarianceOrderBy
}

input DocumentArrRelInsertInput {
  data: [DocumentInsertInput!]!
  onConflict: DocumentOnConflict
}

type DocumentAvgFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentAvgOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

input DocumentBoolExp {
  _and: [DocumentBoolExp!]
  _not: DocumentBoolExp
  _or: [DocumentBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  file: FileUploadBoolExp
  fileId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  yearVersion: SmallintComparisonExp
}

enum DocumentConstraint {
  document_file_id_unique
  document_pkey
}

input DocumentIncInput {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

input DocumentInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  file: FileUploadObjRelInsertInput
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subject: SubjectObjRelInsertInput
  subjectId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

input DocumentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type DocumentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

input DocumentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

type DocumentMutationResponse {
  affectedRows: Int!
  returning: [Document!]!
}

input DocumentObjRelInsertInput {
  data: DocumentInsertInput!
  onConflict: DocumentOnConflict
}

input DocumentOnConflict {
  constraint: DocumentConstraint!
  updateColumns: [DocumentUpdateColumn!]! = []
  where: DocumentBoolExp
}

input DocumentOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  file: FileUploadOrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

input DocumentPkColumnsInput {
  id: bigint!
}

enum DocumentSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  fileId
  hiddenAt
  id
  name
  subjectId
  teamId
  tenantId
  type
  yearVersion
}

input DocumentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentStddevFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentStddevOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentStddevPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentStddevPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentStddevSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentStddevSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

input DocumentStreamCursorInput {
  initialValue: DocumentStreamCursorValueInput!
  ordering: CursorOrdering
}

input DocumentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

type DocumentSumFields {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

input DocumentSumOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

enum DocumentUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  fileId
  hiddenAt
  id
  name
  subjectId
  teamId
  tenantId
  type
  yearVersion
}

input DocumentUpdates {
  _inc: DocumentIncInput
  _set: DocumentSetInput
  where: DocumentBoolExp!
}

type DocumentVarianceFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentVarianceOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentVarPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentVarPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type DocumentVarSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

input DocumentVarSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

type Event {
  banner: FileUpload
  bannerId: bigint
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  end: timestamptz!
  eventApprovalSubmission: FormSubmission
  eventApprovalSubmissionId: bigint
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventFavorites(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoritesAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  finances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  hiddenAt: timestamptz
  id: bigint!
  isAutoAcceptingJoins: Boolean!
  isPrivate: Boolean!
  isTemplate: Boolean!
  joinForm: Form
  joinFormId: bigint
  location: Location
  locationId: bigint
  maxParticipants: smallint
  meta(path: String): jsonb!
  name: String!
  nextEventApprovalStep: EventApprovalStep
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float!
  price: Float!
  slug: String!
  start: timestamptz!
  state: String!
  tenant: Tenant!
  tenantId: bigint!
}

type EventAggregate {
  aggregate: EventAggregateFields
  nodes: [Event!]!
}

input EventAggregateBoolExp {
  bool_and: eventAggregateBoolExpBool_and
  bool_or: eventAggregateBoolExpBool_or
  count: eventAggregateBoolExpCount
}

input eventAggregateBoolExpBool_and {
  arguments: EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpBool_or {
  arguments: EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpCount {
  arguments: [EventSelectColumn!]
  distinct: Boolean
  filter: EventBoolExp
  predicate: IntComparisonExp!
}

type EventAggregateFields {
  avg: EventAvgFields
  count(columns: [EventSelectColumn!], distinct: Boolean): Int!
  max: EventMaxFields
  min: EventMinFields
  stddev: EventStddevFields
  stddevPop: EventStddevPopFields
  stddevSamp: EventStddevSampFields
  sum: EventSumFields
  varPop: EventVarPopFields
  varSamp: EventVarSampFields
  variance: EventVarianceFields
}

input EventAggregateOrderBy {
  avg: EventAvgOrderBy
  count: OrderBy
  max: EventMaxOrderBy
  min: EventMinOrderBy
  stddev: EventStddevOrderBy
  stddevPop: EventStddevPopOrderBy
  stddevSamp: EventStddevSampOrderBy
  sum: EventSumOrderBy
  varPop: EventVarPopOrderBy
  varSamp: EventVarSampOrderBy
  variance: EventVarianceOrderBy
}

input EventAppendInput {
  meta: jsonb
}

type EventApproval {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  event: Event
  eventApprovalStep: EventApprovalStep
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint!
  isApproved: Boolean!
  message: String!
  tenant: Tenant!
  tenantId: bigint!
}

type EventApprovalAggregate {
  aggregate: EventApprovalAggregateFields
  nodes: [EventApproval!]!
}

input EventApprovalAggregateBoolExp {
  bool_and: eventApprovalAggregateBoolExpBool_and
  bool_or: eventApprovalAggregateBoolExpBool_or
  count: eventApprovalAggregateBoolExpCount
}

input eventApprovalAggregateBoolExpBool_and {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpBool_or {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpCount {
  arguments: [EventApprovalSelectColumn!]
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalAggregateFields {
  avg: EventApprovalAvgFields
  count(columns: [EventApprovalSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalMaxFields
  min: EventApprovalMinFields
  stddev: EventApprovalStddevFields
  stddevPop: EventApprovalStddevPopFields
  stddevSamp: EventApprovalStddevSampFields
  sum: EventApprovalSumFields
  varPop: EventApprovalVarPopFields
  varSamp: EventApprovalVarSampFields
  variance: EventApprovalVarianceFields
}

input EventApprovalAggregateOrderBy {
  avg: EventApprovalAvgOrderBy
  count: OrderBy
  max: EventApprovalMaxOrderBy
  min: EventApprovalMinOrderBy
  stddev: EventApprovalStddevOrderBy
  stddevPop: EventApprovalStddevPopOrderBy
  stddevSamp: EventApprovalStddevSampOrderBy
  sum: EventApprovalSumOrderBy
  varPop: EventApprovalVarPopOrderBy
  varSamp: EventApprovalVarSampOrderBy
  variance: EventApprovalVarianceOrderBy
}

input EventApprovalArrRelInsertInput {
  data: [EventApprovalInsertInput!]!
  onConflict: EventApprovalOnConflict
}

type EventApprovalAvgFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventApprovalAvgOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input EventApprovalBoolExp {
  _and: [EventApprovalBoolExp!]
  _not: EventApprovalBoolExp
  _or: [EventApprovalBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  eventId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isApproved: BooleanComparisonExp
  message: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventApprovalConstraint {
  event_approval_pkey
}

input EventApprovalIncInput {
  createdById: bigint
  eventApprovalStepId: bigint
  eventId: bigint
  id: bigint
  tenantId: bigint
}

input EventApprovalInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isApproved: Boolean
  message: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventApprovalMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  tenantId: bigint
}

input EventApprovalMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  tenantId: OrderBy
}

type EventApprovalMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  tenantId: bigint
}

input EventApprovalMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  tenantId: OrderBy
}

type EventApprovalMutationResponse {
  affectedRows: Int!
  returning: [EventApproval!]!
}

input EventApprovalOnConflict {
  constraint: EventApprovalConstraint!
  updateColumns: [EventApprovalUpdateColumn!]! = []
  where: EventApprovalBoolExp
}

input EventApprovalOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isApproved: OrderBy
  message: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventApprovalPkColumnsInput {
  id: bigint!
}

enum EventApprovalSelectColumn {
  createdAt
  createdById
  deletedAt
  eventApprovalStepId
  eventId
  hiddenAt
  id
  isApproved
  message
  tenantId
}

enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns {
  isApproved
}

enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns {
  isApproved
}

input EventApprovalSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isApproved: Boolean
  message: String
  tenantId: bigint
}

type EventApprovalStddevFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventApprovalStddevOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventApprovalStddevPopFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventApprovalStddevPopOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventApprovalStddevSampFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventApprovalStddevSampOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventApprovalStep {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventApprovalStepNotifiees(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepNotifieesAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  eventApprovalStepValidators(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStepValidatorsAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  nextStepEvents(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  nextStepEventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  nextSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  nextStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  order: Int!
  previousStep: EventApprovalStep
  previousStepId: bigint
  tenant: Tenant!
  tenantId: bigint!
}

type EventApprovalStepAggregate {
  aggregate: EventApprovalStepAggregateFields
  nodes: [EventApprovalStep!]!
}

input EventApprovalStepAggregateBoolExp {
  count: eventApprovalStepAggregateBoolExpCount
}

input eventApprovalStepAggregateBoolExpCount {
  arguments: [EventApprovalStepSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalStepAggregateFields {
  avg: EventApprovalStepAvgFields
  count(columns: [EventApprovalStepSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepMaxFields
  min: EventApprovalStepMinFields
  stddev: EventApprovalStepStddevFields
  stddevPop: EventApprovalStepStddevPopFields
  stddevSamp: EventApprovalStepStddevSampFields
  sum: EventApprovalStepSumFields
  varPop: EventApprovalStepVarPopFields
  varSamp: EventApprovalStepVarSampFields
  variance: EventApprovalStepVarianceFields
}

input EventApprovalStepAggregateOrderBy {
  avg: EventApprovalStepAvgOrderBy
  count: OrderBy
  max: EventApprovalStepMaxOrderBy
  min: EventApprovalStepMinOrderBy
  stddev: EventApprovalStepStddevOrderBy
  stddevPop: EventApprovalStepStddevPopOrderBy
  stddevSamp: EventApprovalStepStddevSampOrderBy
  sum: EventApprovalStepSumOrderBy
  varPop: EventApprovalStepVarPopOrderBy
  varSamp: EventApprovalStepVarSampOrderBy
  variance: EventApprovalStepVarianceOrderBy
}

input EventApprovalStepArrRelInsertInput {
  data: [EventApprovalStepInsertInput!]!
  onConflict: EventApprovalStepOnConflict
}

type EventApprovalStepAvgFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

input EventApprovalStepBoolExp {
  _and: [EventApprovalStepBoolExp!]
  _not: EventApprovalStepBoolExp
  _or: [EventApprovalStepBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventApprovalStepNotifiees: EventApprovalStepNotifieesBoolExp
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateBoolExp
  eventApprovalStepValidators: EventApprovalStepValidatorsBoolExp
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  nextStepEvents: EventBoolExp
  nextStepEventsAggregate: EventAggregateBoolExp
  nextSteps: EventApprovalStepBoolExp
  nextStepsAggregate: EventApprovalStepAggregateBoolExp
  order: IntComparisonExp
  previousStep: EventApprovalStepBoolExp
  previousStepId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventApprovalStepConstraint {
  event_approval_step_pkey
}

input EventApprovalStepIncInput {
  createdById: bigint
  id: bigint
  order: Int
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventApprovalStepNotifiees: EventApprovalStepNotifieesArrRelInsertInput
  eventApprovalStepValidators: EventApprovalStepValidatorsArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  name: String
  nextStepEvents: EventArrRelInsertInput
  nextSteps: EventApprovalStepArrRelInsertInput
  order: Int
  previousStep: EventApprovalStepObjRelInsertInput
  previousStepId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventApprovalStepMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalStep!]!
}

type EventApprovalStepNotifiees {
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!
  individual: Individual!
  individualId: bigint!
}

type EventApprovalStepNotifieesAggregate {
  aggregate: EventApprovalStepNotifieesAggregateFields
  nodes: [EventApprovalStepNotifiees!]!
}

input EventApprovalStepNotifieesAggregateBoolExp {
  count: eventApprovalStepNotifieesAggregateBoolExpCount
}

input eventApprovalStepNotifieesAggregateBoolExpCount {
  arguments: [EventApprovalStepNotifieesSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepNotifieesBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalStepNotifieesAggregateFields {
  avg: EventApprovalStepNotifieesAvgFields
  count(columns: [EventApprovalStepNotifieesSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepNotifieesMaxFields
  min: EventApprovalStepNotifieesMinFields
  stddev: EventApprovalStepNotifieesStddevFields
  stddevPop: EventApprovalStepNotifieesStddevPopFields
  stddevSamp: EventApprovalStepNotifieesStddevSampFields
  sum: EventApprovalStepNotifieesSumFields
  varPop: EventApprovalStepNotifieesVarPopFields
  varSamp: EventApprovalStepNotifieesVarSampFields
  variance: EventApprovalStepNotifieesVarianceFields
}

input EventApprovalStepNotifieesAggregateOrderBy {
  avg: EventApprovalStepNotifieesAvgOrderBy
  count: OrderBy
  max: EventApprovalStepNotifieesMaxOrderBy
  min: EventApprovalStepNotifieesMinOrderBy
  stddev: EventApprovalStepNotifieesStddevOrderBy
  stddevPop: EventApprovalStepNotifieesStddevPopOrderBy
  stddevSamp: EventApprovalStepNotifieesStddevSampOrderBy
  sum: EventApprovalStepNotifieesSumOrderBy
  varPop: EventApprovalStepNotifieesVarPopOrderBy
  varSamp: EventApprovalStepNotifieesVarSampOrderBy
  variance: EventApprovalStepNotifieesVarianceOrderBy
}

input EventApprovalStepNotifieesArrRelInsertInput {
  data: [EventApprovalStepNotifieesInsertInput!]!
  onConflict: EventApprovalStepNotifieesOnConflict
}

type EventApprovalStepNotifieesAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepNotifieesBoolExp {
  _and: [EventApprovalStepNotifieesBoolExp!]
  _not: EventApprovalStepNotifieesBoolExp
  _or: [EventApprovalStepNotifieesBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

enum EventApprovalStepNotifieesConstraint {
  event_approval_step_notifiees_pkey
}

input EventApprovalStepNotifieesIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

type EventApprovalStepNotifieesMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalStepNotifiees!]!
}

input EventApprovalStepNotifieesOnConflict {
  constraint: EventApprovalStepNotifieesConstraint!
  updateColumns: [EventApprovalStepNotifieesUpdateColumn!]! = []
  where: EventApprovalStepNotifieesBoolExp
}

input EventApprovalStepNotifieesOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

input EventApprovalStepNotifieesPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

enum EventApprovalStepNotifieesSelectColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepNotifieesSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepNotifieesStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepNotifieesStreamCursorInput {
  initialValue: EventApprovalStepNotifieesStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStepNotifieesStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepNotifieesSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepNotifieesSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

enum EventApprovalStepNotifieesUpdateColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepNotifieesUpdates {
  _inc: EventApprovalStepNotifieesIncInput
  _set: EventApprovalStepNotifieesSetInput
  where: EventApprovalStepNotifieesBoolExp!
}

type EventApprovalStepNotifieesVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepNotifieesVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepNotifieesVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepObjRelInsertInput {
  data: EventApprovalStepInsertInput!
  onConflict: EventApprovalStepOnConflict
}

input EventApprovalStepOnConflict {
  constraint: EventApprovalStepConstraint!
  updateColumns: [EventApprovalStepUpdateColumn!]! = []
  where: EventApprovalStepBoolExp
}

input EventApprovalStepOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateOrderBy
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  nextStepEventsAggregate: EventAggregateOrderBy
  nextStepsAggregate: EventApprovalStepAggregateOrderBy
  order: OrderBy
  previousStep: EventApprovalStepOrderBy
  previousStepId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventApprovalStepPkColumnsInput {
  id: bigint!
}

enum EventApprovalStepSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  order
  previousStepId
  tenantId
}

input EventApprovalStepSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantId: bigint
}

type EventApprovalStepStddevFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepStddevPopFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepStddevSampFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

input EventApprovalStepStreamCursorInput {
  initialValue: EventApprovalStepStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStepStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  order: Int
  previousStepId: bigint
  tenantId: bigint
}

type EventApprovalStepSumFields {
  createdById: bigint
  id: bigint
  order: Int
  previousStepId: bigint
  tenantId: bigint
}

input EventApprovalStepSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

enum EventApprovalStepUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  name
  order
  previousStepId
  tenantId
}

input EventApprovalStepUpdates {
  _inc: EventApprovalStepIncInput
  _set: EventApprovalStepSetInput
  where: EventApprovalStepBoolExp!
}

type EventApprovalStepValidators {
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!
  individual: Individual!
  individualId: bigint!
}

type EventApprovalStepValidatorsAggregate {
  aggregate: EventApprovalStepValidatorsAggregateFields
  nodes: [EventApprovalStepValidators!]!
}

input EventApprovalStepValidatorsAggregateBoolExp {
  count: eventApprovalStepValidatorsAggregateBoolExpCount
}

input eventApprovalStepValidatorsAggregateBoolExpCount {
  arguments: [EventApprovalStepValidatorsSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepValidatorsBoolExp
  predicate: IntComparisonExp!
}

type EventApprovalStepValidatorsAggregateFields {
  avg: EventApprovalStepValidatorsAvgFields
  count(columns: [EventApprovalStepValidatorsSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepValidatorsMaxFields
  min: EventApprovalStepValidatorsMinFields
  stddev: EventApprovalStepValidatorsStddevFields
  stddevPop: EventApprovalStepValidatorsStddevPopFields
  stddevSamp: EventApprovalStepValidatorsStddevSampFields
  sum: EventApprovalStepValidatorsSumFields
  varPop: EventApprovalStepValidatorsVarPopFields
  varSamp: EventApprovalStepValidatorsVarSampFields
  variance: EventApprovalStepValidatorsVarianceFields
}

input EventApprovalStepValidatorsAggregateOrderBy {
  avg: EventApprovalStepValidatorsAvgOrderBy
  count: OrderBy
  max: EventApprovalStepValidatorsMaxOrderBy
  min: EventApprovalStepValidatorsMinOrderBy
  stddev: EventApprovalStepValidatorsStddevOrderBy
  stddevPop: EventApprovalStepValidatorsStddevPopOrderBy
  stddevSamp: EventApprovalStepValidatorsStddevSampOrderBy
  sum: EventApprovalStepValidatorsSumOrderBy
  varPop: EventApprovalStepValidatorsVarPopOrderBy
  varSamp: EventApprovalStepValidatorsVarSampOrderBy
  variance: EventApprovalStepValidatorsVarianceOrderBy
}

input EventApprovalStepValidatorsArrRelInsertInput {
  data: [EventApprovalStepValidatorsInsertInput!]!
  onConflict: EventApprovalStepValidatorsOnConflict
}

type EventApprovalStepValidatorsAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepValidatorsBoolExp {
  _and: [EventApprovalStepValidatorsBoolExp!]
  _not: EventApprovalStepValidatorsBoolExp
  _or: [EventApprovalStepValidatorsBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

enum EventApprovalStepValidatorsConstraint {
  event_approval_step_validators_pkey
}

input EventApprovalStepValidatorsIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

type EventApprovalStepValidatorsMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsMutationResponse {
  affectedRows: Int!
  returning: [EventApprovalStepValidators!]!
}

input EventApprovalStepValidatorsOnConflict {
  constraint: EventApprovalStepValidatorsConstraint!
  updateColumns: [EventApprovalStepValidatorsUpdateColumn!]! = []
  where: EventApprovalStepValidatorsBoolExp
}

input EventApprovalStepValidatorsOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

input EventApprovalStepValidatorsPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

enum EventApprovalStepValidatorsSelectColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepValidatorsSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepValidatorsStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

input EventApprovalStepValidatorsStreamCursorInput {
  initialValue: EventApprovalStepValidatorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStepValidatorsStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

type EventApprovalStepValidatorsSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

input EventApprovalStepValidatorsSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

enum EventApprovalStepValidatorsUpdateColumn {
  eventApprovalStepId
  individualId
}

input EventApprovalStepValidatorsUpdates {
  _inc: EventApprovalStepValidatorsIncInput
  _set: EventApprovalStepValidatorsSetInput
  where: EventApprovalStepValidatorsBoolExp!
}

type EventApprovalStepValidatorsVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepValidatorsVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

input EventApprovalStepValidatorsVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

type EventApprovalStepVarianceFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepVarPopFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

type EventApprovalStepVarSampFields {
  createdById: Float
  id: Float
  order: Float
  previousStepId: Float
  tenantId: Float
}

input EventApprovalStepVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

input EventApprovalStreamCursorInput {
  initialValue: EventApprovalStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventApprovalStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventApprovalStepId: bigint
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isApproved: Boolean
  message: String
  tenantId: bigint
}

type EventApprovalSumFields {
  createdById: bigint
  eventApprovalStepId: bigint
  eventId: bigint
  id: bigint
  tenantId: bigint
}

input EventApprovalSumOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum EventApprovalUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventApprovalStepId
  eventId
  hiddenAt
  id
  isApproved
  message
  tenantId
}

input EventApprovalUpdates {
  _inc: EventApprovalIncInput
  _set: EventApprovalSetInput
  where: EventApprovalBoolExp!
}

type EventApprovalVarianceFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventApprovalVarianceOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventApprovalVarPopFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventApprovalVarPopOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventApprovalVarSampFields {
  createdById: Float
  eventApprovalStepId: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventApprovalVarSampOrderBy {
  createdById: OrderBy
  eventApprovalStepId: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input EventArrRelInsertInput {
  data: [EventInsertInput!]!
  onConflict: EventOnConflict
}

type EventAvgFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: Float
}

input EventAvgOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

input EventBoolExp {
  _and: [EventBoolExp!]
  _not: EventBoolExp
  _or: [EventBoolExp!]
  banner: FileUploadBoolExp
  bannerId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  end: TimestamptzComparisonExp
  eventApprovalSubmission: FormSubmissionBoolExp
  eventApprovalSubmissionId: BigintComparisonExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventFavorites: EventFavoriteBoolExp
  eventFavoritesAggregate: EventFavoriteAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isAutoAcceptingJoins: BooleanComparisonExp
  isPrivate: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  joinForm: FormBoolExp
  joinFormId: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  maxParticipants: SmallintComparisonExp
  meta: JsonbComparisonExp
  name: StringComparisonExp
  nextEventApprovalStep: EventApprovalStepBoolExp
  nextEventApprovalStepId: BigintComparisonExp
  pointsAwardedForAttendance: FloatComparisonExp
  price: FloatComparisonExp
  slug: StringComparisonExp
  start: TimestamptzComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventConstraint {
  event_event_approval_submission_id_unique
  event_pkey
  event_slug_unique
}

input EventDeleteAtPathInput {
  meta: [String!]
}

input EventDeleteElemInput {
  meta: Int
}

input EventDeleteKeyInput {
  meta: String
}

type EventFavorite {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  event: Event!
  eventId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type EventFavoriteAggregate {
  aggregate: EventFavoriteAggregateFields
  nodes: [EventFavorite!]!
}

input EventFavoriteAggregateBoolExp {
  count: eventFavoriteAggregateBoolExpCount
}

input eventFavoriteAggregateBoolExpCount {
  arguments: [EventFavoriteSelectColumn!]
  distinct: Boolean
  filter: EventFavoriteBoolExp
  predicate: IntComparisonExp!
}

type EventFavoriteAggregateFields {
  avg: EventFavoriteAvgFields
  count(columns: [EventFavoriteSelectColumn!], distinct: Boolean): Int!
  max: EventFavoriteMaxFields
  min: EventFavoriteMinFields
  stddev: EventFavoriteStddevFields
  stddevPop: EventFavoriteStddevPopFields
  stddevSamp: EventFavoriteStddevSampFields
  sum: EventFavoriteSumFields
  varPop: EventFavoriteVarPopFields
  varSamp: EventFavoriteVarSampFields
  variance: EventFavoriteVarianceFields
}

input EventFavoriteAggregateOrderBy {
  avg: EventFavoriteAvgOrderBy
  count: OrderBy
  max: EventFavoriteMaxOrderBy
  min: EventFavoriteMinOrderBy
  stddev: EventFavoriteStddevOrderBy
  stddevPop: EventFavoriteStddevPopOrderBy
  stddevSamp: EventFavoriteStddevSampOrderBy
  sum: EventFavoriteSumOrderBy
  varPop: EventFavoriteVarPopOrderBy
  varSamp: EventFavoriteVarSampOrderBy
  variance: EventFavoriteVarianceOrderBy
}

input EventFavoriteArrRelInsertInput {
  data: [EventFavoriteInsertInput!]!
  onConflict: EventFavoriteOnConflict
}

type EventFavoriteAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventFavoriteAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input EventFavoriteBoolExp {
  _and: [EventFavoriteBoolExp!]
  _not: EventFavoriteBoolExp
  _or: [EventFavoriteBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventFavoriteConstraint {
  event_favorite_pkey
}

input EventFavoriteIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  tenantId: bigint
}

input EventFavoriteInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventFavoriteMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input EventFavoriteMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventFavoriteMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input EventFavoriteMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventFavoriteMutationResponse {
  affectedRows: Int!
  returning: [EventFavorite!]!
}

input EventFavoriteOnConflict {
  constraint: EventFavoriteConstraint!
  updateColumns: [EventFavoriteUpdateColumn!]! = []
  where: EventFavoriteBoolExp
}

input EventFavoriteOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventFavoritePkColumnsInput {
  id: bigint!
}

enum EventFavoriteSelectColumn {
  createdAt
  createdById
  deletedAt
  eventId
  hiddenAt
  id
  tenantId
}

input EventFavoriteSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type EventFavoriteStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventFavoriteStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventFavoriteStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventFavoriteStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventFavoriteStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventFavoriteStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input EventFavoriteStreamCursorInput {
  initialValue: EventFavoriteStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventFavoriteStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type EventFavoriteSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  tenantId: bigint
}

input EventFavoriteSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum EventFavoriteUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventId
  hiddenAt
  id
  tenantId
}

input EventFavoriteUpdates {
  _inc: EventFavoriteIncInput
  _set: EventFavoriteSetInput
  where: EventFavoriteBoolExp!
}

type EventFavoriteVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventFavoriteVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventFavoriteVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventFavoriteVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type EventFavoriteVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  tenantId: Float
}

input EventFavoriteVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input EventIncInput {
  bannerId: bigint
  createdById: bigint
  eventApprovalSubmissionId: bigint
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: bigint
}

input EventInsertInput {
  banner: FileUploadObjRelInsertInput
  bannerId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmission: FormSubmissionObjRelInsertInput
  eventApprovalSubmissionId: bigint
  eventApprovals: EventApprovalArrRelInsertInput
  eventFavorites: EventFavoriteArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventOrganizes: EventOrganizeArrRelInsertInput
  eventTags: EventTagsArrRelInsertInput
  finances: FinanceArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingJoins: Boolean
  isPrivate: Boolean
  isTemplate: Boolean
  joinForm: FormObjRelInsertInput
  joinFormId: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  nextEventApprovalStep: EventApprovalStepObjRelInsertInput
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventJoin {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  event: Event!
  eventId: bigint!
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!
  isPresent: Boolean
  joinedBy: User!
  joinedById: bigint!
  linkedMissionJoin: MissionJoin
  missionJoin: MissionJoin
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedBy: Individual
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedBy: Individual
  processedById: bigint
  qrCode: FileUpload
  qrCodeId: bigint
  state: String!
  tenant: Tenant!
  tenantId: bigint!
}

type EventJoinAggregate {
  aggregate: EventJoinAggregateFields
  nodes: [EventJoin!]!
}

input EventJoinAggregateBoolExp {
  bool_and: eventJoinAggregateBoolExpBool_and
  bool_or: eventJoinAggregateBoolExpBool_or
  count: eventJoinAggregateBoolExpCount
}

input eventJoinAggregateBoolExpBool_and {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpBool_or {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpCount {
  arguments: [EventJoinSelectColumn!]
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: IntComparisonExp!
}

type EventJoinAggregateFields {
  avg: EventJoinAvgFields
  count(columns: [EventJoinSelectColumn!], distinct: Boolean): Int!
  max: EventJoinMaxFields
  min: EventJoinMinFields
  stddev: EventJoinStddevFields
  stddevPop: EventJoinStddevPopFields
  stddevSamp: EventJoinStddevSampFields
  sum: EventJoinSumFields
  varPop: EventJoinVarPopFields
  varSamp: EventJoinVarSampFields
  variance: EventJoinVarianceFields
}

input EventJoinAggregateOrderBy {
  avg: EventJoinAvgOrderBy
  count: OrderBy
  max: EventJoinMaxOrderBy
  min: EventJoinMinOrderBy
  stddev: EventJoinStddevOrderBy
  stddevPop: EventJoinStddevPopOrderBy
  stddevSamp: EventJoinStddevSampOrderBy
  sum: EventJoinSumOrderBy
  varPop: EventJoinVarPopOrderBy
  varSamp: EventJoinVarSampOrderBy
  variance: EventJoinVarianceOrderBy
}

input EventJoinArrRelInsertInput {
  data: [EventJoinInsertInput!]!
  onConflict: EventJoinOnConflict
}

type EventJoinAvgFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

input EventJoinBoolExp {
  _and: [EventJoinBoolExp!]
  _not: EventJoinBoolExp
  _or: [EventJoinBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isPresent: BooleanComparisonExp
  joinedBy: UserBoolExp
  joinedById: BigintComparisonExp
  linkedMissionJoin: MissionJoinBoolExp
  missionJoin: MissionJoinBoolExp
  missionJoinId: BigintComparisonExp
  participationProcessedAt: TimestamptzComparisonExp
  participationProcessedBy: IndividualBoolExp
  participationProcessedById: BigintComparisonExp
  participationProcessedVia: StringComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: IndividualBoolExp
  processedById: BigintComparisonExp
  qrCode: FileUploadBoolExp
  qrCodeId: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventJoinConstraint {
  event_join_pkey
}

input EventJoinIncInput {
  createdById: bigint
  eventId: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedById: bigint
  processedById: bigint
  qrCodeId: bigint
  tenantId: bigint
}

input EventJoinInsertInput {
  actions: ActionArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventId: bigint
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPresent: Boolean
  joinedBy: UserObjRelInsertInput
  joinedById: bigint
  linkedMissionJoin: MissionJoinObjRelInsertInput
  missionJoin: MissionJoinObjRelInsertInput
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedBy: IndividualObjRelInsertInput
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedBy: IndividualObjRelInsertInput
  processedById: bigint
  qrCode: FileUploadObjRelInsertInput
  qrCodeId: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventJoinMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

input EventJoinMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedAt: OrderBy
  participationProcessedById: OrderBy
  participationProcessedVia: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type EventJoinMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

input EventJoinMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedAt: OrderBy
  participationProcessedById: OrderBy
  participationProcessedVia: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type EventJoinMutationResponse {
  affectedRows: Int!
  returning: [EventJoin!]!
}

input EventJoinObjRelInsertInput {
  data: EventJoinInsertInput!
  onConflict: EventJoinOnConflict
}

input EventJoinOnConflict {
  constraint: EventJoinConstraint!
  updateColumns: [EventJoinUpdateColumn!]! = []
  where: EventJoinBoolExp
}

input EventJoinOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isPresent: OrderBy
  joinedBy: UserOrderBy
  joinedById: OrderBy
  linkedMissionJoin: MissionJoinOrderBy
  missionJoin: MissionJoinOrderBy
  missionJoinId: OrderBy
  participationProcessedAt: OrderBy
  participationProcessedBy: IndividualOrderBy
  participationProcessedById: OrderBy
  participationProcessedVia: OrderBy
  processedAt: OrderBy
  processedBy: IndividualOrderBy
  processedById: OrderBy
  qrCode: FileUploadOrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventJoinPkColumnsInput {
  id: bigint!
}

enum EventJoinSelectColumn {
  createdAt
  createdById
  deletedAt
  eventId
  formSubmissionId
  hiddenAt
  id
  isPresent
  joinedById
  missionJoinId
  participationProcessedAt
  participationProcessedById
  participationProcessedVia
  processedAt
  processedById
  qrCodeId
  state
  tenantId
}

enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns {
  isPresent
}

enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns {
  isPresent
}

input EventJoinSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPresent: Boolean
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

type EventJoinStddevFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinStddevPopFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinStddevSampFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

input EventJoinStreamCursorInput {
  initialValue: EventJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventJoinStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPresent: Boolean
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedAt: timestamptz
  participationProcessedById: bigint
  participationProcessedVia: String
  processedAt: timestamptz
  processedById: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

type EventJoinSumFields {
  createdById: bigint
  eventId: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  missionJoinId: bigint
  participationProcessedById: bigint
  processedById: bigint
  qrCodeId: bigint
  tenantId: bigint
}

input EventJoinSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

enum EventJoinUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventId
  formSubmissionId
  hiddenAt
  id
  isPresent
  joinedById
  missionJoinId
  participationProcessedAt
  participationProcessedById
  participationProcessedVia
  processedAt
  processedById
  qrCodeId
  state
  tenantId
}

input EventJoinUpdates {
  _inc: EventJoinIncInput
  _set: EventJoinSetInput
  where: EventJoinBoolExp!
}

type EventJoinVarianceFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinVarPopFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventJoinVarSampFields {
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  missionJoinId: Float
  participationProcessedById: Float
  processedById: Float
  qrCodeId: Float
  tenantId: Float
}

input EventJoinVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionJoinId: OrderBy
  participationProcessedById: OrderBy
  processedById: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

type EventMaxFields {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

input EventMaxOrderBy {
  bannerId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventApprovalSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  name: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type EventMinFields {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

input EventMinOrderBy {
  bannerId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventApprovalSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  name: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type EventMutationResponse {
  affectedRows: Int!
  returning: [Event!]!
}

input EventObjRelInsertInput {
  data: EventInsertInput!
  onConflict: EventOnConflict
}

input EventOnConflict {
  constraint: EventConstraint!
  updateColumns: [EventUpdateColumn!]! = []
  where: EventBoolExp
}

input EventOrderBy {
  banner: FileUploadOrderBy
  bannerId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventApprovalSubmission: FormSubmissionOrderBy
  eventApprovalSubmissionId: OrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventFavoritesAggregate: EventFavoriteAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  financesAggregate: FinanceAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isAutoAcceptingJoins: OrderBy
  isPrivate: OrderBy
  isTemplate: OrderBy
  joinForm: FormOrderBy
  joinFormId: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  meta: OrderBy
  name: OrderBy
  nextEventApprovalStep: EventApprovalStepOrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

type EventOrganize {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  event: Event!
  eventId: bigint!
  eventSupervisors(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  project: Project
  projectId: bigint
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type EventOrganizeAggregate {
  aggregate: EventOrganizeAggregateFields
  nodes: [EventOrganize!]!
}

input EventOrganizeAggregateBoolExp {
  count: eventOrganizeAggregateBoolExpCount
}

input eventOrganizeAggregateBoolExpCount {
  arguments: [EventOrganizeSelectColumn!]
  distinct: Boolean
  filter: EventOrganizeBoolExp
  predicate: IntComparisonExp!
}

type EventOrganizeAggregateFields {
  avg: EventOrganizeAvgFields
  count(columns: [EventOrganizeSelectColumn!], distinct: Boolean): Int!
  max: EventOrganizeMaxFields
  min: EventOrganizeMinFields
  stddev: EventOrganizeStddevFields
  stddevPop: EventOrganizeStddevPopFields
  stddevSamp: EventOrganizeStddevSampFields
  sum: EventOrganizeSumFields
  varPop: EventOrganizeVarPopFields
  varSamp: EventOrganizeVarSampFields
  variance: EventOrganizeVarianceFields
}

input EventOrganizeAggregateOrderBy {
  avg: EventOrganizeAvgOrderBy
  count: OrderBy
  max: EventOrganizeMaxOrderBy
  min: EventOrganizeMinOrderBy
  stddev: EventOrganizeStddevOrderBy
  stddevPop: EventOrganizeStddevPopOrderBy
  stddevSamp: EventOrganizeStddevSampOrderBy
  sum: EventOrganizeSumOrderBy
  varPop: EventOrganizeVarPopOrderBy
  varSamp: EventOrganizeVarSampOrderBy
  variance: EventOrganizeVarianceOrderBy
}

input EventOrganizeArrRelInsertInput {
  data: [EventOrganizeInsertInput!]!
  onConflict: EventOrganizeOnConflict
}

type EventOrganizeAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

input EventOrganizeAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input EventOrganizeBoolExp {
  _and: [EventOrganizeBoolExp!]
  _not: EventOrganizeBoolExp
  _or: [EventOrganizeBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  eventSupervisors: EventSupervisorBoolExp
  eventSupervisorsAggregate: EventSupervisorAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum EventOrganizeConstraint {
  event_organize_pkey
}

input EventOrganizeIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

input EventOrganizeInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  eventSupervisors: EventSupervisorArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  missions: MissionArrRelInsertInput
  project: ProjectObjRelInsertInput
  projectId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type EventOrganizeMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

input EventOrganizeMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type EventOrganizeMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

input EventOrganizeMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type EventOrganizeMutationResponse {
  affectedRows: Int!
  returning: [EventOrganize!]!
}

input EventOrganizeObjRelInsertInput {
  data: EventOrganizeInsertInput!
  onConflict: EventOrganizeOnConflict
}

input EventOrganizeOnConflict {
  constraint: EventOrganizeConstraint!
  updateColumns: [EventOrganizeUpdateColumn!]! = []
  where: EventOrganizeBoolExp
}

input EventOrganizeOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  eventSupervisorsAggregate: EventSupervisorAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  missionsAggregate: MissionAggregateOrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input EventOrganizePkColumnsInput {
  id: bigint!
}

enum EventOrganizeSelectColumn {
  createdAt
  createdById
  deletedAt
  description
  eventId
  hiddenAt
  id
  projectId
  teamId
  tenantId
}

input EventOrganizeSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

type EventOrganizeStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

input EventOrganizeStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type EventOrganizeStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

input EventOrganizeStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type EventOrganizeStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

input EventOrganizeStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input EventOrganizeStreamCursorInput {
  initialValue: EventOrganizeStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventOrganizeStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

type EventOrganizeSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

input EventOrganizeSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum EventOrganizeUpdateColumn {
  createdAt
  createdById
  deletedAt
  description
  eventId
  hiddenAt
  id
  projectId
  teamId
  tenantId
}

input EventOrganizeUpdates {
  _inc: EventOrganizeIncInput
  _set: EventOrganizeSetInput
  where: EventOrganizeBoolExp!
}

type EventOrganizeVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

input EventOrganizeVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type EventOrganizeVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

input EventOrganizeVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type EventOrganizeVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

input EventOrganizeVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input EventPkColumnsInput {
  id: bigint!
}

input EventPrependInput {
  meta: jsonb
}

enum EventSelectColumn {
  bannerId
  createdAt
  createdById
  deletedAt
  description
  end
  eventApprovalSubmissionId
  hiddenAt
  id
  isAutoAcceptingJoins
  isPrivate
  isTemplate
  joinFormId
  locationId
  maxParticipants
  meta
  name
  nextEventApprovalStepId
  pointsAwardedForAttendance
  price
  slug
  start
  state
  tenantId
}

enum EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns {
  isAutoAcceptingJoins
  isPrivate
  isTemplate
}

enum EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns {
  isAutoAcceptingJoins
  isPrivate
  isTemplate
}

input EventSetInput {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingJoins: Boolean
  isPrivate: Boolean
  isTemplate: Boolean
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

type EventStddevFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: Float
}

input EventStddevOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

type EventStddevPopFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: Float
}

input EventStddevPopOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

type EventStddevSampFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: Float
}

input EventStddevSampOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

input EventStreamCursorInput {
  initialValue: EventStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventStreamCursorValueInput {
  bannerId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventApprovalSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingJoins: Boolean
  isPrivate: Boolean
  isTemplate: Boolean
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

type EventSumFields {
  bannerId: bigint
  createdById: bigint
  eventApprovalSubmissionId: bigint
  id: bigint
  joinFormId: bigint
  locationId: bigint
  maxParticipants: smallint
  nextEventApprovalStepId: bigint
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: bigint
}

input EventSumOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

type EventSupervisor {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  eventOrganize: EventOrganize!
  eventOrganizeId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
  title: String!
  user: User!
  userId: bigint!
}

type EventSupervisorAggregate {
  aggregate: EventSupervisorAggregateFields
  nodes: [EventSupervisor!]!
}

input EventSupervisorAggregateBoolExp {
  count: eventSupervisorAggregateBoolExpCount
}

input eventSupervisorAggregateBoolExpCount {
  arguments: [EventSupervisorSelectColumn!]
  distinct: Boolean
  filter: EventSupervisorBoolExp
  predicate: IntComparisonExp!
}

type EventSupervisorAggregateFields {
  avg: EventSupervisorAvgFields
  count(columns: [EventSupervisorSelectColumn!], distinct: Boolean): Int!
  max: EventSupervisorMaxFields
  min: EventSupervisorMinFields
  stddev: EventSupervisorStddevFields
  stddevPop: EventSupervisorStddevPopFields
  stddevSamp: EventSupervisorStddevSampFields
  sum: EventSupervisorSumFields
  varPop: EventSupervisorVarPopFields
  varSamp: EventSupervisorVarSampFields
  variance: EventSupervisorVarianceFields
}

input EventSupervisorAggregateOrderBy {
  avg: EventSupervisorAvgOrderBy
  count: OrderBy
  max: EventSupervisorMaxOrderBy
  min: EventSupervisorMinOrderBy
  stddev: EventSupervisorStddevOrderBy
  stddevPop: EventSupervisorStddevPopOrderBy
  stddevSamp: EventSupervisorStddevSampOrderBy
  sum: EventSupervisorSumOrderBy
  varPop: EventSupervisorVarPopOrderBy
  varSamp: EventSupervisorVarSampOrderBy
  variance: EventSupervisorVarianceOrderBy
}

input EventSupervisorArrRelInsertInput {
  data: [EventSupervisorInsertInput!]!
  onConflict: EventSupervisorOnConflict
}

type EventSupervisorAvgFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantId: Float
  userId: Float
}

input EventSupervisorAvgOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input EventSupervisorBoolExp {
  _and: [EventSupervisorBoolExp!]
  _not: EventSupervisorBoolExp
  _or: [EventSupervisorBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventOrganize: EventOrganizeBoolExp
  eventOrganizeId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  title: StringComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum EventSupervisorConstraint {
  event_supervisor_pkey
}

input EventSupervisorIncInput {
  createdById: bigint
  eventOrganizeId: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input EventSupervisorInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventOrganize: EventOrganizeObjRelInsertInput
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  title: String
  user: UserObjRelInsertInput
  userId: bigint
}

type EventSupervisorMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  title: String
  userId: bigint
}

input EventSupervisorMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventOrganizeId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  title: OrderBy
  userId: OrderBy
}

type EventSupervisorMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  title: String
  userId: bigint
}

input EventSupervisorMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventOrganizeId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  title: OrderBy
  userId: OrderBy
}

type EventSupervisorMutationResponse {
  affectedRows: Int!
  returning: [EventSupervisor!]!
}

input EventSupervisorOnConflict {
  constraint: EventSupervisorConstraint!
  updateColumns: [EventSupervisorUpdateColumn!]! = []
  where: EventSupervisorBoolExp
}

input EventSupervisorOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventOrganize: EventOrganizeOrderBy
  eventOrganizeId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  title: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input EventSupervisorPkColumnsInput {
  id: bigint!
}

enum EventSupervisorSelectColumn {
  createdAt
  createdById
  deletedAt
  eventOrganizeId
  hiddenAt
  id
  tenantId
  title
  userId
}

input EventSupervisorSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  title: String
  userId: bigint
}

type EventSupervisorStddevFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantId: Float
  userId: Float
}

input EventSupervisorStddevOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventSupervisorStddevPopFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantId: Float
  userId: Float
}

input EventSupervisorStddevPopOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventSupervisorStddevSampFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantId: Float
  userId: Float
}

input EventSupervisorStddevSampOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input EventSupervisorStreamCursorInput {
  initialValue: EventSupervisorStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventSupervisorStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventOrganizeId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  title: String
  userId: bigint
}

type EventSupervisorSumFields {
  createdById: bigint
  eventOrganizeId: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input EventSupervisorSumOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum EventSupervisorUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventOrganizeId
  hiddenAt
  id
  tenantId
  title
  userId
}

input EventSupervisorUpdates {
  _inc: EventSupervisorIncInput
  _set: EventSupervisorSetInput
  where: EventSupervisorBoolExp!
}

type EventSupervisorVarianceFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantId: Float
  userId: Float
}

input EventSupervisorVarianceOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventSupervisorVarPopFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantId: Float
  userId: Float
}

input EventSupervisorVarPopOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventSupervisorVarSampFields {
  createdById: Float
  eventOrganizeId: Float
  id: Float
  tenantId: Float
  userId: Float
}

input EventSupervisorVarSampOrderBy {
  createdById: OrderBy
  eventOrganizeId: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type EventTags {
  event: Event!
  eventId: bigint!
  tag: Tag!
  tagId: bigint!
}

type EventTagsAggregate {
  aggregate: EventTagsAggregateFields
  nodes: [EventTags!]!
}

input EventTagsAggregateBoolExp {
  count: eventTagsAggregateBoolExpCount
}

input eventTagsAggregateBoolExpCount {
  arguments: [EventTagsSelectColumn!]
  distinct: Boolean
  filter: EventTagsBoolExp
  predicate: IntComparisonExp!
}

type EventTagsAggregateFields {
  avg: EventTagsAvgFields
  count(columns: [EventTagsSelectColumn!], distinct: Boolean): Int!
  max: EventTagsMaxFields
  min: EventTagsMinFields
  stddev: EventTagsStddevFields
  stddevPop: EventTagsStddevPopFields
  stddevSamp: EventTagsStddevSampFields
  sum: EventTagsSumFields
  varPop: EventTagsVarPopFields
  varSamp: EventTagsVarSampFields
  variance: EventTagsVarianceFields
}

input EventTagsAggregateOrderBy {
  avg: EventTagsAvgOrderBy
  count: OrderBy
  max: EventTagsMaxOrderBy
  min: EventTagsMinOrderBy
  stddev: EventTagsStddevOrderBy
  stddevPop: EventTagsStddevPopOrderBy
  stddevSamp: EventTagsStddevSampOrderBy
  sum: EventTagsSumOrderBy
  varPop: EventTagsVarPopOrderBy
  varSamp: EventTagsVarSampOrderBy
  variance: EventTagsVarianceOrderBy
}

input EventTagsArrRelInsertInput {
  data: [EventTagsInsertInput!]!
  onConflict: EventTagsOnConflict
}

type EventTagsAvgFields {
  eventId: Float
  tagId: Float
}

input EventTagsAvgOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

input EventTagsBoolExp {
  _and: [EventTagsBoolExp!]
  _not: EventTagsBoolExp
  _or: [EventTagsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum EventTagsConstraint {
  event_tags_pkey
}

input EventTagsIncInput {
  eventId: bigint
  tagId: bigint
}

input EventTagsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type EventTagsMaxFields {
  eventId: bigint
  tagId: bigint
}

input EventTagsMaxOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsMinFields {
  eventId: bigint
  tagId: bigint
}

input EventTagsMinOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsMutationResponse {
  affectedRows: Int!
  returning: [EventTags!]!
}

input EventTagsOnConflict {
  constraint: EventTagsConstraint!
  updateColumns: [EventTagsUpdateColumn!]! = []
  where: EventTagsBoolExp
}

input EventTagsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input EventTagsPkColumnsInput {
  eventId: bigint!
  tagId: bigint!
}

enum EventTagsSelectColumn {
  eventId
  tagId
}

input EventTagsSetInput {
  eventId: bigint
  tagId: bigint
}

type EventTagsStddevFields {
  eventId: Float
  tagId: Float
}

input EventTagsStddevOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsStddevPopFields {
  eventId: Float
  tagId: Float
}

input EventTagsStddevPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsStddevSampFields {
  eventId: Float
  tagId: Float
}

input EventTagsStddevSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

input EventTagsStreamCursorInput {
  initialValue: EventTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input EventTagsStreamCursorValueInput {
  eventId: bigint
  tagId: bigint
}

type EventTagsSumFields {
  eventId: bigint
  tagId: bigint
}

input EventTagsSumOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

enum EventTagsUpdateColumn {
  eventId
  tagId
}

input EventTagsUpdates {
  _inc: EventTagsIncInput
  _set: EventTagsSetInput
  where: EventTagsBoolExp!
}

type EventTagsVarianceFields {
  eventId: Float
  tagId: Float
}

input EventTagsVarianceOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsVarPopFields {
  eventId: Float
  tagId: Float
}

input EventTagsVarPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

type EventTagsVarSampFields {
  eventId: Float
  tagId: Float
}

input EventTagsVarSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

enum EventUpdateColumn {
  bannerId
  createdAt
  createdById
  deletedAt
  description
  end
  eventApprovalSubmissionId
  hiddenAt
  id
  isAutoAcceptingJoins
  isPrivate
  isTemplate
  joinFormId
  locationId
  maxParticipants
  meta
  name
  nextEventApprovalStepId
  pointsAwardedForAttendance
  price
  slug
  start
  state
  tenantId
}

input EventUpdates {
  _append: EventAppendInput
  _deleteAtPath: EventDeleteAtPathInput
  _deleteElem: EventDeleteElemInput
  _deleteKey: EventDeleteKeyInput
  _inc: EventIncInput
  _prepend: EventPrependInput
  _set: EventSetInput
  where: EventBoolExp!
}

type EventVarianceFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: Float
}

input EventVarianceOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

type EventVarPopFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: Float
}

input EventVarPopOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

type EventVarSampFields {
  bannerId: Float
  createdById: Float
  eventApprovalSubmissionId: Float
  id: Float
  joinFormId: Float
  locationId: Float
  maxParticipants: Float
  nextEventApprovalStepId: Float
  pointsAwardedForAttendance: Float
  price: Float
  tenantId: Float
}

input EventVarSampOrderBy {
  bannerId: OrderBy
  createdById: OrderBy
  eventApprovalSubmissionId: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  locationId: OrderBy
  maxParticipants: OrderBy
  nextEventApprovalStepId: OrderBy
  pointsAwardedForAttendance: OrderBy
  price: OrderBy
  tenantId: OrderBy
}

type Expense {
  bank: Bank!
  bankId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  expenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenseReportId: bigint!
  fileUpload: FileUpload!
  finance: Finance
  hiddenAt: timestamptz
  id: bigint!
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedBy: Individual
  processedById: bigint
  state: String!
  tenant: Tenant!
  tenantId: bigint!
}

type ExpenseAggregate {
  aggregate: ExpenseAggregateFields
  nodes: [Expense!]!
}

input ExpenseAggregateBoolExp {
  count: expenseAggregateBoolExpCount
}

input expenseAggregateBoolExpCount {
  arguments: [ExpenseSelectColumn!]
  distinct: Boolean
  filter: ExpenseBoolExp
  predicate: IntComparisonExp!
}

type ExpenseAggregateFields {
  avg: ExpenseAvgFields
  count(columns: [ExpenseSelectColumn!], distinct: Boolean): Int!
  max: ExpenseMaxFields
  min: ExpenseMinFields
  stddev: ExpenseStddevFields
  stddevPop: ExpenseStddevPopFields
  stddevSamp: ExpenseStddevSampFields
  sum: ExpenseSumFields
  varPop: ExpenseVarPopFields
  varSamp: ExpenseVarSampFields
  variance: ExpenseVarianceFields
}

input ExpenseAggregateOrderBy {
  avg: ExpenseAvgOrderBy
  count: OrderBy
  max: ExpenseMaxOrderBy
  min: ExpenseMinOrderBy
  stddev: ExpenseStddevOrderBy
  stddevPop: ExpenseStddevPopOrderBy
  stddevSamp: ExpenseStddevSampOrderBy
  sum: ExpenseSumOrderBy
  varPop: ExpenseVarPopOrderBy
  varSamp: ExpenseVarSampOrderBy
  variance: ExpenseVarianceOrderBy
}

input ExpenseArrRelInsertInput {
  data: [ExpenseInsertInput!]!
  onConflict: ExpenseOnConflict
}

type ExpenseAvgFields {
  bankId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantId: Float
}

input ExpenseAvgOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

input ExpenseBoolExp {
  _and: [ExpenseBoolExp!]
  _not: ExpenseBoolExp
  _or: [ExpenseBoolExp!]
  bank: BankBoolExp
  bankId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  expenseReportId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  finance: FinanceBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  lastNotifiedAt: TimestamptzComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: IndividualBoolExp
  processedById: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ExpenseConstraint {
  expense_pkey
}

input ExpenseIncInput {
  bankId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  processedById: bigint
  tenantId: bigint
}

input ExpenseInsertInput {
  bank: BankObjRelInsertInput
  bankId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseItems: ExpenseItemArrRelInsertInput
  expenseReportId: bigint
  fileUpload: FileUploadObjRelInsertInput
  finance: FinanceObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedBy: IndividualObjRelInsertInput
  processedById: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ExpenseItem {
  category: String!
  company: LegalUnit
  companyId: bigint
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  expense: Expense
  expenseId: bigint
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  payedAt: timestamptz
  quantity: smallint!
  tenant: Tenant!
  tenantId: bigint!
  unitCost: Float!
}

type ExpenseItemAggregate {
  aggregate: ExpenseItemAggregateFields
  nodes: [ExpenseItem!]!
}

input ExpenseItemAggregateBoolExp {
  count: expenseItemAggregateBoolExpCount
}

input expenseItemAggregateBoolExpCount {
  arguments: [ExpenseItemSelectColumn!]
  distinct: Boolean
  filter: ExpenseItemBoolExp
  predicate: IntComparisonExp!
}

type ExpenseItemAggregateFields {
  avg: ExpenseItemAvgFields
  count(columns: [ExpenseItemSelectColumn!], distinct: Boolean): Int!
  max: ExpenseItemMaxFields
  min: ExpenseItemMinFields
  stddev: ExpenseItemStddevFields
  stddevPop: ExpenseItemStddevPopFields
  stddevSamp: ExpenseItemStddevSampFields
  sum: ExpenseItemSumFields
  varPop: ExpenseItemVarPopFields
  varSamp: ExpenseItemVarSampFields
  variance: ExpenseItemVarianceFields
}

input ExpenseItemAggregateOrderBy {
  avg: ExpenseItemAvgOrderBy
  count: OrderBy
  max: ExpenseItemMaxOrderBy
  min: ExpenseItemMinOrderBy
  stddev: ExpenseItemStddevOrderBy
  stddevPop: ExpenseItemStddevPopOrderBy
  stddevSamp: ExpenseItemStddevSampOrderBy
  sum: ExpenseItemSumOrderBy
  varPop: ExpenseItemVarPopOrderBy
  varSamp: ExpenseItemVarSampOrderBy
  variance: ExpenseItemVarianceOrderBy
}

input ExpenseItemArrRelInsertInput {
  data: [ExpenseItemInsertInput!]!
  onConflict: ExpenseItemOnConflict
}

type ExpenseItemAttachments {
  attachment: FileUpload!
  expenseItem: ExpenseItem!
  expenseItemId: bigint!
  fileUploadId: bigint!
}

type ExpenseItemAttachmentsAggregate {
  aggregate: ExpenseItemAttachmentsAggregateFields
  nodes: [ExpenseItemAttachments!]!
}

input ExpenseItemAttachmentsAggregateBoolExp {
  count: expenseItemAttachmentsAggregateBoolExpCount
}

input expenseItemAttachmentsAggregateBoolExpCount {
  arguments: [ExpenseItemAttachmentsSelectColumn!]
  distinct: Boolean
  filter: ExpenseItemAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type ExpenseItemAttachmentsAggregateFields {
  avg: ExpenseItemAttachmentsAvgFields
  count(columns: [ExpenseItemAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: ExpenseItemAttachmentsMaxFields
  min: ExpenseItemAttachmentsMinFields
  stddev: ExpenseItemAttachmentsStddevFields
  stddevPop: ExpenseItemAttachmentsStddevPopFields
  stddevSamp: ExpenseItemAttachmentsStddevSampFields
  sum: ExpenseItemAttachmentsSumFields
  varPop: ExpenseItemAttachmentsVarPopFields
  varSamp: ExpenseItemAttachmentsVarSampFields
  variance: ExpenseItemAttachmentsVarianceFields
}

input ExpenseItemAttachmentsAggregateOrderBy {
  avg: ExpenseItemAttachmentsAvgOrderBy
  count: OrderBy
  max: ExpenseItemAttachmentsMaxOrderBy
  min: ExpenseItemAttachmentsMinOrderBy
  stddev: ExpenseItemAttachmentsStddevOrderBy
  stddevPop: ExpenseItemAttachmentsStddevPopOrderBy
  stddevSamp: ExpenseItemAttachmentsStddevSampOrderBy
  sum: ExpenseItemAttachmentsSumOrderBy
  varPop: ExpenseItemAttachmentsVarPopOrderBy
  varSamp: ExpenseItemAttachmentsVarSampOrderBy
  variance: ExpenseItemAttachmentsVarianceOrderBy
}

input ExpenseItemAttachmentsArrRelInsertInput {
  data: [ExpenseItemAttachmentsInsertInput!]!
  onConflict: ExpenseItemAttachmentsOnConflict
}

type ExpenseItemAttachmentsAvgFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsAvgOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

input ExpenseItemAttachmentsBoolExp {
  _and: [ExpenseItemAttachmentsBoolExp!]
  _not: ExpenseItemAttachmentsBoolExp
  _or: [ExpenseItemAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  expenseItem: ExpenseItemBoolExp
  expenseItemId: BigintComparisonExp
  fileUploadId: BigintComparisonExp
}

enum ExpenseItemAttachmentsConstraint {
  expense_item_attachments_pkey
}

input ExpenseItemAttachmentsIncInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  expenseItem: ExpenseItemObjRelInsertInput
  expenseItemId: bigint
  fileUploadId: bigint
}

type ExpenseItemAttachmentsMaxFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsMaxOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsMinFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsMinOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [ExpenseItemAttachments!]!
}

input ExpenseItemAttachmentsOnConflict {
  constraint: ExpenseItemAttachmentsConstraint!
  updateColumns: [ExpenseItemAttachmentsUpdateColumn!]! = []
  where: ExpenseItemAttachmentsBoolExp
}

input ExpenseItemAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  expenseItem: ExpenseItemOrderBy
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

input ExpenseItemAttachmentsPkColumnsInput {
  expenseItemId: bigint!
  fileUploadId: bigint!
}

enum ExpenseItemAttachmentsSelectColumn {
  expenseItemId
  fileUploadId
}

input ExpenseItemAttachmentsSetInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

type ExpenseItemAttachmentsStddevFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsStddevOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsStddevPopFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsStddevPopOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsStddevSampFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsStddevSampOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

input ExpenseItemAttachmentsStreamCursorInput {
  initialValue: ExpenseItemAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ExpenseItemAttachmentsStreamCursorValueInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

type ExpenseItemAttachmentsSumFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

input ExpenseItemAttachmentsSumOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

enum ExpenseItemAttachmentsUpdateColumn {
  expenseItemId
  fileUploadId
}

input ExpenseItemAttachmentsUpdates {
  _inc: ExpenseItemAttachmentsIncInput
  _set: ExpenseItemAttachmentsSetInput
  where: ExpenseItemAttachmentsBoolExp!
}

type ExpenseItemAttachmentsVarianceFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsVarianceOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsVarPopFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsVarPopOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAttachmentsVarSampFields {
  expenseItemId: Float
  fileUploadId: Float
}

input ExpenseItemAttachmentsVarSampOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

type ExpenseItemAvgFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

input ExpenseItemAvgOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

input ExpenseItemBoolExp {
  _and: [ExpenseItemBoolExp!]
  _not: ExpenseItemBoolExp
  _or: [ExpenseItemBoolExp!]
  category: StringComparisonExp
  company: LegalUnitBoolExp
  companyId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  expenseItemAttachments: ExpenseItemAttachmentsBoolExp
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  quantity: SmallintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  unitCost: FloatComparisonExp
}

enum ExpenseItemConstraint {
  expense_item_pkey
}

input ExpenseItemIncInput {
  companyId: bigint
  createdById: bigint
  expenseId: bigint
  id: bigint
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

input ExpenseItemInsertInput {
  category: String
  company: LegalUnitObjRelInsertInput
  companyId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  expenseItemAttachments: ExpenseItemAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  unitCost: Float
}

type ExpenseItemMaxFields {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

input ExpenseItemMaxOrderBy {
  category: OrderBy
  companyId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemMinFields {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

input ExpenseItemMinOrderBy {
  category: OrderBy
  companyId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemMutationResponse {
  affectedRows: Int!
  returning: [ExpenseItem!]!
}

input ExpenseItemObjRelInsertInput {
  data: ExpenseItemInsertInput!
  onConflict: ExpenseItemOnConflict
}

input ExpenseItemOnConflict {
  constraint: ExpenseItemConstraint!
  updateColumns: [ExpenseItemUpdateColumn!]! = []
  where: ExpenseItemBoolExp
}

input ExpenseItemOrderBy {
  category: OrderBy
  company: LegalUnitOrderBy
  companyId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

input ExpenseItemPkColumnsInput {
  id: bigint!
}

enum ExpenseItemSelectColumn {
  category
  companyId
  createdAt
  createdById
  deletedAt
  description
  expenseId
  hiddenAt
  id
  name
  payedAt
  quantity
  tenantId
  unitCost
}

input ExpenseItemSetInput {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

type ExpenseItemStddevFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

input ExpenseItemStddevOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemStddevPopFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

input ExpenseItemStddevPopOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemStddevSampFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

input ExpenseItemStddevSampOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

input ExpenseItemStreamCursorInput {
  initialValue: ExpenseItemStreamCursorValueInput!
  ordering: CursorOrdering
}

input ExpenseItemStreamCursorValueInput {
  category: String
  companyId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

type ExpenseItemSumFields {
  companyId: bigint
  createdById: bigint
  expenseId: bigint
  id: bigint
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

input ExpenseItemSumOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

enum ExpenseItemUpdateColumn {
  category
  companyId
  createdAt
  createdById
  deletedAt
  description
  expenseId
  hiddenAt
  id
  name
  payedAt
  quantity
  tenantId
  unitCost
}

input ExpenseItemUpdates {
  _inc: ExpenseItemIncInput
  _set: ExpenseItemSetInput
  where: ExpenseItemBoolExp!
}

type ExpenseItemVarianceFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

input ExpenseItemVarianceOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemVarPopFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

input ExpenseItemVarPopOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

type ExpenseItemVarSampFields {
  companyId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

input ExpenseItemVarSampOrderBy {
  companyId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

type ExpenseMaxFields {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantId: bigint
}

input ExpenseMaxOrderBy {
  bankId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type ExpenseMinFields {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantId: bigint
}

input ExpenseMinOrderBy {
  bankId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type ExpenseMutationResponse {
  affectedRows: Int!
  returning: [Expense!]!
}

input ExpenseObjRelInsertInput {
  data: ExpenseInsertInput!
  onConflict: ExpenseOnConflict
}

input ExpenseOnConflict {
  constraint: ExpenseConstraint!
  updateColumns: [ExpenseUpdateColumn!]! = []
  where: ExpenseBoolExp
}

input ExpenseOrderBy {
  bank: BankOrderBy
  bankId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  expenseReportId: OrderBy
  fileUpload: FileUploadOrderBy
  finance: FinanceOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  processedAt: OrderBy
  processedBy: IndividualOrderBy
  processedById: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ExpensePkColumnsInput {
  id: bigint!
}

enum ExpenseSelectColumn {
  bankId
  createdAt
  createdById
  deletedAt
  description
  expenseReportId
  hiddenAt
  id
  lastNotifiedAt
  processedAt
  processedById
  state
  tenantId
}

input ExpenseSetInput {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantId: bigint
}

type ExpenseStddevFields {
  bankId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantId: Float
}

input ExpenseStddevOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

type ExpenseStddevPopFields {
  bankId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantId: Float
}

input ExpenseStddevPopOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

type ExpenseStddevSampFields {
  bankId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantId: Float
}

input ExpenseStddevSampOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

input ExpenseStreamCursorInput {
  initialValue: ExpenseStreamCursorValueInput!
  ordering: CursorOrdering
}

input ExpenseStreamCursorValueInput {
  bankId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  processedAt: timestamptz
  processedById: bigint
  state: String
  tenantId: bigint
}

type ExpenseSumFields {
  bankId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  processedById: bigint
  tenantId: bigint
}

input ExpenseSumOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

enum ExpenseUpdateColumn {
  bankId
  createdAt
  createdById
  deletedAt
  description
  expenseReportId
  hiddenAt
  id
  lastNotifiedAt
  processedAt
  processedById
  state
  tenantId
}

input ExpenseUpdates {
  _inc: ExpenseIncInput
  _set: ExpenseSetInput
  where: ExpenseBoolExp!
}

type ExpenseVarianceFields {
  bankId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantId: Float
}

input ExpenseVarianceOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

type ExpenseVarPopFields {
  bankId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantId: Float
}

input ExpenseVarPopOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

type ExpenseVarSampFields {
  bankId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  processedById: Float
  tenantId: Float
}

input ExpenseVarSampOrderBy {
  bankId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  processedById: OrderBy
  tenantId: OrderBy
}

type Favorite {
  content: Content!
  contentId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type FavoriteAggregate {
  aggregate: FavoriteAggregateFields
  nodes: [Favorite!]!
}

input FavoriteAggregateBoolExp {
  count: favoriteAggregateBoolExpCount
}

input favoriteAggregateBoolExpCount {
  arguments: [FavoriteSelectColumn!]
  distinct: Boolean
  filter: FavoriteBoolExp
  predicate: IntComparisonExp!
}

type FavoriteAggregateFields {
  avg: FavoriteAvgFields
  count(columns: [FavoriteSelectColumn!], distinct: Boolean): Int!
  max: FavoriteMaxFields
  min: FavoriteMinFields
  stddev: FavoriteStddevFields
  stddevPop: FavoriteStddevPopFields
  stddevSamp: FavoriteStddevSampFields
  sum: FavoriteSumFields
  varPop: FavoriteVarPopFields
  varSamp: FavoriteVarSampFields
  variance: FavoriteVarianceFields
}

input FavoriteAggregateOrderBy {
  avg: FavoriteAvgOrderBy
  count: OrderBy
  max: FavoriteMaxOrderBy
  min: FavoriteMinOrderBy
  stddev: FavoriteStddevOrderBy
  stddevPop: FavoriteStddevPopOrderBy
  stddevSamp: FavoriteStddevSampOrderBy
  sum: FavoriteSumOrderBy
  varPop: FavoriteVarPopOrderBy
  varSamp: FavoriteVarSampOrderBy
  variance: FavoriteVarianceOrderBy
}

input FavoriteArrRelInsertInput {
  data: [FavoriteInsertInput!]!
  onConflict: FavoriteOnConflict
}

type FavoriteAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FavoriteBoolExp {
  _and: [FavoriteBoolExp!]
  _not: FavoriteBoolExp
  _or: [FavoriteBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FavoriteConstraint {
  favorite_pkey
}

input FavoriteIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input FavoriteInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FavoriteMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FavoriteMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FavoriteMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteMutationResponse {
  affectedRows: Int!
  returning: [Favorite!]!
}

input FavoriteOnConflict {
  constraint: FavoriteConstraint!
  updateColumns: [FavoriteUpdateColumn!]! = []
  where: FavoriteBoolExp
}

input FavoriteOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FavoritePkColumnsInput {
  id: bigint!
}

enum FavoriteSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input FavoriteSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type FavoriteStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FavoriteStreamCursorInput {
  initialValue: FavoriteStreamCursorValueInput!
  ordering: CursorOrdering
}

input FavoriteStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type FavoriteSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input FavoriteSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FavoriteUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input FavoriteUpdates {
  _inc: FavoriteIncInput
  _set: FavoriteSetInput
  where: FavoriteBoolExp!
}

type FavoriteVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FavoriteVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input FavoriteVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FileUpload {
  actorImage: ActorImage
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  document: Document
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  fileLastModifiedAt: timestamptz!
  financeAttachments(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): [FinanceAttachments!]!
  financeAttachmentsAggregate(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): FinanceAttachmentsAggregate!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  grants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  hiddenAt: timestamptz
  id: bigint!
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  name: String!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  signatureGrants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  signatureGrantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  signedGrantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  signedGrantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  size: Int!
  tags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  url: String!
}

type FileUploadAggregate {
  aggregate: FileUploadAggregateFields
  nodes: [FileUpload!]!
}

input FileUploadAggregateBoolExp {
  count: fileUploadAggregateBoolExpCount
}

input fileUploadAggregateBoolExpCount {
  arguments: [FileUploadSelectColumn!]
  distinct: Boolean
  filter: FileUploadBoolExp
  predicate: IntComparisonExp!
}

type FileUploadAggregateFields {
  avg: FileUploadAvgFields
  count(columns: [FileUploadSelectColumn!], distinct: Boolean): Int!
  max: FileUploadMaxFields
  min: FileUploadMinFields
  stddev: FileUploadStddevFields
  stddevPop: FileUploadStddevPopFields
  stddevSamp: FileUploadStddevSampFields
  sum: FileUploadSumFields
  varPop: FileUploadVarPopFields
  varSamp: FileUploadVarSampFields
  variance: FileUploadVarianceFields
}

input FileUploadAggregateOrderBy {
  avg: FileUploadAvgOrderBy
  count: OrderBy
  max: FileUploadMaxOrderBy
  min: FileUploadMinOrderBy
  stddev: FileUploadStddevOrderBy
  stddevPop: FileUploadStddevPopOrderBy
  stddevSamp: FileUploadStddevSampOrderBy
  sum: FileUploadSumOrderBy
  varPop: FileUploadVarPopOrderBy
  varSamp: FileUploadVarSampOrderBy
  variance: FileUploadVarianceOrderBy
}

input FileUploadArrRelInsertInput {
  data: [FileUploadInsertInput!]!
  onConflict: FileUploadOnConflict
}

type FileUploadAvgFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

input FileUploadBoolExp {
  _and: [FileUploadBoolExp!]
  _not: FileUploadBoolExp
  _or: [FileUploadBoolExp!]
  actorImage: ActorImageBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  document: DocumentBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItemAttachments: ExpenseItemAttachmentsBoolExp
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fileLastModifiedAt: TimestamptzComparisonExp
  financeAttachments: FinanceAttachmentsBoolExp
  financeAttachmentsAggregate: FinanceAttachmentsAggregateBoolExp
  formSubmissionAttachments: FormSubmissionAttachmentsBoolExp
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateBoolExp
  grantAllocateAttachments: GrantAllocateAttachmentsBoolExp
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateBoolExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  grantAttachments: GrantAttachmentsBoolExp
  grantAttachmentsAggregate: GrantAttachmentsAggregateBoolExp
  grants: GrantBoolExp
  grantsAggregate: GrantAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  locationImages: LocationImagesBoolExp
  locationImagesAggregate: LocationImagesAggregateBoolExp
  name: StringComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  signatureGrants: GrantBoolExp
  signatureGrantsAggregate: GrantAggregateBoolExp
  signedGrantAllocates: GrantAllocateBoolExp
  signedGrantAllocatesAggregate: GrantAllocateAggregateBoolExp
  size: IntComparisonExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

enum FileUploadConstraint {
  file_upload_pkey
}

input FileUploadIncInput {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

input FileUploadInsertInput {
  actorImage: ActorImageObjRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  document: DocumentObjRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  events: EventArrRelInsertInput
  expenseItemAttachments: ExpenseItemAttachmentsArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  fileLastModifiedAt: timestamptz
  financeAttachments: FinanceAttachmentsArrRelInsertInput
  formSubmissionAttachments: FormSubmissionAttachmentsArrRelInsertInput
  grantAllocateAttachments: GrantAllocateAttachmentsArrRelInsertInput
  grantAllocates: GrantAllocateArrRelInsertInput
  grantAttachments: GrantAttachmentsArrRelInsertInput
  grants: GrantArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  locationImages: LocationImagesArrRelInsertInput
  name: String
  projects: ProjectArrRelInsertInput
  signatureGrants: GrantArrRelInsertInput
  signedGrantAllocates: GrantAllocateArrRelInsertInput
  size: Int
  tags: TagArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  url: String
}

type FileUploadMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

input FileUploadMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

type FileUploadMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

input FileUploadMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

type FileUploadMutationResponse {
  affectedRows: Int!
  returning: [FileUpload!]!
}

input FileUploadObjRelInsertInput {
  data: FileUploadInsertInput!
  onConflict: FileUploadOnConflict
}

input FileUploadOnConflict {
  constraint: FileUploadConstraint!
  updateColumns: [FileUploadUpdateColumn!]! = []
  where: FileUploadBoolExp
}

input FileUploadOrderBy {
  actorImage: ActorImageOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  document: DocumentOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fileLastModifiedAt: OrderBy
  financeAttachmentsAggregate: FinanceAttachmentsAggregateOrderBy
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateOrderBy
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateOrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  grantAttachmentsAggregate: GrantAttachmentsAggregateOrderBy
  grantsAggregate: GrantAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationImagesAggregate: LocationImagesAggregateOrderBy
  name: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  signatureGrantsAggregate: GrantAggregateOrderBy
  signedGrantAllocatesAggregate: GrantAllocateAggregateOrderBy
  size: OrderBy
  tagsAggregate: TagAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

input FileUploadPkColumnsInput {
  id: bigint!
}

enum FileUploadSelectColumn {
  createdAt
  createdById
  deletedAt
  fileLastModifiedAt
  hiddenAt
  id
  name
  size
  tenantId
  type
  url
}

input FileUploadSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

type FileUploadStddevFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadStddevPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadStddevSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

input FileUploadStreamCursorInput {
  initialValue: FileUploadStreamCursorValueInput!
  ordering: CursorOrdering
}

input FileUploadStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

type FileUploadSumFields {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

input FileUploadSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

enum FileUploadUpdateColumn {
  createdAt
  createdById
  deletedAt
  fileLastModifiedAt
  hiddenAt
  id
  name
  size
  tenantId
  type
  url
}

input FileUploadUpdates {
  _inc: FileUploadIncInput
  _set: FileUploadSetInput
  where: FileUploadBoolExp!
}

type FileUploadVarianceFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadVarPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type FileUploadVarSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

input FileUploadVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

type Finance {
  account: Account!
  accountId: bigint!
  amount: Float!
  category: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  event: Event
  eventId: bigint
  expense: Expense
  expenseId: bigint
  financeAttachments(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): [FinanceAttachments!]!
  financeAttachmentsAggregate(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): FinanceAttachmentsAggregate!
  financeTags(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): [FinanceTags!]!
  financeTagsAggregate(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): FinanceTagsAggregate!
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  hiddenAt: timestamptz
  id: bigint!
  initiatedBy: Individual
  initiatedById: bigint
  isOnline: Boolean!
  location: Location
  locationId: bigint
  method: String!
  payedAt: timestamptz!
  payedBy: Actor!
  payedById: bigint!
  payedByType: String!
  project: Project
  projectId: bigint
  receivedBy: Actor!
  receivedById: bigint!
  state: String!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type FinanceAggregate {
  aggregate: FinanceAggregateFields
  nodes: [Finance!]!
}

input FinanceAggregateBoolExp {
  bool_and: financeAggregateBoolExpBool_and
  bool_or: financeAggregateBoolExpBool_or
  count: financeAggregateBoolExpCount
}

input financeAggregateBoolExpBool_and {
  arguments: FinanceSelectColumnFinanceAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: FinanceBoolExp
  predicate: BooleanComparisonExp!
}

input financeAggregateBoolExpBool_or {
  arguments: FinanceSelectColumnFinanceAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: FinanceBoolExp
  predicate: BooleanComparisonExp!
}

input financeAggregateBoolExpCount {
  arguments: [FinanceSelectColumn!]
  distinct: Boolean
  filter: FinanceBoolExp
  predicate: IntComparisonExp!
}

type FinanceAggregateFields {
  avg: FinanceAvgFields
  count(columns: [FinanceSelectColumn!], distinct: Boolean): Int!
  max: FinanceMaxFields
  min: FinanceMinFields
  stddev: FinanceStddevFields
  stddevPop: FinanceStddevPopFields
  stddevSamp: FinanceStddevSampFields
  sum: FinanceSumFields
  varPop: FinanceVarPopFields
  varSamp: FinanceVarSampFields
  variance: FinanceVarianceFields
}

input FinanceAggregateOrderBy {
  avg: FinanceAvgOrderBy
  count: OrderBy
  max: FinanceMaxOrderBy
  min: FinanceMinOrderBy
  stddev: FinanceStddevOrderBy
  stddevPop: FinanceStddevPopOrderBy
  stddevSamp: FinanceStddevSampOrderBy
  sum: FinanceSumOrderBy
  varPop: FinanceVarPopOrderBy
  varSamp: FinanceVarSampOrderBy
  variance: FinanceVarianceOrderBy
}

input FinanceArrRelInsertInput {
  data: [FinanceInsertInput!]!
  onConflict: FinanceOnConflict
}

type FinanceAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  finance: Finance!
  financeId: bigint!
}

type FinanceAttachmentsAggregate {
  aggregate: FinanceAttachmentsAggregateFields
  nodes: [FinanceAttachments!]!
}

input FinanceAttachmentsAggregateBoolExp {
  count: financeAttachmentsAggregateBoolExpCount
}

input financeAttachmentsAggregateBoolExpCount {
  arguments: [FinanceAttachmentsSelectColumn!]
  distinct: Boolean
  filter: FinanceAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type FinanceAttachmentsAggregateFields {
  avg: FinanceAttachmentsAvgFields
  count(columns: [FinanceAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: FinanceAttachmentsMaxFields
  min: FinanceAttachmentsMinFields
  stddev: FinanceAttachmentsStddevFields
  stddevPop: FinanceAttachmentsStddevPopFields
  stddevSamp: FinanceAttachmentsStddevSampFields
  sum: FinanceAttachmentsSumFields
  varPop: FinanceAttachmentsVarPopFields
  varSamp: FinanceAttachmentsVarSampFields
  variance: FinanceAttachmentsVarianceFields
}

input FinanceAttachmentsAggregateOrderBy {
  avg: FinanceAttachmentsAvgOrderBy
  count: OrderBy
  max: FinanceAttachmentsMaxOrderBy
  min: FinanceAttachmentsMinOrderBy
  stddev: FinanceAttachmentsStddevOrderBy
  stddevPop: FinanceAttachmentsStddevPopOrderBy
  stddevSamp: FinanceAttachmentsStddevSampOrderBy
  sum: FinanceAttachmentsSumOrderBy
  varPop: FinanceAttachmentsVarPopOrderBy
  varSamp: FinanceAttachmentsVarSampOrderBy
  variance: FinanceAttachmentsVarianceOrderBy
}

input FinanceAttachmentsArrRelInsertInput {
  data: [FinanceAttachmentsInsertInput!]!
  onConflict: FinanceAttachmentsOnConflict
}

type FinanceAttachmentsAvgFields {
  fileUploadId: Float
  financeId: Float
}

input FinanceAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

input FinanceAttachmentsBoolExp {
  _and: [FinanceAttachmentsBoolExp!]
  _not: FinanceAttachmentsBoolExp
  _or: [FinanceAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  finance: FinanceBoolExp
  financeId: BigintComparisonExp
}

enum FinanceAttachmentsConstraint {
  finance_attachments_pkey
}

input FinanceAttachmentsIncInput {
  fileUploadId: bigint
  financeId: bigint
}

input FinanceAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  finance: FinanceObjRelInsertInput
  financeId: bigint
}

type FinanceAttachmentsMaxFields {
  fileUploadId: bigint
  financeId: bigint
}

input FinanceAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

type FinanceAttachmentsMinFields {
  fileUploadId: bigint
  financeId: bigint
}

input FinanceAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

type FinanceAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [FinanceAttachments!]!
}

input FinanceAttachmentsOnConflict {
  constraint: FinanceAttachmentsConstraint!
  updateColumns: [FinanceAttachmentsUpdateColumn!]! = []
  where: FinanceAttachmentsBoolExp
}

input FinanceAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  finance: FinanceOrderBy
  financeId: OrderBy
}

input FinanceAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  financeId: bigint!
}

enum FinanceAttachmentsSelectColumn {
  fileUploadId
  financeId
}

input FinanceAttachmentsSetInput {
  fileUploadId: bigint
  financeId: bigint
}

type FinanceAttachmentsStddevFields {
  fileUploadId: Float
  financeId: Float
}

input FinanceAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

type FinanceAttachmentsStddevPopFields {
  fileUploadId: Float
  financeId: Float
}

input FinanceAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

type FinanceAttachmentsStddevSampFields {
  fileUploadId: Float
  financeId: Float
}

input FinanceAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

input FinanceAttachmentsStreamCursorInput {
  initialValue: FinanceAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input FinanceAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  financeId: bigint
}

type FinanceAttachmentsSumFields {
  fileUploadId: bigint
  financeId: bigint
}

input FinanceAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

enum FinanceAttachmentsUpdateColumn {
  fileUploadId
  financeId
}

input FinanceAttachmentsUpdates {
  _inc: FinanceAttachmentsIncInput
  _set: FinanceAttachmentsSetInput
  where: FinanceAttachmentsBoolExp!
}

type FinanceAttachmentsVarianceFields {
  fileUploadId: Float
  financeId: Float
}

input FinanceAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

type FinanceAttachmentsVarPopFields {
  fileUploadId: Float
  financeId: Float
}

input FinanceAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

type FinanceAttachmentsVarSampFields {
  fileUploadId: Float
  financeId: Float
}

input FinanceAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

type FinanceAvgFields {
  accountId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  teamId: Float
  tenantId: Float
}

input FinanceAvgOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input FinanceBoolExp {
  _and: [FinanceBoolExp!]
  _not: FinanceBoolExp
  _or: [FinanceBoolExp!]
  account: AccountBoolExp
  accountId: BigintComparisonExp
  amount: FloatComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  financeAttachments: FinanceAttachmentsBoolExp
  financeAttachmentsAggregate: FinanceAttachmentsAggregateBoolExp
  financeTags: FinanceTagsBoolExp
  financeTagsAggregate: FinanceTagsAggregateBoolExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  initiatedBy: IndividualBoolExp
  initiatedById: BigintComparisonExp
  isOnline: BooleanComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  method: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedBy: ActorBoolExp
  payedById: BigintComparisonExp
  payedByType: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  receivedBy: ActorBoolExp
  receivedById: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FinanceConstraint {
  finance_expense_id_unique
  finance_pkey
}

input FinanceIncInput {
  accountId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  initiatedById: bigint
  locationId: bigint
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  teamId: bigint
  tenantId: bigint
}

input FinanceInsertInput {
  account: AccountObjRelInsertInput
  accountId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  financeAttachments: FinanceAttachmentsArrRelInsertInput
  financeTags: FinanceTagsArrRelInsertInput
  grantAllocates: GrantAllocateArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  initiatedBy: IndividualObjRelInsertInput
  initiatedById: bigint
  isOnline: Boolean
  location: LocationObjRelInsertInput
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedBy: ActorObjRelInsertInput
  payedById: bigint
  payedByType: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  receivedBy: ActorObjRelInsertInput
  receivedById: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FinanceMaxFields {
  accountId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receivedById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input FinanceMaxOrderBy {
  accountId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FinanceMinFields {
  accountId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receivedById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input FinanceMinOrderBy {
  accountId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FinanceMutationResponse {
  affectedRows: Int!
  returning: [Finance!]!
}

input FinanceObjRelInsertInput {
  data: FinanceInsertInput!
  onConflict: FinanceOnConflict
}

input FinanceOnConflict {
  constraint: FinanceConstraint!
  updateColumns: [FinanceUpdateColumn!]! = []
  where: FinanceBoolExp
}

input FinanceOrderBy {
  account: AccountOrderBy
  accountId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  financeAttachmentsAggregate: FinanceAttachmentsAggregateOrderBy
  financeTagsAggregate: FinanceTagsAggregateOrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedBy: IndividualOrderBy
  initiatedById: OrderBy
  isOnline: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedBy: ActorOrderBy
  payedById: OrderBy
  payedByType: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  receivedBy: ActorOrderBy
  receivedById: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FinancePkColumnsInput {
  id: bigint!
}

enum FinanceSelectColumn {
  accountId
  amount
  category
  createdAt
  createdById
  deletedAt
  description
  eventId
  expenseId
  hiddenAt
  id
  initiatedById
  isOnline
  locationId
  method
  payedAt
  payedById
  payedByType
  projectId
  receivedById
  state
  teamId
  tenantId
}

enum FinanceSelectColumnFinanceAggregateBoolExpBool_andArgumentsColumns {
  isOnline
}

enum FinanceSelectColumnFinanceAggregateBoolExpBool_orArgumentsColumns {
  isOnline
}

input FinanceSetInput {
  accountId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  isOnline: Boolean
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receivedById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type FinanceStddevFields {
  accountId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  teamId: Float
  tenantId: Float
}

input FinanceStddevOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FinanceStddevPopFields {
  accountId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  teamId: Float
  tenantId: Float
}

input FinanceStddevPopOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FinanceStddevSampFields {
  accountId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  teamId: Float
  tenantId: Float
}

input FinanceStddevSampOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input FinanceStreamCursorInput {
  initialValue: FinanceStreamCursorValueInput!
  ordering: CursorOrdering
}

input FinanceStreamCursorValueInput {
  accountId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  initiatedById: bigint
  isOnline: Boolean
  locationId: bigint
  method: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receivedById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type FinanceSumFields {
  accountId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  initiatedById: bigint
  locationId: bigint
  payedById: bigint
  projectId: bigint
  receivedById: bigint
  teamId: bigint
  tenantId: bigint
}

input FinanceSumOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FinanceTags {
  finance: Finance!
  financeId: bigint!
  tag: Tag!
  tagId: bigint!
}

type FinanceTagsAggregate {
  aggregate: FinanceTagsAggregateFields
  nodes: [FinanceTags!]!
}

input FinanceTagsAggregateBoolExp {
  count: financeTagsAggregateBoolExpCount
}

input financeTagsAggregateBoolExpCount {
  arguments: [FinanceTagsSelectColumn!]
  distinct: Boolean
  filter: FinanceTagsBoolExp
  predicate: IntComparisonExp!
}

type FinanceTagsAggregateFields {
  avg: FinanceTagsAvgFields
  count(columns: [FinanceTagsSelectColumn!], distinct: Boolean): Int!
  max: FinanceTagsMaxFields
  min: FinanceTagsMinFields
  stddev: FinanceTagsStddevFields
  stddevPop: FinanceTagsStddevPopFields
  stddevSamp: FinanceTagsStddevSampFields
  sum: FinanceTagsSumFields
  varPop: FinanceTagsVarPopFields
  varSamp: FinanceTagsVarSampFields
  variance: FinanceTagsVarianceFields
}

input FinanceTagsAggregateOrderBy {
  avg: FinanceTagsAvgOrderBy
  count: OrderBy
  max: FinanceTagsMaxOrderBy
  min: FinanceTagsMinOrderBy
  stddev: FinanceTagsStddevOrderBy
  stddevPop: FinanceTagsStddevPopOrderBy
  stddevSamp: FinanceTagsStddevSampOrderBy
  sum: FinanceTagsSumOrderBy
  varPop: FinanceTagsVarPopOrderBy
  varSamp: FinanceTagsVarSampOrderBy
  variance: FinanceTagsVarianceOrderBy
}

input FinanceTagsArrRelInsertInput {
  data: [FinanceTagsInsertInput!]!
  onConflict: FinanceTagsOnConflict
}

type FinanceTagsAvgFields {
  financeId: Float
  tagId: Float
}

input FinanceTagsAvgOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

input FinanceTagsBoolExp {
  _and: [FinanceTagsBoolExp!]
  _not: FinanceTagsBoolExp
  _or: [FinanceTagsBoolExp!]
  finance: FinanceBoolExp
  financeId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum FinanceTagsConstraint {
  finance_tags_pkey
}

input FinanceTagsIncInput {
  financeId: bigint
  tagId: bigint
}

input FinanceTagsInsertInput {
  finance: FinanceObjRelInsertInput
  financeId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type FinanceTagsMaxFields {
  financeId: bigint
  tagId: bigint
}

input FinanceTagsMaxOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

type FinanceTagsMinFields {
  financeId: bigint
  tagId: bigint
}

input FinanceTagsMinOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

type FinanceTagsMutationResponse {
  affectedRows: Int!
  returning: [FinanceTags!]!
}

input FinanceTagsOnConflict {
  constraint: FinanceTagsConstraint!
  updateColumns: [FinanceTagsUpdateColumn!]! = []
  where: FinanceTagsBoolExp
}

input FinanceTagsOrderBy {
  finance: FinanceOrderBy
  financeId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input FinanceTagsPkColumnsInput {
  financeId: bigint!
  tagId: bigint!
}

enum FinanceTagsSelectColumn {
  financeId
  tagId
}

input FinanceTagsSetInput {
  financeId: bigint
  tagId: bigint
}

type FinanceTagsStddevFields {
  financeId: Float
  tagId: Float
}

input FinanceTagsStddevOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

type FinanceTagsStddevPopFields {
  financeId: Float
  tagId: Float
}

input FinanceTagsStddevPopOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

type FinanceTagsStddevSampFields {
  financeId: Float
  tagId: Float
}

input FinanceTagsStddevSampOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

input FinanceTagsStreamCursorInput {
  initialValue: FinanceTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input FinanceTagsStreamCursorValueInput {
  financeId: bigint
  tagId: bigint
}

type FinanceTagsSumFields {
  financeId: bigint
  tagId: bigint
}

input FinanceTagsSumOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

enum FinanceTagsUpdateColumn {
  financeId
  tagId
}

input FinanceTagsUpdates {
  _inc: FinanceTagsIncInput
  _set: FinanceTagsSetInput
  where: FinanceTagsBoolExp!
}

type FinanceTagsVarianceFields {
  financeId: Float
  tagId: Float
}

input FinanceTagsVarianceOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

type FinanceTagsVarPopFields {
  financeId: Float
  tagId: Float
}

input FinanceTagsVarPopOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

type FinanceTagsVarSampFields {
  financeId: Float
  tagId: Float
}

input FinanceTagsVarSampOrderBy {
  financeId: OrderBy
  tagId: OrderBy
}

enum FinanceUpdateColumn {
  accountId
  amount
  category
  createdAt
  createdById
  deletedAt
  description
  eventId
  expenseId
  hiddenAt
  id
  initiatedById
  isOnline
  locationId
  method
  payedAt
  payedById
  payedByType
  projectId
  receivedById
  state
  teamId
  tenantId
}

input FinanceUpdates {
  _inc: FinanceIncInput
  _set: FinanceSetInput
  where: FinanceBoolExp!
}

type FinanceVarianceFields {
  accountId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  teamId: Float
  tenantId: Float
}

input FinanceVarianceOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FinanceVarPopFields {
  accountId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  teamId: Float
  tenantId: Float
}

input FinanceVarPopOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type FinanceVarSampFields {
  accountId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  initiatedById: Float
  locationId: Float
  payedById: Float
  projectId: Float
  receivedById: Float
  teamId: Float
  tenantId: Float
}

input FinanceVarSampOrderBy {
  accountId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  initiatedById: OrderBy
  locationId: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receivedById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input FloatComparisonExp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _isNull: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

type Follow {
  actor: Actor!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type FollowAggregate {
  aggregate: FollowAggregateFields
  nodes: [Follow!]!
}

input FollowAggregateBoolExp {
  count: followAggregateBoolExpCount
}

input followAggregateBoolExpCount {
  arguments: [FollowSelectColumn!]
  distinct: Boolean
  filter: FollowBoolExp
  predicate: IntComparisonExp!
}

type FollowAggregateFields {
  avg: FollowAvgFields
  count(columns: [FollowSelectColumn!], distinct: Boolean): Int!
  max: FollowMaxFields
  min: FollowMinFields
  stddev: FollowStddevFields
  stddevPop: FollowStddevPopFields
  stddevSamp: FollowStddevSampFields
  sum: FollowSumFields
  varPop: FollowVarPopFields
  varSamp: FollowVarSampFields
  variance: FollowVarianceFields
}

input FollowAggregateOrderBy {
  avg: FollowAvgOrderBy
  count: OrderBy
  max: FollowMaxOrderBy
  min: FollowMinOrderBy
  stddev: FollowStddevOrderBy
  stddevPop: FollowStddevPopOrderBy
  stddevSamp: FollowStddevSampOrderBy
  sum: FollowSumOrderBy
  varPop: FollowVarPopOrderBy
  varSamp: FollowVarSampOrderBy
  variance: FollowVarianceOrderBy
}

input FollowArrRelInsertInput {
  data: [FollowInsertInput!]!
  onConflict: FollowOnConflict
}

type FollowAvgFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowAvgOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FollowBoolExp {
  _and: [FollowBoolExp!]
  _not: FollowBoolExp
  _or: [FollowBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  followedActorId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FollowConstraint {
  follow_pkey
}

input FollowIncInput {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

input FollowInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FollowMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FollowMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FollowMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowMutationResponse {
  affectedRows: Int!
  returning: [Follow!]!
}

input FollowOnConflict {
  constraint: FollowConstraint!
  updateColumns: [FollowUpdateColumn!]! = []
  where: FollowBoolExp
}

input FollowOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FollowPkColumnsInput {
  id: bigint!
}

enum FollowSelectColumn {
  createdAt
  createdById
  deletedAt
  followedActorId
  hiddenAt
  id
  tenantId
}

input FollowSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type FollowStddevFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowStddevOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowStddevPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowStddevPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowStddevSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowStddevSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FollowStreamCursorInput {
  initialValue: FollowStreamCursorValueInput!
  ordering: CursorOrdering
}

input FollowStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type FollowSumFields {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

input FollowSumOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FollowUpdateColumn {
  createdAt
  createdById
  deletedAt
  followedActorId
  hiddenAt
  id
  tenantId
}

input FollowUpdates {
  _inc: FollowIncInput
  _set: FollowSetInput
  where: FollowBoolExp!
}

type FollowVarianceFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowVarianceOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowVarPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowVarPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FollowVarSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

input FollowVarSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Form {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  formSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  hiddenAt: timestamptz
  id: bigint!
  isAllowingEditingAnswers: Boolean!
  isAllowingMultipleAnswers: Boolean!
  isEnabled: Boolean!
  isLocked: Boolean!
  name: String!
  schema(path: String): jsonb!
  team: Team
  tenant: Tenant!
  tenantById: Tenant
  tenantId: bigint!
  type: String!
}

type FormAggregate {
  aggregate: FormAggregateFields
  nodes: [Form!]!
}

input FormAggregateBoolExp {
  bool_and: formAggregateBoolExpBool_and
  bool_or: formAggregateBoolExpBool_or
  count: formAggregateBoolExpCount
}

input formAggregateBoolExpBool_and {
  arguments: FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpBool_or {
  arguments: FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpCount {
  arguments: [FormSelectColumn!]
  distinct: Boolean
  filter: FormBoolExp
  predicate: IntComparisonExp!
}

type FormAggregateFields {
  avg: FormAvgFields
  count(columns: [FormSelectColumn!], distinct: Boolean): Int!
  max: FormMaxFields
  min: FormMinFields
  stddev: FormStddevFields
  stddevPop: FormStddevPopFields
  stddevSamp: FormStddevSampFields
  sum: FormSumFields
  varPop: FormVarPopFields
  varSamp: FormVarSampFields
  variance: FormVarianceFields
}

input FormAggregateOrderBy {
  avg: FormAvgOrderBy
  count: OrderBy
  max: FormMaxOrderBy
  min: FormMinOrderBy
  stddev: FormStddevOrderBy
  stddevPop: FormStddevPopOrderBy
  stddevSamp: FormStddevSampOrderBy
  sum: FormSumOrderBy
  varPop: FormVarPopOrderBy
  varSamp: FormVarSampOrderBy
  variance: FormVarianceOrderBy
}

input FormAppendInput {
  schema: jsonb
}

input FormArrRelInsertInput {
  data: [FormInsertInput!]!
  onConflict: FormOnConflict
}

type FormAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input FormAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormBoolExp {
  _and: [FormBoolExp!]
  _not: FormBoolExp
  _or: [FormBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isAllowingEditingAnswers: BooleanComparisonExp
  isAllowingMultipleAnswers: BooleanComparisonExp
  isEnabled: BooleanComparisonExp
  isLocked: BooleanComparisonExp
  name: StringComparisonExp
  schema: JsonbComparisonExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantById: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum FormConstraint {
  form_pkey
}

input FormDeleteAtPathInput {
  schema: [String!]
}

input FormDeleteElemInput {
  schema: Int
}

input FormDeleteKeyInput {
  schema: String
}

input FormIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input FormInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isLocked: Boolean
  name: String
  schema: jsonb
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type FormMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
  type: String
}

input FormMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type FormMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
  type: String
}

input FormMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type FormMutationResponse {
  affectedRows: Int!
  returning: [Form!]!
}

input FormObjRelInsertInput {
  data: FormInsertInput!
  onConflict: FormOnConflict
}

input FormOnConflict {
  constraint: FormConstraint!
  updateColumns: [FormUpdateColumn!]! = []
  where: FormBoolExp
}

input FormOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isAllowingEditingAnswers: OrderBy
  isAllowingMultipleAnswers: OrderBy
  isEnabled: OrderBy
  isLocked: OrderBy
  name: OrderBy
  schema: OrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantById: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input FormPkColumnsInput {
  id: bigint!
}

input FormPrependInput {
  schema: jsonb
}

enum FormSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
  name
  schema
  tenantId
  type
}

enum FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns {
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
}

enum FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns {
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
}

input FormSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isLocked: Boolean
  name: String
  schema: jsonb
  tenantId: bigint
  type: String
}

type FormStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input FormStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input FormStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input FormStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormStreamCursorInput {
  initialValue: FormStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isLocked: Boolean
  name: String
  schema: jsonb
  tenantId: bigint
  type: String
}

type FormSubmission {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  event: Event
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  form: Form!
  formId: bigint!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!
  submission(path: String): jsonb!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  tenant: Tenant!
  tenantId: bigint!
}

type FormSubmissionAggregate {
  aggregate: FormSubmissionAggregateFields
  nodes: [FormSubmission!]!
}

input FormSubmissionAggregateBoolExp {
  count: formSubmissionAggregateBoolExpCount
}

input formSubmissionAggregateBoolExpCount {
  arguments: [FormSubmissionSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionBoolExp
  predicate: IntComparisonExp!
}

type FormSubmissionAggregateFields {
  avg: FormSubmissionAvgFields
  count(columns: [FormSubmissionSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionMaxFields
  min: FormSubmissionMinFields
  stddev: FormSubmissionStddevFields
  stddevPop: FormSubmissionStddevPopFields
  stddevSamp: FormSubmissionStddevSampFields
  sum: FormSubmissionSumFields
  varPop: FormSubmissionVarPopFields
  varSamp: FormSubmissionVarSampFields
  variance: FormSubmissionVarianceFields
}

input FormSubmissionAggregateOrderBy {
  avg: FormSubmissionAvgOrderBy
  count: OrderBy
  max: FormSubmissionMaxOrderBy
  min: FormSubmissionMinOrderBy
  stddev: FormSubmissionStddevOrderBy
  stddevPop: FormSubmissionStddevPopOrderBy
  stddevSamp: FormSubmissionStddevSampOrderBy
  sum: FormSubmissionSumOrderBy
  varPop: FormSubmissionVarPopOrderBy
  varSamp: FormSubmissionVarSampOrderBy
  variance: FormSubmissionVarianceOrderBy
}

input FormSubmissionAppendInput {
  submission: jsonb
}

input FormSubmissionArrRelInsertInput {
  data: [FormSubmissionInsertInput!]!
  onConflict: FormSubmissionOnConflict
}

type FormSubmissionAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  formSubmission: FormSubmission!
  formSubmissionId: bigint!
}

type FormSubmissionAttachmentsAggregate {
  aggregate: FormSubmissionAttachmentsAggregateFields
  nodes: [FormSubmissionAttachments!]!
}

input FormSubmissionAttachmentsAggregateBoolExp {
  count: formSubmissionAttachmentsAggregateBoolExpCount
}

input formSubmissionAttachmentsAggregateBoolExpCount {
  arguments: [FormSubmissionAttachmentsSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type FormSubmissionAttachmentsAggregateFields {
  avg: FormSubmissionAttachmentsAvgFields
  count(columns: [FormSubmissionAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionAttachmentsMaxFields
  min: FormSubmissionAttachmentsMinFields
  stddev: FormSubmissionAttachmentsStddevFields
  stddevPop: FormSubmissionAttachmentsStddevPopFields
  stddevSamp: FormSubmissionAttachmentsStddevSampFields
  sum: FormSubmissionAttachmentsSumFields
  varPop: FormSubmissionAttachmentsVarPopFields
  varSamp: FormSubmissionAttachmentsVarSampFields
  variance: FormSubmissionAttachmentsVarianceFields
}

input FormSubmissionAttachmentsAggregateOrderBy {
  avg: FormSubmissionAttachmentsAvgOrderBy
  count: OrderBy
  max: FormSubmissionAttachmentsMaxOrderBy
  min: FormSubmissionAttachmentsMinOrderBy
  stddev: FormSubmissionAttachmentsStddevOrderBy
  stddevPop: FormSubmissionAttachmentsStddevPopOrderBy
  stddevSamp: FormSubmissionAttachmentsStddevSampOrderBy
  sum: FormSubmissionAttachmentsSumOrderBy
  varPop: FormSubmissionAttachmentsVarPopOrderBy
  varSamp: FormSubmissionAttachmentsVarSampOrderBy
  variance: FormSubmissionAttachmentsVarianceOrderBy
}

input FormSubmissionAttachmentsArrRelInsertInput {
  data: [FormSubmissionAttachmentsInsertInput!]!
  onConflict: FormSubmissionAttachmentsOnConflict
}

type FormSubmissionAttachmentsAvgFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

input FormSubmissionAttachmentsBoolExp {
  _and: [FormSubmissionAttachmentsBoolExp!]
  _not: FormSubmissionAttachmentsBoolExp
  _or: [FormSubmissionAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
}

enum FormSubmissionAttachmentsConstraint {
  form_submission_attachments_pkey
}

input FormSubmissionAttachmentsIncInput {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
}

type FormSubmissionAttachmentsMaxFields {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsMinFields {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [FormSubmissionAttachments!]!
}

input FormSubmissionAttachmentsOnConflict {
  constraint: FormSubmissionAttachmentsConstraint!
  updateColumns: [FormSubmissionAttachmentsUpdateColumn!]! = []
  where: FormSubmissionAttachmentsBoolExp
}

input FormSubmissionAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
}

input FormSubmissionAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  formSubmissionId: bigint!
}

enum FormSubmissionAttachmentsSelectColumn {
  fileUploadId
  formSubmissionId
}

input FormSubmissionAttachmentsSetInput {
  fileUploadId: bigint
  formSubmissionId: bigint
}

type FormSubmissionAttachmentsStddevFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsStddevPopFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsStddevSampFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

input FormSubmissionAttachmentsStreamCursorInput {
  initialValue: FormSubmissionAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormSubmissionAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  formSubmissionId: bigint
}

type FormSubmissionAttachmentsSumFields {
  fileUploadId: bigint
  formSubmissionId: bigint
}

input FormSubmissionAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

enum FormSubmissionAttachmentsUpdateColumn {
  fileUploadId
  formSubmissionId
}

input FormSubmissionAttachmentsUpdates {
  _inc: FormSubmissionAttachmentsIncInput
  _set: FormSubmissionAttachmentsSetInput
  where: FormSubmissionAttachmentsBoolExp!
}

type FormSubmissionAttachmentsVarianceFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsVarPopFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAttachmentsVarSampFields {
  fileUploadId: Float
  formSubmissionId: Float
}

input FormSubmissionAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  formSubmissionId: OrderBy
}

type FormSubmissionAvgFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionAvgOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormSubmissionBoolExp {
  _and: [FormSubmissionBoolExp!]
  _not: FormSubmissionBoolExp
  _or: [FormSubmissionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  form: FormBoolExp
  formId: BigintComparisonExp
  formSubmissionAttachments: FormSubmissionAttachmentsBoolExp
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  submission: JsonbComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum FormSubmissionConstraint {
  form_submission_pkey
}

input FormSubmissionDeleteAtPathInput {
  submission: [String!]
}

input FormSubmissionDeleteElemInput {
  submission: Int
}

input FormSubmissionDeleteKeyInput {
  submission: String
}

input FormSubmissionIncInput {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

input FormSubmissionInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  form: FormObjRelInsertInput
  formId: bigint
  formSubmissionAttachments: FormSubmissionAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  teamJoins: TeamJoinArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type FormSubmissionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormSubmissionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input FormSubmissionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionMutationResponse {
  affectedRows: Int!
  returning: [FormSubmission!]!
}

input FormSubmissionObjRelInsertInput {
  data: FormSubmissionInsertInput!
  onConflict: FormSubmissionOnConflict
}

input FormSubmissionOnConflict {
  constraint: FormSubmissionConstraint!
  updateColumns: [FormSubmissionUpdateColumn!]! = []
  where: FormSubmissionBoolExp
}

input FormSubmissionOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  form: FormOrderBy
  formId: OrderBy
  formSubmissionAttachmentsAggregate: FormSubmissionAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  submission: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input FormSubmissionPkColumnsInput {
  id: bigint!
}

input FormSubmissionPrependInput {
  submission: jsonb
}

enum FormSubmissionSelectColumn {
  createdAt
  createdById
  deletedAt
  formId
  hiddenAt
  id
  submission
  tenantId
}

input FormSubmissionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

type FormSubmissionStddevFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionStddevOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionStddevPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionStddevPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionStddevSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionStddevSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input FormSubmissionStreamCursorInput {
  initialValue: FormSubmissionStreamCursorValueInput!
  ordering: CursorOrdering
}

input FormSubmissionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

type FormSubmissionSumFields {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

input FormSubmissionSumOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FormSubmissionUpdateColumn {
  createdAt
  createdById
  deletedAt
  formId
  hiddenAt
  id
  submission
  tenantId
}

input FormSubmissionUpdates {
  _append: FormSubmissionAppendInput
  _deleteAtPath: FormSubmissionDeleteAtPathInput
  _deleteElem: FormSubmissionDeleteElemInput
  _deleteKey: FormSubmissionDeleteKeyInput
  _inc: FormSubmissionIncInput
  _prepend: FormSubmissionPrependInput
  _set: FormSubmissionSetInput
  where: FormSubmissionBoolExp!
}

type FormSubmissionVarianceFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionVarianceOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionVarPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionVarPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSubmissionVarSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

input FormSubmissionVarSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input FormSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum FormUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isAllowingEditingAnswers
  isAllowingMultipleAnswers
  isEnabled
  isLocked
  name
  schema
  tenantId
  type
}

input FormUpdates {
  _append: FormAppendInput
  _deleteAtPath: FormDeleteAtPathInput
  _deleteElem: FormDeleteElemInput
  _deleteKey: FormDeleteKeyInput
  _inc: FormIncInput
  _prepend: FormPrependInput
  _set: FormSetInput
  where: FormBoolExp!
}

type FormVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input FormVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input FormVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type FormVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input FormVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Grant {
  askedAmount: Float!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  generatedDocument: FileUpload
  generatedDocumentId: bigint
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  receivedAmount: Float!
  receivedAmountProcessed: Individual
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signature: FileUpload
  signatureId: bigint
  state: String!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type GrantAggregate {
  aggregate: GrantAggregateFields
  nodes: [Grant!]!
}

input GrantAggregateBoolExp {
  count: grantAggregateBoolExpCount
}

input grantAggregateBoolExpCount {
  arguments: [GrantSelectColumn!]
  distinct: Boolean
  filter: GrantBoolExp
  predicate: IntComparisonExp!
}

type GrantAggregateFields {
  avg: GrantAvgFields
  count(columns: [GrantSelectColumn!], distinct: Boolean): Int!
  max: GrantMaxFields
  min: GrantMinFields
  stddev: GrantStddevFields
  stddevPop: GrantStddevPopFields
  stddevSamp: GrantStddevSampFields
  sum: GrantSumFields
  varPop: GrantVarPopFields
  varSamp: GrantVarSampFields
  variance: GrantVarianceFields
}

input GrantAggregateOrderBy {
  avg: GrantAvgOrderBy
  count: OrderBy
  max: GrantMaxOrderBy
  min: GrantMinOrderBy
  stddev: GrantStddevOrderBy
  stddevPop: GrantStddevPopOrderBy
  stddevSamp: GrantStddevSampOrderBy
  sum: GrantSumOrderBy
  varPop: GrantVarPopOrderBy
  varSamp: GrantVarSampOrderBy
  variance: GrantVarianceOrderBy
}

type GrantAllocate {
  askedAmount: Float!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUpload
  finance: Finance
  financeId: bigint
  generatedDocumentId: bigint
  grant: Grant!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantId: bigint!
  hiddenAt: timestamptz
  id: bigint!
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedBy: Individual
  receivedAmountProcessedById: bigint
  signature: FileUpload
  signatureId: bigint
  state: String!
  tenant: Tenant!
  tenantId: bigint!
}

type GrantAllocateAggregate {
  aggregate: GrantAllocateAggregateFields
  nodes: [GrantAllocate!]!
}

input GrantAllocateAggregateBoolExp {
  count: grantAllocateAggregateBoolExpCount
}

input grantAllocateAggregateBoolExpCount {
  arguments: [GrantAllocateSelectColumn!]
  distinct: Boolean
  filter: GrantAllocateBoolExp
  predicate: IntComparisonExp!
}

type GrantAllocateAggregateFields {
  avg: GrantAllocateAvgFields
  count(columns: [GrantAllocateSelectColumn!], distinct: Boolean): Int!
  max: GrantAllocateMaxFields
  min: GrantAllocateMinFields
  stddev: GrantAllocateStddevFields
  stddevPop: GrantAllocateStddevPopFields
  stddevSamp: GrantAllocateStddevSampFields
  sum: GrantAllocateSumFields
  varPop: GrantAllocateVarPopFields
  varSamp: GrantAllocateVarSampFields
  variance: GrantAllocateVarianceFields
}

input GrantAllocateAggregateOrderBy {
  avg: GrantAllocateAvgOrderBy
  count: OrderBy
  max: GrantAllocateMaxOrderBy
  min: GrantAllocateMinOrderBy
  stddev: GrantAllocateStddevOrderBy
  stddevPop: GrantAllocateStddevPopOrderBy
  stddevSamp: GrantAllocateStddevSampOrderBy
  sum: GrantAllocateSumOrderBy
  varPop: GrantAllocateVarPopOrderBy
  varSamp: GrantAllocateVarSampOrderBy
  variance: GrantAllocateVarianceOrderBy
}

input GrantAllocateArrRelInsertInput {
  data: [GrantAllocateInsertInput!]!
  onConflict: GrantAllocateOnConflict
}

type GrantAllocateAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  grantAllocate: GrantAllocate!
  grantAllocateId: bigint!
}

type GrantAllocateAttachmentsAggregate {
  aggregate: GrantAllocateAttachmentsAggregateFields
  nodes: [GrantAllocateAttachments!]!
}

input GrantAllocateAttachmentsAggregateBoolExp {
  count: grantAllocateAttachmentsAggregateBoolExpCount
}

input grantAllocateAttachmentsAggregateBoolExpCount {
  arguments: [GrantAllocateAttachmentsSelectColumn!]
  distinct: Boolean
  filter: GrantAllocateAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type GrantAllocateAttachmentsAggregateFields {
  avg: GrantAllocateAttachmentsAvgFields
  count(columns: [GrantAllocateAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: GrantAllocateAttachmentsMaxFields
  min: GrantAllocateAttachmentsMinFields
  stddev: GrantAllocateAttachmentsStddevFields
  stddevPop: GrantAllocateAttachmentsStddevPopFields
  stddevSamp: GrantAllocateAttachmentsStddevSampFields
  sum: GrantAllocateAttachmentsSumFields
  varPop: GrantAllocateAttachmentsVarPopFields
  varSamp: GrantAllocateAttachmentsVarSampFields
  variance: GrantAllocateAttachmentsVarianceFields
}

input GrantAllocateAttachmentsAggregateOrderBy {
  avg: GrantAllocateAttachmentsAvgOrderBy
  count: OrderBy
  max: GrantAllocateAttachmentsMaxOrderBy
  min: GrantAllocateAttachmentsMinOrderBy
  stddev: GrantAllocateAttachmentsStddevOrderBy
  stddevPop: GrantAllocateAttachmentsStddevPopOrderBy
  stddevSamp: GrantAllocateAttachmentsStddevSampOrderBy
  sum: GrantAllocateAttachmentsSumOrderBy
  varPop: GrantAllocateAttachmentsVarPopOrderBy
  varSamp: GrantAllocateAttachmentsVarSampOrderBy
  variance: GrantAllocateAttachmentsVarianceOrderBy
}

input GrantAllocateAttachmentsArrRelInsertInput {
  data: [GrantAllocateAttachmentsInsertInput!]!
  onConflict: GrantAllocateAttachmentsOnConflict
}

type GrantAllocateAttachmentsAvgFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

input GrantAllocateAttachmentsBoolExp {
  _and: [GrantAllocateAttachmentsBoolExp!]
  _not: GrantAllocateAttachmentsBoolExp
  _or: [GrantAllocateAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  grantAllocate: GrantAllocateBoolExp
  grantAllocateId: BigintComparisonExp
}

enum GrantAllocateAttachmentsConstraint {
  grant_allocate_attachments_pkey
}

input GrantAllocateAttachmentsIncInput {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  grantAllocate: GrantAllocateObjRelInsertInput
  grantAllocateId: bigint
}

type GrantAllocateAttachmentsMaxFields {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsMinFields {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [GrantAllocateAttachments!]!
}

input GrantAllocateAttachmentsOnConflict {
  constraint: GrantAllocateAttachmentsConstraint!
  updateColumns: [GrantAllocateAttachmentsUpdateColumn!]! = []
  where: GrantAllocateAttachmentsBoolExp
}

input GrantAllocateAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  grantAllocate: GrantAllocateOrderBy
  grantAllocateId: OrderBy
}

input GrantAllocateAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  grantAllocateId: bigint!
}

enum GrantAllocateAttachmentsSelectColumn {
  fileUploadId
  grantAllocateId
}

input GrantAllocateAttachmentsSetInput {
  fileUploadId: bigint
  grantAllocateId: bigint
}

type GrantAllocateAttachmentsStddevFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsStddevPopFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsStddevSampFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

input GrantAllocateAttachmentsStreamCursorInput {
  initialValue: GrantAllocateAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantAllocateAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  grantAllocateId: bigint
}

type GrantAllocateAttachmentsSumFields {
  fileUploadId: bigint
  grantAllocateId: bigint
}

input GrantAllocateAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

enum GrantAllocateAttachmentsUpdateColumn {
  fileUploadId
  grantAllocateId
}

input GrantAllocateAttachmentsUpdates {
  _inc: GrantAllocateAttachmentsIncInput
  _set: GrantAllocateAttachmentsSetInput
  where: GrantAllocateAttachmentsBoolExp!
}

type GrantAllocateAttachmentsVarianceFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsVarPopFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAttachmentsVarSampFields {
  fileUploadId: Float
  grantAllocateId: Float
}

input GrantAllocateAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  grantAllocateId: OrderBy
}

type GrantAllocateAvgFields {
  askedAmount: Float
  createdById: Float
  financeId: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantId: Float
}

input GrantAllocateAvgOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

input GrantAllocateBoolExp {
  _and: [GrantAllocateBoolExp!]
  _not: GrantAllocateBoolExp
  _or: [GrantAllocateBoolExp!]
  askedAmount: FloatComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  fileUpload: FileUploadBoolExp
  finance: FinanceBoolExp
  financeId: BigintComparisonExp
  generatedDocumentId: BigintComparisonExp
  grant: GrantBoolExp
  grantAllocateAttachments: GrantAllocateAttachmentsBoolExp
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateBoolExp
  grantId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  receivedAmount: FloatComparisonExp
  receivedAmountProcessedAt: TimestamptzComparisonExp
  receivedAmountProcessedBy: IndividualBoolExp
  receivedAmountProcessedById: BigintComparisonExp
  signature: FileUploadBoolExp
  signatureId: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum GrantAllocateConstraint {
  grant_allocate_pkey
}

input GrantAllocateIncInput {
  askedAmount: Float
  createdById: bigint
  financeId: bigint
  generatedDocumentId: bigint
  grantId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  tenantId: bigint
}

input GrantAllocateInsertInput {
  askedAmount: Float
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUploadObjRelInsertInput
  finance: FinanceObjRelInsertInput
  financeId: bigint
  generatedDocumentId: bigint
  grant: GrantObjRelInsertInput
  grantAllocateAttachments: GrantAllocateAttachmentsArrRelInsertInput
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedBy: IndividualObjRelInsertInput
  receivedAmountProcessedById: bigint
  signature: FileUploadObjRelInsertInput
  signatureId: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type GrantAllocateMaxFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  financeId: bigint
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantId: bigint
}

input GrantAllocateMaxOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type GrantAllocateMinFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  financeId: bigint
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantId: bigint
}

input GrantAllocateMinOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type GrantAllocateMutationResponse {
  affectedRows: Int!
  returning: [GrantAllocate!]!
}

input GrantAllocateObjRelInsertInput {
  data: GrantAllocateInsertInput!
  onConflict: GrantAllocateOnConflict
}

input GrantAllocateOnConflict {
  constraint: GrantAllocateConstraint!
  updateColumns: [GrantAllocateUpdateColumn!]! = []
  where: GrantAllocateBoolExp
}

input GrantAllocateOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileUpload: FileUploadOrderBy
  finance: FinanceOrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grant: GrantOrderBy
  grantAllocateAttachmentsAggregate: GrantAllocateAttachmentsAggregateOrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedBy: IndividualOrderBy
  receivedAmountProcessedById: OrderBy
  signature: FileUploadOrderBy
  signatureId: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input GrantAllocatePkColumnsInput {
  id: bigint!
}

enum GrantAllocateSelectColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  financeId
  generatedDocumentId
  grantId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  tenantId
}

input GrantAllocateSetInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  financeId: bigint
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantId: bigint
}

type GrantAllocateStddevFields {
  askedAmount: Float
  createdById: Float
  financeId: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantId: Float
}

input GrantAllocateStddevOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

type GrantAllocateStddevPopFields {
  askedAmount: Float
  createdById: Float
  financeId: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantId: Float
}

input GrantAllocateStddevPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

type GrantAllocateStddevSampFields {
  askedAmount: Float
  createdById: Float
  financeId: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantId: Float
}

input GrantAllocateStddevSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

input GrantAllocateStreamCursorInput {
  initialValue: GrantAllocateStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantAllocateStreamCursorValueInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  financeId: bigint
  generatedDocumentId: bigint
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  tenantId: bigint
}

type GrantAllocateSumFields {
  askedAmount: Float
  createdById: bigint
  financeId: bigint
  generatedDocumentId: bigint
  grantId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  tenantId: bigint
}

input GrantAllocateSumOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

enum GrantAllocateUpdateColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  financeId
  generatedDocumentId
  grantId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  tenantId
}

input GrantAllocateUpdates {
  _inc: GrantAllocateIncInput
  _set: GrantAllocateSetInput
  where: GrantAllocateBoolExp!
}

type GrantAllocateVarianceFields {
  askedAmount: Float
  createdById: Float
  financeId: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantId: Float
}

input GrantAllocateVarianceOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

type GrantAllocateVarPopFields {
  askedAmount: Float
  createdById: Float
  financeId: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantId: Float
}

input GrantAllocateVarPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

type GrantAllocateVarSampFields {
  askedAmount: Float
  createdById: Float
  financeId: Float
  generatedDocumentId: Float
  grantId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  tenantId: Float
}

input GrantAllocateVarSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  financeId: OrderBy
  generatedDocumentId: OrderBy
  grantId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  tenantId: OrderBy
}

input GrantArrRelInsertInput {
  data: [GrantInsertInput!]!
  onConflict: GrantOnConflict
}

type GrantAttachments {
  attachment: FileUpload!
  fileUploadId: bigint!
  grant: Grant!
  grantId: bigint!
}

type GrantAttachmentsAggregate {
  aggregate: GrantAttachmentsAggregateFields
  nodes: [GrantAttachments!]!
}

input GrantAttachmentsAggregateBoolExp {
  count: grantAttachmentsAggregateBoolExpCount
}

input grantAttachmentsAggregateBoolExpCount {
  arguments: [GrantAttachmentsSelectColumn!]
  distinct: Boolean
  filter: GrantAttachmentsBoolExp
  predicate: IntComparisonExp!
}

type GrantAttachmentsAggregateFields {
  avg: GrantAttachmentsAvgFields
  count(columns: [GrantAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: GrantAttachmentsMaxFields
  min: GrantAttachmentsMinFields
  stddev: GrantAttachmentsStddevFields
  stddevPop: GrantAttachmentsStddevPopFields
  stddevSamp: GrantAttachmentsStddevSampFields
  sum: GrantAttachmentsSumFields
  varPop: GrantAttachmentsVarPopFields
  varSamp: GrantAttachmentsVarSampFields
  variance: GrantAttachmentsVarianceFields
}

input GrantAttachmentsAggregateOrderBy {
  avg: GrantAttachmentsAvgOrderBy
  count: OrderBy
  max: GrantAttachmentsMaxOrderBy
  min: GrantAttachmentsMinOrderBy
  stddev: GrantAttachmentsStddevOrderBy
  stddevPop: GrantAttachmentsStddevPopOrderBy
  stddevSamp: GrantAttachmentsStddevSampOrderBy
  sum: GrantAttachmentsSumOrderBy
  varPop: GrantAttachmentsVarPopOrderBy
  varSamp: GrantAttachmentsVarSampOrderBy
  variance: GrantAttachmentsVarianceOrderBy
}

input GrantAttachmentsArrRelInsertInput {
  data: [GrantAttachmentsInsertInput!]!
  onConflict: GrantAttachmentsOnConflict
}

type GrantAttachmentsAvgFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

input GrantAttachmentsBoolExp {
  _and: [GrantAttachmentsBoolExp!]
  _not: GrantAttachmentsBoolExp
  _or: [GrantAttachmentsBoolExp!]
  attachment: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  grant: GrantBoolExp
  grantId: BigintComparisonExp
}

enum GrantAttachmentsConstraint {
  grant_attachments_pkey
}

input GrantAttachmentsIncInput {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsInsertInput {
  attachment: FileUploadObjRelInsertInput
  fileUploadId: bigint
  grant: GrantObjRelInsertInput
  grantId: bigint
}

type GrantAttachmentsMaxFields {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsMinFields {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsMutationResponse {
  affectedRows: Int!
  returning: [GrantAttachments!]!
}

input GrantAttachmentsOnConflict {
  constraint: GrantAttachmentsConstraint!
  updateColumns: [GrantAttachmentsUpdateColumn!]! = []
  where: GrantAttachmentsBoolExp
}

input GrantAttachmentsOrderBy {
  attachment: FileUploadOrderBy
  fileUploadId: OrderBy
  grant: GrantOrderBy
  grantId: OrderBy
}

input GrantAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  grantId: bigint!
}

enum GrantAttachmentsSelectColumn {
  fileUploadId
  grantId
}

input GrantAttachmentsSetInput {
  fileUploadId: bigint
  grantId: bigint
}

type GrantAttachmentsStddevFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsStddevPopFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsStddevSampFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

input GrantAttachmentsStreamCursorInput {
  initialValue: GrantAttachmentsStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  grantId: bigint
}

type GrantAttachmentsSumFields {
  fileUploadId: bigint
  grantId: bigint
}

input GrantAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

enum GrantAttachmentsUpdateColumn {
  fileUploadId
  grantId
}

input GrantAttachmentsUpdates {
  _inc: GrantAttachmentsIncInput
  _set: GrantAttachmentsSetInput
  where: GrantAttachmentsBoolExp!
}

type GrantAttachmentsVarianceFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsVarPopFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAttachmentsVarSampFields {
  fileUploadId: Float
  grantId: Float
}

input GrantAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  grantId: OrderBy
}

type GrantAvgFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantId: Float
}

input GrantAvgOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input GrantBoolExp {
  _and: [GrantBoolExp!]
  _not: GrantBoolExp
  _or: [GrantBoolExp!]
  askedAmount: FloatComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  generatedDocument: FileUploadBoolExp
  generatedDocumentId: BigintComparisonExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  grantAttachments: GrantAttachmentsBoolExp
  grantAttachmentsAggregate: GrantAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  receivedAmount: FloatComparisonExp
  receivedAmountProcessed: IndividualBoolExp
  receivedAmountProcessedAt: TimestamptzComparisonExp
  receivedAmountProcessedById: BigintComparisonExp
  signature: FileUploadBoolExp
  signatureId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum GrantConstraint {
  grant_pkey
}

input GrantIncInput {
  askedAmount: Float
  createdById: bigint
  generatedDocumentId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  teamId: bigint
  tenantId: bigint
}

input GrantInsertInput {
  askedAmount: Float
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  generatedDocument: FileUploadObjRelInsertInput
  generatedDocumentId: bigint
  grantAllocates: GrantAllocateArrRelInsertInput
  grantAttachments: GrantAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  projects: ProjectArrRelInsertInput
  receivedAmount: Float
  receivedAmountProcessed: IndividualObjRelInsertInput
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signature: FileUploadObjRelInsertInput
  signatureId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type GrantMaxFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input GrantMaxOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocumentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type GrantMinFields {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input GrantMinOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocumentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type GrantMutationResponse {
  affectedRows: Int!
  returning: [Grant!]!
}

input GrantObjRelInsertInput {
  data: GrantInsertInput!
  onConflict: GrantOnConflict
}

input GrantOnConflict {
  constraint: GrantConstraint!
  updateColumns: [GrantUpdateColumn!]! = []
  where: GrantBoolExp
}

input GrantOrderBy {
  askedAmount: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  generatedDocument: FileUploadOrderBy
  generatedDocumentId: OrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  grantAttachmentsAggregate: GrantAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  receivedAmount: OrderBy
  receivedAmountProcessed: IndividualOrderBy
  receivedAmountProcessedAt: OrderBy
  receivedAmountProcessedById: OrderBy
  signature: FileUploadOrderBy
  signatureId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input GrantPkColumnsInput {
  id: bigint!
}

enum GrantSelectColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  generatedDocumentId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  teamId
  tenantId
}

input GrantSetInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type GrantStddevFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantId: Float
}

input GrantStddevOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type GrantStddevPopFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantId: Float
}

input GrantStddevPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type GrantStddevSampFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantId: Float
}

input GrantStddevSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input GrantStreamCursorInput {
  initialValue: GrantStreamCursorValueInput!
  ordering: CursorOrdering
}

input GrantStreamCursorValueInput {
  askedAmount: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  generatedDocumentId: bigint
  hiddenAt: timestamptz
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedAt: timestamptz
  receivedAmountProcessedById: bigint
  signatureId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type GrantSumFields {
  askedAmount: Float
  createdById: bigint
  generatedDocumentId: bigint
  id: bigint
  receivedAmount: Float
  receivedAmountProcessedById: bigint
  signatureId: bigint
  teamId: bigint
  tenantId: bigint
}

input GrantSumOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum GrantUpdateColumn {
  askedAmount
  createdAt
  createdById
  deletedAt
  generatedDocumentId
  hiddenAt
  id
  receivedAmount
  receivedAmountProcessedAt
  receivedAmountProcessedById
  signatureId
  state
  teamId
  tenantId
}

input GrantUpdates {
  _inc: GrantIncInput
  _set: GrantSetInput
  where: GrantBoolExp!
}

type GrantVarianceFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantId: Float
}

input GrantVarianceOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type GrantVarPopFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantId: Float
}

input GrantVarPopOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type GrantVarSampFields {
  askedAmount: Float
  createdById: Float
  generatedDocumentId: Float
  id: Float
  receivedAmount: Float
  receivedAmountProcessedById: Float
  signatureId: Float
  teamId: Float
  tenantId: Float
}

input GrantVarSampOrderBy {
  askedAmount: OrderBy
  createdById: OrderBy
  generatedDocumentId: OrderBy
  id: OrderBy
  receivedAmount: OrderBy
  receivedAmountProcessedById: OrderBy
  signatureId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Individual {
  actor: Actor!
  actorId: bigint!
  bot: Bot
  contentSignature: String!
  contributorIssues(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): [IssueContributors!]!
  contributorIssuesAggregate(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): IssueContributorsAggregate!
  createdAccounts(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): [Account!]!
  createdAccountsAggregate(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): AccountAggregate!
  createdActions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  createdActionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  createdActorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  createdActorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  createdActors(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  createdActorsAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  createdAddresses(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): [Address!]!
  createdAddressesAggregate(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): AddressAggregate!
  createdAt: timestamptz!
  createdBanks(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): [Bank!]!
  createdBanksAggregate(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): BankAggregate!
  createdBots(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): [Bot!]!
  createdBotsAggregate(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): BotAggregate!
  createdBy: Individual
  createdById: bigint
  createdCampusClusters(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  createdCampusClustersAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  createdCampuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  createdCampusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  createdCanteenFoods(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  createdCanteenFoodsAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  createdCanteenMenus(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  createdCanteenMenusAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  createdCanteens(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  createdCanteensAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  createdClassGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  createdClassGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  createdClassGroups(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  createdClassGroupsAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  createdCohorts(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  createdCohortsAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  createdContents(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  createdContentsAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  createdDocuments(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  createdDocumentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  createdEventApprovalSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  createdEventApprovalStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  createdEventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  createdEventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  createdEventFavorites(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  createdEventFavoritesAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  createdEventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  createdEventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  createdEventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  createdEventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  createdEventSupervisors(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  createdEventSupervisorsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  createdEvents(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  createdEventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  createdExpenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  createdExpenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  createdExpenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  createdExpensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  createdFavorites(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  createdFavoritesAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  createdFileUploads(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  createdFileUploadsAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  createdFinances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  createdFinancesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  createdFormSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  createdFormSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  createdForms(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  createdFormsAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  createdGrantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  createdGrantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  createdGrants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  createdGrantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  createdIndividuals(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  createdIndividualsAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  createdIssues(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  createdIssuesAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  createdLegalUnitLocations(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  createdLegalUnitLocationsAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  createdLegalUnits(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  createdLegalUnitsAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  createdLocations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  createdLocationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  createdMissionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  createdMissionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  createdMissions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  createdMissionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  createdPoles(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  createdPolesAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  createdProjects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  createdProjectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  createdReactions(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  createdReactionsAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  createdReports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  createdReportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  createdRoles(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  createdRolesAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  createdSessions(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  createdSessionsAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  createdShortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  createdShortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  createdSocials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  createdSocialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  createdSubjects(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  createdSubjectsAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  createdTags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  createdTagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  createdTeamHistories(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  createdTeamHistoriesAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  createdTeamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  createdTeamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  createdTeamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  createdTeamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  createdTeamMetrics(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  createdTeamMetricsAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  createdTeams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  createdTeamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  createdTenantOrganizes(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): [TenantOrganize!]!
  createdTenantOrganizesAggregate(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): TenantOrganizeAggregate!
  createdTenants(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  createdTenantsAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  createdThreads(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): [Thread!]!
  createdThreadsAggregate(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): ThreadAggregate!
  createdUsers(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  createdUsersAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
  createdValidations(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  createdValidationsAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  createdVotes(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  createdVotesAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
  deletedAt: timestamptz
  following(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followingAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  hiddenAt: timestamptz
  id: bigint!
  initiatedFinances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  initiatedFinancesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  notifieeEventApprovalSteps(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  notifieeEventApprovalStepsAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  participationProcessedEventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  participationProcessedEventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  passwordHash: String
  pointsProcessedActions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  pointsProcessedActionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  pointsProcessedMissionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  pointsProcessedMissionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  processedEventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  processedEventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  processedExpenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  processedExpensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  processedMissionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  processedMissionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  processedTeamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  processedTeamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  receivedAmountProcessedGrantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  receivedAmountProcessedGrantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  receivedAmountProcessedGrants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  receivedAmountProcessedGrantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  tenant: Tenant!
  tenantId: bigint!
  threadContributors(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): [ThreadContributors!]!
  threadContributorsAggregate(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): ThreadContributorsAggregate!
  user: User
  validatorEventApprovalStep(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  validatorEventApprovalStepAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  viewed(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): [View!]!
  viewedAggregate(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): ViewAggregate!
}

type IndividualAggregate {
  aggregate: IndividualAggregateFields
  nodes: [Individual!]!
}

input IndividualAggregateBoolExp {
  count: individualAggregateBoolExpCount
}

input individualAggregateBoolExpCount {
  arguments: [IndividualSelectColumn!]
  distinct: Boolean
  filter: IndividualBoolExp
  predicate: IntComparisonExp!
}

type IndividualAggregateFields {
  avg: IndividualAvgFields
  count(columns: [IndividualSelectColumn!], distinct: Boolean): Int!
  max: IndividualMaxFields
  min: IndividualMinFields
  stddev: IndividualStddevFields
  stddevPop: IndividualStddevPopFields
  stddevSamp: IndividualStddevSampFields
  sum: IndividualSumFields
  varPop: IndividualVarPopFields
  varSamp: IndividualVarSampFields
  variance: IndividualVarianceFields
}

input IndividualAggregateOrderBy {
  avg: IndividualAvgOrderBy
  count: OrderBy
  max: IndividualMaxOrderBy
  min: IndividualMinOrderBy
  stddev: IndividualStddevOrderBy
  stddevPop: IndividualStddevPopOrderBy
  stddevSamp: IndividualStddevSampOrderBy
  sum: IndividualSumOrderBy
  varPop: IndividualVarPopOrderBy
  varSamp: IndividualVarSampOrderBy
  variance: IndividualVarianceOrderBy
}

input IndividualArrRelInsertInput {
  data: [IndividualInsertInput!]!
  onConflict: IndividualOnConflict
}

type IndividualAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IndividualAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input IndividualBoolExp {
  _and: [IndividualBoolExp!]
  _not: IndividualBoolExp
  _or: [IndividualBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bot: BotBoolExp
  contentSignature: StringComparisonExp
  contributorIssues: IssueContributorsBoolExp
  contributorIssuesAggregate: IssueContributorsAggregateBoolExp
  createdAccounts: AccountBoolExp
  createdAccountsAggregate: AccountAggregateBoolExp
  createdActions: ActionBoolExp
  createdActionsAggregate: ActionAggregateBoolExp
  createdActorImages: ActorImageBoolExp
  createdActorImagesAggregate: ActorImageAggregateBoolExp
  createdActors: ActorBoolExp
  createdActorsAggregate: ActorAggregateBoolExp
  createdAddresses: AddressBoolExp
  createdAddressesAggregate: AddressAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBanks: BankBoolExp
  createdBanksAggregate: BankAggregateBoolExp
  createdBots: BotBoolExp
  createdBotsAggregate: BotAggregateBoolExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  createdCampusClusters: CampusClusterBoolExp
  createdCampusClustersAggregate: CampusClusterAggregateBoolExp
  createdCampuses: CampusBoolExp
  createdCampusesAggregate: CampusAggregateBoolExp
  createdCanteenFoods: CanteenFoodBoolExp
  createdCanteenFoodsAggregate: CanteenFoodAggregateBoolExp
  createdCanteenMenus: CanteenMenuBoolExp
  createdCanteenMenusAggregate: CanteenMenuAggregateBoolExp
  createdCanteens: CanteenBoolExp
  createdCanteensAggregate: CanteenAggregateBoolExp
  createdClassGroupTeachers: ClassGroupTeacherBoolExp
  createdClassGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdClassGroups: ClassGroupBoolExp
  createdClassGroupsAggregate: ClassGroupAggregateBoolExp
  createdCohorts: CohortBoolExp
  createdCohortsAggregate: CohortAggregateBoolExp
  createdContents: ContentBoolExp
  createdContentsAggregate: ContentAggregateBoolExp
  createdDocuments: DocumentBoolExp
  createdDocumentsAggregate: DocumentAggregateBoolExp
  createdEventApprovalSteps: EventApprovalStepBoolExp
  createdEventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  createdEventApprovals: EventApprovalBoolExp
  createdEventApprovalsAggregate: EventApprovalAggregateBoolExp
  createdEventFavorites: EventFavoriteBoolExp
  createdEventFavoritesAggregate: EventFavoriteAggregateBoolExp
  createdEventJoins: EventJoinBoolExp
  createdEventJoinsAggregate: EventJoinAggregateBoolExp
  createdEventOrganizes: EventOrganizeBoolExp
  createdEventOrganizesAggregate: EventOrganizeAggregateBoolExp
  createdEventSupervisors: EventSupervisorBoolExp
  createdEventSupervisorsAggregate: EventSupervisorAggregateBoolExp
  createdEvents: EventBoolExp
  createdEventsAggregate: EventAggregateBoolExp
  createdExpenseItems: ExpenseItemBoolExp
  createdExpenseItemsAggregate: ExpenseItemAggregateBoolExp
  createdExpenses: ExpenseBoolExp
  createdExpensesAggregate: ExpenseAggregateBoolExp
  createdFavorites: FavoriteBoolExp
  createdFavoritesAggregate: FavoriteAggregateBoolExp
  createdFileUploads: FileUploadBoolExp
  createdFileUploadsAggregate: FileUploadAggregateBoolExp
  createdFinances: FinanceBoolExp
  createdFinancesAggregate: FinanceAggregateBoolExp
  createdFormSubmissions: FormSubmissionBoolExp
  createdFormSubmissionsAggregate: FormSubmissionAggregateBoolExp
  createdForms: FormBoolExp
  createdFormsAggregate: FormAggregateBoolExp
  createdGrantAllocates: GrantAllocateBoolExp
  createdGrantAllocatesAggregate: GrantAllocateAggregateBoolExp
  createdGrants: GrantBoolExp
  createdGrantsAggregate: GrantAggregateBoolExp
  createdIndividuals: IndividualBoolExp
  createdIndividualsAggregate: IndividualAggregateBoolExp
  createdIssues: IssueBoolExp
  createdIssuesAggregate: IssueAggregateBoolExp
  createdLegalUnitLocations: LegalUnitLocationBoolExp
  createdLegalUnitLocationsAggregate: LegalUnitLocationAggregateBoolExp
  createdLegalUnits: LegalUnitBoolExp
  createdLegalUnitsAggregate: LegalUnitAggregateBoolExp
  createdLocations: LocationBoolExp
  createdLocationsAggregate: LocationAggregateBoolExp
  createdMissionJoins: MissionJoinBoolExp
  createdMissionJoinsAggregate: MissionJoinAggregateBoolExp
  createdMissions: MissionBoolExp
  createdMissionsAggregate: MissionAggregateBoolExp
  createdPoles: PoleBoolExp
  createdPolesAggregate: PoleAggregateBoolExp
  createdProjects: ProjectBoolExp
  createdProjectsAggregate: ProjectAggregateBoolExp
  createdReactions: ReactionBoolExp
  createdReactionsAggregate: ReactionAggregateBoolExp
  createdReports: ReportBoolExp
  createdReportsAggregate: ReportAggregateBoolExp
  createdRoles: RoleBoolExp
  createdRolesAggregate: RoleAggregateBoolExp
  createdSessions: SessionBoolExp
  createdSessionsAggregate: SessionAggregateBoolExp
  createdShortcuts: ShortcutBoolExp
  createdShortcutsAggregate: ShortcutAggregateBoolExp
  createdSocials: SocialBoolExp
  createdSocialsAggregate: SocialAggregateBoolExp
  createdSubjects: SubjectBoolExp
  createdSubjectsAggregate: SubjectAggregateBoolExp
  createdTags: TagBoolExp
  createdTagsAggregate: TagAggregateBoolExp
  createdTeamHistories: TeamHistoryBoolExp
  createdTeamHistoriesAggregate: TeamHistoryAggregateBoolExp
  createdTeamJoins: TeamJoinBoolExp
  createdTeamJoinsAggregate: TeamJoinAggregateBoolExp
  createdTeamMembers: TeamMemberBoolExp
  createdTeamMembersAggregate: TeamMemberAggregateBoolExp
  createdTeamMetrics: TeamMetricBoolExp
  createdTeamMetricsAggregate: TeamMetricAggregateBoolExp
  createdTeams: TeamBoolExp
  createdTeamsAggregate: TeamAggregateBoolExp
  createdTenantOrganizes: TenantOrganizeBoolExp
  createdTenantOrganizesAggregate: TenantOrganizeAggregateBoolExp
  createdTenants: TenantBoolExp
  createdTenantsAggregate: TenantAggregateBoolExp
  createdThreads: ThreadBoolExp
  createdThreadsAggregate: ThreadAggregateBoolExp
  createdUsers: UserBoolExp
  createdUsersAggregate: UserAggregateBoolExp
  createdValidations: ValidationBoolExp
  createdValidationsAggregate: ValidationAggregateBoolExp
  createdVotes: VoteBoolExp
  createdVotesAggregate: VoteAggregateBoolExp
  deletedAt: TimestamptzComparisonExp
  following: FollowBoolExp
  followingAggregate: FollowAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  initiatedFinances: FinanceBoolExp
  initiatedFinancesAggregate: FinanceAggregateBoolExp
  notifieeEventApprovalSteps: EventApprovalStepNotifieesBoolExp
  notifieeEventApprovalStepsAggregate: EventApprovalStepNotifieesAggregateBoolExp
  participationProcessedEventJoins: EventJoinBoolExp
  participationProcessedEventJoinsAggregate: EventJoinAggregateBoolExp
  passwordHash: StringComparisonExp
  pointsProcessedActions: ActionBoolExp
  pointsProcessedActionsAggregate: ActionAggregateBoolExp
  pointsProcessedMissionJoins: MissionJoinBoolExp
  pointsProcessedMissionJoinsAggregate: MissionJoinAggregateBoolExp
  processedEventJoins: EventJoinBoolExp
  processedEventJoinsAggregate: EventJoinAggregateBoolExp
  processedExpenses: ExpenseBoolExp
  processedExpensesAggregate: ExpenseAggregateBoolExp
  processedMissionJoins: MissionJoinBoolExp
  processedMissionJoinsAggregate: MissionJoinAggregateBoolExp
  processedTeamJoins: TeamJoinBoolExp
  processedTeamJoinsAggregate: TeamJoinAggregateBoolExp
  receivedAmountProcessedGrantAllocates: GrantAllocateBoolExp
  receivedAmountProcessedGrantAllocatesAggregate: GrantAllocateAggregateBoolExp
  receivedAmountProcessedGrants: GrantBoolExp
  receivedAmountProcessedGrantsAggregate: GrantAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  threadContributors: ThreadContributorsBoolExp
  threadContributorsAggregate: ThreadContributorsAggregateBoolExp
  user: UserBoolExp
  validatorEventApprovalStep: EventApprovalStepValidatorsBoolExp
  validatorEventApprovalStepAggregate: EventApprovalStepValidatorsAggregateBoolExp
  viewed: ViewBoolExp
  viewedAggregate: ViewAggregateBoolExp
}

enum IndividualConstraint {
  individual_actor_id_unique
  individual_pkey
}

input IndividualIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input IndividualInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  bot: BotObjRelInsertInput
  contentSignature: String
  contributorIssues: IssueContributorsArrRelInsertInput
  createdAccounts: AccountArrRelInsertInput
  createdActions: ActionArrRelInsertInput
  createdActorImages: ActorImageArrRelInsertInput
  createdActors: ActorArrRelInsertInput
  createdAddresses: AddressArrRelInsertInput
  createdAt: timestamptz
  createdBanks: BankArrRelInsertInput
  createdBots: BotArrRelInsertInput
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  createdCampusClusters: CampusClusterArrRelInsertInput
  createdCampuses: CampusArrRelInsertInput
  createdCanteenFoods: CanteenFoodArrRelInsertInput
  createdCanteenMenus: CanteenMenuArrRelInsertInput
  createdCanteens: CanteenArrRelInsertInput
  createdClassGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdClassGroups: ClassGroupArrRelInsertInput
  createdCohorts: CohortArrRelInsertInput
  createdContents: ContentArrRelInsertInput
  createdDocuments: DocumentArrRelInsertInput
  createdEventApprovalSteps: EventApprovalStepArrRelInsertInput
  createdEventApprovals: EventApprovalArrRelInsertInput
  createdEventFavorites: EventFavoriteArrRelInsertInput
  createdEventJoins: EventJoinArrRelInsertInput
  createdEventOrganizes: EventOrganizeArrRelInsertInput
  createdEventSupervisors: EventSupervisorArrRelInsertInput
  createdEvents: EventArrRelInsertInput
  createdExpenseItems: ExpenseItemArrRelInsertInput
  createdExpenses: ExpenseArrRelInsertInput
  createdFavorites: FavoriteArrRelInsertInput
  createdFileUploads: FileUploadArrRelInsertInput
  createdFinances: FinanceArrRelInsertInput
  createdFormSubmissions: FormSubmissionArrRelInsertInput
  createdForms: FormArrRelInsertInput
  createdGrantAllocates: GrantAllocateArrRelInsertInput
  createdGrants: GrantArrRelInsertInput
  createdIndividuals: IndividualArrRelInsertInput
  createdIssues: IssueArrRelInsertInput
  createdLegalUnitLocations: LegalUnitLocationArrRelInsertInput
  createdLegalUnits: LegalUnitArrRelInsertInput
  createdLocations: LocationArrRelInsertInput
  createdMissionJoins: MissionJoinArrRelInsertInput
  createdMissions: MissionArrRelInsertInput
  createdPoles: PoleArrRelInsertInput
  createdProjects: ProjectArrRelInsertInput
  createdReactions: ReactionArrRelInsertInput
  createdReports: ReportArrRelInsertInput
  createdRoles: RoleArrRelInsertInput
  createdSessions: SessionArrRelInsertInput
  createdShortcuts: ShortcutArrRelInsertInput
  createdSocials: SocialArrRelInsertInput
  createdSubjects: SubjectArrRelInsertInput
  createdTags: TagArrRelInsertInput
  createdTeamHistories: TeamHistoryArrRelInsertInput
  createdTeamJoins: TeamJoinArrRelInsertInput
  createdTeamMembers: TeamMemberArrRelInsertInput
  createdTeamMetrics: TeamMetricArrRelInsertInput
  createdTeams: TeamArrRelInsertInput
  createdTenantOrganizes: TenantOrganizeArrRelInsertInput
  createdTenants: TenantArrRelInsertInput
  createdThreads: ThreadArrRelInsertInput
  createdUsers: UserArrRelInsertInput
  createdValidations: ValidationArrRelInsertInput
  createdVotes: VoteArrRelInsertInput
  deletedAt: timestamptz
  following: FollowArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  initiatedFinances: FinanceArrRelInsertInput
  notifieeEventApprovalSteps: EventApprovalStepNotifieesArrRelInsertInput
  participationProcessedEventJoins: EventJoinArrRelInsertInput
  passwordHash: String
  pointsProcessedActions: ActionArrRelInsertInput
  pointsProcessedMissionJoins: MissionJoinArrRelInsertInput
  processedEventJoins: EventJoinArrRelInsertInput
  processedExpenses: ExpenseArrRelInsertInput
  processedMissionJoins: MissionJoinArrRelInsertInput
  processedTeamJoins: TeamJoinArrRelInsertInput
  receivedAmountProcessedGrantAllocates: GrantAllocateArrRelInsertInput
  receivedAmountProcessedGrants: GrantArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  threadContributors: ThreadContributorsArrRelInsertInput
  user: UserObjRelInsertInput
  validatorEventApprovalStep: EventApprovalStepValidatorsArrRelInsertInput
  viewed: ViewArrRelInsertInput
}

type IndividualMaxFields {
  actorId: bigint
  contentSignature: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  tenantId: bigint
}

input IndividualMaxOrderBy {
  actorId: OrderBy
  contentSignature: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  tenantId: OrderBy
}

type IndividualMinFields {
  actorId: bigint
  contentSignature: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  tenantId: bigint
}

input IndividualMinOrderBy {
  actorId: OrderBy
  contentSignature: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  tenantId: OrderBy
}

type IndividualMutationResponse {
  affectedRows: Int!
  returning: [Individual!]!
}

input IndividualObjRelInsertInput {
  data: IndividualInsertInput!
  onConflict: IndividualOnConflict
}

input IndividualOnConflict {
  constraint: IndividualConstraint!
  updateColumns: [IndividualUpdateColumn!]! = []
  where: IndividualBoolExp
}

input IndividualOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  bot: BotOrderBy
  contentSignature: OrderBy
  contributorIssuesAggregate: IssueContributorsAggregateOrderBy
  createdAccountsAggregate: AccountAggregateOrderBy
  createdActionsAggregate: ActionAggregateOrderBy
  createdActorImagesAggregate: ActorImageAggregateOrderBy
  createdActorsAggregate: ActorAggregateOrderBy
  createdAddressesAggregate: AddressAggregateOrderBy
  createdAt: OrderBy
  createdBanksAggregate: BankAggregateOrderBy
  createdBotsAggregate: BotAggregateOrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  createdCampusClustersAggregate: CampusClusterAggregateOrderBy
  createdCampusesAggregate: CampusAggregateOrderBy
  createdCanteenFoodsAggregate: CanteenFoodAggregateOrderBy
  createdCanteenMenusAggregate: CanteenMenuAggregateOrderBy
  createdCanteensAggregate: CanteenAggregateOrderBy
  createdClassGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdClassGroupsAggregate: ClassGroupAggregateOrderBy
  createdCohortsAggregate: CohortAggregateOrderBy
  createdContentsAggregate: ContentAggregateOrderBy
  createdDocumentsAggregate: DocumentAggregateOrderBy
  createdEventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  createdEventApprovalsAggregate: EventApprovalAggregateOrderBy
  createdEventFavoritesAggregate: EventFavoriteAggregateOrderBy
  createdEventJoinsAggregate: EventJoinAggregateOrderBy
  createdEventOrganizesAggregate: EventOrganizeAggregateOrderBy
  createdEventSupervisorsAggregate: EventSupervisorAggregateOrderBy
  createdEventsAggregate: EventAggregateOrderBy
  createdExpenseItemsAggregate: ExpenseItemAggregateOrderBy
  createdExpensesAggregate: ExpenseAggregateOrderBy
  createdFavoritesAggregate: FavoriteAggregateOrderBy
  createdFileUploadsAggregate: FileUploadAggregateOrderBy
  createdFinancesAggregate: FinanceAggregateOrderBy
  createdFormSubmissionsAggregate: FormSubmissionAggregateOrderBy
  createdFormsAggregate: FormAggregateOrderBy
  createdGrantAllocatesAggregate: GrantAllocateAggregateOrderBy
  createdGrantsAggregate: GrantAggregateOrderBy
  createdIndividualsAggregate: IndividualAggregateOrderBy
  createdIssuesAggregate: IssueAggregateOrderBy
  createdLegalUnitLocationsAggregate: LegalUnitLocationAggregateOrderBy
  createdLegalUnitsAggregate: LegalUnitAggregateOrderBy
  createdLocationsAggregate: LocationAggregateOrderBy
  createdMissionJoinsAggregate: MissionJoinAggregateOrderBy
  createdMissionsAggregate: MissionAggregateOrderBy
  createdPolesAggregate: PoleAggregateOrderBy
  createdProjectsAggregate: ProjectAggregateOrderBy
  createdReactionsAggregate: ReactionAggregateOrderBy
  createdReportsAggregate: ReportAggregateOrderBy
  createdRolesAggregate: RoleAggregateOrderBy
  createdSessionsAggregate: SessionAggregateOrderBy
  createdShortcutsAggregate: ShortcutAggregateOrderBy
  createdSocialsAggregate: SocialAggregateOrderBy
  createdSubjectsAggregate: SubjectAggregateOrderBy
  createdTagsAggregate: TagAggregateOrderBy
  createdTeamHistoriesAggregate: TeamHistoryAggregateOrderBy
  createdTeamJoinsAggregate: TeamJoinAggregateOrderBy
  createdTeamMembersAggregate: TeamMemberAggregateOrderBy
  createdTeamMetricsAggregate: TeamMetricAggregateOrderBy
  createdTeamsAggregate: TeamAggregateOrderBy
  createdTenantOrganizesAggregate: TenantOrganizeAggregateOrderBy
  createdTenantsAggregate: TenantAggregateOrderBy
  createdThreadsAggregate: ThreadAggregateOrderBy
  createdUsersAggregate: UserAggregateOrderBy
  createdValidationsAggregate: ValidationAggregateOrderBy
  createdVotesAggregate: VoteAggregateOrderBy
  deletedAt: OrderBy
  followingAggregate: FollowAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  initiatedFinancesAggregate: FinanceAggregateOrderBy
  notifieeEventApprovalStepsAggregate: EventApprovalStepNotifieesAggregateOrderBy
  participationProcessedEventJoinsAggregate: EventJoinAggregateOrderBy
  passwordHash: OrderBy
  pointsProcessedActionsAggregate: ActionAggregateOrderBy
  pointsProcessedMissionJoinsAggregate: MissionJoinAggregateOrderBy
  processedEventJoinsAggregate: EventJoinAggregateOrderBy
  processedExpensesAggregate: ExpenseAggregateOrderBy
  processedMissionJoinsAggregate: MissionJoinAggregateOrderBy
  processedTeamJoinsAggregate: TeamJoinAggregateOrderBy
  receivedAmountProcessedGrantAllocatesAggregate: GrantAllocateAggregateOrderBy
  receivedAmountProcessedGrantsAggregate: GrantAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  threadContributorsAggregate: ThreadContributorsAggregateOrderBy
  user: UserOrderBy
  validatorEventApprovalStepAggregate: EventApprovalStepValidatorsAggregateOrderBy
  viewedAggregate: ViewAggregateOrderBy
}

input IndividualPkColumnsInput {
  id: bigint!
}

enum IndividualSelectColumn {
  actorId
  contentSignature
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  passwordHash
  tenantId
}

input IndividualSetInput {
  actorId: bigint
  contentSignature: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  tenantId: bigint
}

type IndividualStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IndividualStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IndividualStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IndividualStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IndividualStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IndividualStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input IndividualStreamCursorInput {
  initialValue: IndividualStreamCursorValueInput!
  ordering: CursorOrdering
}

input IndividualStreamCursorValueInput {
  actorId: bigint
  contentSignature: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  tenantId: bigint
}

type IndividualSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input IndividualSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum IndividualUpdateColumn {
  actorId
  contentSignature
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  passwordHash
  tenantId
}

input IndividualUpdates {
  _inc: IndividualIncInput
  _set: IndividualSetInput
  where: IndividualBoolExp!
}

type IndividualVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IndividualVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IndividualVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IndividualVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IndividualVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IndividualVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type Issue {
  content: Content!
  contentId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  issueContributors(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): [IssueContributors!]!
  issueContributorsAggregate(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): IssueContributorsAggregate!
  issueTags(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): [IssueTags!]!
  issueTagsAggregate(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): IssueTagsAggregate!
  name: String!
  slug: String!
  tenant: Tenant!
  tenantId: bigint!
}

type IssueAggregate {
  aggregate: IssueAggregateFields
  nodes: [Issue!]!
}

input IssueAggregateBoolExp {
  count: issueAggregateBoolExpCount
}

input issueAggregateBoolExpCount {
  arguments: [IssueSelectColumn!]
  distinct: Boolean
  filter: IssueBoolExp
  predicate: IntComparisonExp!
}

type IssueAggregateFields {
  avg: IssueAvgFields
  count(columns: [IssueSelectColumn!], distinct: Boolean): Int!
  max: IssueMaxFields
  min: IssueMinFields
  stddev: IssueStddevFields
  stddevPop: IssueStddevPopFields
  stddevSamp: IssueStddevSampFields
  sum: IssueSumFields
  varPop: IssueVarPopFields
  varSamp: IssueVarSampFields
  variance: IssueVarianceFields
}

input IssueAggregateOrderBy {
  avg: IssueAvgOrderBy
  count: OrderBy
  max: IssueMaxOrderBy
  min: IssueMinOrderBy
  stddev: IssueStddevOrderBy
  stddevPop: IssueStddevPopOrderBy
  stddevSamp: IssueStddevSampOrderBy
  sum: IssueSumOrderBy
  varPop: IssueVarPopOrderBy
  varSamp: IssueVarSampOrderBy
  variance: IssueVarianceOrderBy
}

input IssueArrRelInsertInput {
  data: [IssueInsertInput!]!
  onConflict: IssueOnConflict
}

type IssueAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input IssueBoolExp {
  _and: [IssueBoolExp!]
  _not: IssueBoolExp
  _or: [IssueBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  issueContributors: IssueContributorsBoolExp
  issueContributorsAggregate: IssueContributorsAggregateBoolExp
  issueTags: IssueTagsBoolExp
  issueTagsAggregate: IssueTagsAggregateBoolExp
  name: StringComparisonExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum IssueConstraint {
  issue_content_id_unique
  issue_pkey
}

type IssueContributors {
  individual: Individual!
  individualId: bigint!
  issue: Issue!
  issueId: bigint!
}

type IssueContributorsAggregate {
  aggregate: IssueContributorsAggregateFields
  nodes: [IssueContributors!]!
}

input IssueContributorsAggregateBoolExp {
  count: issueContributorsAggregateBoolExpCount
}

input issueContributorsAggregateBoolExpCount {
  arguments: [IssueContributorsSelectColumn!]
  distinct: Boolean
  filter: IssueContributorsBoolExp
  predicate: IntComparisonExp!
}

type IssueContributorsAggregateFields {
  avg: IssueContributorsAvgFields
  count(columns: [IssueContributorsSelectColumn!], distinct: Boolean): Int!
  max: IssueContributorsMaxFields
  min: IssueContributorsMinFields
  stddev: IssueContributorsStddevFields
  stddevPop: IssueContributorsStddevPopFields
  stddevSamp: IssueContributorsStddevSampFields
  sum: IssueContributorsSumFields
  varPop: IssueContributorsVarPopFields
  varSamp: IssueContributorsVarSampFields
  variance: IssueContributorsVarianceFields
}

input IssueContributorsAggregateOrderBy {
  avg: IssueContributorsAvgOrderBy
  count: OrderBy
  max: IssueContributorsMaxOrderBy
  min: IssueContributorsMinOrderBy
  stddev: IssueContributorsStddevOrderBy
  stddevPop: IssueContributorsStddevPopOrderBy
  stddevSamp: IssueContributorsStddevSampOrderBy
  sum: IssueContributorsSumOrderBy
  varPop: IssueContributorsVarPopOrderBy
  varSamp: IssueContributorsVarSampOrderBy
  variance: IssueContributorsVarianceOrderBy
}

input IssueContributorsArrRelInsertInput {
  data: [IssueContributorsInsertInput!]!
  onConflict: IssueContributorsOnConflict
}

type IssueContributorsAvgFields {
  individualId: Float
  issueId: Float
}

input IssueContributorsAvgOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

input IssueContributorsBoolExp {
  _and: [IssueContributorsBoolExp!]
  _not: IssueContributorsBoolExp
  _or: [IssueContributorsBoolExp!]
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
  issue: IssueBoolExp
  issueId: BigintComparisonExp
}

enum IssueContributorsConstraint {
  issue_contributors_pkey
}

input IssueContributorsIncInput {
  individualId: bigint
  issueId: bigint
}

input IssueContributorsInsertInput {
  individual: IndividualObjRelInsertInput
  individualId: bigint
  issue: IssueObjRelInsertInput
  issueId: bigint
}

type IssueContributorsMaxFields {
  individualId: bigint
  issueId: bigint
}

input IssueContributorsMaxOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

type IssueContributorsMinFields {
  individualId: bigint
  issueId: bigint
}

input IssueContributorsMinOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

type IssueContributorsMutationResponse {
  affectedRows: Int!
  returning: [IssueContributors!]!
}

input IssueContributorsOnConflict {
  constraint: IssueContributorsConstraint!
  updateColumns: [IssueContributorsUpdateColumn!]! = []
  where: IssueContributorsBoolExp
}

input IssueContributorsOrderBy {
  individual: IndividualOrderBy
  individualId: OrderBy
  issue: IssueOrderBy
  issueId: OrderBy
}

input IssueContributorsPkColumnsInput {
  individualId: bigint!
  issueId: bigint!
}

enum IssueContributorsSelectColumn {
  individualId
  issueId
}

input IssueContributorsSetInput {
  individualId: bigint
  issueId: bigint
}

type IssueContributorsStddevFields {
  individualId: Float
  issueId: Float
}

input IssueContributorsStddevOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

type IssueContributorsStddevPopFields {
  individualId: Float
  issueId: Float
}

input IssueContributorsStddevPopOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

type IssueContributorsStddevSampFields {
  individualId: Float
  issueId: Float
}

input IssueContributorsStddevSampOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

input IssueContributorsStreamCursorInput {
  initialValue: IssueContributorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input IssueContributorsStreamCursorValueInput {
  individualId: bigint
  issueId: bigint
}

type IssueContributorsSumFields {
  individualId: bigint
  issueId: bigint
}

input IssueContributorsSumOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

enum IssueContributorsUpdateColumn {
  individualId
  issueId
}

input IssueContributorsUpdates {
  _inc: IssueContributorsIncInput
  _set: IssueContributorsSetInput
  where: IssueContributorsBoolExp!
}

type IssueContributorsVarianceFields {
  individualId: Float
  issueId: Float
}

input IssueContributorsVarianceOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

type IssueContributorsVarPopFields {
  individualId: Float
  issueId: Float
}

input IssueContributorsVarPopOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

type IssueContributorsVarSampFields {
  individualId: Float
  issueId: Float
}

input IssueContributorsVarSampOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

input IssueIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input IssueInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  issueContributors: IssueContributorsArrRelInsertInput
  issueTags: IssueTagsArrRelInsertInput
  name: String
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type IssueMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

input IssueMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

type IssueMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

input IssueMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

type IssueMutationResponse {
  affectedRows: Int!
  returning: [Issue!]!
}

input IssueObjRelInsertInput {
  data: IssueInsertInput!
  onConflict: IssueOnConflict
}

input IssueOnConflict {
  constraint: IssueConstraint!
  updateColumns: [IssueUpdateColumn!]! = []
  where: IssueBoolExp
}

input IssueOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  issueContributorsAggregate: IssueContributorsAggregateOrderBy
  issueTagsAggregate: IssueTagsAggregateOrderBy
  name: OrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input IssuePkColumnsInput {
  id: bigint!
}

enum IssueSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  slug
  tenantId
}

input IssueSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

type IssueStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input IssueStreamCursorInput {
  initialValue: IssueStreamCursorValueInput!
  ordering: CursorOrdering
}

input IssueStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

type IssueSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input IssueSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueTags {
  issue: Issue!
  issueId: bigint!
  tag: Tag!
  tagId: bigint!
}

type IssueTagsAggregate {
  aggregate: IssueTagsAggregateFields
  nodes: [IssueTags!]!
}

input IssueTagsAggregateBoolExp {
  count: issueTagsAggregateBoolExpCount
}

input issueTagsAggregateBoolExpCount {
  arguments: [IssueTagsSelectColumn!]
  distinct: Boolean
  filter: IssueTagsBoolExp
  predicate: IntComparisonExp!
}

type IssueTagsAggregateFields {
  avg: IssueTagsAvgFields
  count(columns: [IssueTagsSelectColumn!], distinct: Boolean): Int!
  max: IssueTagsMaxFields
  min: IssueTagsMinFields
  stddev: IssueTagsStddevFields
  stddevPop: IssueTagsStddevPopFields
  stddevSamp: IssueTagsStddevSampFields
  sum: IssueTagsSumFields
  varPop: IssueTagsVarPopFields
  varSamp: IssueTagsVarSampFields
  variance: IssueTagsVarianceFields
}

input IssueTagsAggregateOrderBy {
  avg: IssueTagsAvgOrderBy
  count: OrderBy
  max: IssueTagsMaxOrderBy
  min: IssueTagsMinOrderBy
  stddev: IssueTagsStddevOrderBy
  stddevPop: IssueTagsStddevPopOrderBy
  stddevSamp: IssueTagsStddevSampOrderBy
  sum: IssueTagsSumOrderBy
  varPop: IssueTagsVarPopOrderBy
  varSamp: IssueTagsVarSampOrderBy
  variance: IssueTagsVarianceOrderBy
}

input IssueTagsArrRelInsertInput {
  data: [IssueTagsInsertInput!]!
  onConflict: IssueTagsOnConflict
}

type IssueTagsAvgFields {
  issueId: Float
  tagId: Float
}

input IssueTagsAvgOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

input IssueTagsBoolExp {
  _and: [IssueTagsBoolExp!]
  _not: IssueTagsBoolExp
  _or: [IssueTagsBoolExp!]
  issue: IssueBoolExp
  issueId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum IssueTagsConstraint {
  issue_tags_pkey
}

input IssueTagsIncInput {
  issueId: bigint
  tagId: bigint
}

input IssueTagsInsertInput {
  issue: IssueObjRelInsertInput
  issueId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type IssueTagsMaxFields {
  issueId: bigint
  tagId: bigint
}

input IssueTagsMaxOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

type IssueTagsMinFields {
  issueId: bigint
  tagId: bigint
}

input IssueTagsMinOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

type IssueTagsMutationResponse {
  affectedRows: Int!
  returning: [IssueTags!]!
}

input IssueTagsOnConflict {
  constraint: IssueTagsConstraint!
  updateColumns: [IssueTagsUpdateColumn!]! = []
  where: IssueTagsBoolExp
}

input IssueTagsOrderBy {
  issue: IssueOrderBy
  issueId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input IssueTagsPkColumnsInput {
  issueId: bigint!
  tagId: bigint!
}

enum IssueTagsSelectColumn {
  issueId
  tagId
}

input IssueTagsSetInput {
  issueId: bigint
  tagId: bigint
}

type IssueTagsStddevFields {
  issueId: Float
  tagId: Float
}

input IssueTagsStddevOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

type IssueTagsStddevPopFields {
  issueId: Float
  tagId: Float
}

input IssueTagsStddevPopOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

type IssueTagsStddevSampFields {
  issueId: Float
  tagId: Float
}

input IssueTagsStddevSampOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

input IssueTagsStreamCursorInput {
  initialValue: IssueTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input IssueTagsStreamCursorValueInput {
  issueId: bigint
  tagId: bigint
}

type IssueTagsSumFields {
  issueId: bigint
  tagId: bigint
}

input IssueTagsSumOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

enum IssueTagsUpdateColumn {
  issueId
  tagId
}

input IssueTagsUpdates {
  _inc: IssueTagsIncInput
  _set: IssueTagsSetInput
  where: IssueTagsBoolExp!
}

type IssueTagsVarianceFields {
  issueId: Float
  tagId: Float
}

input IssueTagsVarianceOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

type IssueTagsVarPopFields {
  issueId: Float
  tagId: Float
}

input IssueTagsVarPopOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

type IssueTagsVarSampFields {
  issueId: Float
  tagId: Float
}

input IssueTagsVarSampOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

enum IssueUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  slug
  tenantId
}

input IssueUpdates {
  _inc: IssueIncInput
  _set: IssueSetInput
  where: IssueBoolExp!
}

type IssueVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type IssueVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input IssueVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

scalar jsonb

input JsonbCastExp {
  String: StringComparisonExp
}

input JsonbComparisonExp {
  _cast: JsonbCastExp
  _containedIn: jsonb
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  _hasKey: String
  _hasKeysAll: [String!]
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

type LegalUnit {
  activityCategory: String
  actor: Actor!
  actorId: bigint!
  bankCode: Int
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  expenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  grandFundTeams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  grandFundTeamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  headquartersLocation: String
  headquartersNic: String
  id: bigint!
  legalCategory: String
  legalName: String!
  legalUnitLocations(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationsAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  legalUnits(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  legalUnitsAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  parent: LegalUnit
  parentId: bigint
  siren: String
  type: String!
}

type LegalUnitAggregate {
  aggregate: LegalUnitAggregateFields
  nodes: [LegalUnit!]!
}

input LegalUnitAggregateBoolExp {
  count: legalUnitAggregateBoolExpCount
}

input legalUnitAggregateBoolExpCount {
  arguments: [LegalUnitSelectColumn!]
  distinct: Boolean
  filter: LegalUnitBoolExp
  predicate: IntComparisonExp!
}

type LegalUnitAggregateFields {
  avg: LegalUnitAvgFields
  count(columns: [LegalUnitSelectColumn!], distinct: Boolean): Int!
  max: LegalUnitMaxFields
  min: LegalUnitMinFields
  stddev: LegalUnitStddevFields
  stddevPop: LegalUnitStddevPopFields
  stddevSamp: LegalUnitStddevSampFields
  sum: LegalUnitSumFields
  varPop: LegalUnitVarPopFields
  varSamp: LegalUnitVarSampFields
  variance: LegalUnitVarianceFields
}

input LegalUnitAggregateOrderBy {
  avg: LegalUnitAvgOrderBy
  count: OrderBy
  max: LegalUnitMaxOrderBy
  min: LegalUnitMinOrderBy
  stddev: LegalUnitStddevOrderBy
  stddevPop: LegalUnitStddevPopOrderBy
  stddevSamp: LegalUnitStddevSampOrderBy
  sum: LegalUnitSumOrderBy
  varPop: LegalUnitVarPopOrderBy
  varSamp: LegalUnitVarSampOrderBy
  variance: LegalUnitVarianceOrderBy
}

input LegalUnitArrRelInsertInput {
  data: [LegalUnitInsertInput!]!
  onConflict: LegalUnitOnConflict
}

type LegalUnitAvgFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitAvgOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

input LegalUnitBoolExp {
  _and: [LegalUnitBoolExp!]
  _not: LegalUnitBoolExp
  _or: [LegalUnitBoolExp!]
  activityCategory: StringComparisonExp
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bankCode: IntComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  grandFundTeams: TeamBoolExp
  grandFundTeamsAggregate: TeamAggregateBoolExp
  headquartersLocation: StringComparisonExp
  headquartersNic: StringComparisonExp
  id: BigintComparisonExp
  legalCategory: StringComparisonExp
  legalName: StringComparisonExp
  legalUnitLocations: LegalUnitLocationBoolExp
  legalUnitLocationsAggregate: LegalUnitLocationAggregateBoolExp
  legalUnits: LegalUnitBoolExp
  legalUnitsAggregate: LegalUnitAggregateBoolExp
  parent: LegalUnitBoolExp
  parentId: BigintComparisonExp
  siren: StringComparisonExp
  type: StringComparisonExp
}

enum LegalUnitConstraint {
  legal_unit_actor_id_unique
  legal_unit_pkey
}

input LegalUnitIncInput {
  actorId: bigint
  bankCode: Int
  createdById: bigint
  id: bigint
  parentId: bigint
}

input LegalUnitInsertInput {
  activityCategory: String
  actor: ActorObjRelInsertInput
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  expenseItems: ExpenseItemArrRelInsertInput
  grandFundTeams: TeamArrRelInsertInput
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  legalCategory: String
  legalName: String
  legalUnitLocations: LegalUnitLocationArrRelInsertInput
  legalUnits: LegalUnitArrRelInsertInput
  parent: LegalUnitObjRelInsertInput
  parentId: bigint
  siren: String
  type: String
}

type LegalUnitLocation {
  actor: Actor!
  actorId: bigint!
  bankLocationCode: Int
  banks(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): [Bank!]!
  banksAggregate(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): BankAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  id: bigint!
  individual: Individual
  legalName: String!
  legalUnit: LegalUnit
  legalUnitId: bigint
  location: Location
  locationId: bigint
  locationType: String!
  nic: String
}

type LegalUnitLocationAggregate {
  aggregate: LegalUnitLocationAggregateFields
  nodes: [LegalUnitLocation!]!
}

input LegalUnitLocationAggregateBoolExp {
  count: legalUnitLocationAggregateBoolExpCount
}

input legalUnitLocationAggregateBoolExpCount {
  arguments: [LegalUnitLocationSelectColumn!]
  distinct: Boolean
  filter: LegalUnitLocationBoolExp
  predicate: IntComparisonExp!
}

type LegalUnitLocationAggregateFields {
  avg: LegalUnitLocationAvgFields
  count(columns: [LegalUnitLocationSelectColumn!], distinct: Boolean): Int!
  max: LegalUnitLocationMaxFields
  min: LegalUnitLocationMinFields
  stddev: LegalUnitLocationStddevFields
  stddevPop: LegalUnitLocationStddevPopFields
  stddevSamp: LegalUnitLocationStddevSampFields
  sum: LegalUnitLocationSumFields
  varPop: LegalUnitLocationVarPopFields
  varSamp: LegalUnitLocationVarSampFields
  variance: LegalUnitLocationVarianceFields
}

input LegalUnitLocationAggregateOrderBy {
  avg: LegalUnitLocationAvgOrderBy
  count: OrderBy
  max: LegalUnitLocationMaxOrderBy
  min: LegalUnitLocationMinOrderBy
  stddev: LegalUnitLocationStddevOrderBy
  stddevPop: LegalUnitLocationStddevPopOrderBy
  stddevSamp: LegalUnitLocationStddevSampOrderBy
  sum: LegalUnitLocationSumOrderBy
  varPop: LegalUnitLocationVarPopOrderBy
  varSamp: LegalUnitLocationVarSampOrderBy
  variance: LegalUnitLocationVarianceOrderBy
}

input LegalUnitLocationArrRelInsertInput {
  data: [LegalUnitLocationInsertInput!]!
  onConflict: LegalUnitLocationOnConflict
}

type LegalUnitLocationAvgFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationAvgOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

input LegalUnitLocationBoolExp {
  _and: [LegalUnitLocationBoolExp!]
  _not: LegalUnitLocationBoolExp
  _or: [LegalUnitLocationBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  bankLocationCode: IntComparisonExp
  banks: BankBoolExp
  banksAggregate: BankAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  legalName: StringComparisonExp
  legalUnit: LegalUnitBoolExp
  legalUnitId: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
  locationType: StringComparisonExp
  nic: StringComparisonExp
}

enum LegalUnitLocationConstraint {
  legal_unit_location_actor_id_unique
  legal_unit_location_pkey
}

input LegalUnitLocationIncInput {
  actorId: bigint
  bankLocationCode: Int
  createdById: bigint
  id: bigint
  legalUnitId: bigint
  locationId: bigint
}

input LegalUnitLocationInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  bankLocationCode: Int
  banks: BankArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  legalName: String
  legalUnit: LegalUnitObjRelInsertInput
  legalUnitId: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
  locationType: String
  nic: String
}

type LegalUnitLocationMaxFields {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
}

input LegalUnitLocationMaxOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  id: OrderBy
  legalName: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
  locationType: OrderBy
  nic: OrderBy
}

type LegalUnitLocationMinFields {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
}

input LegalUnitLocationMinOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  id: OrderBy
  legalName: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
  locationType: OrderBy
  nic: OrderBy
}

type LegalUnitLocationMutationResponse {
  affectedRows: Int!
  returning: [LegalUnitLocation!]!
}

input LegalUnitLocationObjRelInsertInput {
  data: LegalUnitLocationInsertInput!
  onConflict: LegalUnitLocationOnConflict
}

input LegalUnitLocationOnConflict {
  constraint: LegalUnitLocationConstraint!
  updateColumns: [LegalUnitLocationUpdateColumn!]! = []
  where: LegalUnitLocationBoolExp
}

input LegalUnitLocationOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  bankLocationCode: OrderBy
  banksAggregate: BankAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  legalName: OrderBy
  legalUnit: LegalUnitOrderBy
  legalUnitId: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
  locationType: OrderBy
  nic: OrderBy
}

input LegalUnitLocationPkColumnsInput {
  id: bigint!
}

enum LegalUnitLocationSelectColumn {
  actorId
  bankLocationCode
  createdAt
  createdById
  deletedAt
  id
  legalName
  legalUnitId
  locationId
  locationType
  nic
}

input LegalUnitLocationSetInput {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
}

type LegalUnitLocationStddevFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationStddevOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationStddevPopFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationStddevPopOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationStddevSampFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationStddevSampOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

input LegalUnitLocationStreamCursorInput {
  initialValue: LegalUnitLocationStreamCursorValueInput!
  ordering: CursorOrdering
}

input LegalUnitLocationStreamCursorValueInput {
  actorId: bigint
  bankLocationCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  id: bigint
  legalName: String
  legalUnitId: bigint
  locationId: bigint
  locationType: String
  nic: String
}

type LegalUnitLocationSumFields {
  actorId: bigint
  bankLocationCode: Int
  createdById: bigint
  id: bigint
  legalUnitId: bigint
  locationId: bigint
}

input LegalUnitLocationSumOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

enum LegalUnitLocationUpdateColumn {
  actorId
  bankLocationCode
  createdAt
  createdById
  deletedAt
  id
  legalName
  legalUnitId
  locationId
  locationType
  nic
}

input LegalUnitLocationUpdates {
  _inc: LegalUnitLocationIncInput
  _set: LegalUnitLocationSetInput
  where: LegalUnitLocationBoolExp!
}

type LegalUnitLocationVarianceFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationVarianceOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationVarPopFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationVarPopOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitLocationVarSampFields {
  actorId: Float
  bankLocationCode: Float
  createdById: Float
  id: Float
  legalUnitId: Float
  locationId: Float
}

input LegalUnitLocationVarSampOrderBy {
  actorId: OrderBy
  bankLocationCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  legalUnitId: OrderBy
  locationId: OrderBy
}

type LegalUnitMaxFields {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  type: String
}

input LegalUnitMaxOrderBy {
  activityCategory: OrderBy
  actorId: OrderBy
  bankCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  headquartersLocation: OrderBy
  headquartersNic: OrderBy
  id: OrderBy
  legalCategory: OrderBy
  legalName: OrderBy
  parentId: OrderBy
  siren: OrderBy
  type: OrderBy
}

type LegalUnitMinFields {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  type: String
}

input LegalUnitMinOrderBy {
  activityCategory: OrderBy
  actorId: OrderBy
  bankCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  headquartersLocation: OrderBy
  headquartersNic: OrderBy
  id: OrderBy
  legalCategory: OrderBy
  legalName: OrderBy
  parentId: OrderBy
  siren: OrderBy
  type: OrderBy
}

type LegalUnitMutationResponse {
  affectedRows: Int!
  returning: [LegalUnit!]!
}

input LegalUnitObjRelInsertInput {
  data: LegalUnitInsertInput!
  onConflict: LegalUnitOnConflict
}

input LegalUnitOnConflict {
  constraint: LegalUnitConstraint!
  updateColumns: [LegalUnitUpdateColumn!]! = []
  where: LegalUnitBoolExp
}

input LegalUnitOrderBy {
  activityCategory: OrderBy
  actor: ActorOrderBy
  actorId: OrderBy
  bankCode: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  grandFundTeamsAggregate: TeamAggregateOrderBy
  headquartersLocation: OrderBy
  headquartersNic: OrderBy
  id: OrderBy
  legalCategory: OrderBy
  legalName: OrderBy
  legalUnitLocationsAggregate: LegalUnitLocationAggregateOrderBy
  legalUnitsAggregate: LegalUnitAggregateOrderBy
  parent: LegalUnitOrderBy
  parentId: OrderBy
  siren: OrderBy
  type: OrderBy
}

input LegalUnitPkColumnsInput {
  id: bigint!
}

enum LegalUnitSelectColumn {
  activityCategory
  actorId
  bankCode
  createdAt
  createdById
  deletedAt
  headquartersLocation
  headquartersNic
  id
  legalCategory
  legalName
  parentId
  siren
  type
}

input LegalUnitSetInput {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  type: String
}

type LegalUnitStddevFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitStddevOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitStddevPopFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitStddevPopOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitStddevSampFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitStddevSampOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

input LegalUnitStreamCursorInput {
  initialValue: LegalUnitStreamCursorValueInput!
  ordering: CursorOrdering
}

input LegalUnitStreamCursorValueInput {
  activityCategory: String
  actorId: bigint
  bankCode: Int
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  headquartersLocation: String
  headquartersNic: String
  id: bigint
  legalCategory: String
  legalName: String
  parentId: bigint
  siren: String
  type: String
}

type LegalUnitSumFields {
  actorId: bigint
  bankCode: Int
  createdById: bigint
  id: bigint
  parentId: bigint
}

input LegalUnitSumOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

enum LegalUnitUpdateColumn {
  activityCategory
  actorId
  bankCode
  createdAt
  createdById
  deletedAt
  headquartersLocation
  headquartersNic
  id
  legalCategory
  legalName
  parentId
  siren
  type
}

input LegalUnitUpdates {
  _inc: LegalUnitIncInput
  _set: LegalUnitSetInput
  where: LegalUnitBoolExp!
}

type LegalUnitVarianceFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitVarianceOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitVarPopFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitVarPopOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type LegalUnitVarSampFields {
  actorId: Float
  bankCode: Float
  createdById: Float
  id: Float
  parentId: Float
}

input LegalUnitVarSampOrderBy {
  actorId: OrderBy
  bankCode: OrderBy
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
}

type Location {
  actor: Actor!
  actorId: bigint!
  address: Address
  addressId: bigint
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  finances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  legalUnitLocations(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationsAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  locationDetails: String!
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  onlineLink: String!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type LocationAggregate {
  aggregate: LocationAggregateFields
  nodes: [Location!]!
}

input LocationAggregateBoolExp {
  count: locationAggregateBoolExpCount
}

input locationAggregateBoolExpCount {
  arguments: [LocationSelectColumn!]
  distinct: Boolean
  filter: LocationBoolExp
  predicate: IntComparisonExp!
}

type LocationAggregateFields {
  avg: LocationAvgFields
  count(columns: [LocationSelectColumn!], distinct: Boolean): Int!
  max: LocationMaxFields
  min: LocationMinFields
  stddev: LocationStddevFields
  stddevPop: LocationStddevPopFields
  stddevSamp: LocationStddevSampFields
  sum: LocationSumFields
  varPop: LocationVarPopFields
  varSamp: LocationVarSampFields
  variance: LocationVarianceFields
}

input LocationAggregateOrderBy {
  avg: LocationAvgOrderBy
  count: OrderBy
  max: LocationMaxOrderBy
  min: LocationMinOrderBy
  stddev: LocationStddevOrderBy
  stddevPop: LocationStddevPopOrderBy
  stddevSamp: LocationStddevSampOrderBy
  sum: LocationSumOrderBy
  varPop: LocationVarPopOrderBy
  varSamp: LocationVarSampOrderBy
  variance: LocationVarianceOrderBy
}

input LocationArrRelInsertInput {
  data: [LocationInsertInput!]!
  onConflict: LocationOnConflict
}

type LocationAvgFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input LocationAvgOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input LocationBoolExp {
  _and: [LocationBoolExp!]
  _not: LocationBoolExp
  _or: [LocationBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  address: AddressBoolExp
  addressId: BigintComparisonExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  legalUnitLocations: LegalUnitLocationBoolExp
  legalUnitLocationsAggregate: LegalUnitLocationAggregateBoolExp
  locationDetails: StringComparisonExp
  locationImages: LocationImagesBoolExp
  locationImagesAggregate: LocationImagesAggregateBoolExp
  onlineLink: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum LocationConstraint {
  location_pkey
}

type LocationImages {
  fileUpload: FileUpload!
  fileUploadId: bigint!
  location: Location!
  locationId: bigint!
}

type LocationImagesAggregate {
  aggregate: LocationImagesAggregateFields
  nodes: [LocationImages!]!
}

input LocationImagesAggregateBoolExp {
  count: locationImagesAggregateBoolExpCount
}

input locationImagesAggregateBoolExpCount {
  arguments: [LocationImagesSelectColumn!]
  distinct: Boolean
  filter: LocationImagesBoolExp
  predicate: IntComparisonExp!
}

type LocationImagesAggregateFields {
  avg: LocationImagesAvgFields
  count(columns: [LocationImagesSelectColumn!], distinct: Boolean): Int!
  max: LocationImagesMaxFields
  min: LocationImagesMinFields
  stddev: LocationImagesStddevFields
  stddevPop: LocationImagesStddevPopFields
  stddevSamp: LocationImagesStddevSampFields
  sum: LocationImagesSumFields
  varPop: LocationImagesVarPopFields
  varSamp: LocationImagesVarSampFields
  variance: LocationImagesVarianceFields
}

input LocationImagesAggregateOrderBy {
  avg: LocationImagesAvgOrderBy
  count: OrderBy
  max: LocationImagesMaxOrderBy
  min: LocationImagesMinOrderBy
  stddev: LocationImagesStddevOrderBy
  stddevPop: LocationImagesStddevPopOrderBy
  stddevSamp: LocationImagesStddevSampOrderBy
  sum: LocationImagesSumOrderBy
  varPop: LocationImagesVarPopOrderBy
  varSamp: LocationImagesVarSampOrderBy
  variance: LocationImagesVarianceOrderBy
}

input LocationImagesArrRelInsertInput {
  data: [LocationImagesInsertInput!]!
  onConflict: LocationImagesOnConflict
}

type LocationImagesAvgFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesAvgOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

input LocationImagesBoolExp {
  _and: [LocationImagesBoolExp!]
  _not: LocationImagesBoolExp
  _or: [LocationImagesBoolExp!]
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  location: LocationBoolExp
  locationId: BigintComparisonExp
}

enum LocationImagesConstraint {
  location_images_pkey
}

input LocationImagesIncInput {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesInsertInput {
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
  location: LocationObjRelInsertInput
  locationId: bigint
}

type LocationImagesMaxFields {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesMaxOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesMinFields {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesMinOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesMutationResponse {
  affectedRows: Int!
  returning: [LocationImages!]!
}

input LocationImagesOnConflict {
  constraint: LocationImagesConstraint!
  updateColumns: [LocationImagesUpdateColumn!]! = []
  where: LocationImagesBoolExp
}

input LocationImagesOrderBy {
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
  location: LocationOrderBy
  locationId: OrderBy
}

input LocationImagesPkColumnsInput {
  fileUploadId: bigint!
  locationId: bigint!
}

enum LocationImagesSelectColumn {
  fileUploadId
  locationId
}

input LocationImagesSetInput {
  fileUploadId: bigint
  locationId: bigint
}

type LocationImagesStddevFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesStddevOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesStddevPopFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesStddevPopOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesStddevSampFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesStddevSampOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

input LocationImagesStreamCursorInput {
  initialValue: LocationImagesStreamCursorValueInput!
  ordering: CursorOrdering
}

input LocationImagesStreamCursorValueInput {
  fileUploadId: bigint
  locationId: bigint
}

type LocationImagesSumFields {
  fileUploadId: bigint
  locationId: bigint
}

input LocationImagesSumOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

enum LocationImagesUpdateColumn {
  fileUploadId
  locationId
}

input LocationImagesUpdates {
  _inc: LocationImagesIncInput
  _set: LocationImagesSetInput
  where: LocationImagesBoolExp!
}

type LocationImagesVarianceFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesVarianceOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesVarPopFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesVarPopOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

type LocationImagesVarSampFields {
  fileUploadId: Float
  locationId: Float
}

input LocationImagesVarSampOrderBy {
  fileUploadId: OrderBy
  locationId: OrderBy
}

input LocationIncInput {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input LocationInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  address: AddressObjRelInsertInput
  addressId: bigint
  campuses: CampusArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  finances: FinanceArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  legalUnitLocations: LegalUnitLocationArrRelInsertInput
  locationDetails: String
  locationImages: LocationImagesArrRelInsertInput
  onlineLink: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type LocationMaxFields {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationDetails: String
  onlineLink: String
  tenantId: bigint
  type: String
}

input LocationMaxOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationDetails: OrderBy
  onlineLink: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type LocationMinFields {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationDetails: String
  onlineLink: String
  tenantId: bigint
  type: String
}

input LocationMinOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  locationDetails: OrderBy
  onlineLink: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type LocationMutationResponse {
  affectedRows: Int!
  returning: [Location!]!
}

input LocationObjRelInsertInput {
  data: LocationInsertInput!
  onConflict: LocationOnConflict
}

input LocationOnConflict {
  constraint: LocationConstraint!
  updateColumns: [LocationUpdateColumn!]! = []
  where: LocationBoolExp
}

input LocationOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  address: AddressOrderBy
  addressId: OrderBy
  campusesAggregate: CampusAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  financesAggregate: FinanceAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  legalUnitLocationsAggregate: LegalUnitLocationAggregateOrderBy
  locationDetails: OrderBy
  locationImagesAggregate: LocationImagesAggregateOrderBy
  onlineLink: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input LocationPkColumnsInput {
  id: bigint!
}

enum LocationSelectColumn {
  actorId
  addressId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  locationDetails
  onlineLink
  tenantId
  type
}

input LocationSetInput {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationDetails: String
  onlineLink: String
  tenantId: bigint
  type: String
}

type LocationStddevFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input LocationStddevOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type LocationStddevPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input LocationStddevPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type LocationStddevSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input LocationStddevSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input LocationStreamCursorInput {
  initialValue: LocationStreamCursorValueInput!
  ordering: CursorOrdering
}

input LocationStreamCursorValueInput {
  actorId: bigint
  addressId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  locationDetails: String
  onlineLink: String
  tenantId: bigint
  type: String
}

type LocationSumFields {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input LocationSumOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum LocationUpdateColumn {
  actorId
  addressId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  locationDetails
  onlineLink
  tenantId
  type
}

input LocationUpdates {
  _inc: LocationIncInput
  _set: LocationSetInput
  where: LocationBoolExp!
}

type LocationVarianceFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input LocationVarianceOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type LocationVarPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input LocationVarPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type LocationVarSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input LocationVarSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Mission {
  color: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventManageId: bigint
  eventOrganize: EventOrganize
  hiddenAt: timestamptz
  id: bigint!
  isAutoAcceptingMembers: Boolean!
  isTemplate: Boolean!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  name: String!
  pointsMaximum: smallint!
  pointsMinimum: smallint!
  project: Project
  projectId: bigint
  quantity: smallint!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type MissionAggregate {
  aggregate: MissionAggregateFields
  nodes: [Mission!]!
}

input MissionAggregateBoolExp {
  bool_and: missionAggregateBoolExpBool_and
  bool_or: missionAggregateBoolExpBool_or
  count: missionAggregateBoolExpCount
}

input missionAggregateBoolExpBool_and {
  arguments: MissionSelectColumnMissionAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: MissionBoolExp
  predicate: BooleanComparisonExp!
}

input missionAggregateBoolExpBool_or {
  arguments: MissionSelectColumnMissionAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: MissionBoolExp
  predicate: BooleanComparisonExp!
}

input missionAggregateBoolExpCount {
  arguments: [MissionSelectColumn!]
  distinct: Boolean
  filter: MissionBoolExp
  predicate: IntComparisonExp!
}

type MissionAggregateFields {
  avg: MissionAvgFields
  count(columns: [MissionSelectColumn!], distinct: Boolean): Int!
  max: MissionMaxFields
  min: MissionMinFields
  stddev: MissionStddevFields
  stddevPop: MissionStddevPopFields
  stddevSamp: MissionStddevSampFields
  sum: MissionSumFields
  varPop: MissionVarPopFields
  varSamp: MissionVarSampFields
  variance: MissionVarianceFields
}

input MissionAggregateOrderBy {
  avg: MissionAvgOrderBy
  count: OrderBy
  max: MissionMaxOrderBy
  min: MissionMinOrderBy
  stddev: MissionStddevOrderBy
  stddevPop: MissionStddevPopOrderBy
  stddevSamp: MissionStddevSampOrderBy
  sum: MissionSumOrderBy
  varPop: MissionVarPopOrderBy
  varSamp: MissionVarSampOrderBy
  variance: MissionVarianceOrderBy
}

input MissionArrRelInsertInput {
  data: [MissionInsertInput!]!
  onConflict: MissionOnConflict
}

type MissionAvgFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

input MissionAvgOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input MissionBoolExp {
  _and: [MissionBoolExp!]
  _not: MissionBoolExp
  _or: [MissionBoolExp!]
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventManageId: BigintComparisonExp
  eventOrganize: EventOrganizeBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isAutoAcceptingMembers: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  name: StringComparisonExp
  pointsMaximum: SmallintComparisonExp
  pointsMinimum: SmallintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  quantity: SmallintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum MissionConstraint {
  mission_pkey
}

input MissionIncInput {
  createdById: bigint
  eventManageId: bigint
  id: bigint
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

input MissionInsertInput {
  color: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  eventOrganize: EventOrganizeObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingMembers: Boolean
  isTemplate: Boolean
  missionJoins: MissionJoinArrRelInsertInput
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  project: ProjectObjRelInsertInput
  projectId: bigint
  quantity: smallint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type MissionJoin {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoin
  eventJoinId: bigint
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  joinedBy: User!
  joinedById: bigint!
  mission: Mission!
  missionId: bigint!
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedBy: Individual
  processedById: bigint
  project: Project
  projectId: bigint
  state: String!
  tenant: Tenant!
  tenantId: bigint!
}

type MissionJoinAggregate {
  aggregate: MissionJoinAggregateFields
  nodes: [MissionJoin!]!
}

input MissionJoinAggregateBoolExp {
  count: missionJoinAggregateBoolExpCount
}

input missionJoinAggregateBoolExpCount {
  arguments: [MissionJoinSelectColumn!]
  distinct: Boolean
  filter: MissionJoinBoolExp
  predicate: IntComparisonExp!
}

type MissionJoinAggregateFields {
  avg: MissionJoinAvgFields
  count(columns: [MissionJoinSelectColumn!], distinct: Boolean): Int!
  max: MissionJoinMaxFields
  min: MissionJoinMinFields
  stddev: MissionJoinStddevFields
  stddevPop: MissionJoinStddevPopFields
  stddevSamp: MissionJoinStddevSampFields
  sum: MissionJoinSumFields
  varPop: MissionJoinVarPopFields
  varSamp: MissionJoinVarSampFields
  variance: MissionJoinVarianceFields
}

input MissionJoinAggregateOrderBy {
  avg: MissionJoinAvgOrderBy
  count: OrderBy
  max: MissionJoinMaxOrderBy
  min: MissionJoinMinOrderBy
  stddev: MissionJoinStddevOrderBy
  stddevPop: MissionJoinStddevPopOrderBy
  stddevSamp: MissionJoinStddevSampOrderBy
  sum: MissionJoinSumOrderBy
  varPop: MissionJoinVarPopOrderBy
  varSamp: MissionJoinVarSampOrderBy
  variance: MissionJoinVarianceOrderBy
}

input MissionJoinArrRelInsertInput {
  data: [MissionJoinInsertInput!]!
  onConflict: MissionJoinOnConflict
}

type MissionJoinAvgFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantId: Float
}

input MissionJoinAvgOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

input MissionJoinBoolExp {
  _and: [MissionJoinBoolExp!]
  _not: MissionJoinBoolExp
  _or: [MissionJoinBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  joinedBy: UserBoolExp
  joinedById: BigintComparisonExp
  mission: MissionBoolExp
  missionId: BigintComparisonExp
  points: SmallintComparisonExp
  pointsProcessedAt: TimestamptzComparisonExp
  pointsProcessedById: BigintComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: IndividualBoolExp
  processedById: BigintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum MissionJoinConstraint {
  mission_join_event_join_id_unique
  mission_join_pkey
}

input MissionJoinIncInput {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedById: bigint
  processedById: bigint
  projectId: bigint
  tenantId: bigint
}

input MissionJoinInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  joinedBy: UserObjRelInsertInput
  joinedById: bigint
  mission: MissionObjRelInsertInput
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedBy: IndividualObjRelInsertInput
  processedById: bigint
  project: ProjectObjRelInsertInput
  projectId: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type MissionJoinMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantId: bigint
}

input MissionJoinMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type MissionJoinMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantId: bigint
}

input MissionJoinMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

type MissionJoinMutationResponse {
  affectedRows: Int!
  returning: [MissionJoin!]!
}

input MissionJoinObjRelInsertInput {
  data: MissionJoinInsertInput!
  onConflict: MissionJoinOnConflict
}

input MissionJoinOnConflict {
  constraint: MissionJoinConstraint!
  updateColumns: [MissionJoinUpdateColumn!]! = []
  where: MissionJoinBoolExp
}

input MissionJoinOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  joinedBy: UserOrderBy
  joinedById: OrderBy
  mission: MissionOrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedAt: OrderBy
  pointsProcessedById: OrderBy
  processedAt: OrderBy
  processedBy: IndividualOrderBy
  processedById: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input MissionJoinPkColumnsInput {
  id: bigint!
}

enum MissionJoinSelectColumn {
  createdAt
  createdById
  deletedAt
  eventJoinId
  hiddenAt
  id
  joinedById
  missionId
  points
  pointsProcessedAt
  pointsProcessedById
  processedAt
  processedById
  projectId
  state
  tenantId
}

input MissionJoinSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantId: bigint
}

type MissionJoinStddevFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantId: Float
}

input MissionJoinStddevOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

type MissionJoinStddevPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantId: Float
}

input MissionJoinStddevPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

type MissionJoinStddevSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantId: Float
}

input MissionJoinStddevSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

input MissionJoinStreamCursorInput {
  initialValue: MissionJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input MissionJoinStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedAt: timestamptz
  pointsProcessedById: bigint
  processedAt: timestamptz
  processedById: bigint
  projectId: bigint
  state: String
  tenantId: bigint
}

type MissionJoinSumFields {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  joinedById: bigint
  missionId: bigint
  points: smallint
  pointsProcessedById: bigint
  processedById: bigint
  projectId: bigint
  tenantId: bigint
}

input MissionJoinSumOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

enum MissionJoinUpdateColumn {
  createdAt
  createdById
  deletedAt
  eventJoinId
  hiddenAt
  id
  joinedById
  missionId
  points
  pointsProcessedAt
  pointsProcessedById
  processedAt
  processedById
  projectId
  state
  tenantId
}

input MissionJoinUpdates {
  _inc: MissionJoinIncInput
  _set: MissionJoinSetInput
  where: MissionJoinBoolExp!
}

type MissionJoinVarianceFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantId: Float
}

input MissionJoinVarianceOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

type MissionJoinVarPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantId: Float
}

input MissionJoinVarPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

type MissionJoinVarSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  joinedById: Float
  missionId: Float
  points: Float
  pointsProcessedById: Float
  processedById: Float
  projectId: Float
  tenantId: Float
}

input MissionJoinVarSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  missionId: OrderBy
  points: OrderBy
  pointsProcessedById: OrderBy
  processedById: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

type MissionMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

input MissionMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type MissionMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

input MissionMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type MissionMutationResponse {
  affectedRows: Int!
  returning: [Mission!]!
}

input MissionObjRelInsertInput {
  data: MissionInsertInput!
  onConflict: MissionOnConflict
}

input MissionOnConflict {
  constraint: MissionConstraint!
  updateColumns: [MissionUpdateColumn!]! = []
  where: MissionBoolExp
}

input MissionOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  eventOrganize: EventOrganizeOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isAutoAcceptingMembers: OrderBy
  isTemplate: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  quantity: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input MissionPkColumnsInput {
  id: bigint!
}

enum MissionSelectColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  eventManageId
  hiddenAt
  id
  isAutoAcceptingMembers
  isTemplate
  name
  pointsMaximum
  pointsMinimum
  projectId
  quantity
  teamId
  tenantId
}

enum MissionSelectColumnMissionAggregateBoolExpBool_andArgumentsColumns {
  isAutoAcceptingMembers
  isTemplate
}

enum MissionSelectColumnMissionAggregateBoolExpBool_orArgumentsColumns {
  isAutoAcceptingMembers
  isTemplate
}

input MissionSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingMembers: Boolean
  isTemplate: Boolean
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

type MissionStddevFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

input MissionStddevOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type MissionStddevPopFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

input MissionStddevPopOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type MissionStddevSampFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

input MissionStddevSampOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input MissionStreamCursorInput {
  initialValue: MissionStreamCursorValueInput!
  ordering: CursorOrdering
}

input MissionStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAutoAcceptingMembers: Boolean
  isTemplate: Boolean
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

type MissionSumFields {
  createdById: bigint
  eventManageId: bigint
  id: bigint
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

input MissionSumOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum MissionUpdateColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  eventManageId
  hiddenAt
  id
  isAutoAcceptingMembers
  isTemplate
  name
  pointsMaximum
  pointsMinimum
  projectId
  quantity
  teamId
  tenantId
}

input MissionUpdates {
  _inc: MissionIncInput
  _set: MissionSetInput
  where: MissionBoolExp!
}

type MissionVarianceFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

input MissionVarianceOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type MissionVarPopFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

input MissionVarPopOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type MissionVarSampFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

input MissionVarSampOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Mutation {
  deleteAccount(where: AccountBoolExp!): AccountMutationResponse
  deleteAccountByPk(id: bigint!): Account
  deleteAction(where: ActionBoolExp!): ActionMutationResponse
  deleteActionByPk(id: bigint!): Action
  deleteActor(where: ActorBoolExp!): ActorMutationResponse
  deleteActorByPk(id: bigint!): Actor
  deleteActorImage(where: ActorImageBoolExp!): ActorImageMutationResponse
  deleteActorImageByPk(id: bigint!): ActorImage
  deleteActorTags(where: ActorTagsBoolExp!): ActorTagsMutationResponse
  deleteActorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags
  deleteAddress(where: AddressBoolExp!): AddressMutationResponse
  deleteAddressByPk(id: bigint!): Address
  deleteBank(where: BankBoolExp!): BankMutationResponse
  deleteBankByPk(id: bigint!): Bank
  deleteBot(where: BotBoolExp!): BotMutationResponse
  deleteBotByPk(id: bigint!): Bot
  deleteCampus(where: CampusBoolExp!): CampusMutationResponse
  deleteCampusByPk(id: bigint!): Campus
  deleteCampusCluster(where: CampusClusterBoolExp!): CampusClusterMutationResponse
  deleteCampusClusterByPk(id: bigint!): CampusCluster
  deleteCanteen(where: CanteenBoolExp!): CanteenMutationResponse
  deleteCanteenByPk(id: bigint!): Canteen
  deleteCanteenFood(where: CanteenFoodBoolExp!): CanteenFoodMutationResponse
  deleteCanteenFoodByPk(id: bigint!): CanteenFood
  deleteCanteenMenu(where: CanteenMenuBoolExp!): CanteenMenuMutationResponse
  deleteCanteenMenuByPk(id: bigint!): CanteenMenu
  deleteClassGroup(where: ClassGroupBoolExp!): ClassGroupMutationResponse
  deleteClassGroupByPk(id: bigint!): ClassGroup
  deleteClassGroupTeacher(where: ClassGroupTeacherBoolExp!): ClassGroupTeacherMutationResponse
  deleteClassGroupTeacherByPk(id: bigint!): ClassGroupTeacher
  deleteClassGroupTeacherSubjects(where: ClassGroupTeacherSubjectsBoolExp!): ClassGroupTeacherSubjectsMutationResponse
  deleteClassGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects
  deleteCohort(where: CohortBoolExp!): CohortMutationResponse
  deleteCohortByPk(id: bigint!): Cohort
  deleteContent(where: ContentBoolExp!): ContentMutationResponse
  deleteContentAttachments(where: ContentAttachmentsBoolExp!): ContentAttachmentsMutationResponse
  deleteContentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments
  deleteContentByPk(id: bigint!): Content
  deleteDocument(where: DocumentBoolExp!): DocumentMutationResponse
  deleteDocumentByPk(id: bigint!): Document
  deleteEvent(where: EventBoolExp!): EventMutationResponse
  deleteEventApproval(where: EventApprovalBoolExp!): EventApprovalMutationResponse
  deleteEventApprovalByPk(id: bigint!): EventApproval
  deleteEventApprovalStep(where: EventApprovalStepBoolExp!): EventApprovalStepMutationResponse
  deleteEventApprovalStepByPk(id: bigint!): EventApprovalStep
  deleteEventApprovalStepNotifiees(where: EventApprovalStepNotifieesBoolExp!): EventApprovalStepNotifieesMutationResponse
  deleteEventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees
  deleteEventApprovalStepValidators(where: EventApprovalStepValidatorsBoolExp!): EventApprovalStepValidatorsMutationResponse
  deleteEventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators
  deleteEventByPk(id: bigint!): Event
  deleteEventFavorite(where: EventFavoriteBoolExp!): EventFavoriteMutationResponse
  deleteEventFavoriteByPk(id: bigint!): EventFavorite
  deleteEventJoin(where: EventJoinBoolExp!): EventJoinMutationResponse
  deleteEventJoinByPk(id: bigint!): EventJoin
  deleteEventOrganize(where: EventOrganizeBoolExp!): EventOrganizeMutationResponse
  deleteEventOrganizeByPk(id: bigint!): EventOrganize
  deleteEventSupervisor(where: EventSupervisorBoolExp!): EventSupervisorMutationResponse
  deleteEventSupervisorByPk(id: bigint!): EventSupervisor
  deleteEventTags(where: EventTagsBoolExp!): EventTagsMutationResponse
  deleteEventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags
  deleteExpense(where: ExpenseBoolExp!): ExpenseMutationResponse
  deleteExpenseByPk(id: bigint!): Expense
  deleteExpenseItem(where: ExpenseItemBoolExp!): ExpenseItemMutationResponse
  deleteExpenseItemAttachments(where: ExpenseItemAttachmentsBoolExp!): ExpenseItemAttachmentsMutationResponse
  deleteExpenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments
  deleteExpenseItemByPk(id: bigint!): ExpenseItem
  deleteFavorite(where: FavoriteBoolExp!): FavoriteMutationResponse
  deleteFavoriteByPk(id: bigint!): Favorite
  deleteFileUpload(where: FileUploadBoolExp!): FileUploadMutationResponse
  deleteFileUploadByPk(id: bigint!): FileUpload
  deleteFinance(where: FinanceBoolExp!): FinanceMutationResponse
  deleteFinanceAttachments(where: FinanceAttachmentsBoolExp!): FinanceAttachmentsMutationResponse
  deleteFinanceAttachmentsByPk(fileUploadId: bigint!, financeId: bigint!): FinanceAttachments
  deleteFinanceByPk(id: bigint!): Finance
  deleteFinanceTags(where: FinanceTagsBoolExp!): FinanceTagsMutationResponse
  deleteFinanceTagsByPk(financeId: bigint!, tagId: bigint!): FinanceTags
  deleteFollow(where: FollowBoolExp!): FollowMutationResponse
  deleteFollowByPk(id: bigint!): Follow
  deleteForm(where: FormBoolExp!): FormMutationResponse
  deleteFormByPk(id: bigint!): Form
  deleteFormSubmission(where: FormSubmissionBoolExp!): FormSubmissionMutationResponse
  deleteFormSubmissionAttachments(where: FormSubmissionAttachmentsBoolExp!): FormSubmissionAttachmentsMutationResponse
  deleteFormSubmissionAttachmentsByPk(fileUploadId: bigint!, formSubmissionId: bigint!): FormSubmissionAttachments
  deleteFormSubmissionByPk(id: bigint!): FormSubmission
  deleteGrant(where: GrantBoolExp!): GrantMutationResponse
  deleteGrantAllocate(where: GrantAllocateBoolExp!): GrantAllocateMutationResponse
  deleteGrantAllocateAttachments(where: GrantAllocateAttachmentsBoolExp!): GrantAllocateAttachmentsMutationResponse
  deleteGrantAllocateAttachmentsByPk(fileUploadId: bigint!, grantAllocateId: bigint!): GrantAllocateAttachments
  deleteGrantAllocateByPk(id: bigint!): GrantAllocate
  deleteGrantAttachments(where: GrantAttachmentsBoolExp!): GrantAttachmentsMutationResponse
  deleteGrantAttachmentsByPk(fileUploadId: bigint!, grantId: bigint!): GrantAttachments
  deleteGrantByPk(id: bigint!): Grant
  deleteIndividual(where: IndividualBoolExp!): IndividualMutationResponse
  deleteIndividualByPk(id: bigint!): Individual
  deleteIssue(where: IssueBoolExp!): IssueMutationResponse
  deleteIssueByPk(id: bigint!): Issue
  deleteIssueContributors(where: IssueContributorsBoolExp!): IssueContributorsMutationResponse
  deleteIssueContributorsByPk(individualId: bigint!, issueId: bigint!): IssueContributors
  deleteIssueTags(where: IssueTagsBoolExp!): IssueTagsMutationResponse
  deleteIssueTagsByPk(issueId: bigint!, tagId: bigint!): IssueTags
  deleteLegalUnit(where: LegalUnitBoolExp!): LegalUnitMutationResponse
  deleteLegalUnitByPk(id: bigint!): LegalUnit
  deleteLegalUnitLocation(where: LegalUnitLocationBoolExp!): LegalUnitLocationMutationResponse
  deleteLegalUnitLocationByPk(id: bigint!): LegalUnitLocation
  deleteLocation(where: LocationBoolExp!): LocationMutationResponse
  deleteLocationByPk(id: bigint!): Location
  deleteLocationImages(where: LocationImagesBoolExp!): LocationImagesMutationResponse
  deleteLocationImagesByPk(fileUploadId: bigint!, locationId: bigint!): LocationImages
  deleteMission(where: MissionBoolExp!): MissionMutationResponse
  deleteMissionByPk(id: bigint!): Mission
  deleteMissionJoin(where: MissionJoinBoolExp!): MissionJoinMutationResponse
  deleteMissionJoinByPk(id: bigint!): MissionJoin
  deletePole(where: PoleBoolExp!): PoleMutationResponse
  deletePoleByPk(id: bigint!): Pole
  deleteProject(where: ProjectBoolExp!): ProjectMutationResponse
  deleteProjectByPk(id: bigint!): Project
  deleteProjectSupervisors(where: ProjectSupervisorsBoolExp!): ProjectSupervisorsMutationResponse
  deleteProjectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  deleteProjectTags(where: ProjectTagsBoolExp!): ProjectTagsMutationResponse
  deleteProjectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags
  deleteReaction(where: ReactionBoolExp!): ReactionMutationResponse
  deleteReactionByPk(id: bigint!): Reaction
  deleteReport(where: ReportBoolExp!): ReportMutationResponse
  deleteReportByPk(id: bigint!): Report
  deleteRole(where: RoleBoolExp!): RoleMutationResponse
  deleteRoleByPk(id: bigint!): Role
  deleteSession(where: SessionBoolExp!): SessionMutationResponse
  deleteSessionByPk(id: bigint!): Session
  deleteShortcut(where: ShortcutBoolExp!): ShortcutMutationResponse
  deleteShortcutByPk(id: bigint!): Shortcut
  deleteSocial(where: SocialBoolExp!): SocialMutationResponse
  deleteSocialByPk(id: bigint!): Social
  deleteSubject(where: SubjectBoolExp!): SubjectMutationResponse
  deleteSubjectByPk(id: bigint!): Subject
  deleteSubjectClassGroups(where: SubjectClassGroupsBoolExp!): SubjectClassGroupsMutationResponse
  deleteSubjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups
  deleteTag(where: TagBoolExp!): TagMutationResponse
  deleteTagByPk(id: bigint!): Tag
  deleteTeam(where: TeamBoolExp!): TeamMutationResponse
  deleteTeamByPk(id: bigint!): Team
  deleteTeamHistory(where: TeamHistoryBoolExp!): TeamHistoryMutationResponse
  deleteTeamHistoryByPk(id: bigint!): TeamHistory
  deleteTeamJoin(where: TeamJoinBoolExp!): TeamJoinMutationResponse
  deleteTeamJoinByPk(id: bigint!): TeamJoin
  deleteTeamMember(where: TeamMemberBoolExp!): TeamMemberMutationResponse
  deleteTeamMemberByPk(id: bigint!): TeamMember
  deleteTeamMemberRoles(where: TeamMemberRolesBoolExp!): TeamMemberRolesMutationResponse
  deleteTeamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles
  deleteTeamMetric(where: TeamMetricBoolExp!): TeamMetricMutationResponse
  deleteTeamMetricByPk(id: bigint!): TeamMetric
  deleteTenant(where: TenantBoolExp!): TenantMutationResponse
  deleteTenantByPk(id: bigint!): Tenant
  deleteTenantOrganize(where: TenantOrganizeBoolExp!): TenantOrganizeMutationResponse
  deleteTenantOrganizeByPk(id: bigint!): TenantOrganize
  deleteThread(where: ThreadBoolExp!): ThreadMutationResponse
  deleteThreadByPk(id: bigint!): Thread
  deleteThreadContributors(where: ThreadContributorsBoolExp!): ThreadContributorsMutationResponse
  deleteThreadContributorsByPk(individualId: bigint!, threadId: bigint!): ThreadContributors
  deleteThreadTags(where: ThreadTagsBoolExp!): ThreadTagsMutationResponse
  deleteThreadTagsByPk(tagId: bigint!, threadId: bigint!): ThreadTags
  deleteUser(where: UserBoolExp!): UserMutationResponse
  deleteUserByPk(id: bigint!): User
  deleteValidation(where: ValidationBoolExp!): ValidationMutationResponse
  deleteValidationByPk(id: bigint!): Validation
  deleteView(where: ViewBoolExp!): ViewMutationResponse
  deleteViewByPk(id: bigint!): View
  deleteVote(where: VoteBoolExp!): VoteMutationResponse
  deleteVoteByPk(id: bigint!): Vote
  insertAccount(objects: [AccountInsertInput!]!, onConflict: AccountOnConflict): AccountMutationResponse
  insertAccountOne(object: AccountInsertInput!, onConflict: AccountOnConflict): Account
  insertAction(objects: [ActionInsertInput!]!, onConflict: ActionOnConflict): ActionMutationResponse
  insertActionOne(object: ActionInsertInput!, onConflict: ActionOnConflict): Action
  insertActor(objects: [ActorInsertInput!]!, onConflict: ActorOnConflict): ActorMutationResponse
  insertActorImage(objects: [ActorImageInsertInput!]!, onConflict: ActorImageOnConflict): ActorImageMutationResponse
  insertActorImageOne(object: ActorImageInsertInput!, onConflict: ActorImageOnConflict): ActorImage
  insertActorOne(object: ActorInsertInput!, onConflict: ActorOnConflict): Actor
  insertActorTags(objects: [ActorTagsInsertInput!]!, onConflict: ActorTagsOnConflict): ActorTagsMutationResponse
  insertActorTagsOne(object: ActorTagsInsertInput!, onConflict: ActorTagsOnConflict): ActorTags
  insertAddress(objects: [AddressInsertInput!]!, onConflict: AddressOnConflict): AddressMutationResponse
  insertAddressOne(object: AddressInsertInput!, onConflict: AddressOnConflict): Address
  insertBank(objects: [BankInsertInput!]!, onConflict: BankOnConflict): BankMutationResponse
  insertBankOne(object: BankInsertInput!, onConflict: BankOnConflict): Bank
  insertBot(objects: [BotInsertInput!]!, onConflict: BotOnConflict): BotMutationResponse
  insertBotOne(object: BotInsertInput!, onConflict: BotOnConflict): Bot
  insertCampus(objects: [CampusInsertInput!]!, onConflict: CampusOnConflict): CampusMutationResponse
  insertCampusCluster(objects: [CampusClusterInsertInput!]!, onConflict: CampusClusterOnConflict): CampusClusterMutationResponse
  insertCampusClusterOne(object: CampusClusterInsertInput!, onConflict: CampusClusterOnConflict): CampusCluster
  insertCampusOne(object: CampusInsertInput!, onConflict: CampusOnConflict): Campus
  insertCanteen(objects: [CanteenInsertInput!]!, onConflict: CanteenOnConflict): CanteenMutationResponse
  insertCanteenFood(objects: [CanteenFoodInsertInput!]!, onConflict: CanteenFoodOnConflict): CanteenFoodMutationResponse
  insertCanteenFoodOne(object: CanteenFoodInsertInput!, onConflict: CanteenFoodOnConflict): CanteenFood
  insertCanteenMenu(objects: [CanteenMenuInsertInput!]!, onConflict: CanteenMenuOnConflict): CanteenMenuMutationResponse
  insertCanteenMenuOne(object: CanteenMenuInsertInput!, onConflict: CanteenMenuOnConflict): CanteenMenu
  insertCanteenOne(object: CanteenInsertInput!, onConflict: CanteenOnConflict): Canteen
  insertClassGroup(objects: [ClassGroupInsertInput!]!, onConflict: ClassGroupOnConflict): ClassGroupMutationResponse
  insertClassGroupOne(object: ClassGroupInsertInput!, onConflict: ClassGroupOnConflict): ClassGroup
  insertClassGroupTeacher(objects: [ClassGroupTeacherInsertInput!]!, onConflict: ClassGroupTeacherOnConflict): ClassGroupTeacherMutationResponse
  insertClassGroupTeacherOne(object: ClassGroupTeacherInsertInput!, onConflict: ClassGroupTeacherOnConflict): ClassGroupTeacher
  insertClassGroupTeacherSubjects(objects: [ClassGroupTeacherSubjectsInsertInput!]!, onConflict: ClassGroupTeacherSubjectsOnConflict): ClassGroupTeacherSubjectsMutationResponse
  insertClassGroupTeacherSubjectsOne(object: ClassGroupTeacherSubjectsInsertInput!, onConflict: ClassGroupTeacherSubjectsOnConflict): ClassGroupTeacherSubjects
  insertCohort(objects: [CohortInsertInput!]!, onConflict: CohortOnConflict): CohortMutationResponse
  insertCohortOne(object: CohortInsertInput!, onConflict: CohortOnConflict): Cohort
  insertContent(objects: [ContentInsertInput!]!, onConflict: ContentOnConflict): ContentMutationResponse
  insertContentAttachments(objects: [ContentAttachmentsInsertInput!]!, onConflict: ContentAttachmentsOnConflict): ContentAttachmentsMutationResponse
  insertContentAttachmentsOne(object: ContentAttachmentsInsertInput!, onConflict: ContentAttachmentsOnConflict): ContentAttachments
  insertContentOne(object: ContentInsertInput!, onConflict: ContentOnConflict): Content
  insertDocument(objects: [DocumentInsertInput!]!, onConflict: DocumentOnConflict): DocumentMutationResponse
  insertDocumentOne(object: DocumentInsertInput!, onConflict: DocumentOnConflict): Document
  insertEvent(objects: [EventInsertInput!]!, onConflict: EventOnConflict): EventMutationResponse
  insertEventApproval(objects: [EventApprovalInsertInput!]!, onConflict: EventApprovalOnConflict): EventApprovalMutationResponse
  insertEventApprovalOne(object: EventApprovalInsertInput!, onConflict: EventApprovalOnConflict): EventApproval
  insertEventApprovalStep(objects: [EventApprovalStepInsertInput!]!, onConflict: EventApprovalStepOnConflict): EventApprovalStepMutationResponse
  insertEventApprovalStepNotifiees(objects: [EventApprovalStepNotifieesInsertInput!]!, onConflict: EventApprovalStepNotifieesOnConflict): EventApprovalStepNotifieesMutationResponse
  insertEventApprovalStepNotifieesOne(object: EventApprovalStepNotifieesInsertInput!, onConflict: EventApprovalStepNotifieesOnConflict): EventApprovalStepNotifiees
  insertEventApprovalStepOne(object: EventApprovalStepInsertInput!, onConflict: EventApprovalStepOnConflict): EventApprovalStep
  insertEventApprovalStepValidators(objects: [EventApprovalStepValidatorsInsertInput!]!, onConflict: EventApprovalStepValidatorsOnConflict): EventApprovalStepValidatorsMutationResponse
  insertEventApprovalStepValidatorsOne(object: EventApprovalStepValidatorsInsertInput!, onConflict: EventApprovalStepValidatorsOnConflict): EventApprovalStepValidators
  insertEventFavorite(objects: [EventFavoriteInsertInput!]!, onConflict: EventFavoriteOnConflict): EventFavoriteMutationResponse
  insertEventFavoriteOne(object: EventFavoriteInsertInput!, onConflict: EventFavoriteOnConflict): EventFavorite
  insertEventJoin(objects: [EventJoinInsertInput!]!, onConflict: EventJoinOnConflict): EventJoinMutationResponse
  insertEventJoinOne(object: EventJoinInsertInput!, onConflict: EventJoinOnConflict): EventJoin
  insertEventOne(object: EventInsertInput!, onConflict: EventOnConflict): Event
  insertEventOrganize(objects: [EventOrganizeInsertInput!]!, onConflict: EventOrganizeOnConflict): EventOrganizeMutationResponse
  insertEventOrganizeOne(object: EventOrganizeInsertInput!, onConflict: EventOrganizeOnConflict): EventOrganize
  insertEventSupervisor(objects: [EventSupervisorInsertInput!]!, onConflict: EventSupervisorOnConflict): EventSupervisorMutationResponse
  insertEventSupervisorOne(object: EventSupervisorInsertInput!, onConflict: EventSupervisorOnConflict): EventSupervisor
  insertEventTags(objects: [EventTagsInsertInput!]!, onConflict: EventTagsOnConflict): EventTagsMutationResponse
  insertEventTagsOne(object: EventTagsInsertInput!, onConflict: EventTagsOnConflict): EventTags
  insertExpense(objects: [ExpenseInsertInput!]!, onConflict: ExpenseOnConflict): ExpenseMutationResponse
  insertExpenseItem(objects: [ExpenseItemInsertInput!]!, onConflict: ExpenseItemOnConflict): ExpenseItemMutationResponse
  insertExpenseItemAttachments(objects: [ExpenseItemAttachmentsInsertInput!]!, onConflict: ExpenseItemAttachmentsOnConflict): ExpenseItemAttachmentsMutationResponse
  insertExpenseItemAttachmentsOne(object: ExpenseItemAttachmentsInsertInput!, onConflict: ExpenseItemAttachmentsOnConflict): ExpenseItemAttachments
  insertExpenseItemOne(object: ExpenseItemInsertInput!, onConflict: ExpenseItemOnConflict): ExpenseItem
  insertExpenseOne(object: ExpenseInsertInput!, onConflict: ExpenseOnConflict): Expense
  insertFavorite(objects: [FavoriteInsertInput!]!, onConflict: FavoriteOnConflict): FavoriteMutationResponse
  insertFavoriteOne(object: FavoriteInsertInput!, onConflict: FavoriteOnConflict): Favorite
  insertFileUpload(objects: [FileUploadInsertInput!]!, onConflict: FileUploadOnConflict): FileUploadMutationResponse
  insertFileUploadOne(object: FileUploadInsertInput!, onConflict: FileUploadOnConflict): FileUpload
  insertFinance(objects: [FinanceInsertInput!]!, onConflict: FinanceOnConflict): FinanceMutationResponse
  insertFinanceAttachments(objects: [FinanceAttachmentsInsertInput!]!, onConflict: FinanceAttachmentsOnConflict): FinanceAttachmentsMutationResponse
  insertFinanceAttachmentsOne(object: FinanceAttachmentsInsertInput!, onConflict: FinanceAttachmentsOnConflict): FinanceAttachments
  insertFinanceOne(object: FinanceInsertInput!, onConflict: FinanceOnConflict): Finance
  insertFinanceTags(objects: [FinanceTagsInsertInput!]!, onConflict: FinanceTagsOnConflict): FinanceTagsMutationResponse
  insertFinanceTagsOne(object: FinanceTagsInsertInput!, onConflict: FinanceTagsOnConflict): FinanceTags
  insertFollow(objects: [FollowInsertInput!]!, onConflict: FollowOnConflict): FollowMutationResponse
  insertFollowOne(object: FollowInsertInput!, onConflict: FollowOnConflict): Follow
  insertForm(objects: [FormInsertInput!]!, onConflict: FormOnConflict): FormMutationResponse
  insertFormOne(object: FormInsertInput!, onConflict: FormOnConflict): Form
  insertFormSubmission(objects: [FormSubmissionInsertInput!]!, onConflict: FormSubmissionOnConflict): FormSubmissionMutationResponse
  insertFormSubmissionAttachments(objects: [FormSubmissionAttachmentsInsertInput!]!, onConflict: FormSubmissionAttachmentsOnConflict): FormSubmissionAttachmentsMutationResponse
  insertFormSubmissionAttachmentsOne(object: FormSubmissionAttachmentsInsertInput!, onConflict: FormSubmissionAttachmentsOnConflict): FormSubmissionAttachments
  insertFormSubmissionOne(object: FormSubmissionInsertInput!, onConflict: FormSubmissionOnConflict): FormSubmission
  insertGrant(objects: [GrantInsertInput!]!, onConflict: GrantOnConflict): GrantMutationResponse
  insertGrantAllocate(objects: [GrantAllocateInsertInput!]!, onConflict: GrantAllocateOnConflict): GrantAllocateMutationResponse
  insertGrantAllocateAttachments(objects: [GrantAllocateAttachmentsInsertInput!]!, onConflict: GrantAllocateAttachmentsOnConflict): GrantAllocateAttachmentsMutationResponse
  insertGrantAllocateAttachmentsOne(object: GrantAllocateAttachmentsInsertInput!, onConflict: GrantAllocateAttachmentsOnConflict): GrantAllocateAttachments
  insertGrantAllocateOne(object: GrantAllocateInsertInput!, onConflict: GrantAllocateOnConflict): GrantAllocate
  insertGrantAttachments(objects: [GrantAttachmentsInsertInput!]!, onConflict: GrantAttachmentsOnConflict): GrantAttachmentsMutationResponse
  insertGrantAttachmentsOne(object: GrantAttachmentsInsertInput!, onConflict: GrantAttachmentsOnConflict): GrantAttachments
  insertGrantOne(object: GrantInsertInput!, onConflict: GrantOnConflict): Grant
  insertIndividual(objects: [IndividualInsertInput!]!, onConflict: IndividualOnConflict): IndividualMutationResponse
  insertIndividualOne(object: IndividualInsertInput!, onConflict: IndividualOnConflict): Individual
  insertIssue(objects: [IssueInsertInput!]!, onConflict: IssueOnConflict): IssueMutationResponse
  insertIssueContributors(objects: [IssueContributorsInsertInput!]!, onConflict: IssueContributorsOnConflict): IssueContributorsMutationResponse
  insertIssueContributorsOne(object: IssueContributorsInsertInput!, onConflict: IssueContributorsOnConflict): IssueContributors
  insertIssueOne(object: IssueInsertInput!, onConflict: IssueOnConflict): Issue
  insertIssueTags(objects: [IssueTagsInsertInput!]!, onConflict: IssueTagsOnConflict): IssueTagsMutationResponse
  insertIssueTagsOne(object: IssueTagsInsertInput!, onConflict: IssueTagsOnConflict): IssueTags
  insertLegalUnit(objects: [LegalUnitInsertInput!]!, onConflict: LegalUnitOnConflict): LegalUnitMutationResponse
  insertLegalUnitLocation(objects: [LegalUnitLocationInsertInput!]!, onConflict: LegalUnitLocationOnConflict): LegalUnitLocationMutationResponse
  insertLegalUnitLocationOne(object: LegalUnitLocationInsertInput!, onConflict: LegalUnitLocationOnConflict): LegalUnitLocation
  insertLegalUnitOne(object: LegalUnitInsertInput!, onConflict: LegalUnitOnConflict): LegalUnit
  insertLocation(objects: [LocationInsertInput!]!, onConflict: LocationOnConflict): LocationMutationResponse
  insertLocationImages(objects: [LocationImagesInsertInput!]!, onConflict: LocationImagesOnConflict): LocationImagesMutationResponse
  insertLocationImagesOne(object: LocationImagesInsertInput!, onConflict: LocationImagesOnConflict): LocationImages
  insertLocationOne(object: LocationInsertInput!, onConflict: LocationOnConflict): Location
  insertMission(objects: [MissionInsertInput!]!, onConflict: MissionOnConflict): MissionMutationResponse
  insertMissionJoin(objects: [MissionJoinInsertInput!]!, onConflict: MissionJoinOnConflict): MissionJoinMutationResponse
  insertMissionJoinOne(object: MissionJoinInsertInput!, onConflict: MissionJoinOnConflict): MissionJoin
  insertMissionOne(object: MissionInsertInput!, onConflict: MissionOnConflict): Mission
  insertPole(objects: [PoleInsertInput!]!, onConflict: PoleOnConflict): PoleMutationResponse
  insertPoleOne(object: PoleInsertInput!, onConflict: PoleOnConflict): Pole
  insertProject(objects: [ProjectInsertInput!]!, onConflict: ProjectOnConflict): ProjectMutationResponse
  insertProjectOne(object: ProjectInsertInput!, onConflict: ProjectOnConflict): Project
  insertProjectSupervisors(objects: [ProjectSupervisorsInsertInput!]!, onConflict: ProjectSupervisorsOnConflict): ProjectSupervisorsMutationResponse
  insertProjectSupervisorsOne(object: ProjectSupervisorsInsertInput!, onConflict: ProjectSupervisorsOnConflict): ProjectSupervisors
  insertProjectTags(objects: [ProjectTagsInsertInput!]!, onConflict: ProjectTagsOnConflict): ProjectTagsMutationResponse
  insertProjectTagsOne(object: ProjectTagsInsertInput!, onConflict: ProjectTagsOnConflict): ProjectTags
  insertReaction(objects: [ReactionInsertInput!]!, onConflict: ReactionOnConflict): ReactionMutationResponse
  insertReactionOne(object: ReactionInsertInput!, onConflict: ReactionOnConflict): Reaction
  insertReport(objects: [ReportInsertInput!]!, onConflict: ReportOnConflict): ReportMutationResponse
  insertReportOne(object: ReportInsertInput!, onConflict: ReportOnConflict): Report
  insertRole(objects: [RoleInsertInput!]!, onConflict: RoleOnConflict): RoleMutationResponse
  insertRoleOne(object: RoleInsertInput!, onConflict: RoleOnConflict): Role
  insertSession(objects: [SessionInsertInput!]!, onConflict: SessionOnConflict): SessionMutationResponse
  insertSessionOne(object: SessionInsertInput!, onConflict: SessionOnConflict): Session
  insertShortcut(objects: [ShortcutInsertInput!]!, onConflict: ShortcutOnConflict): ShortcutMutationResponse
  insertShortcutOne(object: ShortcutInsertInput!, onConflict: ShortcutOnConflict): Shortcut
  insertSocial(objects: [SocialInsertInput!]!, onConflict: SocialOnConflict): SocialMutationResponse
  insertSocialOne(object: SocialInsertInput!, onConflict: SocialOnConflict): Social
  insertSubject(objects: [SubjectInsertInput!]!, onConflict: SubjectOnConflict): SubjectMutationResponse
  insertSubjectClassGroups(objects: [SubjectClassGroupsInsertInput!]!, onConflict: SubjectClassGroupsOnConflict): SubjectClassGroupsMutationResponse
  insertSubjectClassGroupsOne(object: SubjectClassGroupsInsertInput!, onConflict: SubjectClassGroupsOnConflict): SubjectClassGroups
  insertSubjectOne(object: SubjectInsertInput!, onConflict: SubjectOnConflict): Subject
  insertTag(objects: [TagInsertInput!]!, onConflict: TagOnConflict): TagMutationResponse
  insertTagOne(object: TagInsertInput!, onConflict: TagOnConflict): Tag
  insertTeam(objects: [TeamInsertInput!]!, onConflict: TeamOnConflict): TeamMutationResponse
  insertTeamHistory(objects: [TeamHistoryInsertInput!]!, onConflict: TeamHistoryOnConflict): TeamHistoryMutationResponse
  insertTeamHistoryOne(object: TeamHistoryInsertInput!, onConflict: TeamHistoryOnConflict): TeamHistory
  insertTeamJoin(objects: [TeamJoinInsertInput!]!, onConflict: TeamJoinOnConflict): TeamJoinMutationResponse
  insertTeamJoinOne(object: TeamJoinInsertInput!, onConflict: TeamJoinOnConflict): TeamJoin
  insertTeamMember(objects: [TeamMemberInsertInput!]!, onConflict: TeamMemberOnConflict): TeamMemberMutationResponse
  insertTeamMemberOne(object: TeamMemberInsertInput!, onConflict: TeamMemberOnConflict): TeamMember
  insertTeamMemberRoles(objects: [TeamMemberRolesInsertInput!]!, onConflict: TeamMemberRolesOnConflict): TeamMemberRolesMutationResponse
  insertTeamMemberRolesOne(object: TeamMemberRolesInsertInput!, onConflict: TeamMemberRolesOnConflict): TeamMemberRoles
  insertTeamMetric(objects: [TeamMetricInsertInput!]!, onConflict: TeamMetricOnConflict): TeamMetricMutationResponse
  insertTeamMetricOne(object: TeamMetricInsertInput!, onConflict: TeamMetricOnConflict): TeamMetric
  insertTeamOne(object: TeamInsertInput!, onConflict: TeamOnConflict): Team
  insertTenant(objects: [TenantInsertInput!]!, onConflict: TenantOnConflict): TenantMutationResponse
  insertTenantOne(object: TenantInsertInput!, onConflict: TenantOnConflict): Tenant
  insertTenantOrganize(objects: [TenantOrganizeInsertInput!]!, onConflict: TenantOrganizeOnConflict): TenantOrganizeMutationResponse
  insertTenantOrganizeOne(object: TenantOrganizeInsertInput!, onConflict: TenantOrganizeOnConflict): TenantOrganize
  insertThread(objects: [ThreadInsertInput!]!, onConflict: ThreadOnConflict): ThreadMutationResponse
  insertThreadContributors(objects: [ThreadContributorsInsertInput!]!, onConflict: ThreadContributorsOnConflict): ThreadContributorsMutationResponse
  insertThreadContributorsOne(object: ThreadContributorsInsertInput!, onConflict: ThreadContributorsOnConflict): ThreadContributors
  insertThreadOne(object: ThreadInsertInput!, onConflict: ThreadOnConflict): Thread
  insertThreadTags(objects: [ThreadTagsInsertInput!]!, onConflict: ThreadTagsOnConflict): ThreadTagsMutationResponse
  insertThreadTagsOne(object: ThreadTagsInsertInput!, onConflict: ThreadTagsOnConflict): ThreadTags
  insertUser(objects: [UserInsertInput!]!, onConflict: UserOnConflict): UserMutationResponse
  insertUserOne(object: UserInsertInput!, onConflict: UserOnConflict): User
  insertValidation(objects: [ValidationInsertInput!]!, onConflict: ValidationOnConflict): ValidationMutationResponse
  insertValidationOne(object: ValidationInsertInput!, onConflict: ValidationOnConflict): Validation
  insertView(objects: [ViewInsertInput!]!, onConflict: ViewOnConflict): ViewMutationResponse
  insertViewOne(object: ViewInsertInput!, onConflict: ViewOnConflict): View
  insertVote(objects: [VoteInsertInput!]!, onConflict: VoteOnConflict): VoteMutationResponse
  insertVoteOne(object: VoteInsertInput!, onConflict: VoteOnConflict): Vote
  updateAccount(_inc: AccountIncInput, _set: AccountSetInput, where: AccountBoolExp!): AccountMutationResponse
  updateAccountByPk(_inc: AccountIncInput, _set: AccountSetInput, pkColumns: AccountPkColumnsInput!): Account
  updateAccountMany(updates: [AccountUpdates!]!): [AccountMutationResponse]
  updateAction(_inc: ActionIncInput, _set: ActionSetInput, where: ActionBoolExp!): ActionMutationResponse
  updateActionByPk(_inc: ActionIncInput, _set: ActionSetInput, pkColumns: ActionPkColumnsInput!): Action
  updateActionMany(updates: [ActionUpdates!]!): [ActionMutationResponse]
  updateActor(_inc: ActorIncInput, _set: ActorSetInput, where: ActorBoolExp!): ActorMutationResponse
  updateActorByPk(_inc: ActorIncInput, _set: ActorSetInput, pkColumns: ActorPkColumnsInput!): Actor
  updateActorImage(_inc: ActorImageIncInput, _set: ActorImageSetInput, where: ActorImageBoolExp!): ActorImageMutationResponse
  updateActorImageByPk(_inc: ActorImageIncInput, _set: ActorImageSetInput, pkColumns: ActorImagePkColumnsInput!): ActorImage
  updateActorImageMany(updates: [ActorImageUpdates!]!): [ActorImageMutationResponse]
  updateActorMany(updates: [ActorUpdates!]!): [ActorMutationResponse]
  updateActorTags(_inc: ActorTagsIncInput, _set: ActorTagsSetInput, where: ActorTagsBoolExp!): ActorTagsMutationResponse
  updateActorTagsByPk(_inc: ActorTagsIncInput, _set: ActorTagsSetInput, pkColumns: ActorTagsPkColumnsInput!): ActorTags
  updateActorTagsMany(updates: [ActorTagsUpdates!]!): [ActorTagsMutationResponse]
  updateAddress(_inc: AddressIncInput, _set: AddressSetInput, where: AddressBoolExp!): AddressMutationResponse
  updateAddressByPk(_inc: AddressIncInput, _set: AddressSetInput, pkColumns: AddressPkColumnsInput!): Address
  updateAddressMany(updates: [AddressUpdates!]!): [AddressMutationResponse]
  updateBank(_inc: BankIncInput, _set: BankSetInput, where: BankBoolExp!): BankMutationResponse
  updateBankByPk(_inc: BankIncInput, _set: BankSetInput, pkColumns: BankPkColumnsInput!): Bank
  updateBankMany(updates: [BankUpdates!]!): [BankMutationResponse]
  updateBot(_inc: BotIncInput, _set: BotSetInput, where: BotBoolExp!): BotMutationResponse
  updateBotByPk(_inc: BotIncInput, _set: BotSetInput, pkColumns: BotPkColumnsInput!): Bot
  updateBotMany(updates: [BotUpdates!]!): [BotMutationResponse]
  updateCampus(_inc: CampusIncInput, _set: CampusSetInput, where: CampusBoolExp!): CampusMutationResponse
  updateCampusByPk(_inc: CampusIncInput, _set: CampusSetInput, pkColumns: CampusPkColumnsInput!): Campus
  updateCampusCluster(_inc: CampusClusterIncInput, _set: CampusClusterSetInput, where: CampusClusterBoolExp!): CampusClusterMutationResponse
  updateCampusClusterByPk(_inc: CampusClusterIncInput, _set: CampusClusterSetInput, pkColumns: CampusClusterPkColumnsInput!): CampusCluster
  updateCampusClusterMany(updates: [CampusClusterUpdates!]!): [CampusClusterMutationResponse]
  updateCampusMany(updates: [CampusUpdates!]!): [CampusMutationResponse]
  updateCanteen(_inc: CanteenIncInput, _set: CanteenSetInput, where: CanteenBoolExp!): CanteenMutationResponse
  updateCanteenByPk(_inc: CanteenIncInput, _set: CanteenSetInput, pkColumns: CanteenPkColumnsInput!): Canteen
  updateCanteenFood(_inc: CanteenFoodIncInput, _set: CanteenFoodSetInput, where: CanteenFoodBoolExp!): CanteenFoodMutationResponse
  updateCanteenFoodByPk(_inc: CanteenFoodIncInput, _set: CanteenFoodSetInput, pkColumns: CanteenFoodPkColumnsInput!): CanteenFood
  updateCanteenFoodMany(updates: [CanteenFoodUpdates!]!): [CanteenFoodMutationResponse]
  updateCanteenMany(updates: [CanteenUpdates!]!): [CanteenMutationResponse]
  updateCanteenMenu(_inc: CanteenMenuIncInput, _set: CanteenMenuSetInput, where: CanteenMenuBoolExp!): CanteenMenuMutationResponse
  updateCanteenMenuByPk(_inc: CanteenMenuIncInput, _set: CanteenMenuSetInput, pkColumns: CanteenMenuPkColumnsInput!): CanteenMenu
  updateCanteenMenuMany(updates: [CanteenMenuUpdates!]!): [CanteenMenuMutationResponse]
  updateClassGroup(_inc: ClassGroupIncInput, _set: ClassGroupSetInput, where: ClassGroupBoolExp!): ClassGroupMutationResponse
  updateClassGroupByPk(_inc: ClassGroupIncInput, _set: ClassGroupSetInput, pkColumns: ClassGroupPkColumnsInput!): ClassGroup
  updateClassGroupMany(updates: [ClassGroupUpdates!]!): [ClassGroupMutationResponse]
  updateClassGroupTeacher(_inc: ClassGroupTeacherIncInput, _set: ClassGroupTeacherSetInput, where: ClassGroupTeacherBoolExp!): ClassGroupTeacherMutationResponse
  updateClassGroupTeacherByPk(_inc: ClassGroupTeacherIncInput, _set: ClassGroupTeacherSetInput, pkColumns: ClassGroupTeacherPkColumnsInput!): ClassGroupTeacher
  updateClassGroupTeacherMany(updates: [ClassGroupTeacherUpdates!]!): [ClassGroupTeacherMutationResponse]
  updateClassGroupTeacherSubjects(_inc: ClassGroupTeacherSubjectsIncInput, _set: ClassGroupTeacherSubjectsSetInput, where: ClassGroupTeacherSubjectsBoolExp!): ClassGroupTeacherSubjectsMutationResponse
  updateClassGroupTeacherSubjectsByPk(_inc: ClassGroupTeacherSubjectsIncInput, _set: ClassGroupTeacherSubjectsSetInput, pkColumns: ClassGroupTeacherSubjectsPkColumnsInput!): ClassGroupTeacherSubjects
  updateClassGroupTeacherSubjectsMany(updates: [ClassGroupTeacherSubjectsUpdates!]!): [ClassGroupTeacherSubjectsMutationResponse]
  updateCohort(_inc: CohortIncInput, _set: CohortSetInput, where: CohortBoolExp!): CohortMutationResponse
  updateCohortByPk(_inc: CohortIncInput, _set: CohortSetInput, pkColumns: CohortPkColumnsInput!): Cohort
  updateCohortMany(updates: [CohortUpdates!]!): [CohortMutationResponse]
  updateContent(_inc: ContentIncInput, _set: ContentSetInput, where: ContentBoolExp!): ContentMutationResponse
  updateContentAttachments(_inc: ContentAttachmentsIncInput, _set: ContentAttachmentsSetInput, where: ContentAttachmentsBoolExp!): ContentAttachmentsMutationResponse
  updateContentAttachmentsByPk(_inc: ContentAttachmentsIncInput, _set: ContentAttachmentsSetInput, pkColumns: ContentAttachmentsPkColumnsInput!): ContentAttachments
  updateContentAttachmentsMany(updates: [ContentAttachmentsUpdates!]!): [ContentAttachmentsMutationResponse]
  updateContentByPk(_inc: ContentIncInput, _set: ContentSetInput, pkColumns: ContentPkColumnsInput!): Content
  updateContentMany(updates: [ContentUpdates!]!): [ContentMutationResponse]
  updateDocument(_inc: DocumentIncInput, _set: DocumentSetInput, where: DocumentBoolExp!): DocumentMutationResponse
  updateDocumentByPk(_inc: DocumentIncInput, _set: DocumentSetInput, pkColumns: DocumentPkColumnsInput!): Document
  updateDocumentMany(updates: [DocumentUpdates!]!): [DocumentMutationResponse]
  updateEvent(_append: EventAppendInput, _deleteAtPath: EventDeleteAtPathInput, _deleteElem: EventDeleteElemInput, _deleteKey: EventDeleteKeyInput, _inc: EventIncInput, _prepend: EventPrependInput, _set: EventSetInput, where: EventBoolExp!): EventMutationResponse
  updateEventApproval(_inc: EventApprovalIncInput, _set: EventApprovalSetInput, where: EventApprovalBoolExp!): EventApprovalMutationResponse
  updateEventApprovalByPk(_inc: EventApprovalIncInput, _set: EventApprovalSetInput, pkColumns: EventApprovalPkColumnsInput!): EventApproval
  updateEventApprovalMany(updates: [EventApprovalUpdates!]!): [EventApprovalMutationResponse]
  updateEventApprovalStep(_inc: EventApprovalStepIncInput, _set: EventApprovalStepSetInput, where: EventApprovalStepBoolExp!): EventApprovalStepMutationResponse
  updateEventApprovalStepByPk(_inc: EventApprovalStepIncInput, _set: EventApprovalStepSetInput, pkColumns: EventApprovalStepPkColumnsInput!): EventApprovalStep
  updateEventApprovalStepMany(updates: [EventApprovalStepUpdates!]!): [EventApprovalStepMutationResponse]
  updateEventApprovalStepNotifiees(_inc: EventApprovalStepNotifieesIncInput, _set: EventApprovalStepNotifieesSetInput, where: EventApprovalStepNotifieesBoolExp!): EventApprovalStepNotifieesMutationResponse
  updateEventApprovalStepNotifieesByPk(_inc: EventApprovalStepNotifieesIncInput, _set: EventApprovalStepNotifieesSetInput, pkColumns: EventApprovalStepNotifieesPkColumnsInput!): EventApprovalStepNotifiees
  updateEventApprovalStepNotifieesMany(updates: [EventApprovalStepNotifieesUpdates!]!): [EventApprovalStepNotifieesMutationResponse]
  updateEventApprovalStepValidators(_inc: EventApprovalStepValidatorsIncInput, _set: EventApprovalStepValidatorsSetInput, where: EventApprovalStepValidatorsBoolExp!): EventApprovalStepValidatorsMutationResponse
  updateEventApprovalStepValidatorsByPk(_inc: EventApprovalStepValidatorsIncInput, _set: EventApprovalStepValidatorsSetInput, pkColumns: EventApprovalStepValidatorsPkColumnsInput!): EventApprovalStepValidators
  updateEventApprovalStepValidatorsMany(updates: [EventApprovalStepValidatorsUpdates!]!): [EventApprovalStepValidatorsMutationResponse]
  updateEventByPk(_append: EventAppendInput, _deleteAtPath: EventDeleteAtPathInput, _deleteElem: EventDeleteElemInput, _deleteKey: EventDeleteKeyInput, _inc: EventIncInput, _prepend: EventPrependInput, _set: EventSetInput, pkColumns: EventPkColumnsInput!): Event
  updateEventFavorite(_inc: EventFavoriteIncInput, _set: EventFavoriteSetInput, where: EventFavoriteBoolExp!): EventFavoriteMutationResponse
  updateEventFavoriteByPk(_inc: EventFavoriteIncInput, _set: EventFavoriteSetInput, pkColumns: EventFavoritePkColumnsInput!): EventFavorite
  updateEventFavoriteMany(updates: [EventFavoriteUpdates!]!): [EventFavoriteMutationResponse]
  updateEventJoin(_inc: EventJoinIncInput, _set: EventJoinSetInput, where: EventJoinBoolExp!): EventJoinMutationResponse
  updateEventJoinByPk(_inc: EventJoinIncInput, _set: EventJoinSetInput, pkColumns: EventJoinPkColumnsInput!): EventJoin
  updateEventJoinMany(updates: [EventJoinUpdates!]!): [EventJoinMutationResponse]
  updateEventMany(updates: [EventUpdates!]!): [EventMutationResponse]
  updateEventOrganize(_inc: EventOrganizeIncInput, _set: EventOrganizeSetInput, where: EventOrganizeBoolExp!): EventOrganizeMutationResponse
  updateEventOrganizeByPk(_inc: EventOrganizeIncInput, _set: EventOrganizeSetInput, pkColumns: EventOrganizePkColumnsInput!): EventOrganize
  updateEventOrganizeMany(updates: [EventOrganizeUpdates!]!): [EventOrganizeMutationResponse]
  updateEventSupervisor(_inc: EventSupervisorIncInput, _set: EventSupervisorSetInput, where: EventSupervisorBoolExp!): EventSupervisorMutationResponse
  updateEventSupervisorByPk(_inc: EventSupervisorIncInput, _set: EventSupervisorSetInput, pkColumns: EventSupervisorPkColumnsInput!): EventSupervisor
  updateEventSupervisorMany(updates: [EventSupervisorUpdates!]!): [EventSupervisorMutationResponse]
  updateEventTags(_inc: EventTagsIncInput, _set: EventTagsSetInput, where: EventTagsBoolExp!): EventTagsMutationResponse
  updateEventTagsByPk(_inc: EventTagsIncInput, _set: EventTagsSetInput, pkColumns: EventTagsPkColumnsInput!): EventTags
  updateEventTagsMany(updates: [EventTagsUpdates!]!): [EventTagsMutationResponse]
  updateExpense(_inc: ExpenseIncInput, _set: ExpenseSetInput, where: ExpenseBoolExp!): ExpenseMutationResponse
  updateExpenseByPk(_inc: ExpenseIncInput, _set: ExpenseSetInput, pkColumns: ExpensePkColumnsInput!): Expense
  updateExpenseItem(_inc: ExpenseItemIncInput, _set: ExpenseItemSetInput, where: ExpenseItemBoolExp!): ExpenseItemMutationResponse
  updateExpenseItemAttachments(_inc: ExpenseItemAttachmentsIncInput, _set: ExpenseItemAttachmentsSetInput, where: ExpenseItemAttachmentsBoolExp!): ExpenseItemAttachmentsMutationResponse
  updateExpenseItemAttachmentsByPk(_inc: ExpenseItemAttachmentsIncInput, _set: ExpenseItemAttachmentsSetInput, pkColumns: ExpenseItemAttachmentsPkColumnsInput!): ExpenseItemAttachments
  updateExpenseItemAttachmentsMany(updates: [ExpenseItemAttachmentsUpdates!]!): [ExpenseItemAttachmentsMutationResponse]
  updateExpenseItemByPk(_inc: ExpenseItemIncInput, _set: ExpenseItemSetInput, pkColumns: ExpenseItemPkColumnsInput!): ExpenseItem
  updateExpenseItemMany(updates: [ExpenseItemUpdates!]!): [ExpenseItemMutationResponse]
  updateExpenseMany(updates: [ExpenseUpdates!]!): [ExpenseMutationResponse]
  updateFavorite(_inc: FavoriteIncInput, _set: FavoriteSetInput, where: FavoriteBoolExp!): FavoriteMutationResponse
  updateFavoriteByPk(_inc: FavoriteIncInput, _set: FavoriteSetInput, pkColumns: FavoritePkColumnsInput!): Favorite
  updateFavoriteMany(updates: [FavoriteUpdates!]!): [FavoriteMutationResponse]
  updateFileUpload(_inc: FileUploadIncInput, _set: FileUploadSetInput, where: FileUploadBoolExp!): FileUploadMutationResponse
  updateFileUploadByPk(_inc: FileUploadIncInput, _set: FileUploadSetInput, pkColumns: FileUploadPkColumnsInput!): FileUpload
  updateFileUploadMany(updates: [FileUploadUpdates!]!): [FileUploadMutationResponse]
  updateFinance(_inc: FinanceIncInput, _set: FinanceSetInput, where: FinanceBoolExp!): FinanceMutationResponse
  updateFinanceAttachments(_inc: FinanceAttachmentsIncInput, _set: FinanceAttachmentsSetInput, where: FinanceAttachmentsBoolExp!): FinanceAttachmentsMutationResponse
  updateFinanceAttachmentsByPk(_inc: FinanceAttachmentsIncInput, _set: FinanceAttachmentsSetInput, pkColumns: FinanceAttachmentsPkColumnsInput!): FinanceAttachments
  updateFinanceAttachmentsMany(updates: [FinanceAttachmentsUpdates!]!): [FinanceAttachmentsMutationResponse]
  updateFinanceByPk(_inc: FinanceIncInput, _set: FinanceSetInput, pkColumns: FinancePkColumnsInput!): Finance
  updateFinanceMany(updates: [FinanceUpdates!]!): [FinanceMutationResponse]
  updateFinanceTags(_inc: FinanceTagsIncInput, _set: FinanceTagsSetInput, where: FinanceTagsBoolExp!): FinanceTagsMutationResponse
  updateFinanceTagsByPk(_inc: FinanceTagsIncInput, _set: FinanceTagsSetInput, pkColumns: FinanceTagsPkColumnsInput!): FinanceTags
  updateFinanceTagsMany(updates: [FinanceTagsUpdates!]!): [FinanceTagsMutationResponse]
  updateFollow(_inc: FollowIncInput, _set: FollowSetInput, where: FollowBoolExp!): FollowMutationResponse
  updateFollowByPk(_inc: FollowIncInput, _set: FollowSetInput, pkColumns: FollowPkColumnsInput!): Follow
  updateFollowMany(updates: [FollowUpdates!]!): [FollowMutationResponse]
  updateForm(_append: FormAppendInput, _deleteAtPath: FormDeleteAtPathInput, _deleteElem: FormDeleteElemInput, _deleteKey: FormDeleteKeyInput, _inc: FormIncInput, _prepend: FormPrependInput, _set: FormSetInput, where: FormBoolExp!): FormMutationResponse
  updateFormByPk(_append: FormAppendInput, _deleteAtPath: FormDeleteAtPathInput, _deleteElem: FormDeleteElemInput, _deleteKey: FormDeleteKeyInput, _inc: FormIncInput, _prepend: FormPrependInput, _set: FormSetInput, pkColumns: FormPkColumnsInput!): Form
  updateFormMany(updates: [FormUpdates!]!): [FormMutationResponse]
  updateFormSubmission(_append: FormSubmissionAppendInput, _deleteAtPath: FormSubmissionDeleteAtPathInput, _deleteElem: FormSubmissionDeleteElemInput, _deleteKey: FormSubmissionDeleteKeyInput, _inc: FormSubmissionIncInput, _prepend: FormSubmissionPrependInput, _set: FormSubmissionSetInput, where: FormSubmissionBoolExp!): FormSubmissionMutationResponse
  updateFormSubmissionAttachments(_inc: FormSubmissionAttachmentsIncInput, _set: FormSubmissionAttachmentsSetInput, where: FormSubmissionAttachmentsBoolExp!): FormSubmissionAttachmentsMutationResponse
  updateFormSubmissionAttachmentsByPk(_inc: FormSubmissionAttachmentsIncInput, _set: FormSubmissionAttachmentsSetInput, pkColumns: FormSubmissionAttachmentsPkColumnsInput!): FormSubmissionAttachments
  updateFormSubmissionAttachmentsMany(updates: [FormSubmissionAttachmentsUpdates!]!): [FormSubmissionAttachmentsMutationResponse]
  updateFormSubmissionByPk(_append: FormSubmissionAppendInput, _deleteAtPath: FormSubmissionDeleteAtPathInput, _deleteElem: FormSubmissionDeleteElemInput, _deleteKey: FormSubmissionDeleteKeyInput, _inc: FormSubmissionIncInput, _prepend: FormSubmissionPrependInput, _set: FormSubmissionSetInput, pkColumns: FormSubmissionPkColumnsInput!): FormSubmission
  updateFormSubmissionMany(updates: [FormSubmissionUpdates!]!): [FormSubmissionMutationResponse]
  updateGrant(_inc: GrantIncInput, _set: GrantSetInput, where: GrantBoolExp!): GrantMutationResponse
  updateGrantAllocate(_inc: GrantAllocateIncInput, _set: GrantAllocateSetInput, where: GrantAllocateBoolExp!): GrantAllocateMutationResponse
  updateGrantAllocateAttachments(_inc: GrantAllocateAttachmentsIncInput, _set: GrantAllocateAttachmentsSetInput, where: GrantAllocateAttachmentsBoolExp!): GrantAllocateAttachmentsMutationResponse
  updateGrantAllocateAttachmentsByPk(_inc: GrantAllocateAttachmentsIncInput, _set: GrantAllocateAttachmentsSetInput, pkColumns: GrantAllocateAttachmentsPkColumnsInput!): GrantAllocateAttachments
  updateGrantAllocateAttachmentsMany(updates: [GrantAllocateAttachmentsUpdates!]!): [GrantAllocateAttachmentsMutationResponse]
  updateGrantAllocateByPk(_inc: GrantAllocateIncInput, _set: GrantAllocateSetInput, pkColumns: GrantAllocatePkColumnsInput!): GrantAllocate
  updateGrantAllocateMany(updates: [GrantAllocateUpdates!]!): [GrantAllocateMutationResponse]
  updateGrantAttachments(_inc: GrantAttachmentsIncInput, _set: GrantAttachmentsSetInput, where: GrantAttachmentsBoolExp!): GrantAttachmentsMutationResponse
  updateGrantAttachmentsByPk(_inc: GrantAttachmentsIncInput, _set: GrantAttachmentsSetInput, pkColumns: GrantAttachmentsPkColumnsInput!): GrantAttachments
  updateGrantAttachmentsMany(updates: [GrantAttachmentsUpdates!]!): [GrantAttachmentsMutationResponse]
  updateGrantByPk(_inc: GrantIncInput, _set: GrantSetInput, pkColumns: GrantPkColumnsInput!): Grant
  updateGrantMany(updates: [GrantUpdates!]!): [GrantMutationResponse]
  updateIndividual(_inc: IndividualIncInput, _set: IndividualSetInput, where: IndividualBoolExp!): IndividualMutationResponse
  updateIndividualByPk(_inc: IndividualIncInput, _set: IndividualSetInput, pkColumns: IndividualPkColumnsInput!): Individual
  updateIndividualMany(updates: [IndividualUpdates!]!): [IndividualMutationResponse]
  updateIssue(_inc: IssueIncInput, _set: IssueSetInput, where: IssueBoolExp!): IssueMutationResponse
  updateIssueByPk(_inc: IssueIncInput, _set: IssueSetInput, pkColumns: IssuePkColumnsInput!): Issue
  updateIssueContributors(_inc: IssueContributorsIncInput, _set: IssueContributorsSetInput, where: IssueContributorsBoolExp!): IssueContributorsMutationResponse
  updateIssueContributorsByPk(_inc: IssueContributorsIncInput, _set: IssueContributorsSetInput, pkColumns: IssueContributorsPkColumnsInput!): IssueContributors
  updateIssueContributorsMany(updates: [IssueContributorsUpdates!]!): [IssueContributorsMutationResponse]
  updateIssueMany(updates: [IssueUpdates!]!): [IssueMutationResponse]
  updateIssueTags(_inc: IssueTagsIncInput, _set: IssueTagsSetInput, where: IssueTagsBoolExp!): IssueTagsMutationResponse
  updateIssueTagsByPk(_inc: IssueTagsIncInput, _set: IssueTagsSetInput, pkColumns: IssueTagsPkColumnsInput!): IssueTags
  updateIssueTagsMany(updates: [IssueTagsUpdates!]!): [IssueTagsMutationResponse]
  updateLegalUnit(_inc: LegalUnitIncInput, _set: LegalUnitSetInput, where: LegalUnitBoolExp!): LegalUnitMutationResponse
  updateLegalUnitByPk(_inc: LegalUnitIncInput, _set: LegalUnitSetInput, pkColumns: LegalUnitPkColumnsInput!): LegalUnit
  updateLegalUnitLocation(_inc: LegalUnitLocationIncInput, _set: LegalUnitLocationSetInput, where: LegalUnitLocationBoolExp!): LegalUnitLocationMutationResponse
  updateLegalUnitLocationByPk(_inc: LegalUnitLocationIncInput, _set: LegalUnitLocationSetInput, pkColumns: LegalUnitLocationPkColumnsInput!): LegalUnitLocation
  updateLegalUnitLocationMany(updates: [LegalUnitLocationUpdates!]!): [LegalUnitLocationMutationResponse]
  updateLegalUnitMany(updates: [LegalUnitUpdates!]!): [LegalUnitMutationResponse]
  updateLocation(_inc: LocationIncInput, _set: LocationSetInput, where: LocationBoolExp!): LocationMutationResponse
  updateLocationByPk(_inc: LocationIncInput, _set: LocationSetInput, pkColumns: LocationPkColumnsInput!): Location
  updateLocationImages(_inc: LocationImagesIncInput, _set: LocationImagesSetInput, where: LocationImagesBoolExp!): LocationImagesMutationResponse
  updateLocationImagesByPk(_inc: LocationImagesIncInput, _set: LocationImagesSetInput, pkColumns: LocationImagesPkColumnsInput!): LocationImages
  updateLocationImagesMany(updates: [LocationImagesUpdates!]!): [LocationImagesMutationResponse]
  updateLocationMany(updates: [LocationUpdates!]!): [LocationMutationResponse]
  updateMission(_inc: MissionIncInput, _set: MissionSetInput, where: MissionBoolExp!): MissionMutationResponse
  updateMissionByPk(_inc: MissionIncInput, _set: MissionSetInput, pkColumns: MissionPkColumnsInput!): Mission
  updateMissionJoin(_inc: MissionJoinIncInput, _set: MissionJoinSetInput, where: MissionJoinBoolExp!): MissionJoinMutationResponse
  updateMissionJoinByPk(_inc: MissionJoinIncInput, _set: MissionJoinSetInput, pkColumns: MissionJoinPkColumnsInput!): MissionJoin
  updateMissionJoinMany(updates: [MissionJoinUpdates!]!): [MissionJoinMutationResponse]
  updateMissionMany(updates: [MissionUpdates!]!): [MissionMutationResponse]
  updatePole(_inc: PoleIncInput, _set: PoleSetInput, where: PoleBoolExp!): PoleMutationResponse
  updatePoleByPk(_inc: PoleIncInput, _set: PoleSetInput, pkColumns: PolePkColumnsInput!): Pole
  updatePoleMany(updates: [PoleUpdates!]!): [PoleMutationResponse]
  updateProject(_inc: ProjectIncInput, _set: ProjectSetInput, where: ProjectBoolExp!): ProjectMutationResponse
  updateProjectByPk(_inc: ProjectIncInput, _set: ProjectSetInput, pkColumns: ProjectPkColumnsInput!): Project
  updateProjectMany(updates: [ProjectUpdates!]!): [ProjectMutationResponse]
  updateProjectSupervisors(_inc: ProjectSupervisorsIncInput, _set: ProjectSupervisorsSetInput, where: ProjectSupervisorsBoolExp!): ProjectSupervisorsMutationResponse
  updateProjectSupervisorsByPk(_inc: ProjectSupervisorsIncInput, _set: ProjectSupervisorsSetInput, pkColumns: ProjectSupervisorsPkColumnsInput!): ProjectSupervisors
  updateProjectSupervisorsMany(updates: [ProjectSupervisorsUpdates!]!): [ProjectSupervisorsMutationResponse]
  updateProjectTags(_inc: ProjectTagsIncInput, _set: ProjectTagsSetInput, where: ProjectTagsBoolExp!): ProjectTagsMutationResponse
  updateProjectTagsByPk(_inc: ProjectTagsIncInput, _set: ProjectTagsSetInput, pkColumns: ProjectTagsPkColumnsInput!): ProjectTags
  updateProjectTagsMany(updates: [ProjectTagsUpdates!]!): [ProjectTagsMutationResponse]
  updateReaction(_inc: ReactionIncInput, _set: ReactionSetInput, where: ReactionBoolExp!): ReactionMutationResponse
  updateReactionByPk(_inc: ReactionIncInput, _set: ReactionSetInput, pkColumns: ReactionPkColumnsInput!): Reaction
  updateReactionMany(updates: [ReactionUpdates!]!): [ReactionMutationResponse]
  updateReport(_inc: ReportIncInput, _set: ReportSetInput, where: ReportBoolExp!): ReportMutationResponse
  updateReportByPk(_inc: ReportIncInput, _set: ReportSetInput, pkColumns: ReportPkColumnsInput!): Report
  updateReportMany(updates: [ReportUpdates!]!): [ReportMutationResponse]
  updateRole(_inc: RoleIncInput, _set: RoleSetInput, where: RoleBoolExp!): RoleMutationResponse
  updateRoleByPk(_inc: RoleIncInput, _set: RoleSetInput, pkColumns: RolePkColumnsInput!): Role
  updateRoleMany(updates: [RoleUpdates!]!): [RoleMutationResponse]
  updateSession(_append: SessionAppendInput, _deleteAtPath: SessionDeleteAtPathInput, _deleteElem: SessionDeleteElemInput, _deleteKey: SessionDeleteKeyInput, _inc: SessionIncInput, _prepend: SessionPrependInput, _set: SessionSetInput, where: SessionBoolExp!): SessionMutationResponse
  updateSessionByPk(_append: SessionAppendInput, _deleteAtPath: SessionDeleteAtPathInput, _deleteElem: SessionDeleteElemInput, _deleteKey: SessionDeleteKeyInput, _inc: SessionIncInput, _prepend: SessionPrependInput, _set: SessionSetInput, pkColumns: SessionPkColumnsInput!): Session
  updateSessionMany(updates: [SessionUpdates!]!): [SessionMutationResponse]
  updateShortcut(_inc: ShortcutIncInput, _set: ShortcutSetInput, where: ShortcutBoolExp!): ShortcutMutationResponse
  updateShortcutByPk(_inc: ShortcutIncInput, _set: ShortcutSetInput, pkColumns: ShortcutPkColumnsInput!): Shortcut
  updateShortcutMany(updates: [ShortcutUpdates!]!): [ShortcutMutationResponse]
  updateSocial(_inc: SocialIncInput, _set: SocialSetInput, where: SocialBoolExp!): SocialMutationResponse
  updateSocialByPk(_inc: SocialIncInput, _set: SocialSetInput, pkColumns: SocialPkColumnsInput!): Social
  updateSocialMany(updates: [SocialUpdates!]!): [SocialMutationResponse]
  updateSubject(_inc: SubjectIncInput, _set: SubjectSetInput, where: SubjectBoolExp!): SubjectMutationResponse
  updateSubjectByPk(_inc: SubjectIncInput, _set: SubjectSetInput, pkColumns: SubjectPkColumnsInput!): Subject
  updateSubjectClassGroups(_inc: SubjectClassGroupsIncInput, _set: SubjectClassGroupsSetInput, where: SubjectClassGroupsBoolExp!): SubjectClassGroupsMutationResponse
  updateSubjectClassGroupsByPk(_inc: SubjectClassGroupsIncInput, _set: SubjectClassGroupsSetInput, pkColumns: SubjectClassGroupsPkColumnsInput!): SubjectClassGroups
  updateSubjectClassGroupsMany(updates: [SubjectClassGroupsUpdates!]!): [SubjectClassGroupsMutationResponse]
  updateSubjectMany(updates: [SubjectUpdates!]!): [SubjectMutationResponse]
  updateTag(_inc: TagIncInput, _set: TagSetInput, where: TagBoolExp!): TagMutationResponse
  updateTagByPk(_inc: TagIncInput, _set: TagSetInput, pkColumns: TagPkColumnsInput!): Tag
  updateTagMany(updates: [TagUpdates!]!): [TagMutationResponse]
  updateTeam(_inc: TeamIncInput, _set: TeamSetInput, where: TeamBoolExp!): TeamMutationResponse
  updateTeamByPk(_inc: TeamIncInput, _set: TeamSetInput, pkColumns: TeamPkColumnsInput!): Team
  updateTeamHistory(_inc: TeamHistoryIncInput, _set: TeamHistorySetInput, where: TeamHistoryBoolExp!): TeamHistoryMutationResponse
  updateTeamHistoryByPk(_inc: TeamHistoryIncInput, _set: TeamHistorySetInput, pkColumns: TeamHistoryPkColumnsInput!): TeamHistory
  updateTeamHistoryMany(updates: [TeamHistoryUpdates!]!): [TeamHistoryMutationResponse]
  updateTeamJoin(_inc: TeamJoinIncInput, _set: TeamJoinSetInput, where: TeamJoinBoolExp!): TeamJoinMutationResponse
  updateTeamJoinByPk(_inc: TeamJoinIncInput, _set: TeamJoinSetInput, pkColumns: TeamJoinPkColumnsInput!): TeamJoin
  updateTeamJoinMany(updates: [TeamJoinUpdates!]!): [TeamJoinMutationResponse]
  updateTeamMany(updates: [TeamUpdates!]!): [TeamMutationResponse]
  updateTeamMember(_inc: TeamMemberIncInput, _set: TeamMemberSetInput, where: TeamMemberBoolExp!): TeamMemberMutationResponse
  updateTeamMemberByPk(_inc: TeamMemberIncInput, _set: TeamMemberSetInput, pkColumns: TeamMemberPkColumnsInput!): TeamMember
  updateTeamMemberMany(updates: [TeamMemberUpdates!]!): [TeamMemberMutationResponse]
  updateTeamMemberRoles(_inc: TeamMemberRolesIncInput, _set: TeamMemberRolesSetInput, where: TeamMemberRolesBoolExp!): TeamMemberRolesMutationResponse
  updateTeamMemberRolesByPk(_inc: TeamMemberRolesIncInput, _set: TeamMemberRolesSetInput, pkColumns: TeamMemberRolesPkColumnsInput!): TeamMemberRoles
  updateTeamMemberRolesMany(updates: [TeamMemberRolesUpdates!]!): [TeamMemberRolesMutationResponse]
  updateTeamMetric(_inc: TeamMetricIncInput, _set: TeamMetricSetInput, where: TeamMetricBoolExp!): TeamMetricMutationResponse
  updateTeamMetricByPk(_inc: TeamMetricIncInput, _set: TeamMetricSetInput, pkColumns: TeamMetricPkColumnsInput!): TeamMetric
  updateTeamMetricMany(updates: [TeamMetricUpdates!]!): [TeamMetricMutationResponse]
  updateTenant(_inc: TenantIncInput, _set: TenantSetInput, where: TenantBoolExp!): TenantMutationResponse
  updateTenantByPk(_inc: TenantIncInput, _set: TenantSetInput, pkColumns: TenantPkColumnsInput!): Tenant
  updateTenantMany(updates: [TenantUpdates!]!): [TenantMutationResponse]
  updateTenantOrganize(_inc: TenantOrganizeIncInput, _set: TenantOrganizeSetInput, where: TenantOrganizeBoolExp!): TenantOrganizeMutationResponse
  updateTenantOrganizeByPk(_inc: TenantOrganizeIncInput, _set: TenantOrganizeSetInput, pkColumns: TenantOrganizePkColumnsInput!): TenantOrganize
  updateTenantOrganizeMany(updates: [TenantOrganizeUpdates!]!): [TenantOrganizeMutationResponse]
  updateThread(_inc: ThreadIncInput, _set: ThreadSetInput, where: ThreadBoolExp!): ThreadMutationResponse
  updateThreadByPk(_inc: ThreadIncInput, _set: ThreadSetInput, pkColumns: ThreadPkColumnsInput!): Thread
  updateThreadContributors(_inc: ThreadContributorsIncInput, _set: ThreadContributorsSetInput, where: ThreadContributorsBoolExp!): ThreadContributorsMutationResponse
  updateThreadContributorsByPk(_inc: ThreadContributorsIncInput, _set: ThreadContributorsSetInput, pkColumns: ThreadContributorsPkColumnsInput!): ThreadContributors
  updateThreadContributorsMany(updates: [ThreadContributorsUpdates!]!): [ThreadContributorsMutationResponse]
  updateThreadMany(updates: [ThreadUpdates!]!): [ThreadMutationResponse]
  updateThreadTags(_inc: ThreadTagsIncInput, _set: ThreadTagsSetInput, where: ThreadTagsBoolExp!): ThreadTagsMutationResponse
  updateThreadTagsByPk(_inc: ThreadTagsIncInput, _set: ThreadTagsSetInput, pkColumns: ThreadTagsPkColumnsInput!): ThreadTags
  updateThreadTagsMany(updates: [ThreadTagsUpdates!]!): [ThreadTagsMutationResponse]
  updateUser(_inc: UserIncInput, _set: UserSetInput, where: UserBoolExp!): UserMutationResponse
  updateUserByPk(_inc: UserIncInput, _set: UserSetInput, pkColumns: UserPkColumnsInput!): User
  updateUserMany(updates: [UserUpdates!]!): [UserMutationResponse]
  updateValidation(_inc: ValidationIncInput, _set: ValidationSetInput, where: ValidationBoolExp!): ValidationMutationResponse
  updateValidationByPk(_inc: ValidationIncInput, _set: ValidationSetInput, pkColumns: ValidationPkColumnsInput!): Validation
  updateValidationMany(updates: [ValidationUpdates!]!): [ValidationMutationResponse]
  updateView(_inc: ViewIncInput, _set: ViewSetInput, where: ViewBoolExp!): ViewMutationResponse
  updateViewByPk(_inc: ViewIncInput, _set: ViewSetInput, pkColumns: ViewPkColumnsInput!): View
  updateViewMany(updates: [ViewUpdates!]!): [ViewMutationResponse]
  updateVote(_inc: VoteIncInput, _set: VoteSetInput, where: VoteBoolExp!): VoteMutationResponse
  updateVoteByPk(_inc: VoteIncInput, _set: VoteSetInput, pkColumns: VotePkColumnsInput!): Vote
  updateVoteMany(updates: [VoteUpdates!]!): [VoteMutationResponse]
  singleUpload(file: Upload!, bucket: String, entityName: String, entityId: String): FileUpload
  login(dto: LoginInput!): UserLogin!
  logout: Boolean!
}

enum OrderBy {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

type Pole {
  category: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  hiddenAt: timestamptz
  id: bigint!
  isLocked: Boolean!
  name: String!
  team: Team!
  teamId: bigint!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  tenant: Tenant!
  tenantId: bigint!
}

type PoleAggregate {
  aggregate: PoleAggregateFields
  nodes: [Pole!]!
}

input PoleAggregateBoolExp {
  bool_and: poleAggregateBoolExpBool_and
  bool_or: poleAggregateBoolExpBool_or
  count: poleAggregateBoolExpCount
}

input poleAggregateBoolExpBool_and {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpBool_or {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpCount {
  arguments: [PoleSelectColumn!]
  distinct: Boolean
  filter: PoleBoolExp
  predicate: IntComparisonExp!
}

type PoleAggregateFields {
  avg: PoleAvgFields
  count(columns: [PoleSelectColumn!], distinct: Boolean): Int!
  max: PoleMaxFields
  min: PoleMinFields
  stddev: PoleStddevFields
  stddevPop: PoleStddevPopFields
  stddevSamp: PoleStddevSampFields
  sum: PoleSumFields
  varPop: PoleVarPopFields
  varSamp: PoleVarSampFields
  variance: PoleVarianceFields
}

input PoleAggregateOrderBy {
  avg: PoleAvgOrderBy
  count: OrderBy
  max: PoleMaxOrderBy
  min: PoleMinOrderBy
  stddev: PoleStddevOrderBy
  stddevPop: PoleStddevPopOrderBy
  stddevSamp: PoleStddevSampOrderBy
  sum: PoleSumOrderBy
  varPop: PoleVarPopOrderBy
  varSamp: PoleVarSampOrderBy
  variance: PoleVarianceOrderBy
}

input PoleArrRelInsertInput {
  data: [PoleInsertInput!]!
  onConflict: PoleOnConflict
}

type PoleAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input PoleBoolExp {
  _and: [PoleBoolExp!]
  _not: PoleBoolExp
  _or: [PoleBoolExp!]
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isLocked: BooleanComparisonExp
  name: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum PoleConstraint {
  pole_pkey
}

input PoleIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input PoleInsertInput {
  category: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  isLocked: Boolean
  name: String
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type PoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

input PoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

input PoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleMutationResponse {
  affectedRows: Int!
  returning: [Pole!]!
}

input PoleObjRelInsertInput {
  data: PoleInsertInput!
  onConflict: PoleOnConflict
}

input PoleOnConflict {
  constraint: PoleConstraint!
  updateColumns: [PoleUpdateColumn!]! = []
  where: PoleBoolExp
}

input PoleOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isLocked: OrderBy
  name: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input PolePkColumnsInput {
  id: bigint!
}

enum PoleSelectColumn {
  category
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  isLocked
  name
  teamId
  tenantId
}

enum PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns {
  isLocked
}

enum PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns {
  isLocked
}

input PoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  isLocked: Boolean
  name: String
  teamId: bigint
  tenantId: bigint
}

type PoleStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input PoleStreamCursorInput {
  initialValue: PoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input PoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  isLocked: Boolean
  name: String
  teamId: bigint
  tenantId: bigint
}

type PoleSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input PoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum PoleUpdateColumn {
  category
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  isLocked
  name
  teamId
  tenantId
}

input PoleUpdates {
  _inc: PoleIncInput
  _set: PoleSetInput
  where: PoleBoolExp!
}

type PoleVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type PoleVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input PoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Project {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  banner: FileUpload
  bannerId: bigint
  budget: Float!
  color: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  end: timestamptz
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  finances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  grant: Grant
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint!
  isPrivate: Boolean!
  isTemplate: Boolean!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  name: String!
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  regularEventInterval: String!
  slug: String!
  start: timestamptz
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ProjectAggregate {
  aggregate: ProjectAggregateFields
  nodes: [Project!]!
}

input ProjectAggregateBoolExp {
  bool_and: projectAggregateBoolExpBool_and
  bool_or: projectAggregateBoolExpBool_or
  count: projectAggregateBoolExpCount
}

input projectAggregateBoolExpBool_and {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpBool_or {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpCount {
  arguments: [ProjectSelectColumn!]
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: IntComparisonExp!
}

type ProjectAggregateFields {
  avg: ProjectAvgFields
  count(columns: [ProjectSelectColumn!], distinct: Boolean): Int!
  max: ProjectMaxFields
  min: ProjectMinFields
  stddev: ProjectStddevFields
  stddevPop: ProjectStddevPopFields
  stddevSamp: ProjectStddevSampFields
  sum: ProjectSumFields
  varPop: ProjectVarPopFields
  varSamp: ProjectVarSampFields
  variance: ProjectVarianceFields
}

input ProjectAggregateOrderBy {
  avg: ProjectAvgOrderBy
  count: OrderBy
  max: ProjectMaxOrderBy
  min: ProjectMinOrderBy
  stddev: ProjectStddevOrderBy
  stddevPop: ProjectStddevPopOrderBy
  stddevSamp: ProjectStddevSampOrderBy
  sum: ProjectSumOrderBy
  varPop: ProjectVarPopOrderBy
  varSamp: ProjectVarSampOrderBy
  variance: ProjectVarianceOrderBy
}

input ProjectArrRelInsertInput {
  data: [ProjectInsertInput!]!
  onConflict: ProjectOnConflict
}

type ProjectAvgFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input ProjectAvgOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input ProjectBoolExp {
  _and: [ProjectBoolExp!]
  _not: ProjectBoolExp
  _or: [ProjectBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  banner: FileUploadBoolExp
  bannerId: BigintComparisonExp
  budget: FloatComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  end: TimestamptzComparisonExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  grant: GrantBoolExp
  grantId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isPrivate: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  name: StringComparisonExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  regularEventInterval: StringComparisonExp
  slug: StringComparisonExp
  start: TimestamptzComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ProjectConstraint {
  project_pkey
}

input ProjectIncInput {
  bannerId: bigint
  budget: Float
  createdById: bigint
  grantId: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input ProjectInsertInput {
  actions: ActionArrRelInsertInput
  banner: FileUploadObjRelInsertInput
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  eventOrganizes: EventOrganizeArrRelInsertInput
  finances: FinanceArrRelInsertInput
  grant: GrantObjRelInsertInput
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  missionJoins: MissionJoinArrRelInsertInput
  missions: MissionArrRelInsertInput
  name: String
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  projectTags: ProjectTagsArrRelInsertInput
  regularEventInterval: String
  slug: String
  start: timestamptz
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ProjectMaxFields {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantId: bigint
  type: String
}

input ProjectMaxOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  start: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ProjectMinFields {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantId: bigint
  type: String
}

input ProjectMinOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  start: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ProjectMutationResponse {
  affectedRows: Int!
  returning: [Project!]!
}

input ProjectObjRelInsertInput {
  data: ProjectInsertInput!
  onConflict: ProjectOnConflict
}

input ProjectOnConflict {
  constraint: ProjectConstraint!
  updateColumns: [ProjectUpdateColumn!]! = []
  where: ProjectBoolExp
}

input ProjectOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  banner: FileUploadOrderBy
  bannerId: OrderBy
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  end: OrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  financesAggregate: FinanceAggregateOrderBy
  grant: GrantOrderBy
  grantId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isPrivate: OrderBy
  isTemplate: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  missionsAggregate: MissionAggregateOrderBy
  name: OrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  start: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ProjectPkColumnsInput {
  id: bigint!
}

enum ProjectSelectColumn {
  bannerId
  budget
  color
  createdAt
  createdById
  deletedAt
  description
  end
  grantId
  hiddenAt
  id
  isPrivate
  isTemplate
  name
  regularEventInterval
  slug
  start
  teamId
  tenantId
  type
}

enum ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns {
  isPrivate
  isTemplate
}

enum ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns {
  isPrivate
  isTemplate
}

input ProjectSetInput {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantId: bigint
  type: String
}

type ProjectStddevFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input ProjectStddevOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectStddevPopFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input ProjectStddevPopOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectStddevSampFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input ProjectStddevSampOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input ProjectStreamCursorInput {
  initialValue: ProjectStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectStreamCursorValueInput {
  bannerId: bigint
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  end: timestamptz
  grantId: bigint
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  start: timestamptz
  teamId: bigint
  tenantId: bigint
  type: String
}

type ProjectSumFields {
  bannerId: bigint
  budget: Float
  createdById: bigint
  grantId: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input ProjectSumOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectSupervisors {
  project: Project!
  projectId: bigint!
  teamMember: TeamMember!
  teamMemberId: bigint!
}

type ProjectSupervisorsAggregate {
  aggregate: ProjectSupervisorsAggregateFields
  nodes: [ProjectSupervisors!]!
}

input ProjectSupervisorsAggregateBoolExp {
  count: projectSupervisorsAggregateBoolExpCount
}

input projectSupervisorsAggregateBoolExpCount {
  arguments: [ProjectSupervisorsSelectColumn!]
  distinct: Boolean
  filter: ProjectSupervisorsBoolExp
  predicate: IntComparisonExp!
}

type ProjectSupervisorsAggregateFields {
  avg: ProjectSupervisorsAvgFields
  count(columns: [ProjectSupervisorsSelectColumn!], distinct: Boolean): Int!
  max: ProjectSupervisorsMaxFields
  min: ProjectSupervisorsMinFields
  stddev: ProjectSupervisorsStddevFields
  stddevPop: ProjectSupervisorsStddevPopFields
  stddevSamp: ProjectSupervisorsStddevSampFields
  sum: ProjectSupervisorsSumFields
  varPop: ProjectSupervisorsVarPopFields
  varSamp: ProjectSupervisorsVarSampFields
  variance: ProjectSupervisorsVarianceFields
}

input ProjectSupervisorsAggregateOrderBy {
  avg: ProjectSupervisorsAvgOrderBy
  count: OrderBy
  max: ProjectSupervisorsMaxOrderBy
  min: ProjectSupervisorsMinOrderBy
  stddev: ProjectSupervisorsStddevOrderBy
  stddevPop: ProjectSupervisorsStddevPopOrderBy
  stddevSamp: ProjectSupervisorsStddevSampOrderBy
  sum: ProjectSupervisorsSumOrderBy
  varPop: ProjectSupervisorsVarPopOrderBy
  varSamp: ProjectSupervisorsVarSampOrderBy
  variance: ProjectSupervisorsVarianceOrderBy
}

input ProjectSupervisorsArrRelInsertInput {
  data: [ProjectSupervisorsInsertInput!]!
  onConflict: ProjectSupervisorsOnConflict
}

type ProjectSupervisorsAvgFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsAvgOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsBoolExp {
  _and: [ProjectSupervisorsBoolExp!]
  _not: ProjectSupervisorsBoolExp
  _or: [ProjectSupervisorsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

enum ProjectSupervisorsConstraint {
  project_supervisors_pkey
}

input ProjectSupervisorsIncInput {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

type ProjectSupervisorsMaxFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsMaxOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsMinFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsMinOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsMutationResponse {
  affectedRows: Int!
  returning: [ProjectSupervisors!]!
}

input ProjectSupervisorsOnConflict {
  constraint: ProjectSupervisorsConstraint!
  updateColumns: [ProjectSupervisorsUpdateColumn!]! = []
  where: ProjectSupervisorsBoolExp
}

input ProjectSupervisorsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsPkColumnsInput {
  projectId: bigint!
  teamMemberId: bigint!
}

enum ProjectSupervisorsSelectColumn {
  projectId
  teamMemberId
}

input ProjectSupervisorsSetInput {
  projectId: bigint
  teamMemberId: bigint
}

type ProjectSupervisorsStddevFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsStddevPopFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsStddevSampFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsStddevSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

input ProjectSupervisorsStreamCursorInput {
  initialValue: ProjectSupervisorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectSupervisorsStreamCursorValueInput {
  projectId: bigint
  teamMemberId: bigint
}

type ProjectSupervisorsSumFields {
  projectId: bigint
  teamMemberId: bigint
}

input ProjectSupervisorsSumOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

enum ProjectSupervisorsUpdateColumn {
  projectId
  teamMemberId
}

input ProjectSupervisorsUpdates {
  _inc: ProjectSupervisorsIncInput
  _set: ProjectSupervisorsSetInput
  where: ProjectSupervisorsBoolExp!
}

type ProjectSupervisorsVarianceFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarianceOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsVarPopFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectSupervisorsVarSampFields {
  projectId: Float
  teamMemberId: Float
}

input ProjectSupervisorsVarSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

type ProjectTags {
  project: Project!
  projectId: bigint!
  tag: Tag!
  tagId: bigint!
}

type ProjectTagsAggregate {
  aggregate: ProjectTagsAggregateFields
  nodes: [ProjectTags!]!
}

input ProjectTagsAggregateBoolExp {
  count: projectTagsAggregateBoolExpCount
}

input projectTagsAggregateBoolExpCount {
  arguments: [ProjectTagsSelectColumn!]
  distinct: Boolean
  filter: ProjectTagsBoolExp
  predicate: IntComparisonExp!
}

type ProjectTagsAggregateFields {
  avg: ProjectTagsAvgFields
  count(columns: [ProjectTagsSelectColumn!], distinct: Boolean): Int!
  max: ProjectTagsMaxFields
  min: ProjectTagsMinFields
  stddev: ProjectTagsStddevFields
  stddevPop: ProjectTagsStddevPopFields
  stddevSamp: ProjectTagsStddevSampFields
  sum: ProjectTagsSumFields
  varPop: ProjectTagsVarPopFields
  varSamp: ProjectTagsVarSampFields
  variance: ProjectTagsVarianceFields
}

input ProjectTagsAggregateOrderBy {
  avg: ProjectTagsAvgOrderBy
  count: OrderBy
  max: ProjectTagsMaxOrderBy
  min: ProjectTagsMinOrderBy
  stddev: ProjectTagsStddevOrderBy
  stddevPop: ProjectTagsStddevPopOrderBy
  stddevSamp: ProjectTagsStddevSampOrderBy
  sum: ProjectTagsSumOrderBy
  varPop: ProjectTagsVarPopOrderBy
  varSamp: ProjectTagsVarSampOrderBy
  variance: ProjectTagsVarianceOrderBy
}

input ProjectTagsArrRelInsertInput {
  data: [ProjectTagsInsertInput!]!
  onConflict: ProjectTagsOnConflict
}

type ProjectTagsAvgFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsAvgOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

input ProjectTagsBoolExp {
  _and: [ProjectTagsBoolExp!]
  _not: ProjectTagsBoolExp
  _or: [ProjectTagsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

enum ProjectTagsConstraint {
  project_tags_pkey
}

input ProjectTagsIncInput {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

type ProjectTagsMaxFields {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsMaxOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsMinFields {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsMinOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsMutationResponse {
  affectedRows: Int!
  returning: [ProjectTags!]!
}

input ProjectTagsOnConflict {
  constraint: ProjectTagsConstraint!
  updateColumns: [ProjectTagsUpdateColumn!]! = []
  where: ProjectTagsBoolExp
}

input ProjectTagsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

input ProjectTagsPkColumnsInput {
  projectId: bigint!
  tagId: bigint!
}

enum ProjectTagsSelectColumn {
  projectId
  tagId
}

input ProjectTagsSetInput {
  projectId: bigint
  tagId: bigint
}

type ProjectTagsStddevFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsStddevOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsStddevPopFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsStddevPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsStddevSampFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsStddevSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

input ProjectTagsStreamCursorInput {
  initialValue: ProjectTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ProjectTagsStreamCursorValueInput {
  projectId: bigint
  tagId: bigint
}

type ProjectTagsSumFields {
  projectId: bigint
  tagId: bigint
}

input ProjectTagsSumOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

enum ProjectTagsUpdateColumn {
  projectId
  tagId
}

input ProjectTagsUpdates {
  _inc: ProjectTagsIncInput
  _set: ProjectTagsSetInput
  where: ProjectTagsBoolExp!
}

type ProjectTagsVarianceFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsVarianceOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsVarPopFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsVarPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

type ProjectTagsVarSampFields {
  projectId: Float
  tagId: Float
}

input ProjectTagsVarSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

enum ProjectUpdateColumn {
  bannerId
  budget
  color
  createdAt
  createdById
  deletedAt
  description
  end
  grantId
  hiddenAt
  id
  isPrivate
  isTemplate
  name
  regularEventInterval
  slug
  start
  teamId
  tenantId
  type
}

input ProjectUpdates {
  _inc: ProjectIncInput
  _set: ProjectSetInput
  where: ProjectBoolExp!
}

type ProjectVarianceFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input ProjectVarianceOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectVarPopFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input ProjectVarPopOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type ProjectVarSampFields {
  bannerId: Float
  budget: Float
  createdById: Float
  grantId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input ProjectVarSampOrderBy {
  bannerId: OrderBy
  budget: OrderBy
  createdById: OrderBy
  grantId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Query {
  account(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): [Account!]!
  accountAggregate(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): AccountAggregate!
  accountByPk(id: bigint!): Account
  action(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actionByPk(id: bigint!): Action
  actor(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  actorByPk(id: bigint!): Actor
  actorImage(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImageAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorImageByPk(id: bigint!): ActorImage
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags
  address(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): [Address!]!
  addressAggregate(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): AddressAggregate!
  addressByPk(id: bigint!): Address
  bank(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): [Bank!]!
  bankAggregate(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): BankAggregate!
  bankByPk(id: bigint!): Bank
  bot(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): [Bot!]!
  botAggregate(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): BotAggregate!
  botByPk(id: bigint!): Bot
  campus(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  campusByPk(id: bigint!): Campus
  campusCluster(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  campusClusterAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  campusClusterByPk(id: bigint!): CampusCluster
  canteen(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  canteenAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  canteenByPk(id: bigint!): Canteen
  canteenFood(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenFoodByPk(id: bigint!): CanteenFood
  canteenMenu(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenuAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  canteenMenuByPk(id: bigint!): CanteenMenu
  classGroup(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  classGroupByPk(id: bigint!): ClassGroup
  classGroupTeacher(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeacherAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects
  cohort(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  cohortAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  cohortByPk(id: bigint!): Cohort
  content(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments
  contentByPk(id: bigint!): Content
  document(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  documentByPk(id: bigint!): Document
  event(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  eventApproval(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventApprovalByPk(id: bigint!): EventApproval
  eventApprovalStep(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovalStepByPk(id: bigint!): EventApprovalStep
  eventApprovalStepNotifiees(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepNotifieesAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees
  eventApprovalStepValidators(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStepValidatorsAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators
  eventByPk(id: bigint!): Event
  eventFavorite(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoriteAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventFavoriteByPk(id: bigint!): EventFavorite
  eventJoin(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventJoinByPk(id: bigint!): EventJoin
  eventOrganize(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizeAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  eventOrganizeByPk(id: bigint!): EventOrganize
  eventSupervisor(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  eventSupervisorByPk(id: bigint!): EventSupervisor
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags
  expense(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expenseAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  expenseByPk(id: bigint!): Expense
  expenseItem(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  expenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments
  expenseItemByPk(id: bigint!): ExpenseItem
  favorite(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoriteAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  favoriteByPk(id: bigint!): Favorite
  fileUpload(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  fileUploadByPk(id: bigint!): FileUpload
  finance(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financeAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  financeAttachments(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): [FinanceAttachments!]!
  financeAttachmentsAggregate(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): FinanceAttachmentsAggregate!
  financeAttachmentsByPk(fileUploadId: bigint!, financeId: bigint!): FinanceAttachments
  financeByPk(id: bigint!): Finance
  financeTags(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): [FinanceTags!]!
  financeTagsAggregate(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): FinanceTagsAggregate!
  financeTagsByPk(financeId: bigint!, tagId: bigint!): FinanceTags
  follow(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  followByPk(id: bigint!): Follow
  form(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  formByPk(id: bigint!): Form
  formSubmission(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  formSubmissionAttachmentsByPk(fileUploadId: bigint!, formSubmissionId: bigint!): FormSubmissionAttachments
  formSubmissionByPk(id: bigint!): FormSubmission
  grant(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  grantAllocate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocateAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantAllocateAttachmentsByPk(fileUploadId: bigint!, grantAllocateId: bigint!): GrantAllocateAttachments
  grantAllocateByPk(id: bigint!): GrantAllocate
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  grantAttachmentsByPk(fileUploadId: bigint!, grantId: bigint!): GrantAttachments
  grantByPk(id: bigint!): Grant
  individual(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  individualAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  individualByPk(id: bigint!): Individual
  issue(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  issueAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  issueByPk(id: bigint!): Issue
  issueContributors(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): [IssueContributors!]!
  issueContributorsAggregate(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): IssueContributorsAggregate!
  issueContributorsByPk(individualId: bigint!, issueId: bigint!): IssueContributors
  issueTags(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): [IssueTags!]!
  issueTagsAggregate(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): IssueTagsAggregate!
  issueTagsByPk(issueId: bigint!, tagId: bigint!): IssueTags
  legalUnit(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  legalUnitAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  legalUnitByPk(id: bigint!): LegalUnit
  legalUnitLocation(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  legalUnitLocationByPk(id: bigint!): LegalUnitLocation
  location(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  locationByPk(id: bigint!): Location
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  locationImagesByPk(fileUploadId: bigint!, locationId: bigint!): LocationImages
  mission(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  missionByPk(id: bigint!): Mission
  missionJoin(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missionJoinByPk(id: bigint!): MissionJoin
  pole(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  poleAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  poleByPk(id: bigint!): Pole
  project(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  projectByPk(id: bigint!): Project
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags
  reaction(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reactionByPk(id: bigint!): Reaction
  report(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  reportByPk(id: bigint!): Report
  role(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  roleAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  roleByPk(id: bigint!): Role
  session(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  sessionByPk(id: bigint!): Session
  shortcut(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  shortcutByPk(id: bigint!): Shortcut
  social(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  socialByPk(id: bigint!): Social
  subject(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  subjectAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  subjectByPk(id: bigint!): Subject
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups
  tag(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  tagByPk(id: bigint!): Tag
  team(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  teamByPk(id: bigint!): Team
  teamHistory(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoryAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamHistoryByPk(id: bigint!): TeamHistory
  teamJoin(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamJoinByPk(id: bigint!): TeamJoin
  teamMember(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMemberAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMemberByPk(id: bigint!): TeamMember
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles
  teamMetric(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  teamMetricAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  teamMetricByPk(id: bigint!): TeamMetric
  tenant(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  tenantAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  tenantByPk(id: bigint!): Tenant
  tenantOrganize(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): [TenantOrganize!]!
  tenantOrganizeAggregate(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): TenantOrganizeAggregate!
  tenantOrganizeByPk(id: bigint!): TenantOrganize
  thread(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): [Thread!]!
  threadAggregate(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): ThreadAggregate!
  threadByPk(id: bigint!): Thread
  threadContributors(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): [ThreadContributors!]!
  threadContributorsAggregate(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): ThreadContributorsAggregate!
  threadContributorsByPk(individualId: bigint!, threadId: bigint!): ThreadContributors
  threadTags(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): [ThreadTags!]!
  threadTagsAggregate(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): ThreadTagsAggregate!
  threadTagsByPk(tagId: bigint!, threadId: bigint!): ThreadTags
  user(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  userAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
  userByPk(id: bigint!): User
  validation(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  validationByPk(id: bigint!): Validation
  view(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): [View!]!
  viewAggregate(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): ViewAggregate!
  viewByPk(id: bigint!): View
  vote(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  voteAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
  voteByPk(id: bigint!): Vote
  eventLogs(id: bigint!): [Log!]!
  financeLogs(id: bigint!): [Log!]!
  teamLogs(id: bigint!): [Log!]!
  tenantLogs(id: bigint!): [Log!]!
  me: UserLogin!
  searchLocation(query: String!): [GeocodeAddress!]!
  getFirstResultLink(query: String!): String!
  searchFrenchCompany(query: SearchCompanyQuery!): [CompanyInfo!]!
  processReceipt(key: String!): ProcessedReceipt
}

type Reaction {
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  reactionType: String!
  tenant: Tenant!
  tenantId: bigint!
}

type ReactionAggregate {
  aggregate: ReactionAggregateFields
  nodes: [Reaction!]!
}

input ReactionAggregateBoolExp {
  count: reactionAggregateBoolExpCount
}

input reactionAggregateBoolExpCount {
  arguments: [ReactionSelectColumn!]
  distinct: Boolean
  filter: ReactionBoolExp
  predicate: IntComparisonExp!
}

type ReactionAggregateFields {
  avg: ReactionAvgFields
  count(columns: [ReactionSelectColumn!], distinct: Boolean): Int!
  max: ReactionMaxFields
  min: ReactionMinFields
  stddev: ReactionStddevFields
  stddevPop: ReactionStddevPopFields
  stddevSamp: ReactionStddevSampFields
  sum: ReactionSumFields
  varPop: ReactionVarPopFields
  varSamp: ReactionVarSampFields
  variance: ReactionVarianceFields
}

input ReactionAggregateOrderBy {
  avg: ReactionAvgOrderBy
  count: OrderBy
  max: ReactionMaxOrderBy
  min: ReactionMinOrderBy
  stddev: ReactionStddevOrderBy
  stddevPop: ReactionStddevPopOrderBy
  stddevSamp: ReactionStddevSampOrderBy
  sum: ReactionSumOrderBy
  varPop: ReactionVarPopOrderBy
  varSamp: ReactionVarSampOrderBy
  variance: ReactionVarianceOrderBy
}

input ReactionArrRelInsertInput {
  data: [ReactionInsertInput!]!
  onConflict: ReactionOnConflict
}

type ReactionAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReactionBoolExp {
  _and: [ReactionBoolExp!]
  _not: ReactionBoolExp
  _or: [ReactionBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  reactionType: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ReactionConstraint {
  reaction_pkey
}

input ReactionIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReactionInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reactionType: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ReactionMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reactionType: String
  tenantId: bigint
}

input ReactionMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

type ReactionMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reactionType: String
  tenantId: bigint
}

input ReactionMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

type ReactionMutationResponse {
  affectedRows: Int!
  returning: [Reaction!]!
}

input ReactionOnConflict {
  constraint: ReactionConstraint!
  updateColumns: [ReactionUpdateColumn!]! = []
  where: ReactionBoolExp
}

input ReactionOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  reactionType: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ReactionPkColumnsInput {
  id: bigint!
}

enum ReactionSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  reactionType
  tenantId
}

input ReactionSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reactionType: String
  tenantId: bigint
}

type ReactionStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReactionStreamCursorInput {
  initialValue: ReactionStreamCursorValueInput!
  ordering: CursorOrdering
}

input ReactionStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reactionType: String
  tenantId: bigint
}

type ReactionSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReactionSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ReactionUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  reactionType
  tenantId
}

input ReactionUpdates {
  _inc: ReactionIncInput
  _set: ReactionSetInput
  where: ReactionBoolExp!
}

type ReactionVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReactionVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReactionVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Report {
  actor: Actor
  actorId: bigint
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  reason: String!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ReportAggregate {
  aggregate: ReportAggregateFields
  nodes: [Report!]!
}

input ReportAggregateBoolExp {
  count: reportAggregateBoolExpCount
}

input reportAggregateBoolExpCount {
  arguments: [ReportSelectColumn!]
  distinct: Boolean
  filter: ReportBoolExp
  predicate: IntComparisonExp!
}

type ReportAggregateFields {
  avg: ReportAvgFields
  count(columns: [ReportSelectColumn!], distinct: Boolean): Int!
  max: ReportMaxFields
  min: ReportMinFields
  stddev: ReportStddevFields
  stddevPop: ReportStddevPopFields
  stddevSamp: ReportStddevSampFields
  sum: ReportSumFields
  varPop: ReportVarPopFields
  varSamp: ReportVarSampFields
  variance: ReportVarianceFields
}

input ReportAggregateOrderBy {
  avg: ReportAvgOrderBy
  count: OrderBy
  max: ReportMaxOrderBy
  min: ReportMinOrderBy
  stddev: ReportStddevOrderBy
  stddevPop: ReportStddevPopOrderBy
  stddevSamp: ReportStddevSampOrderBy
  sum: ReportSumOrderBy
  varPop: ReportVarPopOrderBy
  varSamp: ReportVarSampOrderBy
  variance: ReportVarianceOrderBy
}

input ReportArrRelInsertInput {
  data: [ReportInsertInput!]!
  onConflict: ReportOnConflict
}

type ReportAvgFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportAvgOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReportBoolExp {
  _and: [ReportBoolExp!]
  _not: ReportBoolExp
  _or: [ReportBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  reason: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ReportConstraint {
  report_pkey
}

input ReportIncInput {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReportInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reason: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ReportMaxFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reason: String
  tenantId: bigint
  type: String
}

input ReportMaxOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ReportMinFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reason: String
  tenantId: bigint
  type: String
}

input ReportMinOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ReportMutationResponse {
  affectedRows: Int!
  returning: [Report!]!
}

input ReportOnConflict {
  constraint: ReportConstraint!
  updateColumns: [ReportUpdateColumn!]! = []
  where: ReportBoolExp
}

input ReportOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  reason: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ReportPkColumnsInput {
  id: bigint!
}

enum ReportSelectColumn {
  actorId
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  reason
  tenantId
  type
}

input ReportSetInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reason: String
  tenantId: bigint
  type: String
}

type ReportStddevFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportStddevOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportStddevPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportStddevPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportStddevSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportStddevSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ReportStreamCursorInput {
  initialValue: ReportStreamCursorValueInput!
  ordering: CursorOrdering
}

input ReportStreamCursorValueInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  reason: String
  tenantId: bigint
  type: String
}

type ReportSumFields {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ReportSumOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ReportUpdateColumn {
  actorId
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  reason
  tenantId
  type
}

input ReportUpdates {
  _inc: ReportIncInput
  _set: ReportSetInput
  where: ReportBoolExp!
}

type ReportVarianceFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportVarianceOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportVarPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportVarPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ReportVarSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ReportVarSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Role {
  askedTeamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  askedTeamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  category: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  isLocked: Boolean!
  name: String!
  permissions: [String!]!
  team: Team!
  teamId: bigint!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type RoleAggregate {
  aggregate: RoleAggregateFields
  nodes: [Role!]!
}

input RoleAggregateBoolExp {
  bool_and: roleAggregateBoolExpBool_and
  bool_or: roleAggregateBoolExpBool_or
  count: roleAggregateBoolExpCount
}

input roleAggregateBoolExpBool_and {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpBool_or {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpCount {
  arguments: [RoleSelectColumn!]
  distinct: Boolean
  filter: RoleBoolExp
  predicate: IntComparisonExp!
}

type RoleAggregateFields {
  avg: RoleAvgFields
  count(columns: [RoleSelectColumn!], distinct: Boolean): Int!
  max: RoleMaxFields
  min: RoleMinFields
  stddev: RoleStddevFields
  stddevPop: RoleStddevPopFields
  stddevSamp: RoleStddevSampFields
  sum: RoleSumFields
  varPop: RoleVarPopFields
  varSamp: RoleVarSampFields
  variance: RoleVarianceFields
}

input RoleAggregateOrderBy {
  avg: RoleAvgOrderBy
  count: OrderBy
  max: RoleMaxOrderBy
  min: RoleMinOrderBy
  stddev: RoleStddevOrderBy
  stddevPop: RoleStddevPopOrderBy
  stddevSamp: RoleStddevSampOrderBy
  sum: RoleSumOrderBy
  varPop: RoleVarPopOrderBy
  varSamp: RoleVarSampOrderBy
  variance: RoleVarianceOrderBy
}

input RoleArrRelInsertInput {
  data: [RoleInsertInput!]!
  onConflict: RoleOnConflict
}

type RoleAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input RoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input RoleBoolExp {
  _and: [RoleBoolExp!]
  _not: RoleBoolExp
  _or: [RoleBoolExp!]
  askedTeamJoins: TeamJoinBoolExp
  askedTeamJoinsAggregate: TeamJoinAggregateBoolExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isLocked: BooleanComparisonExp
  name: StringComparisonExp
  permissions: StringArrayComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum RoleConstraint {
  role_pkey
}

input RoleIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input RoleInsertInput {
  askedTeamJoins: TeamJoinArrRelInsertInput
  category: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isLocked: Boolean
  name: String
  permissions: [String!]
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type RoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  teamId: bigint
  tenantId: bigint
  type: String
}

input RoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type RoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: [String!]
  teamId: bigint
  tenantId: bigint
  type: String
}

input RoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type RoleMutationResponse {
  affectedRows: Int!
  returning: [Role!]!
}

input RoleObjRelInsertInput {
  data: RoleInsertInput!
  onConflict: RoleOnConflict
}

input RoleOnConflict {
  constraint: RoleConstraint!
  updateColumns: [RoleUpdateColumn!]! = []
  where: RoleBoolExp
}

input RoleOrderBy {
  askedTeamJoinsAggregate: TeamJoinAggregateOrderBy
  category: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isLocked: OrderBy
  name: OrderBy
  permissions: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input RolePkColumnsInput {
  id: bigint!
}

enum RoleSelectColumn {
  category
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isLocked
  name
  permissions
  teamId
  tenantId
  type
}

enum RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns {
  isLocked
}

enum RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns {
  isLocked
}

input RoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isLocked: Boolean
  name: String
  permissions: [String!]
  teamId: bigint
  tenantId: bigint
  type: String
}

type RoleStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input RoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input RoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input RoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input RoleStreamCursorInput {
  initialValue: RoleStreamCursorValueInput!
  ordering: CursorOrdering
}

input RoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isLocked: Boolean
  name: String
  permissions: [String!]
  teamId: bigint
  tenantId: bigint
  type: String
}

type RoleSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input RoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum RoleUpdateColumn {
  category
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  isLocked
  name
  permissions
  teamId
  tenantId
  type
}

input RoleUpdates {
  _inc: RoleIncInput
  _set: RoleSetInput
  where: RoleBoolExp!
}

type RoleVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input RoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input RoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type RoleVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input RoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Session {
  clientType: String!
  country: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  ip: String!
  lastActivityAt: timestamptz!
  lastIssuedAt: timestamptz!
  refreshTokenHash: String!
  revokedAt: timestamptz
  tenant: Tenant!
  tenantId: bigint!
  tokenFamily: String!
  user: User!
  userAgent(path: String): jsonb!
  userId: bigint!
}

type SessionAggregate {
  aggregate: SessionAggregateFields
  nodes: [Session!]!
}

input SessionAggregateBoolExp {
  count: sessionAggregateBoolExpCount
}

input sessionAggregateBoolExpCount {
  arguments: [SessionSelectColumn!]
  distinct: Boolean
  filter: SessionBoolExp
  predicate: IntComparisonExp!
}

type SessionAggregateFields {
  avg: SessionAvgFields
  count(columns: [SessionSelectColumn!], distinct: Boolean): Int!
  max: SessionMaxFields
  min: SessionMinFields
  stddev: SessionStddevFields
  stddevPop: SessionStddevPopFields
  stddevSamp: SessionStddevSampFields
  sum: SessionSumFields
  varPop: SessionVarPopFields
  varSamp: SessionVarSampFields
  variance: SessionVarianceFields
}

input SessionAggregateOrderBy {
  avg: SessionAvgOrderBy
  count: OrderBy
  max: SessionMaxOrderBy
  min: SessionMinOrderBy
  stddev: SessionStddevOrderBy
  stddevPop: SessionStddevPopOrderBy
  stddevSamp: SessionStddevSampOrderBy
  sum: SessionSumOrderBy
  varPop: SessionVarPopOrderBy
  varSamp: SessionVarSampOrderBy
  variance: SessionVarianceOrderBy
}

input SessionAppendInput {
  userAgent: jsonb
}

input SessionArrRelInsertInput {
  data: [SessionInsertInput!]!
  onConflict: SessionOnConflict
}

type SessionAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input SessionBoolExp {
  _and: [SessionBoolExp!]
  _not: SessionBoolExp
  _or: [SessionBoolExp!]
  clientType: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expiredAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  ip: StringComparisonExp
  lastActivityAt: TimestamptzComparisonExp
  lastIssuedAt: TimestamptzComparisonExp
  refreshTokenHash: StringComparisonExp
  revokedAt: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tokenFamily: StringComparisonExp
  user: UserBoolExp
  userAgent: JsonbComparisonExp
  userId: BigintComparisonExp
}

enum SessionConstraint {
  session_pkey
}

input SessionDeleteAtPathInput {
  userAgent: [String!]
}

input SessionDeleteElemInput {
  userAgent: Int
}

input SessionDeleteKeyInput {
  userAgent: String
}

input SessionIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input SessionInsertInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tokenFamily: String
  user: UserObjRelInsertInput
  userAgent: jsonb
  userId: bigint
}

type SessionMaxFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

input SessionMaxOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

type SessionMinFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

input SessionMinOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

type SessionMutationResponse {
  affectedRows: Int!
  returning: [Session!]!
}

input SessionOnConflict {
  constraint: SessionConstraint!
  updateColumns: [SessionUpdateColumn!]! = []
  where: SessionBoolExp
}

input SessionOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  user: UserOrderBy
  userAgent: OrderBy
  userId: OrderBy
}

input SessionPkColumnsInput {
  id: bigint!
}

input SessionPrependInput {
  userAgent: jsonb
}

enum SessionSelectColumn {
  clientType
  country
  createdAt
  createdById
  deletedAt
  expiredAt
  hiddenAt
  id
  ip
  lastActivityAt
  lastIssuedAt
  refreshTokenHash
  revokedAt
  tenantId
  tokenFamily
  userAgent
  userId
}

input SessionSetInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

type SessionStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input SessionStreamCursorInput {
  initialValue: SessionStreamCursorValueInput!
  ordering: CursorOrdering
}

input SessionStreamCursorValueInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

type SessionSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

input SessionSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum SessionUpdateColumn {
  clientType
  country
  createdAt
  createdById
  deletedAt
  expiredAt
  hiddenAt
  id
  ip
  lastActivityAt
  lastIssuedAt
  refreshTokenHash
  revokedAt
  tenantId
  tokenFamily
  userAgent
  userId
}

input SessionUpdates {
  _append: SessionAppendInput
  _deleteAtPath: SessionDeleteAtPathInput
  _deleteElem: SessionDeleteElemInput
  _deleteKey: SessionDeleteKeyInput
  _inc: SessionIncInput
  _prepend: SessionPrependInput
  _set: SessionSetInput
  where: SessionBoolExp!
}

type SessionVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type SessionVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

input SessionVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type Shortcut {
  actor: Actor!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  targetActorId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  user: User!
  userId: bigint!
}

type ShortcutAggregate {
  aggregate: ShortcutAggregateFields
  nodes: [Shortcut!]!
}

input ShortcutAggregateBoolExp {
  count: shortcutAggregateBoolExpCount
}

input shortcutAggregateBoolExpCount {
  arguments: [ShortcutSelectColumn!]
  distinct: Boolean
  filter: ShortcutBoolExp
  predicate: IntComparisonExp!
}

type ShortcutAggregateFields {
  avg: ShortcutAvgFields
  count(columns: [ShortcutSelectColumn!], distinct: Boolean): Int!
  max: ShortcutMaxFields
  min: ShortcutMinFields
  stddev: ShortcutStddevFields
  stddevPop: ShortcutStddevPopFields
  stddevSamp: ShortcutStddevSampFields
  sum: ShortcutSumFields
  varPop: ShortcutVarPopFields
  varSamp: ShortcutVarSampFields
  variance: ShortcutVarianceFields
}

input ShortcutAggregateOrderBy {
  avg: ShortcutAvgOrderBy
  count: OrderBy
  max: ShortcutMaxOrderBy
  min: ShortcutMinOrderBy
  stddev: ShortcutStddevOrderBy
  stddevPop: ShortcutStddevPopOrderBy
  stddevSamp: ShortcutStddevSampOrderBy
  sum: ShortcutSumOrderBy
  varPop: ShortcutVarPopOrderBy
  varSamp: ShortcutVarSampOrderBy
  variance: ShortcutVarianceOrderBy
}

input ShortcutArrRelInsertInput {
  data: [ShortcutInsertInput!]!
  onConflict: ShortcutOnConflict
}

type ShortcutAvgFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ShortcutBoolExp {
  _and: [ShortcutBoolExp!]
  _not: ShortcutBoolExp
  _or: [ShortcutBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  targetActorId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum ShortcutConstraint {
  shortcut_pkey
}

input ShortcutIncInput {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

input ShortcutInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  user: UserObjRelInsertInput
  userId: bigint
}

type ShortcutMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

input ShortcutMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

type ShortcutMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

input ShortcutMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

type ShortcutMutationResponse {
  affectedRows: Int!
  returning: [Shortcut!]!
}

input ShortcutOnConflict {
  constraint: ShortcutConstraint!
  updateColumns: [ShortcutUpdateColumn!]! = []
  where: ShortcutBoolExp
}

input ShortcutOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input ShortcutPkColumnsInput {
  id: bigint!
}

enum ShortcutSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  targetActorId
  tenantId
  type
  userId
}

input ShortcutSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

type ShortcutStddevFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutStddevPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutStddevSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input ShortcutStreamCursorInput {
  initialValue: ShortcutStreamCursorValueInput!
  ordering: CursorOrdering
}

input ShortcutStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

type ShortcutSumFields {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

input ShortcutSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum ShortcutUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  targetActorId
  tenantId
  type
  userId
}

input ShortcutUpdates {
  _inc: ShortcutIncInput
  _set: ShortcutSetInput
  where: ShortcutBoolExp!
}

type ShortcutVarianceFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutVarPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type ShortcutVarSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

input ShortcutVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

scalar smallint

input SmallintComparisonExp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _isNull: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type Social {
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  order: smallint!
  pseudo: String!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  url: String!
}

type SocialAggregate {
  aggregate: SocialAggregateFields
  nodes: [Social!]!
}

input SocialAggregateBoolExp {
  count: socialAggregateBoolExpCount
}

input socialAggregateBoolExpCount {
  arguments: [SocialSelectColumn!]
  distinct: Boolean
  filter: SocialBoolExp
  predicate: IntComparisonExp!
}

type SocialAggregateFields {
  avg: SocialAvgFields
  count(columns: [SocialSelectColumn!], distinct: Boolean): Int!
  max: SocialMaxFields
  min: SocialMinFields
  stddev: SocialStddevFields
  stddevPop: SocialStddevPopFields
  stddevSamp: SocialStddevSampFields
  sum: SocialSumFields
  varPop: SocialVarPopFields
  varSamp: SocialVarSampFields
  variance: SocialVarianceFields
}

input SocialAggregateOrderBy {
  avg: SocialAvgOrderBy
  count: OrderBy
  max: SocialMaxOrderBy
  min: SocialMinOrderBy
  stddev: SocialStddevOrderBy
  stddevPop: SocialStddevPopOrderBy
  stddevSamp: SocialStddevSampOrderBy
  sum: SocialSumOrderBy
  varPop: SocialVarPopOrderBy
  varSamp: SocialVarSampOrderBy
  variance: SocialVarianceOrderBy
}

input SocialArrRelInsertInput {
  data: [SocialInsertInput!]!
  onConflict: SocialOnConflict
}

type SocialAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

input SocialBoolExp {
  _and: [SocialBoolExp!]
  _not: SocialBoolExp
  _or: [SocialBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  order: SmallintComparisonExp
  pseudo: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

enum SocialConstraint {
  social_pkey
}

input SocialIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

input SocialInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  url: String
}

type SocialMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

input SocialMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

type SocialMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

input SocialMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

type SocialMutationResponse {
  affectedRows: Int!
  returning: [Social!]!
}

input SocialOnConflict {
  constraint: SocialConstraint!
  updateColumns: [SocialUpdateColumn!]! = []
  where: SocialBoolExp
}

input SocialOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

input SocialPkColumnsInput {
  id: bigint!
}

enum SocialSelectColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  order
  pseudo
  tenantId
  type
  url
}

input SocialSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

type SocialStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

input SocialStreamCursorInput {
  initialValue: SocialStreamCursorValueInput!
  ordering: CursorOrdering
}

input SocialStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

type SocialSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

input SocialSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

enum SocialUpdateColumn {
  actorId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  order
  pseudo
  tenantId
  type
  url
}

input SocialUpdates {
  _inc: SocialIncInput
  _set: SocialSetInput
  where: SocialBoolExp!
}

type SocialVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

type SocialVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

input SocialVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

input StringArrayComparisonExp {
  _containedIn: [String!]
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _isNull: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _iregex: String
  _isNull: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _niregex: String
  _nlike: String
  _nregex: String
  _nsimilar: String
  _regex: String
  _similar: String
}

type Subject {
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  code: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  documents(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  englishName: String!
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type SubjectAggregate {
  aggregate: SubjectAggregateFields
  nodes: [Subject!]!
}

input SubjectAggregateBoolExp {
  count: subjectAggregateBoolExpCount
}

input subjectAggregateBoolExpCount {
  arguments: [SubjectSelectColumn!]
  distinct: Boolean
  filter: SubjectBoolExp
  predicate: IntComparisonExp!
}

type SubjectAggregateFields {
  avg: SubjectAvgFields
  count(columns: [SubjectSelectColumn!], distinct: Boolean): Int!
  max: SubjectMaxFields
  min: SubjectMinFields
  stddev: SubjectStddevFields
  stddevPop: SubjectStddevPopFields
  stddevSamp: SubjectStddevSampFields
  sum: SubjectSumFields
  varPop: SubjectVarPopFields
  varSamp: SubjectVarSampFields
  variance: SubjectVarianceFields
}

input SubjectAggregateOrderBy {
  avg: SubjectAvgOrderBy
  count: OrderBy
  max: SubjectMaxOrderBy
  min: SubjectMinOrderBy
  stddev: SubjectStddevOrderBy
  stddevPop: SubjectStddevPopOrderBy
  stddevSamp: SubjectStddevSampOrderBy
  sum: SubjectSumOrderBy
  varPop: SubjectVarPopOrderBy
  varSamp: SubjectVarSampOrderBy
  variance: SubjectVarianceOrderBy
}

input SubjectArrRelInsertInput {
  data: [SubjectInsertInput!]!
  onConflict: SubjectOnConflict
}

type SubjectAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input SubjectBoolExp {
  _and: [SubjectBoolExp!]
  _not: SubjectBoolExp
  _or: [SubjectBoolExp!]
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  code: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  englishName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

type SubjectClassGroups {
  classGroup: ClassGroup!
  classGroupId: bigint!
  subject: Subject!
  subjectId: bigint!
}

type SubjectClassGroupsAggregate {
  aggregate: SubjectClassGroupsAggregateFields
  nodes: [SubjectClassGroups!]!
}

input SubjectClassGroupsAggregateBoolExp {
  count: subjectClassGroupsAggregateBoolExpCount
}

input subjectClassGroupsAggregateBoolExpCount {
  arguments: [SubjectClassGroupsSelectColumn!]
  distinct: Boolean
  filter: SubjectClassGroupsBoolExp
  predicate: IntComparisonExp!
}

type SubjectClassGroupsAggregateFields {
  avg: SubjectClassGroupsAvgFields
  count(columns: [SubjectClassGroupsSelectColumn!], distinct: Boolean): Int!
  max: SubjectClassGroupsMaxFields
  min: SubjectClassGroupsMinFields
  stddev: SubjectClassGroupsStddevFields
  stddevPop: SubjectClassGroupsStddevPopFields
  stddevSamp: SubjectClassGroupsStddevSampFields
  sum: SubjectClassGroupsSumFields
  varPop: SubjectClassGroupsVarPopFields
  varSamp: SubjectClassGroupsVarSampFields
  variance: SubjectClassGroupsVarianceFields
}

input SubjectClassGroupsAggregateOrderBy {
  avg: SubjectClassGroupsAvgOrderBy
  count: OrderBy
  max: SubjectClassGroupsMaxOrderBy
  min: SubjectClassGroupsMinOrderBy
  stddev: SubjectClassGroupsStddevOrderBy
  stddevPop: SubjectClassGroupsStddevPopOrderBy
  stddevSamp: SubjectClassGroupsStddevSampOrderBy
  sum: SubjectClassGroupsSumOrderBy
  varPop: SubjectClassGroupsVarPopOrderBy
  varSamp: SubjectClassGroupsVarSampOrderBy
  variance: SubjectClassGroupsVarianceOrderBy
}

input SubjectClassGroupsArrRelInsertInput {
  data: [SubjectClassGroupsInsertInput!]!
  onConflict: SubjectClassGroupsOnConflict
}

type SubjectClassGroupsAvgFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsAvgOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

input SubjectClassGroupsBoolExp {
  _and: [SubjectClassGroupsBoolExp!]
  _not: SubjectClassGroupsBoolExp
  _or: [SubjectClassGroupsBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

enum SubjectClassGroupsConstraint {
  subject_class_groups_pkey
}

input SubjectClassGroupsIncInput {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

type SubjectClassGroupsMaxFields {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsMaxOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsMinFields {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsMinOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsMutationResponse {
  affectedRows: Int!
  returning: [SubjectClassGroups!]!
}

input SubjectClassGroupsOnConflict {
  constraint: SubjectClassGroupsConstraint!
  updateColumns: [SubjectClassGroupsUpdateColumn!]! = []
  where: SubjectClassGroupsBoolExp
}

input SubjectClassGroupsOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

input SubjectClassGroupsPkColumnsInput {
  classGroupId: bigint!
  subjectId: bigint!
}

enum SubjectClassGroupsSelectColumn {
  classGroupId
  subjectId
}

input SubjectClassGroupsSetInput {
  classGroupId: bigint
  subjectId: bigint
}

type SubjectClassGroupsStddevFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsStddevOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsStddevPopFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsStddevPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsStddevSampFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsStddevSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

input SubjectClassGroupsStreamCursorInput {
  initialValue: SubjectClassGroupsStreamCursorValueInput!
  ordering: CursorOrdering
}

input SubjectClassGroupsStreamCursorValueInput {
  classGroupId: bigint
  subjectId: bigint
}

type SubjectClassGroupsSumFields {
  classGroupId: bigint
  subjectId: bigint
}

input SubjectClassGroupsSumOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

enum SubjectClassGroupsUpdateColumn {
  classGroupId
  subjectId
}

input SubjectClassGroupsUpdates {
  _inc: SubjectClassGroupsIncInput
  _set: SubjectClassGroupsSetInput
  where: SubjectClassGroupsBoolExp!
}

type SubjectClassGroupsVarianceFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsVarianceOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsVarPopFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsVarPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

type SubjectClassGroupsVarSampFields {
  classGroupId: Float
  subjectId: Float
}

input SubjectClassGroupsVarSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

enum SubjectConstraint {
  subject_pkey
}

input SubjectIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input SubjectInsertInput {
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  code: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  documents: DocumentArrRelInsertInput
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type SubjectMaxFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
  type: String
}

input SubjectMaxOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type SubjectMinFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
  type: String
}

input SubjectMinOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type SubjectMutationResponse {
  affectedRows: Int!
  returning: [Subject!]!
}

input SubjectObjRelInsertInput {
  data: SubjectInsertInput!
  onConflict: SubjectOnConflict
}

input SubjectOnConflict {
  constraint: SubjectConstraint!
  updateColumns: [SubjectUpdateColumn!]! = []
  where: SubjectBoolExp
}

input SubjectOrderBy {
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  code: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input SubjectPkColumnsInput {
  id: bigint!
}

enum SubjectSelectColumn {
  code
  createdAt
  createdById
  deletedAt
  description
  englishName
  hiddenAt
  id
  name
  tenantId
  type
}

input SubjectSetInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
  type: String
}

type SubjectStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input SubjectStreamCursorInput {
  initialValue: SubjectStreamCursorValueInput!
  ordering: CursorOrdering
}

input SubjectStreamCursorValueInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
  type: String
}

type SubjectSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input SubjectSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum SubjectUpdateColumn {
  code
  createdAt
  createdById
  deletedAt
  description
  englishName
  hiddenAt
  id
  name
  tenantId
  type
}

input SubjectUpdates {
  _inc: SubjectIncInput
  _set: SubjectSetInput
  where: SubjectBoolExp!
}

type SubjectVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type SubjectVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input SubjectVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Subscription {
  account(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): [Account!]!
  accountAggregate(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): AccountAggregate!
  accountByPk(id: bigint!): Account
  accountStream(batchSize: Int!, cursor: [AccountStreamCursorInput]!, where: AccountBoolExp): [Account!]!
  action(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actionByPk(id: bigint!): Action
  actionStream(batchSize: Int!, cursor: [ActionStreamCursorInput]!, where: ActionBoolExp): [Action!]!
  actor(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  actorByPk(id: bigint!): Actor
  actorImage(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImageAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actorImageByPk(id: bigint!): ActorImage
  actorImageStream(batchSize: Int!, cursor: [ActorImageStreamCursorInput]!, where: ActorImageBoolExp): [ActorImage!]!
  actorStream(batchSize: Int!, cursor: [ActorStreamCursorInput]!, where: ActorBoolExp): [Actor!]!
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags
  actorTagsStream(batchSize: Int!, cursor: [ActorTagsStreamCursorInput]!, where: ActorTagsBoolExp): [ActorTags!]!
  address(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): [Address!]!
  addressAggregate(distinctOn: [AddressSelectColumn!], limit: Int, offset: Int, orderBy: [AddressOrderBy!], where: AddressBoolExp): AddressAggregate!
  addressByPk(id: bigint!): Address
  addressStream(batchSize: Int!, cursor: [AddressStreamCursorInput]!, where: AddressBoolExp): [Address!]!
  bank(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): [Bank!]!
  bankAggregate(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): BankAggregate!
  bankByPk(id: bigint!): Bank
  bankStream(batchSize: Int!, cursor: [BankStreamCursorInput]!, where: BankBoolExp): [Bank!]!
  bot(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): [Bot!]!
  botAggregate(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): BotAggregate!
  botByPk(id: bigint!): Bot
  botStream(batchSize: Int!, cursor: [BotStreamCursorInput]!, where: BotBoolExp): [Bot!]!
  campus(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  campusByPk(id: bigint!): Campus
  campusCluster(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  campusClusterAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  campusClusterByPk(id: bigint!): CampusCluster
  campusClusterStream(batchSize: Int!, cursor: [CampusClusterStreamCursorInput]!, where: CampusClusterBoolExp): [CampusCluster!]!
  campusStream(batchSize: Int!, cursor: [CampusStreamCursorInput]!, where: CampusBoolExp): [Campus!]!
  canteen(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  canteenAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  canteenByPk(id: bigint!): Canteen
  canteenFood(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenFoodByPk(id: bigint!): CanteenFood
  canteenFoodStream(batchSize: Int!, cursor: [CanteenFoodStreamCursorInput]!, where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenMenu(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenuAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  canteenMenuByPk(id: bigint!): CanteenMenu
  canteenMenuStream(batchSize: Int!, cursor: [CanteenMenuStreamCursorInput]!, where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenStream(batchSize: Int!, cursor: [CanteenStreamCursorInput]!, where: CanteenBoolExp): [Canteen!]!
  classGroup(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  classGroupByPk(id: bigint!): ClassGroup
  classGroupStream(batchSize: Int!, cursor: [ClassGroupStreamCursorInput]!, where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupTeacher(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeacherAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher
  classGroupTeacherStream(batchSize: Int!, cursor: [ClassGroupTeacherStreamCursorInput]!, where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeacherSubjects(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  classGroupTeacherSubjectsAggregate(distinctOn: [ClassGroupTeacherSubjectsSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherSubjectsOrderBy!], where: ClassGroupTeacherSubjectsBoolExp): ClassGroupTeacherSubjectsAggregate!
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects
  classGroupTeacherSubjectsStream(batchSize: Int!, cursor: [ClassGroupTeacherSubjectsStreamCursorInput]!, where: ClassGroupTeacherSubjectsBoolExp): [ClassGroupTeacherSubjects!]!
  cohort(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  cohortAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  cohortByPk(id: bigint!): Cohort
  cohortStream(batchSize: Int!, cursor: [CohortStreamCursorInput]!, where: CohortBoolExp): [Cohort!]!
  content(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  contentAttachments(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentAttachmentsAggregate(distinctOn: [ContentAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ContentAttachmentsOrderBy!], where: ContentAttachmentsBoolExp): ContentAttachmentsAggregate!
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments
  contentAttachmentsStream(batchSize: Int!, cursor: [ContentAttachmentsStreamCursorInput]!, where: ContentAttachmentsBoolExp): [ContentAttachments!]!
  contentByPk(id: bigint!): Content
  contentStream(batchSize: Int!, cursor: [ContentStreamCursorInput]!, where: ContentBoolExp): [Content!]!
  document(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  documentByPk(id: bigint!): Document
  documentStream(batchSize: Int!, cursor: [DocumentStreamCursorInput]!, where: DocumentBoolExp): [Document!]!
  event(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  eventApproval(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventApprovalByPk(id: bigint!): EventApproval
  eventApprovalStep(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovalStepByPk(id: bigint!): EventApprovalStep
  eventApprovalStepNotifiees(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepNotifieesAggregate(distinctOn: [EventApprovalStepNotifieesSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepNotifieesOrderBy!], where: EventApprovalStepNotifieesBoolExp): EventApprovalStepNotifieesAggregate!
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees
  eventApprovalStepNotifieesStream(batchSize: Int!, cursor: [EventApprovalStepNotifieesStreamCursorInput]!, where: EventApprovalStepNotifieesBoolExp): [EventApprovalStepNotifiees!]!
  eventApprovalStepStream(batchSize: Int!, cursor: [EventApprovalStepStreamCursorInput]!, where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepValidators(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStepValidatorsAggregate(distinctOn: [EventApprovalStepValidatorsSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepValidatorsOrderBy!], where: EventApprovalStepValidatorsBoolExp): EventApprovalStepValidatorsAggregate!
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators
  eventApprovalStepValidatorsStream(batchSize: Int!, cursor: [EventApprovalStepValidatorsStreamCursorInput]!, where: EventApprovalStepValidatorsBoolExp): [EventApprovalStepValidators!]!
  eventApprovalStream(batchSize: Int!, cursor: [EventApprovalStreamCursorInput]!, where: EventApprovalBoolExp): [EventApproval!]!
  eventByPk(id: bigint!): Event
  eventFavorite(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoriteAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventFavoriteByPk(id: bigint!): EventFavorite
  eventFavoriteStream(batchSize: Int!, cursor: [EventFavoriteStreamCursorInput]!, where: EventFavoriteBoolExp): [EventFavorite!]!
  eventJoin(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventJoinByPk(id: bigint!): EventJoin
  eventJoinStream(batchSize: Int!, cursor: [EventJoinStreamCursorInput]!, where: EventJoinBoolExp): [EventJoin!]!
  eventOrganize(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizeAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  eventOrganizeByPk(id: bigint!): EventOrganize
  eventOrganizeStream(batchSize: Int!, cursor: [EventOrganizeStreamCursorInput]!, where: EventOrganizeBoolExp): [EventOrganize!]!
  eventStream(batchSize: Int!, cursor: [EventStreamCursorInput]!, where: EventBoolExp): [Event!]!
  eventSupervisor(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  eventSupervisorByPk(id: bigint!): EventSupervisor
  eventSupervisorStream(batchSize: Int!, cursor: [EventSupervisorStreamCursorInput]!, where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags
  eventTagsStream(batchSize: Int!, cursor: [EventTagsStreamCursorInput]!, where: EventTagsBoolExp): [EventTags!]!
  expense(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expenseAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  expenseByPk(id: bigint!): Expense
  expenseItem(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenseItemAttachments(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemAttachmentsAggregate(distinctOn: [ExpenseItemAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemAttachmentsOrderBy!], where: ExpenseItemAttachmentsBoolExp): ExpenseItemAttachmentsAggregate!
  expenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments
  expenseItemAttachmentsStream(batchSize: Int!, cursor: [ExpenseItemAttachmentsStreamCursorInput]!, where: ExpenseItemAttachmentsBoolExp): [ExpenseItemAttachments!]!
  expenseItemByPk(id: bigint!): ExpenseItem
  expenseItemStream(batchSize: Int!, cursor: [ExpenseItemStreamCursorInput]!, where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseStream(batchSize: Int!, cursor: [ExpenseStreamCursorInput]!, where: ExpenseBoolExp): [Expense!]!
  favorite(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoriteAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  favoriteByPk(id: bigint!): Favorite
  favoriteStream(batchSize: Int!, cursor: [FavoriteStreamCursorInput]!, where: FavoriteBoolExp): [Favorite!]!
  fileUpload(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  fileUploadByPk(id: bigint!): FileUpload
  fileUploadStream(batchSize: Int!, cursor: [FileUploadStreamCursorInput]!, where: FileUploadBoolExp): [FileUpload!]!
  finance(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financeAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  financeAttachments(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): [FinanceAttachments!]!
  financeAttachmentsAggregate(distinctOn: [FinanceAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceAttachmentsOrderBy!], where: FinanceAttachmentsBoolExp): FinanceAttachmentsAggregate!
  financeAttachmentsByPk(fileUploadId: bigint!, financeId: bigint!): FinanceAttachments
  financeAttachmentsStream(batchSize: Int!, cursor: [FinanceAttachmentsStreamCursorInput]!, where: FinanceAttachmentsBoolExp): [FinanceAttachments!]!
  financeByPk(id: bigint!): Finance
  financeStream(batchSize: Int!, cursor: [FinanceStreamCursorInput]!, where: FinanceBoolExp): [Finance!]!
  financeTags(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): [FinanceTags!]!
  financeTagsAggregate(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): FinanceTagsAggregate!
  financeTagsByPk(financeId: bigint!, tagId: bigint!): FinanceTags
  financeTagsStream(batchSize: Int!, cursor: [FinanceTagsStreamCursorInput]!, where: FinanceTagsBoolExp): [FinanceTags!]!
  follow(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  followByPk(id: bigint!): Follow
  followStream(batchSize: Int!, cursor: [FollowStreamCursorInput]!, where: FollowBoolExp): [Follow!]!
  form(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  formByPk(id: bigint!): Form
  formStream(batchSize: Int!, cursor: [FormStreamCursorInput]!, where: FormBoolExp): [Form!]!
  formSubmission(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  formSubmissionAttachments(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionAttachmentsAggregate(distinctOn: [FormSubmissionAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionAttachmentsOrderBy!], where: FormSubmissionAttachmentsBoolExp): FormSubmissionAttachmentsAggregate!
  formSubmissionAttachmentsByPk(fileUploadId: bigint!, formSubmissionId: bigint!): FormSubmissionAttachments
  formSubmissionAttachmentsStream(batchSize: Int!, cursor: [FormSubmissionAttachmentsStreamCursorInput]!, where: FormSubmissionAttachmentsBoolExp): [FormSubmissionAttachments!]!
  formSubmissionByPk(id: bigint!): FormSubmission
  formSubmissionStream(batchSize: Int!, cursor: [FormSubmissionStreamCursorInput]!, where: FormSubmissionBoolExp): [FormSubmission!]!
  grant(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  grantAllocate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocateAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grantAllocateAttachments(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateAttachmentsAggregate(distinctOn: [GrantAllocateAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateAttachmentsOrderBy!], where: GrantAllocateAttachmentsBoolExp): GrantAllocateAttachmentsAggregate!
  grantAllocateAttachmentsByPk(fileUploadId: bigint!, grantAllocateId: bigint!): GrantAllocateAttachments
  grantAllocateAttachmentsStream(batchSize: Int!, cursor: [GrantAllocateAttachmentsStreamCursorInput]!, where: GrantAllocateAttachmentsBoolExp): [GrantAllocateAttachments!]!
  grantAllocateByPk(id: bigint!): GrantAllocate
  grantAllocateStream(batchSize: Int!, cursor: [GrantAllocateStreamCursorInput]!, where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAttachments(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantAttachmentsAggregate(distinctOn: [GrantAttachmentsSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAttachmentsOrderBy!], where: GrantAttachmentsBoolExp): GrantAttachmentsAggregate!
  grantAttachmentsByPk(fileUploadId: bigint!, grantId: bigint!): GrantAttachments
  grantAttachmentsStream(batchSize: Int!, cursor: [GrantAttachmentsStreamCursorInput]!, where: GrantAttachmentsBoolExp): [GrantAttachments!]!
  grantByPk(id: bigint!): Grant
  grantStream(batchSize: Int!, cursor: [GrantStreamCursorInput]!, where: GrantBoolExp): [Grant!]!
  individual(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  individualAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  individualByPk(id: bigint!): Individual
  individualStream(batchSize: Int!, cursor: [IndividualStreamCursorInput]!, where: IndividualBoolExp): [Individual!]!
  issue(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  issueAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  issueByPk(id: bigint!): Issue
  issueContributors(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): [IssueContributors!]!
  issueContributorsAggregate(distinctOn: [IssueContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueContributorsOrderBy!], where: IssueContributorsBoolExp): IssueContributorsAggregate!
  issueContributorsByPk(individualId: bigint!, issueId: bigint!): IssueContributors
  issueContributorsStream(batchSize: Int!, cursor: [IssueContributorsStreamCursorInput]!, where: IssueContributorsBoolExp): [IssueContributors!]!
  issueStream(batchSize: Int!, cursor: [IssueStreamCursorInput]!, where: IssueBoolExp): [Issue!]!
  issueTags(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): [IssueTags!]!
  issueTagsAggregate(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): IssueTagsAggregate!
  issueTagsByPk(issueId: bigint!, tagId: bigint!): IssueTags
  issueTagsStream(batchSize: Int!, cursor: [IssueTagsStreamCursorInput]!, where: IssueTagsBoolExp): [IssueTags!]!
  legalUnit(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): [LegalUnit!]!
  legalUnitAggregate(distinctOn: [LegalUnitSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitOrderBy!], where: LegalUnitBoolExp): LegalUnitAggregate!
  legalUnitByPk(id: bigint!): LegalUnit
  legalUnitLocation(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitLocationAggregate(distinctOn: [LegalUnitLocationSelectColumn!], limit: Int, offset: Int, orderBy: [LegalUnitLocationOrderBy!], where: LegalUnitLocationBoolExp): LegalUnitLocationAggregate!
  legalUnitLocationByPk(id: bigint!): LegalUnitLocation
  legalUnitLocationStream(batchSize: Int!, cursor: [LegalUnitLocationStreamCursorInput]!, where: LegalUnitLocationBoolExp): [LegalUnitLocation!]!
  legalUnitStream(batchSize: Int!, cursor: [LegalUnitStreamCursorInput]!, where: LegalUnitBoolExp): [LegalUnit!]!
  location(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  locationByPk(id: bigint!): Location
  locationImages(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): [LocationImages!]!
  locationImagesAggregate(distinctOn: [LocationImagesSelectColumn!], limit: Int, offset: Int, orderBy: [LocationImagesOrderBy!], where: LocationImagesBoolExp): LocationImagesAggregate!
  locationImagesByPk(fileUploadId: bigint!, locationId: bigint!): LocationImages
  locationImagesStream(batchSize: Int!, cursor: [LocationImagesStreamCursorInput]!, where: LocationImagesBoolExp): [LocationImages!]!
  locationStream(batchSize: Int!, cursor: [LocationStreamCursorInput]!, where: LocationBoolExp): [Location!]!
  mission(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  missionByPk(id: bigint!): Mission
  missionJoin(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missionJoinByPk(id: bigint!): MissionJoin
  missionJoinStream(batchSize: Int!, cursor: [MissionJoinStreamCursorInput]!, where: MissionJoinBoolExp): [MissionJoin!]!
  missionStream(batchSize: Int!, cursor: [MissionStreamCursorInput]!, where: MissionBoolExp): [Mission!]!
  pole(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  poleAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  poleByPk(id: bigint!): Pole
  poleStream(batchSize: Int!, cursor: [PoleStreamCursorInput]!, where: PoleBoolExp): [Pole!]!
  project(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  projectByPk(id: bigint!): Project
  projectStream(batchSize: Int!, cursor: [ProjectStreamCursorInput]!, where: ProjectBoolExp): [Project!]!
  projectSupervisors(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectSupervisorsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors
  projectSupervisorsStream(batchSize: Int!, cursor: [ProjectSupervisorsStreamCursorInput]!, where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags
  projectTagsStream(batchSize: Int!, cursor: [ProjectTagsStreamCursorInput]!, where: ProjectTagsBoolExp): [ProjectTags!]!
  reaction(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reactionByPk(id: bigint!): Reaction
  reactionStream(batchSize: Int!, cursor: [ReactionStreamCursorInput]!, where: ReactionBoolExp): [Reaction!]!
  report(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  reportByPk(id: bigint!): Report
  reportStream(batchSize: Int!, cursor: [ReportStreamCursorInput]!, where: ReportBoolExp): [Report!]!
  role(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  roleAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  roleByPk(id: bigint!): Role
  roleStream(batchSize: Int!, cursor: [RoleStreamCursorInput]!, where: RoleBoolExp): [Role!]!
  session(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  sessionByPk(id: bigint!): Session
  sessionStream(batchSize: Int!, cursor: [SessionStreamCursorInput]!, where: SessionBoolExp): [Session!]!
  shortcut(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  shortcutByPk(id: bigint!): Shortcut
  shortcutStream(batchSize: Int!, cursor: [ShortcutStreamCursorInput]!, where: ShortcutBoolExp): [Shortcut!]!
  social(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  socialByPk(id: bigint!): Social
  socialStream(batchSize: Int!, cursor: [SocialStreamCursorInput]!, where: SocialBoolExp): [Social!]!
  subject(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  subjectAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  subjectByPk(id: bigint!): Subject
  subjectClassGroups(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectClassGroupsAggregate(distinctOn: [SubjectClassGroupsSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectClassGroupsOrderBy!], where: SubjectClassGroupsBoolExp): SubjectClassGroupsAggregate!
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups
  subjectClassGroupsStream(batchSize: Int!, cursor: [SubjectClassGroupsStreamCursorInput]!, where: SubjectClassGroupsBoolExp): [SubjectClassGroups!]!
  subjectStream(batchSize: Int!, cursor: [SubjectStreamCursorInput]!, where: SubjectBoolExp): [Subject!]!
  tag(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  tagByPk(id: bigint!): Tag
  tagStream(batchSize: Int!, cursor: [TagStreamCursorInput]!, where: TagBoolExp): [Tag!]!
  team(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  teamByPk(id: bigint!): Team
  teamHistory(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoryAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamHistoryByPk(id: bigint!): TeamHistory
  teamHistoryStream(batchSize: Int!, cursor: [TeamHistoryStreamCursorInput]!, where: TeamHistoryBoolExp): [TeamHistory!]!
  teamJoin(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamJoinByPk(id: bigint!): TeamJoin
  teamJoinStream(batchSize: Int!, cursor: [TeamJoinStreamCursorInput]!, where: TeamJoinBoolExp): [TeamJoin!]!
  teamMember(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMemberAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMemberByPk(id: bigint!): TeamMember
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles
  teamMemberRolesStream(batchSize: Int!, cursor: [TeamMemberRolesStreamCursorInput]!, where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberStream(batchSize: Int!, cursor: [TeamMemberStreamCursorInput]!, where: TeamMemberBoolExp): [TeamMember!]!
  teamMetric(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  teamMetricAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  teamMetricByPk(id: bigint!): TeamMetric
  teamMetricStream(batchSize: Int!, cursor: [TeamMetricStreamCursorInput]!, where: TeamMetricBoolExp): [TeamMetric!]!
  teamStream(batchSize: Int!, cursor: [TeamStreamCursorInput]!, where: TeamBoolExp): [Team!]!
  tenant(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): [Tenant!]!
  tenantAggregate(distinctOn: [TenantSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrderBy!], where: TenantBoolExp): TenantAggregate!
  tenantByPk(id: bigint!): Tenant
  tenantOrganize(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): [TenantOrganize!]!
  tenantOrganizeAggregate(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): TenantOrganizeAggregate!
  tenantOrganizeByPk(id: bigint!): TenantOrganize
  tenantOrganizeStream(batchSize: Int!, cursor: [TenantOrganizeStreamCursorInput]!, where: TenantOrganizeBoolExp): [TenantOrganize!]!
  tenantStream(batchSize: Int!, cursor: [TenantStreamCursorInput]!, where: TenantBoolExp): [Tenant!]!
  thread(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): [Thread!]!
  threadAggregate(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): ThreadAggregate!
  threadByPk(id: bigint!): Thread
  threadContributors(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): [ThreadContributors!]!
  threadContributorsAggregate(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): ThreadContributorsAggregate!
  threadContributorsByPk(individualId: bigint!, threadId: bigint!): ThreadContributors
  threadContributorsStream(batchSize: Int!, cursor: [ThreadContributorsStreamCursorInput]!, where: ThreadContributorsBoolExp): [ThreadContributors!]!
  threadStream(batchSize: Int!, cursor: [ThreadStreamCursorInput]!, where: ThreadBoolExp): [Thread!]!
  threadTags(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): [ThreadTags!]!
  threadTagsAggregate(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): ThreadTagsAggregate!
  threadTagsByPk(tagId: bigint!, threadId: bigint!): ThreadTags
  threadTagsStream(batchSize: Int!, cursor: [ThreadTagsStreamCursorInput]!, where: ThreadTagsBoolExp): [ThreadTags!]!
  user(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  userAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
  userByPk(id: bigint!): User
  userStream(batchSize: Int!, cursor: [UserStreamCursorInput]!, where: UserBoolExp): [User!]!
  validation(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  validationByPk(id: bigint!): Validation
  validationStream(batchSize: Int!, cursor: [ValidationStreamCursorInput]!, where: ValidationBoolExp): [Validation!]!
  view(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): [View!]!
  viewAggregate(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): ViewAggregate!
  viewByPk(id: bigint!): View
  viewStream(batchSize: Int!, cursor: [ViewStreamCursorInput]!, where: ViewBoolExp): [View!]!
  vote(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  voteAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
  voteByPk(id: bigint!): Vote
  voteStream(batchSize: Int!, cursor: [VoteStreamCursorInput]!, where: VoteBoolExp): [Vote!]!
}

type Tag {
  actorTags(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): [ActorTags!]!
  actorTagsAggregate(distinctOn: [ActorTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ActorTagsOrderBy!], where: ActorTagsBoolExp): ActorTagsAggregate!
  color: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  eventTags(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): [EventTags!]!
  eventTagsAggregate(distinctOn: [EventTagsSelectColumn!], limit: Int, offset: Int, orderBy: [EventTagsOrderBy!], where: EventTagsBoolExp): EventTagsAggregate!
  financeTags(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): [FinanceTags!]!
  financeTagsAggregate(distinctOn: [FinanceTagsSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceTagsOrderBy!], where: FinanceTagsBoolExp): FinanceTagsAggregate!
  hiddenAt: timestamptz
  id: bigint!
  image: FileUpload
  imageId: bigint
  issueTags(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): [IssueTags!]!
  issueTagsAggregate(distinctOn: [IssueTagsSelectColumn!], limit: Int, offset: Int, orderBy: [IssueTagsOrderBy!], where: IssueTagsBoolExp): IssueTagsAggregate!
  name: String!
  projectTags(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): [ProjectTags!]!
  projectTagsAggregate(distinctOn: [ProjectTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectTagsOrderBy!], where: ProjectTagsBoolExp): ProjectTagsAggregate!
  slug: String!
  tenant: Tenant!
  tenantId: bigint!
  threadTags(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): [ThreadTags!]!
  threadTagsAggregate(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): ThreadTagsAggregate!
  type: String!
}

type TagAggregate {
  aggregate: TagAggregateFields
  nodes: [Tag!]!
}

input TagAggregateBoolExp {
  count: tagAggregateBoolExpCount
}

input tagAggregateBoolExpCount {
  arguments: [TagSelectColumn!]
  distinct: Boolean
  filter: TagBoolExp
  predicate: IntComparisonExp!
}

type TagAggregateFields {
  avg: TagAvgFields
  count(columns: [TagSelectColumn!], distinct: Boolean): Int!
  max: TagMaxFields
  min: TagMinFields
  stddev: TagStddevFields
  stddevPop: TagStddevPopFields
  stddevSamp: TagStddevSampFields
  sum: TagSumFields
  varPop: TagVarPopFields
  varSamp: TagVarSampFields
  variance: TagVarianceFields
}

input TagAggregateOrderBy {
  avg: TagAvgOrderBy
  count: OrderBy
  max: TagMaxOrderBy
  min: TagMinOrderBy
  stddev: TagStddevOrderBy
  stddevPop: TagStddevPopOrderBy
  stddevSamp: TagStddevSampOrderBy
  sum: TagSumOrderBy
  varPop: TagVarPopOrderBy
  varSamp: TagVarSampOrderBy
  variance: TagVarianceOrderBy
}

input TagArrRelInsertInput {
  data: [TagInsertInput!]!
  onConflict: TagOnConflict
}

type TagAvgFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input TagBoolExp {
  _and: [TagBoolExp!]
  _not: TagBoolExp
  _or: [TagBoolExp!]
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  financeTags: FinanceTagsBoolExp
  financeTagsAggregate: FinanceTagsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  image: FileUploadBoolExp
  imageId: BigintComparisonExp
  issueTags: IssueTagsBoolExp
  issueTagsAggregate: IssueTagsAggregateBoolExp
  name: StringComparisonExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  threadTags: ThreadTagsBoolExp
  threadTagsAggregate: ThreadTagsAggregateBoolExp
  type: StringComparisonExp
}

enum TagConstraint {
  tag_pkey
}

input TagIncInput {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input TagInsertInput {
  actorTags: ActorTagsArrRelInsertInput
  color: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventTags: EventTagsArrRelInsertInput
  financeTags: FinanceTagsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  image: FileUploadObjRelInsertInput
  imageId: bigint
  issueTags: IssueTagsArrRelInsertInput
  name: String
  projectTags: ProjectTagsArrRelInsertInput
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  threadTags: ThreadTagsArrRelInsertInput
  type: String
}

type TagMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

input TagMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type TagMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

input TagMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type TagMutationResponse {
  affectedRows: Int!
  returning: [Tag!]!
}

input TagObjRelInsertInput {
  data: TagInsertInput!
  onConflict: TagOnConflict
}

input TagOnConflict {
  constraint: TagConstraint!
  updateColumns: [TagUpdateColumn!]! = []
  where: TagBoolExp
}

input TagOrderBy {
  actorTagsAggregate: ActorTagsAggregateOrderBy
  color: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  financeTagsAggregate: FinanceTagsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  image: FileUploadOrderBy
  imageId: OrderBy
  issueTagsAggregate: IssueTagsAggregateOrderBy
  name: OrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  threadTagsAggregate: ThreadTagsAggregateOrderBy
  type: OrderBy
}

input TagPkColumnsInput {
  id: bigint!
}

enum TagSelectColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  imageId
  name
  slug
  tenantId
  type
}

input TagSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

type TagStddevFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagStddevPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagStddevSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

input TagStreamCursorInput {
  initialValue: TagStreamCursorValueInput!
  ordering: CursorOrdering
}

input TagStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

type TagSumFields {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

input TagSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

enum TagUpdateColumn {
  color
  createdAt
  createdById
  deletedAt
  description
  hiddenAt
  id
  imageId
  name
  slug
  tenantId
  type
}

input TagUpdates {
  _inc: TagIncInput
  _set: TagSetInput
  where: TagBoolExp!
}

type TagVarianceFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagVarPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type TagVarSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

input TagVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

type Team {
  accounts(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): [Account!]!
  accountsAggregate(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): AccountAggregate!
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actor: Actor!
  actorId: bigint!
  administeredTenant: Tenant
  canteen: Canteen
  canteenId: bigint
  classGroup: ClassGroup
  classGroupId: bigint
  cohort: Cohort
  cohortId: bigint
  contents(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentsAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String!
  documents(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  finances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  grantFund: LegalUnit
  grants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  hiddenAt: timestamptz
  id: bigint!
  isJoinFormActive: Boolean!
  isOnboardingComplete: Boolean!
  joinForm: Form!
  joinFormId: bigint!
  managersCategoryName: String!
  membersCategoryName: String!
  membershipDuration: String!
  membershipFees: Float!
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  parent: Team
  parentId: bigint
  poles(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  polesAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  roles(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  rolesAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  teamHistories(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoriesAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenant: Tenant!
  tenantGrantFundId: bigint
  tenantId: bigint!
  tenantOrganizes(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): [TenantOrganize!]!
  tenantOrganizesAggregate(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): TenantOrganizeAggregate!
  type: String!
  video: FileUpload
  videoId: bigint
}

type TeamAggregate {
  aggregate: TeamAggregateFields
  nodes: [Team!]!
}

input TeamAggregateBoolExp {
  bool_and: teamAggregateBoolExpBool_and
  bool_or: teamAggregateBoolExpBool_or
  count: teamAggregateBoolExpCount
}

input teamAggregateBoolExpBool_and {
  arguments: TeamSelectColumnTeamAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TeamBoolExp
  predicate: BooleanComparisonExp!
}

input teamAggregateBoolExpBool_or {
  arguments: TeamSelectColumnTeamAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TeamBoolExp
  predicate: BooleanComparisonExp!
}

input teamAggregateBoolExpCount {
  arguments: [TeamSelectColumn!]
  distinct: Boolean
  filter: TeamBoolExp
  predicate: IntComparisonExp!
}

type TeamAggregateFields {
  avg: TeamAvgFields
  count(columns: [TeamSelectColumn!], distinct: Boolean): Int!
  max: TeamMaxFields
  min: TeamMinFields
  stddev: TeamStddevFields
  stddevPop: TeamStddevPopFields
  stddevSamp: TeamStddevSampFields
  sum: TeamSumFields
  varPop: TeamVarPopFields
  varSamp: TeamVarSampFields
  variance: TeamVarianceFields
}

input TeamAggregateOrderBy {
  avg: TeamAvgOrderBy
  count: OrderBy
  max: TeamMaxOrderBy
  min: TeamMinOrderBy
  stddev: TeamStddevOrderBy
  stddevPop: TeamStddevPopOrderBy
  stddevSamp: TeamStddevSampOrderBy
  sum: TeamSumOrderBy
  varPop: TeamVarPopOrderBy
  varSamp: TeamVarSampOrderBy
  variance: TeamVarianceOrderBy
}

input TeamArrRelInsertInput {
  data: [TeamInsertInput!]!
  onConflict: TeamOnConflict
}

type TeamAvgFields {
  actorId: Float
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantId: Float
  videoId: Float
}

input TeamAvgOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

input TeamBoolExp {
  _and: [TeamBoolExp!]
  _not: TeamBoolExp
  _or: [TeamBoolExp!]
  accounts: AccountBoolExp
  accountsAggregate: AccountAggregateBoolExp
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  administeredTenant: TenantBoolExp
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  cohort: CohortBoolExp
  cohortId: BigintComparisonExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  directorsCategoryName: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  expectingPresidentEmail: StringComparisonExp
  expectingSecretaryEmail: StringComparisonExp
  expectingTreasurerEmail: StringComparisonExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  grantFund: LegalUnitBoolExp
  grants: GrantBoolExp
  grantsAggregate: GrantAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  isJoinFormActive: BooleanComparisonExp
  isOnboardingComplete: BooleanComparisonExp
  joinForm: FormBoolExp
  joinFormId: BigintComparisonExp
  managersCategoryName: StringComparisonExp
  membersCategoryName: StringComparisonExp
  membershipDuration: StringComparisonExp
  membershipFees: FloatComparisonExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  parent: TeamBoolExp
  parentId: BigintComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  teamHistories: TeamHistoryBoolExp
  teamHistoriesAggregate: TeamHistoryAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantGrantFundId: BigintComparisonExp
  tenantId: BigintComparisonExp
  tenantOrganizes: TenantOrganizeBoolExp
  tenantOrganizesAggregate: TenantOrganizeAggregateBoolExp
  type: StringComparisonExp
  video: FileUploadBoolExp
  videoId: BigintComparisonExp
}

enum TeamConstraint {
  team_actor_id_unique
  team_canteen_id_unique
  team_class_group_id_unique
  team_cohort_id_unique
  team_join_form_id_unique
  team_pkey
}

type TeamHistory {
  approximateDate: String!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz!
  eventType: String!
  hiddenAt: timestamptz
  id: bigint!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type TeamHistoryAggregate {
  aggregate: TeamHistoryAggregateFields
  nodes: [TeamHistory!]!
}

input TeamHistoryAggregateBoolExp {
  count: teamHistoryAggregateBoolExpCount
}

input teamHistoryAggregateBoolExpCount {
  arguments: [TeamHistorySelectColumn!]
  distinct: Boolean
  filter: TeamHistoryBoolExp
  predicate: IntComparisonExp!
}

type TeamHistoryAggregateFields {
  avg: TeamHistoryAvgFields
  count(columns: [TeamHistorySelectColumn!], distinct: Boolean): Int!
  max: TeamHistoryMaxFields
  min: TeamHistoryMinFields
  stddev: TeamHistoryStddevFields
  stddevPop: TeamHistoryStddevPopFields
  stddevSamp: TeamHistoryStddevSampFields
  sum: TeamHistorySumFields
  varPop: TeamHistoryVarPopFields
  varSamp: TeamHistoryVarSampFields
  variance: TeamHistoryVarianceFields
}

input TeamHistoryAggregateOrderBy {
  avg: TeamHistoryAvgOrderBy
  count: OrderBy
  max: TeamHistoryMaxOrderBy
  min: TeamHistoryMinOrderBy
  stddev: TeamHistoryStddevOrderBy
  stddevPop: TeamHistoryStddevPopOrderBy
  stddevSamp: TeamHistoryStddevSampOrderBy
  sum: TeamHistorySumOrderBy
  varPop: TeamHistoryVarPopOrderBy
  varSamp: TeamHistoryVarSampOrderBy
  variance: TeamHistoryVarianceOrderBy
}

input TeamHistoryArrRelInsertInput {
  data: [TeamHistoryInsertInput!]!
  onConflict: TeamHistoryOnConflict
}

type TeamHistoryAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TeamHistoryAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamHistoryBoolExp {
  _and: [TeamHistoryBoolExp!]
  _not: TeamHistoryBoolExp
  _or: [TeamHistoryBoolExp!]
  approximateDate: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventDate: TimestamptzComparisonExp
  eventType: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum TeamHistoryConstraint {
  team_history_pkey
}

input TeamHistoryIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamHistoryInsertInput {
  approximateDate: String
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type TeamHistoryMaxFields {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamHistoryMaxOrderBy {
  approximateDate: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventDate: OrderBy
  eventType: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamHistoryMinFields {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamHistoryMinOrderBy {
  approximateDate: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventDate: OrderBy
  eventType: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamHistoryMutationResponse {
  affectedRows: Int!
  returning: [TeamHistory!]!
}

input TeamHistoryOnConflict {
  constraint: TeamHistoryConstraint!
  updateColumns: [TeamHistoryUpdateColumn!]! = []
  where: TeamHistoryBoolExp
}

input TeamHistoryOrderBy {
  approximateDate: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventDate: OrderBy
  eventType: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input TeamHistoryPkColumnsInput {
  id: bigint!
}

enum TeamHistorySelectColumn {
  approximateDate
  createdAt
  createdById
  deletedAt
  eventDate
  eventType
  hiddenAt
  id
  teamId
  tenantId
}

input TeamHistorySetInput {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

type TeamHistoryStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TeamHistoryStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamHistoryStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TeamHistoryStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamHistoryStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TeamHistoryStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamHistoryStreamCursorInput {
  initialValue: TeamHistoryStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamHistoryStreamCursorValueInput {
  approximateDate: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventDate: timestamptz
  eventType: String
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

type TeamHistorySumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamHistorySumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum TeamHistoryUpdateColumn {
  approximateDate
  createdAt
  createdById
  deletedAt
  eventDate
  eventType
  hiddenAt
  id
  teamId
  tenantId
}

input TeamHistoryUpdates {
  _inc: TeamHistoryIncInput
  _set: TeamHistorySetInput
  where: TeamHistoryBoolExp!
}

type TeamHistoryVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TeamHistoryVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamHistoryVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TeamHistoryVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamHistoryVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TeamHistoryVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamIncInput {
  actorId: bigint
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  id: bigint
  joinFormId: bigint
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantId: bigint
  videoId: bigint
}

input TeamInsertInput {
  accounts: AccountArrRelInsertInput
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorId: bigint
  administeredTenant: TenantObjRelInsertInput
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  cohort: CohortObjRelInsertInput
  cohortId: bigint
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  documents: DocumentArrRelInsertInput
  eventOrganizes: EventOrganizeArrRelInsertInput
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  finances: FinanceArrRelInsertInput
  grantFund: LegalUnitObjRelInsertInput
  grants: GrantArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  isJoinFormActive: Boolean
  isOnboardingComplete: Boolean
  joinForm: FormObjRelInsertInput
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  missions: MissionArrRelInsertInput
  parent: TeamObjRelInsertInput
  parentId: bigint
  poles: PoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  roles: RoleArrRelInsertInput
  teamHistories: TeamHistoryArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantGrantFundId: bigint
  tenantId: bigint
  tenantOrganizes: TenantOrganizeArrRelInsertInput
  type: String
  video: FileUploadObjRelInsertInput
  videoId: bigint
}

type TeamJoin {
  askedRole: Role!
  askedRoleId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!
  joinedBy: User!
  joinedById: bigint!
  processedAt: timestamptz
  processedBy: Individual
  processedById: bigint
  receivedPole: Pole
  receivedPoleId: bigint
  receivedRole: Role
  receivedRoleId: bigint
  state: String!
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type TeamJoinAggregate {
  aggregate: TeamJoinAggregateFields
  nodes: [TeamJoin!]!
}

input TeamJoinAggregateBoolExp {
  count: teamJoinAggregateBoolExpCount
}

input teamJoinAggregateBoolExpCount {
  arguments: [TeamJoinSelectColumn!]
  distinct: Boolean
  filter: TeamJoinBoolExp
  predicate: IntComparisonExp!
}

type TeamJoinAggregateFields {
  avg: TeamJoinAvgFields
  count(columns: [TeamJoinSelectColumn!], distinct: Boolean): Int!
  max: TeamJoinMaxFields
  min: TeamJoinMinFields
  stddev: TeamJoinStddevFields
  stddevPop: TeamJoinStddevPopFields
  stddevSamp: TeamJoinStddevSampFields
  sum: TeamJoinSumFields
  varPop: TeamJoinVarPopFields
  varSamp: TeamJoinVarSampFields
  variance: TeamJoinVarianceFields
}

input TeamJoinAggregateOrderBy {
  avg: TeamJoinAvgOrderBy
  count: OrderBy
  max: TeamJoinMaxOrderBy
  min: TeamJoinMinOrderBy
  stddev: TeamJoinStddevOrderBy
  stddevPop: TeamJoinStddevPopOrderBy
  stddevSamp: TeamJoinStddevSampOrderBy
  sum: TeamJoinSumOrderBy
  varPop: TeamJoinVarPopOrderBy
  varSamp: TeamJoinVarSampOrderBy
  variance: TeamJoinVarianceOrderBy
}

input TeamJoinArrRelInsertInput {
  data: [TeamJoinInsertInput!]!
  onConflict: TeamJoinOnConflict
}

type TeamJoinAvgFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinAvgOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamJoinBoolExp {
  _and: [TeamJoinBoolExp!]
  _not: TeamJoinBoolExp
  _or: [TeamJoinBoolExp!]
  askedRole: RoleBoolExp
  askedRoleId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  joinedBy: UserBoolExp
  joinedById: BigintComparisonExp
  processedAt: TimestamptzComparisonExp
  processedBy: IndividualBoolExp
  processedById: BigintComparisonExp
  receivedPole: PoleBoolExp
  receivedPoleId: BigintComparisonExp
  receivedRole: RoleBoolExp
  receivedRoleId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum TeamJoinConstraint {
  team_join_pkey
}

input TeamJoinIncInput {
  askedRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  processedById: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamJoinInsertInput {
  askedRole: RoleObjRelInsertInput
  askedRoleId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedBy: UserObjRelInsertInput
  joinedById: bigint
  processedAt: timestamptz
  processedBy: IndividualObjRelInsertInput
  processedById: bigint
  receivedPole: PoleObjRelInsertInput
  receivedPoleId: bigint
  receivedRole: RoleObjRelInsertInput
  receivedRoleId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type TeamJoinMaxFields {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input TeamJoinMaxOrderBy {
  askedRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinMinFields {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

input TeamJoinMinOrderBy {
  askedRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedAt: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinMutationResponse {
  affectedRows: Int!
  returning: [TeamJoin!]!
}

input TeamJoinOnConflict {
  constraint: TeamJoinConstraint!
  updateColumns: [TeamJoinUpdateColumn!]! = []
  where: TeamJoinBoolExp
}

input TeamJoinOrderBy {
  askedRole: RoleOrderBy
  askedRoleId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedBy: UserOrderBy
  joinedById: OrderBy
  processedAt: OrderBy
  processedBy: IndividualOrderBy
  processedById: OrderBy
  receivedPole: PoleOrderBy
  receivedPoleId: OrderBy
  receivedRole: RoleOrderBy
  receivedRoleId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input TeamJoinPkColumnsInput {
  id: bigint!
}

enum TeamJoinSelectColumn {
  askedRoleId
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  joinedById
  processedAt
  processedById
  receivedPoleId
  receivedRoleId
  state
  teamId
  tenantId
}

input TeamJoinSetInput {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type TeamJoinStddevFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinStddevOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinStddevPopFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinStddevPopOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinStddevSampFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinStddevSampOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TeamJoinStreamCursorInput {
  initialValue: TeamJoinStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamJoinStreamCursorValueInput {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedById: bigint
  processedAt: timestamptz
  processedById: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

type TeamJoinSumFields {
  askedRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinedById: bigint
  processedById: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
}

input TeamJoinSumOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum TeamJoinUpdateColumn {
  askedRoleId
  createdAt
  createdById
  deletedAt
  formSubmissionId
  hiddenAt
  id
  joinedById
  processedAt
  processedById
  receivedPoleId
  receivedRoleId
  state
  teamId
  tenantId
}

input TeamJoinUpdates {
  _inc: TeamJoinIncInput
  _set: TeamJoinSetInput
  where: TeamJoinBoolExp!
}

type TeamJoinVarianceFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinVarianceOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinVarPopFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinVarPopOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamJoinVarSampFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinedById: Float
  processedById: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
}

input TeamJoinVarSampOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedById: OrderBy
  processedById: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TeamMaxFields {
  actorId: bigint
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

input TeamMaxOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  expectingPresidentEmail: OrderBy
  expectingSecretaryEmail: OrderBy
  expectingTreasurerEmail: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipDuration: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

type TeamMember {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  permissions: Int!
  startDate: timestamptz!
  supervisedProjects(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): [ProjectSupervisors!]!
  supervisedProjectsAggregate(distinctOn: [ProjectSupervisorsSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectSupervisorsOrderBy!], where: ProjectSupervisorsBoolExp): ProjectSupervisorsAggregate!
  team: Team!
  teamId: bigint!
  teamMemberRoles(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): [TeamMemberRoles!]!
  teamMemberRolesAggregate(distinctOn: [TeamMemberRolesSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberRolesOrderBy!], where: TeamMemberRolesBoolExp): TeamMemberRolesAggregate!
  tenant: Tenant!
  tenantId: bigint!
  user: User!
  userId: bigint!
}

type TeamMemberAggregate {
  aggregate: TeamMemberAggregateFields
  nodes: [TeamMember!]!
}

input TeamMemberAggregateBoolExp {
  count: teamMemberAggregateBoolExpCount
}

input teamMemberAggregateBoolExpCount {
  arguments: [TeamMemberSelectColumn!]
  distinct: Boolean
  filter: TeamMemberBoolExp
  predicate: IntComparisonExp!
}

type TeamMemberAggregateFields {
  avg: TeamMemberAvgFields
  count(columns: [TeamMemberSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberMaxFields
  min: TeamMemberMinFields
  stddev: TeamMemberStddevFields
  stddevPop: TeamMemberStddevPopFields
  stddevSamp: TeamMemberStddevSampFields
  sum: TeamMemberSumFields
  varPop: TeamMemberVarPopFields
  varSamp: TeamMemberVarSampFields
  variance: TeamMemberVarianceFields
}

input TeamMemberAggregateOrderBy {
  avg: TeamMemberAvgOrderBy
  count: OrderBy
  max: TeamMemberMaxOrderBy
  min: TeamMemberMinOrderBy
  stddev: TeamMemberStddevOrderBy
  stddevPop: TeamMemberStddevPopOrderBy
  stddevSamp: TeamMemberStddevSampOrderBy
  sum: TeamMemberSumOrderBy
  varPop: TeamMemberVarPopOrderBy
  varSamp: TeamMemberVarSampOrderBy
  variance: TeamMemberVarianceOrderBy
}

input TeamMemberArrRelInsertInput {
  data: [TeamMemberInsertInput!]!
  onConflict: TeamMemberOnConflict
}

type TeamMemberAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input TeamMemberBoolExp {
  _and: [TeamMemberBoolExp!]
  _not: TeamMemberBoolExp
  _or: [TeamMemberBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  permissions: IntComparisonExp
  startDate: TimestamptzComparisonExp
  supervisedProjects: ProjectSupervisorsBoolExp
  supervisedProjectsAggregate: ProjectSupervisorsAggregateBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  user: UserBoolExp
  userId: BigintComparisonExp
}

enum TeamMemberConstraint {
  team_member_pkey
}

input TeamMemberIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  supervisedProjects: ProjectSupervisorsArrRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  user: UserObjRelInsertInput
  userId: bigint
}

type TeamMemberMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberMutationResponse {
  affectedRows: Int!
  returning: [TeamMember!]!
}

input TeamMemberObjRelInsertInput {
  data: TeamMemberInsertInput!
  onConflict: TeamMemberOnConflict
}

input TeamMemberOnConflict {
  constraint: TeamMemberConstraint!
  updateColumns: [TeamMemberUpdateColumn!]! = []
  where: TeamMemberBoolExp
}

input TeamMemberOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  supervisedProjectsAggregate: ProjectSupervisorsAggregateOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input TeamMemberPkColumnsInput {
  id: bigint!
}

type TeamMemberRoles {
  role: Role!
  roleId: bigint!
  teamMember: TeamMember!
  teamMemberId: bigint!
}

type TeamMemberRolesAggregate {
  aggregate: TeamMemberRolesAggregateFields
  nodes: [TeamMemberRoles!]!
}

input TeamMemberRolesAggregateBoolExp {
  count: teamMemberRolesAggregateBoolExpCount
}

input teamMemberRolesAggregateBoolExpCount {
  arguments: [TeamMemberRolesSelectColumn!]
  distinct: Boolean
  filter: TeamMemberRolesBoolExp
  predicate: IntComparisonExp!
}

type TeamMemberRolesAggregateFields {
  avg: TeamMemberRolesAvgFields
  count(columns: [TeamMemberRolesSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberRolesMaxFields
  min: TeamMemberRolesMinFields
  stddev: TeamMemberRolesStddevFields
  stddevPop: TeamMemberRolesStddevPopFields
  stddevSamp: TeamMemberRolesStddevSampFields
  sum: TeamMemberRolesSumFields
  varPop: TeamMemberRolesVarPopFields
  varSamp: TeamMemberRolesVarSampFields
  variance: TeamMemberRolesVarianceFields
}

input TeamMemberRolesAggregateOrderBy {
  avg: TeamMemberRolesAvgOrderBy
  count: OrderBy
  max: TeamMemberRolesMaxOrderBy
  min: TeamMemberRolesMinOrderBy
  stddev: TeamMemberRolesStddevOrderBy
  stddevPop: TeamMemberRolesStddevPopOrderBy
  stddevSamp: TeamMemberRolesStddevSampOrderBy
  sum: TeamMemberRolesSumOrderBy
  varPop: TeamMemberRolesVarPopOrderBy
  varSamp: TeamMemberRolesVarSampOrderBy
  variance: TeamMemberRolesVarianceOrderBy
}

input TeamMemberRolesArrRelInsertInput {
  data: [TeamMemberRolesInsertInput!]!
  onConflict: TeamMemberRolesOnConflict
}

type TeamMemberRolesAvgFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesAvgOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

input TeamMemberRolesBoolExp {
  _and: [TeamMemberRolesBoolExp!]
  _not: TeamMemberRolesBoolExp
  _or: [TeamMemberRolesBoolExp!]
  role: RoleBoolExp
  roleId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

enum TeamMemberRolesConstraint {
  team_member_roles_pkey
}

input TeamMemberRolesIncInput {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesInsertInput {
  role: RoleObjRelInsertInput
  roleId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

type TeamMemberRolesMaxFields {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesMaxOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesMinFields {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesMinOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesMutationResponse {
  affectedRows: Int!
  returning: [TeamMemberRoles!]!
}

input TeamMemberRolesOnConflict {
  constraint: TeamMemberRolesConstraint!
  updateColumns: [TeamMemberRolesUpdateColumn!]! = []
  where: TeamMemberRolesBoolExp
}

input TeamMemberRolesOrderBy {
  role: RoleOrderBy
  roleId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

input TeamMemberRolesPkColumnsInput {
  roleId: bigint!
  teamMemberId: bigint!
}

enum TeamMemberRolesSelectColumn {
  roleId
  teamMemberId
}

input TeamMemberRolesSetInput {
  roleId: bigint
  teamMemberId: bigint
}

type TeamMemberRolesStddevFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesStddevOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesStddevPopFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesStddevPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesStddevSampFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesStddevSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

input TeamMemberRolesStreamCursorInput {
  initialValue: TeamMemberRolesStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMemberRolesStreamCursorValueInput {
  roleId: bigint
  teamMemberId: bigint
}

type TeamMemberRolesSumFields {
  roleId: bigint
  teamMemberId: bigint
}

input TeamMemberRolesSumOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

enum TeamMemberRolesUpdateColumn {
  roleId
  teamMemberId
}

input TeamMemberRolesUpdates {
  _inc: TeamMemberRolesIncInput
  _set: TeamMemberRolesSetInput
  where: TeamMemberRolesBoolExp!
}

type TeamMemberRolesVarianceFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesVarianceOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesVarPopFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesVarPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

type TeamMemberRolesVarSampFields {
  roleId: Float
  teamMemberId: Float
}

input TeamMemberRolesVarSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

enum TeamMemberSelectColumn {
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  permissions
  startDate
  teamId
  tenantId
  userId
}

input TeamMemberSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type TeamMemberStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

input TeamMemberStreamCursorInput {
  initialValue: TeamMemberStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMemberStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

type TeamMemberSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

input TeamMemberSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

enum TeamMemberUpdateColumn {
  createdAt
  createdById
  deletedAt
  endDate
  hiddenAt
  id
  permissions
  startDate
  teamId
  tenantId
  userId
}

input TeamMemberUpdates {
  _inc: TeamMemberIncInput
  _set: TeamMemberSetInput
  where: TeamMemberBoolExp!
}

type TeamMemberVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMemberVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

input TeamMemberVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

type TeamMetric {
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  value: String!
}

type TeamMetricAggregate {
  aggregate: TeamMetricAggregateFields
  nodes: [TeamMetric!]!
}

input TeamMetricAggregateBoolExp {
  count: teamMetricAggregateBoolExpCount
}

input teamMetricAggregateBoolExpCount {
  arguments: [TeamMetricSelectColumn!]
  distinct: Boolean
  filter: TeamMetricBoolExp
  predicate: IntComparisonExp!
}

type TeamMetricAggregateFields {
  avg: TeamMetricAvgFields
  count(columns: [TeamMetricSelectColumn!], distinct: Boolean): Int!
  max: TeamMetricMaxFields
  min: TeamMetricMinFields
  stddev: TeamMetricStddevFields
  stddevPop: TeamMetricStddevPopFields
  stddevSamp: TeamMetricStddevSampFields
  sum: TeamMetricSumFields
  varPop: TeamMetricVarPopFields
  varSamp: TeamMetricVarSampFields
  variance: TeamMetricVarianceFields
}

input TeamMetricAggregateOrderBy {
  avg: TeamMetricAvgOrderBy
  count: OrderBy
  max: TeamMetricMaxOrderBy
  min: TeamMetricMinOrderBy
  stddev: TeamMetricStddevOrderBy
  stddevPop: TeamMetricStddevPopOrderBy
  stddevSamp: TeamMetricStddevSampOrderBy
  sum: TeamMetricSumOrderBy
  varPop: TeamMetricVarPopOrderBy
  varSamp: TeamMetricVarSampOrderBy
  variance: TeamMetricVarianceOrderBy
}

input TeamMetricArrRelInsertInput {
  data: [TeamMetricInsertInput!]!
  onConflict: TeamMetricOnConflict
}

type TeamMetricAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input TeamMetricBoolExp {
  _and: [TeamMetricBoolExp!]
  _not: TeamMetricBoolExp
  _or: [TeamMetricBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  value: StringComparisonExp
}

enum TeamMetricConstraint {
  team_metric_pkey
}

input TeamMetricIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input TeamMetricInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  value: String
}

type TeamMetricMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

input TeamMetricMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

type TeamMetricMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

input TeamMetricMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

type TeamMetricMutationResponse {
  affectedRows: Int!
  returning: [TeamMetric!]!
}

input TeamMetricOnConflict {
  constraint: TeamMetricConstraint!
  updateColumns: [TeamMetricUpdateColumn!]! = []
  where: TeamMetricBoolExp
}

input TeamMetricOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

input TeamMetricPkColumnsInput {
  id: bigint!
}

enum TeamMetricSelectColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  type
  value
}

input TeamMetricSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

type TeamMetricStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input TeamMetricStreamCursorInput {
  initialValue: TeamMetricStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamMetricStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

type TeamMetricSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input TeamMetricSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum TeamMetricUpdateColumn {
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  type
  value
}

input TeamMetricUpdates {
  _inc: TeamMetricIncInput
  _set: TeamMetricSetInput
  where: TeamMetricBoolExp!
}

type TeamMetricVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMetricVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

input TeamMetricVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type TeamMinFields {
  actorId: bigint
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

input TeamMinOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  expectingPresidentEmail: OrderBy
  expectingSecretaryEmail: OrderBy
  expectingTreasurerEmail: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipDuration: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

type TeamMutationResponse {
  affectedRows: Int!
  returning: [Team!]!
}

input TeamObjRelInsertInput {
  data: TeamInsertInput!
  onConflict: TeamOnConflict
}

input TeamOnConflict {
  constraint: TeamConstraint!
  updateColumns: [TeamUpdateColumn!]! = []
  where: TeamBoolExp
}

input TeamOrderBy {
  accountsAggregate: AccountAggregateOrderBy
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  actorId: OrderBy
  administeredTenant: TenantOrderBy
  canteen: CanteenOrderBy
  canteenId: OrderBy
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  cohort: CohortOrderBy
  cohortId: OrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  expectingPresidentEmail: OrderBy
  expectingSecretaryEmail: OrderBy
  expectingTreasurerEmail: OrderBy
  financesAggregate: FinanceAggregateOrderBy
  grantFund: LegalUnitOrderBy
  grantsAggregate: GrantAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  isJoinFormActive: OrderBy
  isOnboardingComplete: OrderBy
  joinForm: FormOrderBy
  joinFormId: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipDuration: OrderBy
  membershipFees: OrderBy
  missionsAggregate: MissionAggregateOrderBy
  parent: TeamOrderBy
  parentId: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  teamHistoriesAggregate: TeamHistoryAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  tenantOrganizesAggregate: TenantOrganizeAggregateOrderBy
  type: OrderBy
  video: FileUploadOrderBy
  videoId: OrderBy
}

input TeamPkColumnsInput {
  id: bigint!
}

enum TeamSelectColumn {
  actorId
  canteenId
  classGroupId
  cohortId
  createdAt
  createdById
  deletedAt
  directorsCategoryName
  expectingPresidentEmail
  expectingSecretaryEmail
  expectingTreasurerEmail
  hiddenAt
  id
  isJoinFormActive
  isOnboardingComplete
  joinFormId
  managersCategoryName
  membersCategoryName
  membershipDuration
  membershipFees
  parentId
  tenantGrantFundId
  tenantId
  type
  videoId
}

enum TeamSelectColumnTeamAggregateBoolExpBool_andArgumentsColumns {
  isJoinFormActive
  isOnboardingComplete
}

enum TeamSelectColumnTeamAggregateBoolExpBool_orArgumentsColumns {
  isJoinFormActive
  isOnboardingComplete
}

input TeamSetInput {
  actorId: bigint
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  isJoinFormActive: Boolean
  isOnboardingComplete: Boolean
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

type TeamStddevFields {
  actorId: Float
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantId: Float
  videoId: Float
}

input TeamStddevOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamStddevPopFields {
  actorId: Float
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantId: Float
  videoId: Float
}

input TeamStddevPopOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamStddevSampFields {
  actorId: Float
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantId: Float
  videoId: Float
}

input TeamStddevSampOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

input TeamStreamCursorInput {
  initialValue: TeamStreamCursorValueInput!
  ordering: CursorOrdering
}

input TeamStreamCursorValueInput {
  actorId: bigint
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  directorsCategoryName: String
  expectingPresidentEmail: String
  expectingSecretaryEmail: String
  expectingTreasurerEmail: String
  hiddenAt: timestamptz
  id: bigint
  isJoinFormActive: Boolean
  isOnboardingComplete: Boolean
  joinFormId: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipDuration: String
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

type TeamSumFields {
  actorId: bigint
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  id: bigint
  joinFormId: bigint
  membershipFees: Float
  parentId: bigint
  tenantGrantFundId: bigint
  tenantId: bigint
  videoId: bigint
}

input TeamSumOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

enum TeamUpdateColumn {
  actorId
  canteenId
  classGroupId
  cohortId
  createdAt
  createdById
  deletedAt
  directorsCategoryName
  expectingPresidentEmail
  expectingSecretaryEmail
  expectingTreasurerEmail
  hiddenAt
  id
  isJoinFormActive
  isOnboardingComplete
  joinFormId
  managersCategoryName
  membersCategoryName
  membershipDuration
  membershipFees
  parentId
  tenantGrantFundId
  tenantId
  type
  videoId
}

input TeamUpdates {
  _inc: TeamIncInput
  _set: TeamSetInput
  where: TeamBoolExp!
}

type TeamVarianceFields {
  actorId: Float
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantId: Float
  videoId: Float
}

input TeamVarianceOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamVarPopFields {
  actorId: Float
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantId: Float
  videoId: Float
}

input TeamVarPopOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type TeamVarSampFields {
  actorId: Float
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  membershipFees: Float
  parentId: Float
  tenantGrantFundId: Float
  tenantId: Float
  videoId: Float
}

input TeamVarSampOrderBy {
  actorId: OrderBy
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  membershipFees: OrderBy
  parentId: OrderBy
  tenantGrantFundId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

type Tenant {
  accounts(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): [Account!]!
  accountsAggregate(distinctOn: [AccountSelectColumn!], limit: Int, offset: Int, orderBy: [AccountOrderBy!], where: AccountBoolExp): AccountAggregate!
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  actorImages(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): [ActorImage!]!
  actorImagesAggregate(distinctOn: [ActorImageSelectColumn!], limit: Int, offset: Int, orderBy: [ActorImageOrderBy!], where: ActorImageBoolExp): ActorImageAggregate!
  actors(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): [Actor!]!
  actorsAggregate(distinctOn: [ActorSelectColumn!], limit: Int, offset: Int, orderBy: [ActorOrderBy!], where: ActorBoolExp): ActorAggregate!
  adminTeam: Team
  adminTeamId: bigint
  banks(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): [Bank!]!
  banksAggregate(distinctOn: [BankSelectColumn!], limit: Int, offset: Int, orderBy: [BankOrderBy!], where: BankBoolExp): BankAggregate!
  bots(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): [Bot!]!
  botsAggregate(distinctOn: [BotSelectColumn!], limit: Int, offset: Int, orderBy: [BotOrderBy!], where: BotBoolExp): BotAggregate!
  campusClusters(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): [CampusCluster!]!
  campusClustersAggregate(distinctOn: [CampusClusterSelectColumn!], limit: Int, offset: Int, orderBy: [CampusClusterOrderBy!], where: CampusClusterBoolExp): CampusClusterAggregate!
  campuses(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): [Campus!]!
  campusesAggregate(distinctOn: [CampusSelectColumn!], limit: Int, offset: Int, orderBy: [CampusOrderBy!], where: CampusBoolExp): CampusAggregate!
  canteenFoods(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): [CanteenFood!]!
  canteenFoodsAggregate(distinctOn: [CanteenFoodSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenFoodOrderBy!], where: CanteenFoodBoolExp): CanteenFoodAggregate!
  canteenMenus(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): [CanteenMenu!]!
  canteenMenusAggregate(distinctOn: [CanteenMenuSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenMenuOrderBy!], where: CanteenMenuBoolExp): CanteenMenuAggregate!
  canteens(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): [Canteen!]!
  canteensAggregate(distinctOn: [CanteenSelectColumn!], limit: Int, offset: Int, orderBy: [CanteenOrderBy!], where: CanteenBoolExp): CanteenAggregate!
  classGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  classGroups(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): [ClassGroup!]!
  classGroupsAggregate(distinctOn: [ClassGroupSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupOrderBy!], where: ClassGroupBoolExp): ClassGroupAggregate!
  cohorts(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): [Cohort!]!
  cohortsAggregate(distinctOn: [CohortSelectColumn!], limit: Int, offset: Int, orderBy: [CohortOrderBy!], where: CohortBoolExp): CohortAggregate!
  contents(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): [Content!]!
  contentsAggregate(distinctOn: [ContentSelectColumn!], limit: Int, offset: Int, orderBy: [ContentOrderBy!], where: ContentBoolExp): ContentAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  documents(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): [Document!]!
  documentsAggregate(distinctOn: [DocumentSelectColumn!], limit: Int, offset: Int, orderBy: [DocumentOrderBy!], where: DocumentBoolExp): DocumentAggregate!
  domain: String!
  eventApprovalSteps(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): [EventApprovalStep!]!
  eventApprovalStepsAggregate(distinctOn: [EventApprovalStepSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalStepOrderBy!], where: EventApprovalStepBoolExp): EventApprovalStepAggregate!
  eventApprovals(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): [EventApproval!]!
  eventApprovalsAggregate(distinctOn: [EventApprovalSelectColumn!], limit: Int, offset: Int, orderBy: [EventApprovalOrderBy!], where: EventApprovalBoolExp): EventApprovalAggregate!
  eventFavorites(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): [EventFavorite!]!
  eventFavoritesAggregate(distinctOn: [EventFavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [EventFavoriteOrderBy!], where: EventFavoriteBoolExp): EventFavoriteAggregate!
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  eventOrganizes(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): [EventOrganize!]!
  eventOrganizesAggregate(distinctOn: [EventOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrganizeOrderBy!], where: EventOrganizeBoolExp): EventOrganizeAggregate!
  eventSupervisors(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  eventSupervisorsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  eventValidationForm: Form
  eventValidationFormId: bigint
  events(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): [Event!]!
  eventsAggregate(distinctOn: [EventSelectColumn!], limit: Int, offset: Int, orderBy: [EventOrderBy!], where: EventBoolExp): EventAggregate!
  expenseItems(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): [ExpenseItem!]!
  expenseItemsAggregate(distinctOn: [ExpenseItemSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseItemOrderBy!], where: ExpenseItemBoolExp): ExpenseItemAggregate!
  expenses(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): [Expense!]!
  expensesAggregate(distinctOn: [ExpenseSelectColumn!], limit: Int, offset: Int, orderBy: [ExpenseOrderBy!], where: ExpenseBoolExp): ExpenseAggregate!
  favorites(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): [Favorite!]!
  favoritesAggregate(distinctOn: [FavoriteSelectColumn!], limit: Int, offset: Int, orderBy: [FavoriteOrderBy!], where: FavoriteBoolExp): FavoriteAggregate!
  fileUploads(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): [FileUpload!]!
  fileUploadsAggregate(distinctOn: [FileUploadSelectColumn!], limit: Int, offset: Int, orderBy: [FileUploadOrderBy!], where: FileUploadBoolExp): FileUploadAggregate!
  finances(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): [Finance!]!
  financesAggregate(distinctOn: [FinanceSelectColumn!], limit: Int, offset: Int, orderBy: [FinanceOrderBy!], where: FinanceBoolExp): FinanceAggregate!
  follows(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): [Follow!]!
  followsAggregate(distinctOn: [FollowSelectColumn!], limit: Int, offset: Int, orderBy: [FollowOrderBy!], where: FollowBoolExp): FollowAggregate!
  formSubmissions(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): [FormSubmission!]!
  formSubmissionsAggregate(distinctOn: [FormSubmissionSelectColumn!], limit: Int, offset: Int, orderBy: [FormSubmissionOrderBy!], where: FormSubmissionBoolExp): FormSubmissionAggregate!
  forms(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): [Form!]!
  formsAggregate(distinctOn: [FormSelectColumn!], limit: Int, offset: Int, orderBy: [FormOrderBy!], where: FormBoolExp): FormAggregate!
  grantAllocates(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): [GrantAllocate!]!
  grantAllocatesAggregate(distinctOn: [GrantAllocateSelectColumn!], limit: Int, offset: Int, orderBy: [GrantAllocateOrderBy!], where: GrantAllocateBoolExp): GrantAllocateAggregate!
  grants(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): [Grant!]!
  grantsAggregate(distinctOn: [GrantSelectColumn!], limit: Int, offset: Int, orderBy: [GrantOrderBy!], where: GrantBoolExp): GrantAggregate!
  id: bigint!
  individuals(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): [Individual!]!
  individualsAggregate(distinctOn: [IndividualSelectColumn!], limit: Int, offset: Int, orderBy: [IndividualOrderBy!], where: IndividualBoolExp): IndividualAggregate!
  isOidcEnabled: Boolean!
  issues(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): [Issue!]!
  issuesAggregate(distinctOn: [IssueSelectColumn!], limit: Int, offset: Int, orderBy: [IssueOrderBy!], where: IssueBoolExp): IssueAggregate!
  locations(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): [Location!]!
  locationsAggregate(distinctOn: [LocationSelectColumn!], limit: Int, offset: Int, orderBy: [LocationOrderBy!], where: LocationBoolExp): LocationAggregate!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  missions(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): [Mission!]!
  missionsAggregate(distinctOn: [MissionSelectColumn!], limit: Int, offset: Int, orderBy: [MissionOrderBy!], where: MissionBoolExp): MissionAggregate!
  oidcCallbackUri: String!
  oidcClientId: String!
  oidcClientSecret: String!
  oidcDiscoveryUrl: String!
  oidcName: String!
  oidcScopes: String!
  pointName: String!
  poles(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): [Pole!]!
  polesAggregate(distinctOn: [PoleSelectColumn!], limit: Int, offset: Int, orderBy: [PoleOrderBy!], where: PoleBoolExp): PoleAggregate!
  projects(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): [Project!]!
  projectsAggregate(distinctOn: [ProjectSelectColumn!], limit: Int, offset: Int, orderBy: [ProjectOrderBy!], where: ProjectBoolExp): ProjectAggregate!
  reactions(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): [Reaction!]!
  reactionsAggregate(distinctOn: [ReactionSelectColumn!], limit: Int, offset: Int, orderBy: [ReactionOrderBy!], where: ReactionBoolExp): ReactionAggregate!
  reports(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): [Report!]!
  reportsAggregate(distinctOn: [ReportSelectColumn!], limit: Int, offset: Int, orderBy: [ReportOrderBy!], where: ReportBoolExp): ReportAggregate!
  roles(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): [Role!]!
  rolesAggregate(distinctOn: [RoleSelectColumn!], limit: Int, offset: Int, orderBy: [RoleOrderBy!], where: RoleBoolExp): RoleAggregate!
  sessions(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionsAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  shortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  socials(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): [Social!]!
  socialsAggregate(distinctOn: [SocialSelectColumn!], limit: Int, offset: Int, orderBy: [SocialOrderBy!], where: SocialBoolExp): SocialAggregate!
  subjects(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): [Subject!]!
  subjectsAggregate(distinctOn: [SubjectSelectColumn!], limit: Int, offset: Int, orderBy: [SubjectOrderBy!], where: SubjectBoolExp): SubjectAggregate!
  tags(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): [Tag!]!
  tagsAggregate(distinctOn: [TagSelectColumn!], limit: Int, offset: Int, orderBy: [TagOrderBy!], where: TagBoolExp): TagAggregate!
  teamHistories(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): [TeamHistory!]!
  teamHistoriesAggregate(distinctOn: [TeamHistorySelectColumn!], limit: Int, offset: Int, orderBy: [TeamHistoryOrderBy!], where: TeamHistoryBoolExp): TeamHistoryAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  teamMetrics(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): [TeamMetric!]!
  teamMetricsAggregate(distinctOn: [TeamMetricSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMetricOrderBy!], where: TeamMetricBoolExp): TeamMetricAggregate!
  teams(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): [Team!]!
  teamsAggregate(distinctOn: [TeamSelectColumn!], limit: Int, offset: Int, orderBy: [TeamOrderBy!], where: TeamBoolExp): TeamAggregate!
  tenantOrganizes(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): [TenantOrganize!]!
  tenantOrganizesAggregate(distinctOn: [TenantOrganizeSelectColumn!], limit: Int, offset: Int, orderBy: [TenantOrganizeOrderBy!], where: TenantOrganizeBoolExp): TenantOrganizeAggregate!
  threads(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): [Thread!]!
  threadsAggregate(distinctOn: [ThreadSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadOrderBy!], where: ThreadBoolExp): ThreadAggregate!
  users(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): [User!]!
  usersAggregate(distinctOn: [UserSelectColumn!], limit: Int, offset: Int, orderBy: [UserOrderBy!], where: UserBoolExp): UserAggregate!
  validations(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): [Validation!]!
  validationsAggregate(distinctOn: [ValidationSelectColumn!], limit: Int, offset: Int, orderBy: [ValidationOrderBy!], where: ValidationBoolExp): ValidationAggregate!
  views(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): [View!]!
  viewsAggregate(distinctOn: [ViewSelectColumn!], limit: Int, offset: Int, orderBy: [ViewOrderBy!], where: ViewBoolExp): ViewAggregate!
  votes(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): [Vote!]!
  votesAggregate(distinctOn: [VoteSelectColumn!], limit: Int, offset: Int, orderBy: [VoteOrderBy!], where: VoteBoolExp): VoteAggregate!
}

type TenantAggregate {
  aggregate: TenantAggregateFields
  nodes: [Tenant!]!
}

input TenantAggregateBoolExp {
  bool_and: tenantAggregateBoolExpBool_and
  bool_or: tenantAggregateBoolExpBool_or
  count: tenantAggregateBoolExpCount
}

input tenantAggregateBoolExpBool_and {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpBool_or {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpCount {
  arguments: [TenantSelectColumn!]
  distinct: Boolean
  filter: TenantBoolExp
  predicate: IntComparisonExp!
}

type TenantAggregateFields {
  avg: TenantAvgFields
  count(columns: [TenantSelectColumn!], distinct: Boolean): Int!
  max: TenantMaxFields
  min: TenantMinFields
  stddev: TenantStddevFields
  stddevPop: TenantStddevPopFields
  stddevSamp: TenantStddevSampFields
  sum: TenantSumFields
  varPop: TenantVarPopFields
  varSamp: TenantVarSampFields
  variance: TenantVarianceFields
}

input TenantAggregateOrderBy {
  avg: TenantAvgOrderBy
  count: OrderBy
  max: TenantMaxOrderBy
  min: TenantMinOrderBy
  stddev: TenantStddevOrderBy
  stddevPop: TenantStddevPopOrderBy
  stddevSamp: TenantStddevSampOrderBy
  sum: TenantSumOrderBy
  varPop: TenantVarPopOrderBy
  varSamp: TenantVarSampOrderBy
  variance: TenantVarianceOrderBy
}

input TenantArrRelInsertInput {
  data: [TenantInsertInput!]!
  onConflict: TenantOnConflict
}

type TenantAvgFields {
  adminTeamId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantAvgOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

input TenantBoolExp {
  _and: [TenantBoolExp!]
  _not: TenantBoolExp
  _or: [TenantBoolExp!]
  accounts: AccountBoolExp
  accountsAggregate: AccountAggregateBoolExp
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  adminTeam: TeamBoolExp
  adminTeamId: BigintComparisonExp
  banks: BankBoolExp
  banksAggregate: BankAggregateBoolExp
  bots: BotBoolExp
  botsAggregate: BotAggregateBoolExp
  campusClusters: CampusClusterBoolExp
  campusClustersAggregate: CampusClusterAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  canteens: CanteenBoolExp
  canteensAggregate: CanteenAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  classGroups: ClassGroupBoolExp
  classGroupsAggregate: ClassGroupAggregateBoolExp
  cohorts: CohortBoolExp
  cohortsAggregate: CohortAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  domain: StringComparisonExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventFavorites: EventFavoriteBoolExp
  eventFavoritesAggregate: EventFavoriteAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventOrganizes: EventOrganizeBoolExp
  eventOrganizesAggregate: EventOrganizeAggregateBoolExp
  eventSupervisors: EventSupervisorBoolExp
  eventSupervisorsAggregate: EventSupervisorAggregateBoolExp
  eventValidationForm: FormBoolExp
  eventValidationFormId: BigintComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  grantAllocates: GrantAllocateBoolExp
  grantAllocatesAggregate: GrantAllocateAggregateBoolExp
  grants: GrantBoolExp
  grantsAggregate: GrantAggregateBoolExp
  id: BigintComparisonExp
  individuals: IndividualBoolExp
  individualsAggregate: IndividualAggregateBoolExp
  isOidcEnabled: BooleanComparisonExp
  issues: IssueBoolExp
  issuesAggregate: IssueAggregateBoolExp
  locations: LocationBoolExp
  locationsAggregate: LocationAggregateBoolExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  oidcCallbackUri: StringComparisonExp
  oidcClientId: StringComparisonExp
  oidcClientSecret: StringComparisonExp
  oidcDiscoveryUrl: StringComparisonExp
  oidcName: StringComparisonExp
  oidcScopes: StringComparisonExp
  pointName: StringComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  subjects: SubjectBoolExp
  subjectsAggregate: SubjectAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamHistories: TeamHistoryBoolExp
  teamHistoriesAggregate: TeamHistoryAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamMetrics: TeamMetricBoolExp
  teamMetricsAggregate: TeamMetricAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenantOrganizes: TenantOrganizeBoolExp
  tenantOrganizesAggregate: TenantOrganizeAggregateBoolExp
  threads: ThreadBoolExp
  threadsAggregate: ThreadAggregateBoolExp
  users: UserBoolExp
  usersAggregate: UserAggregateBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  views: ViewBoolExp
  viewsAggregate: ViewAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

enum TenantConstraint {
  tenant_admin_team_id_unique
  tenant_domain_unique
  tenant_event_validation_form_id_unique
  tenant_pkey
}

input TenantIncInput {
  adminTeamId: bigint
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
}

input TenantInsertInput {
  accounts: AccountArrRelInsertInput
  actions: ActionArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actors: ActorArrRelInsertInput
  adminTeam: TeamObjRelInsertInput
  adminTeamId: bigint
  banks: BankArrRelInsertInput
  bots: BotArrRelInsertInput
  campusClusters: CampusClusterArrRelInsertInput
  campuses: CampusArrRelInsertInput
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  canteens: CanteenArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  classGroups: ClassGroupArrRelInsertInput
  cohorts: CohortArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  documents: DocumentArrRelInsertInput
  domain: String
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventFavorites: EventFavoriteArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventOrganizes: EventOrganizeArrRelInsertInput
  eventSupervisors: EventSupervisorArrRelInsertInput
  eventValidationForm: FormObjRelInsertInput
  eventValidationFormId: bigint
  events: EventArrRelInsertInput
  expenseItems: ExpenseItemArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  favorites: FavoriteArrRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  finances: FinanceArrRelInsertInput
  follows: FollowArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  grantAllocates: GrantAllocateArrRelInsertInput
  grants: GrantArrRelInsertInput
  id: bigint
  individuals: IndividualArrRelInsertInput
  isOidcEnabled: Boolean
  issues: IssueArrRelInsertInput
  locations: LocationArrRelInsertInput
  missionJoins: MissionJoinArrRelInsertInput
  missions: MissionArrRelInsertInput
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
  poles: PoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  roles: RoleArrRelInsertInput
  sessions: SessionArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  socials: SocialArrRelInsertInput
  subjects: SubjectArrRelInsertInput
  tags: TagArrRelInsertInput
  teamHistories: TeamHistoryArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamMetrics: TeamMetricArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenantOrganizes: TenantOrganizeArrRelInsertInput
  threads: ThreadArrRelInsertInput
  users: UserArrRelInsertInput
  validations: ValidationArrRelInsertInput
  views: ViewArrRelInsertInput
  votes: VoteArrRelInsertInput
}

type TenantMaxFields {
  adminTeamId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

input TenantMaxOrderBy {
  adminTeamId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  oidcCallbackUri: OrderBy
  oidcClientId: OrderBy
  oidcClientSecret: OrderBy
  oidcDiscoveryUrl: OrderBy
  oidcName: OrderBy
  oidcScopes: OrderBy
  pointName: OrderBy
}

type TenantMinFields {
  adminTeamId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

input TenantMinOrderBy {
  adminTeamId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  oidcCallbackUri: OrderBy
  oidcClientId: OrderBy
  oidcClientSecret: OrderBy
  oidcDiscoveryUrl: OrderBy
  oidcName: OrderBy
  oidcScopes: OrderBy
  pointName: OrderBy
}

type TenantMutationResponse {
  affectedRows: Int!
  returning: [Tenant!]!
}

input TenantObjRelInsertInput {
  data: TenantInsertInput!
  onConflict: TenantOnConflict
}

input TenantOnConflict {
  constraint: TenantConstraint!
  updateColumns: [TenantUpdateColumn!]! = []
  where: TenantBoolExp
}

input TenantOrderBy {
  accountsAggregate: AccountAggregateOrderBy
  actionsAggregate: ActionAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  adminTeam: TeamOrderBy
  adminTeamId: OrderBy
  banksAggregate: BankAggregateOrderBy
  botsAggregate: BotAggregateOrderBy
  campusClustersAggregate: CampusClusterAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  canteensAggregate: CanteenAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  classGroupsAggregate: ClassGroupAggregateOrderBy
  cohortsAggregate: CohortAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  domain: OrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventFavoritesAggregate: EventFavoriteAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventOrganizesAggregate: EventOrganizeAggregateOrderBy
  eventSupervisorsAggregate: EventSupervisorAggregateOrderBy
  eventValidationForm: FormOrderBy
  eventValidationFormId: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  financesAggregate: FinanceAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  grantAllocatesAggregate: GrantAllocateAggregateOrderBy
  grantsAggregate: GrantAggregateOrderBy
  id: OrderBy
  individualsAggregate: IndividualAggregateOrderBy
  isOidcEnabled: OrderBy
  issuesAggregate: IssueAggregateOrderBy
  locationsAggregate: LocationAggregateOrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  missionsAggregate: MissionAggregateOrderBy
  oidcCallbackUri: OrderBy
  oidcClientId: OrderBy
  oidcClientSecret: OrderBy
  oidcDiscoveryUrl: OrderBy
  oidcName: OrderBy
  oidcScopes: OrderBy
  pointName: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  sessionsAggregate: SessionAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  subjectsAggregate: SubjectAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  teamHistoriesAggregate: TeamHistoryAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamMetricsAggregate: TeamMetricAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenantOrganizesAggregate: TenantOrganizeAggregateOrderBy
  threadsAggregate: ThreadAggregateOrderBy
  usersAggregate: UserAggregateOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  viewsAggregate: ViewAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

type TenantOrganize {
  campusCluster: CampusCluster!
  campusClusterId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual
  team: Team!
  teamId: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type TenantOrganizeAggregate {
  aggregate: TenantOrganizeAggregateFields
  nodes: [TenantOrganize!]!
}

input TenantOrganizeAggregateBoolExp {
  count: tenantOrganizeAggregateBoolExpCount
}

input tenantOrganizeAggregateBoolExpCount {
  arguments: [TenantOrganizeSelectColumn!]
  distinct: Boolean
  filter: TenantOrganizeBoolExp
  predicate: IntComparisonExp!
}

type TenantOrganizeAggregateFields {
  avg: TenantOrganizeAvgFields
  count(columns: [TenantOrganizeSelectColumn!], distinct: Boolean): Int!
  max: TenantOrganizeMaxFields
  min: TenantOrganizeMinFields
  stddev: TenantOrganizeStddevFields
  stddevPop: TenantOrganizeStddevPopFields
  stddevSamp: TenantOrganizeStddevSampFields
  sum: TenantOrganizeSumFields
  varPop: TenantOrganizeVarPopFields
  varSamp: TenantOrganizeVarSampFields
  variance: TenantOrganizeVarianceFields
}

input TenantOrganizeAggregateOrderBy {
  avg: TenantOrganizeAvgOrderBy
  count: OrderBy
  max: TenantOrganizeMaxOrderBy
  min: TenantOrganizeMinOrderBy
  stddev: TenantOrganizeStddevOrderBy
  stddevPop: TenantOrganizeStddevPopOrderBy
  stddevSamp: TenantOrganizeStddevSampOrderBy
  sum: TenantOrganizeSumOrderBy
  varPop: TenantOrganizeVarPopOrderBy
  varSamp: TenantOrganizeVarSampOrderBy
  variance: TenantOrganizeVarianceOrderBy
}

input TenantOrganizeArrRelInsertInput {
  data: [TenantOrganizeInsertInput!]!
  onConflict: TenantOrganizeOnConflict
}

type TenantOrganizeAvgFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TenantOrganizeAvgOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TenantOrganizeBoolExp {
  _and: [TenantOrganizeBoolExp!]
  _not: TenantOrganizeBoolExp
  _or: [TenantOrganizeBoolExp!]
  campusCluster: CampusClusterBoolExp
  campusClusterId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum TenantOrganizeConstraint {
  tenant_organize_pkey
}

input TenantOrganizeIncInput {
  campusClusterId: bigint
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input TenantOrganizeInsertInput {
  campusCluster: CampusClusterObjRelInsertInput
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type TenantOrganizeMaxFields {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

input TenantOrganizeMaxOrderBy {
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type TenantOrganizeMinFields {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

input TenantOrganizeMinOrderBy {
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type TenantOrganizeMutationResponse {
  affectedRows: Int!
  returning: [TenantOrganize!]!
}

input TenantOrganizeOnConflict {
  constraint: TenantOrganizeConstraint!
  updateColumns: [TenantOrganizeUpdateColumn!]! = []
  where: TenantOrganizeBoolExp
}

input TenantOrganizeOrderBy {
  campusCluster: CampusClusterOrderBy
  campusClusterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input TenantOrganizePkColumnsInput {
  id: bigint!
}

enum TenantOrganizeSelectColumn {
  campusClusterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  teamId
  tenantId
  type
}

input TenantOrganizeSetInput {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

type TenantOrganizeStddevFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TenantOrganizeStddevOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TenantOrganizeStddevPopFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TenantOrganizeStddevPopOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TenantOrganizeStddevSampFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TenantOrganizeStddevSampOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TenantOrganizeStreamCursorInput {
  initialValue: TenantOrganizeStreamCursorValueInput!
  ordering: CursorOrdering
}

input TenantOrganizeStreamCursorValueInput {
  campusClusterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
  type: String
}

type TenantOrganizeSumFields {
  campusClusterId: bigint
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

input TenantOrganizeSumOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

enum TenantOrganizeUpdateColumn {
  campusClusterId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  teamId
  tenantId
  type
}

input TenantOrganizeUpdates {
  _inc: TenantOrganizeIncInput
  _set: TenantOrganizeSetInput
  where: TenantOrganizeBoolExp!
}

type TenantOrganizeVarianceFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TenantOrganizeVarianceOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TenantOrganizeVarPopFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TenantOrganizeVarPopOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type TenantOrganizeVarSampFields {
  campusClusterId: Float
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

input TenantOrganizeVarSampOrderBy {
  campusClusterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

input TenantPkColumnsInput {
  id: bigint!
}

enum TenantSelectColumn {
  adminTeamId
  createdAt
  createdById
  deletedAt
  domain
  eventValidationFormId
  id
  isOidcEnabled
  oidcCallbackUri
  oidcClientId
  oidcClientSecret
  oidcDiscoveryUrl
  oidcName
  oidcScopes
  pointName
}

enum TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns {
  isOidcEnabled
}

enum TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns {
  isOidcEnabled
}

input TenantSetInput {
  adminTeamId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  isOidcEnabled: Boolean
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

type TenantStddevFields {
  adminTeamId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantStddevOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantStddevPopFields {
  adminTeamId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantStddevPopOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantStddevSampFields {
  adminTeamId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantStddevSampOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

input TenantStreamCursorInput {
  initialValue: TenantStreamCursorValueInput!
  ordering: CursorOrdering
}

input TenantStreamCursorValueInput {
  adminTeamId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  isOidcEnabled: Boolean
  oidcCallbackUri: String
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcName: String
  oidcScopes: String
  pointName: String
}

type TenantSumFields {
  adminTeamId: bigint
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
}

input TenantSumOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

enum TenantUpdateColumn {
  adminTeamId
  createdAt
  createdById
  deletedAt
  domain
  eventValidationFormId
  id
  isOidcEnabled
  oidcCallbackUri
  oidcClientId
  oidcClientSecret
  oidcDiscoveryUrl
  oidcName
  oidcScopes
  pointName
}

input TenantUpdates {
  _inc: TenantIncInput
  _set: TenantSetInput
  where: TenantBoolExp!
}

type TenantVarianceFields {
  adminTeamId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantVarianceOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantVarPopFields {
  adminTeamId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantVarPopOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type TenantVarSampFields {
  adminTeamId: Float
  createdById: Float
  eventValidationFormId: Float
  id: Float
}

input TenantVarSampOrderBy {
  adminTeamId: OrderBy
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
}

type Thread {
  content: Content!
  contentId: bigint!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  name: String!
  slug: String!
  tenant: Tenant!
  tenantId: bigint!
  threadContributors(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): [ThreadContributors!]!
  threadContributorsAggregate(distinctOn: [ThreadContributorsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadContributorsOrderBy!], where: ThreadContributorsBoolExp): ThreadContributorsAggregate!
  threadTags(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): [ThreadTags!]!
  threadTagsAggregate(distinctOn: [ThreadTagsSelectColumn!], limit: Int, offset: Int, orderBy: [ThreadTagsOrderBy!], where: ThreadTagsBoolExp): ThreadTagsAggregate!
}

type ThreadAggregate {
  aggregate: ThreadAggregateFields
  nodes: [Thread!]!
}

input ThreadAggregateBoolExp {
  count: threadAggregateBoolExpCount
}

input threadAggregateBoolExpCount {
  arguments: [ThreadSelectColumn!]
  distinct: Boolean
  filter: ThreadBoolExp
  predicate: IntComparisonExp!
}

type ThreadAggregateFields {
  avg: ThreadAvgFields
  count(columns: [ThreadSelectColumn!], distinct: Boolean): Int!
  max: ThreadMaxFields
  min: ThreadMinFields
  stddev: ThreadStddevFields
  stddevPop: ThreadStddevPopFields
  stddevSamp: ThreadStddevSampFields
  sum: ThreadSumFields
  varPop: ThreadVarPopFields
  varSamp: ThreadVarSampFields
  variance: ThreadVarianceFields
}

input ThreadAggregateOrderBy {
  avg: ThreadAvgOrderBy
  count: OrderBy
  max: ThreadMaxOrderBy
  min: ThreadMinOrderBy
  stddev: ThreadStddevOrderBy
  stddevPop: ThreadStddevPopOrderBy
  stddevSamp: ThreadStddevSampOrderBy
  sum: ThreadSumOrderBy
  varPop: ThreadVarPopOrderBy
  varSamp: ThreadVarSampOrderBy
  variance: ThreadVarianceOrderBy
}

input ThreadArrRelInsertInput {
  data: [ThreadInsertInput!]!
  onConflict: ThreadOnConflict
}

type ThreadAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ThreadAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ThreadBoolExp {
  _and: [ThreadBoolExp!]
  _not: ThreadBoolExp
  _or: [ThreadBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  name: StringComparisonExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  threadContributors: ThreadContributorsBoolExp
  threadContributorsAggregate: ThreadContributorsAggregateBoolExp
  threadTags: ThreadTagsBoolExp
  threadTagsAggregate: ThreadTagsAggregateBoolExp
}

enum ThreadConstraint {
  thread_content_id_unique
  thread_pkey
}

type ThreadContributors {
  individual: Individual!
  individualId: bigint!
  thread: Thread!
  threadId: bigint!
}

type ThreadContributorsAggregate {
  aggregate: ThreadContributorsAggregateFields
  nodes: [ThreadContributors!]!
}

input ThreadContributorsAggregateBoolExp {
  count: threadContributorsAggregateBoolExpCount
}

input threadContributorsAggregateBoolExpCount {
  arguments: [ThreadContributorsSelectColumn!]
  distinct: Boolean
  filter: ThreadContributorsBoolExp
  predicate: IntComparisonExp!
}

type ThreadContributorsAggregateFields {
  avg: ThreadContributorsAvgFields
  count(columns: [ThreadContributorsSelectColumn!], distinct: Boolean): Int!
  max: ThreadContributorsMaxFields
  min: ThreadContributorsMinFields
  stddev: ThreadContributorsStddevFields
  stddevPop: ThreadContributorsStddevPopFields
  stddevSamp: ThreadContributorsStddevSampFields
  sum: ThreadContributorsSumFields
  varPop: ThreadContributorsVarPopFields
  varSamp: ThreadContributorsVarSampFields
  variance: ThreadContributorsVarianceFields
}

input ThreadContributorsAggregateOrderBy {
  avg: ThreadContributorsAvgOrderBy
  count: OrderBy
  max: ThreadContributorsMaxOrderBy
  min: ThreadContributorsMinOrderBy
  stddev: ThreadContributorsStddevOrderBy
  stddevPop: ThreadContributorsStddevPopOrderBy
  stddevSamp: ThreadContributorsStddevSampOrderBy
  sum: ThreadContributorsSumOrderBy
  varPop: ThreadContributorsVarPopOrderBy
  varSamp: ThreadContributorsVarSampOrderBy
  variance: ThreadContributorsVarianceOrderBy
}

input ThreadContributorsArrRelInsertInput {
  data: [ThreadContributorsInsertInput!]!
  onConflict: ThreadContributorsOnConflict
}

type ThreadContributorsAvgFields {
  individualId: Float
  threadId: Float
}

input ThreadContributorsAvgOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

input ThreadContributorsBoolExp {
  _and: [ThreadContributorsBoolExp!]
  _not: ThreadContributorsBoolExp
  _or: [ThreadContributorsBoolExp!]
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
  thread: ThreadBoolExp
  threadId: BigintComparisonExp
}

enum ThreadContributorsConstraint {
  thread_contributors_pkey
}

input ThreadContributorsIncInput {
  individualId: bigint
  threadId: bigint
}

input ThreadContributorsInsertInput {
  individual: IndividualObjRelInsertInput
  individualId: bigint
  thread: ThreadObjRelInsertInput
  threadId: bigint
}

type ThreadContributorsMaxFields {
  individualId: bigint
  threadId: bigint
}

input ThreadContributorsMaxOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

type ThreadContributorsMinFields {
  individualId: bigint
  threadId: bigint
}

input ThreadContributorsMinOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

type ThreadContributorsMutationResponse {
  affectedRows: Int!
  returning: [ThreadContributors!]!
}

input ThreadContributorsOnConflict {
  constraint: ThreadContributorsConstraint!
  updateColumns: [ThreadContributorsUpdateColumn!]! = []
  where: ThreadContributorsBoolExp
}

input ThreadContributorsOrderBy {
  individual: IndividualOrderBy
  individualId: OrderBy
  thread: ThreadOrderBy
  threadId: OrderBy
}

input ThreadContributorsPkColumnsInput {
  individualId: bigint!
  threadId: bigint!
}

enum ThreadContributorsSelectColumn {
  individualId
  threadId
}

input ThreadContributorsSetInput {
  individualId: bigint
  threadId: bigint
}

type ThreadContributorsStddevFields {
  individualId: Float
  threadId: Float
}

input ThreadContributorsStddevOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

type ThreadContributorsStddevPopFields {
  individualId: Float
  threadId: Float
}

input ThreadContributorsStddevPopOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

type ThreadContributorsStddevSampFields {
  individualId: Float
  threadId: Float
}

input ThreadContributorsStddevSampOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

input ThreadContributorsStreamCursorInput {
  initialValue: ThreadContributorsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ThreadContributorsStreamCursorValueInput {
  individualId: bigint
  threadId: bigint
}

type ThreadContributorsSumFields {
  individualId: bigint
  threadId: bigint
}

input ThreadContributorsSumOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

enum ThreadContributorsUpdateColumn {
  individualId
  threadId
}

input ThreadContributorsUpdates {
  _inc: ThreadContributorsIncInput
  _set: ThreadContributorsSetInput
  where: ThreadContributorsBoolExp!
}

type ThreadContributorsVarianceFields {
  individualId: Float
  threadId: Float
}

input ThreadContributorsVarianceOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

type ThreadContributorsVarPopFields {
  individualId: Float
  threadId: Float
}

input ThreadContributorsVarPopOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

type ThreadContributorsVarSampFields {
  individualId: Float
  threadId: Float
}

input ThreadContributorsVarSampOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

input ThreadIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ThreadInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  threadContributors: ThreadContributorsArrRelInsertInput
  threadTags: ThreadTagsArrRelInsertInput
}

type ThreadMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

input ThreadMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

type ThreadMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

input ThreadMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

type ThreadMutationResponse {
  affectedRows: Int!
  returning: [Thread!]!
}

input ThreadObjRelInsertInput {
  data: ThreadInsertInput!
  onConflict: ThreadOnConflict
}

input ThreadOnConflict {
  constraint: ThreadConstraint!
  updateColumns: [ThreadUpdateColumn!]! = []
  where: ThreadBoolExp
}

input ThreadOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  threadContributorsAggregate: ThreadContributorsAggregateOrderBy
  threadTagsAggregate: ThreadTagsAggregateOrderBy
}

input ThreadPkColumnsInput {
  id: bigint!
}

enum ThreadSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  slug
  tenantId
}

input ThreadSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

type ThreadStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ThreadStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ThreadStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ThreadStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ThreadStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ThreadStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ThreadStreamCursorInput {
  initialValue: ThreadStreamCursorValueInput!
  ordering: CursorOrdering
}

input ThreadStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

type ThreadSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ThreadSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ThreadTags {
  tag: Tag!
  tagId: bigint!
  thread: Thread!
  threadId: bigint!
}

type ThreadTagsAggregate {
  aggregate: ThreadTagsAggregateFields
  nodes: [ThreadTags!]!
}

input ThreadTagsAggregateBoolExp {
  count: threadTagsAggregateBoolExpCount
}

input threadTagsAggregateBoolExpCount {
  arguments: [ThreadTagsSelectColumn!]
  distinct: Boolean
  filter: ThreadTagsBoolExp
  predicate: IntComparisonExp!
}

type ThreadTagsAggregateFields {
  avg: ThreadTagsAvgFields
  count(columns: [ThreadTagsSelectColumn!], distinct: Boolean): Int!
  max: ThreadTagsMaxFields
  min: ThreadTagsMinFields
  stddev: ThreadTagsStddevFields
  stddevPop: ThreadTagsStddevPopFields
  stddevSamp: ThreadTagsStddevSampFields
  sum: ThreadTagsSumFields
  varPop: ThreadTagsVarPopFields
  varSamp: ThreadTagsVarSampFields
  variance: ThreadTagsVarianceFields
}

input ThreadTagsAggregateOrderBy {
  avg: ThreadTagsAvgOrderBy
  count: OrderBy
  max: ThreadTagsMaxOrderBy
  min: ThreadTagsMinOrderBy
  stddev: ThreadTagsStddevOrderBy
  stddevPop: ThreadTagsStddevPopOrderBy
  stddevSamp: ThreadTagsStddevSampOrderBy
  sum: ThreadTagsSumOrderBy
  varPop: ThreadTagsVarPopOrderBy
  varSamp: ThreadTagsVarSampOrderBy
  variance: ThreadTagsVarianceOrderBy
}

input ThreadTagsArrRelInsertInput {
  data: [ThreadTagsInsertInput!]!
  onConflict: ThreadTagsOnConflict
}

type ThreadTagsAvgFields {
  tagId: Float
  threadId: Float
}

input ThreadTagsAvgOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

input ThreadTagsBoolExp {
  _and: [ThreadTagsBoolExp!]
  _not: ThreadTagsBoolExp
  _or: [ThreadTagsBoolExp!]
  tag: TagBoolExp
  tagId: BigintComparisonExp
  thread: ThreadBoolExp
  threadId: BigintComparisonExp
}

enum ThreadTagsConstraint {
  thread_tags_pkey
}

input ThreadTagsIncInput {
  tagId: bigint
  threadId: bigint
}

input ThreadTagsInsertInput {
  tag: TagObjRelInsertInput
  tagId: bigint
  thread: ThreadObjRelInsertInput
  threadId: bigint
}

type ThreadTagsMaxFields {
  tagId: bigint
  threadId: bigint
}

input ThreadTagsMaxOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

type ThreadTagsMinFields {
  tagId: bigint
  threadId: bigint
}

input ThreadTagsMinOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

type ThreadTagsMutationResponse {
  affectedRows: Int!
  returning: [ThreadTags!]!
}

input ThreadTagsOnConflict {
  constraint: ThreadTagsConstraint!
  updateColumns: [ThreadTagsUpdateColumn!]! = []
  where: ThreadTagsBoolExp
}

input ThreadTagsOrderBy {
  tag: TagOrderBy
  tagId: OrderBy
  thread: ThreadOrderBy
  threadId: OrderBy
}

input ThreadTagsPkColumnsInput {
  tagId: bigint!
  threadId: bigint!
}

enum ThreadTagsSelectColumn {
  tagId
  threadId
}

input ThreadTagsSetInput {
  tagId: bigint
  threadId: bigint
}

type ThreadTagsStddevFields {
  tagId: Float
  threadId: Float
}

input ThreadTagsStddevOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

type ThreadTagsStddevPopFields {
  tagId: Float
  threadId: Float
}

input ThreadTagsStddevPopOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

type ThreadTagsStddevSampFields {
  tagId: Float
  threadId: Float
}

input ThreadTagsStddevSampOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

input ThreadTagsStreamCursorInput {
  initialValue: ThreadTagsStreamCursorValueInput!
  ordering: CursorOrdering
}

input ThreadTagsStreamCursorValueInput {
  tagId: bigint
  threadId: bigint
}

type ThreadTagsSumFields {
  tagId: bigint
  threadId: bigint
}

input ThreadTagsSumOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

enum ThreadTagsUpdateColumn {
  tagId
  threadId
}

input ThreadTagsUpdates {
  _inc: ThreadTagsIncInput
  _set: ThreadTagsSetInput
  where: ThreadTagsBoolExp!
}

type ThreadTagsVarianceFields {
  tagId: Float
  threadId: Float
}

input ThreadTagsVarianceOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

type ThreadTagsVarPopFields {
  tagId: Float
  threadId: Float
}

input ThreadTagsVarPopOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

type ThreadTagsVarSampFields {
  tagId: Float
  threadId: Float
}

input ThreadTagsVarSampOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

enum ThreadUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  name
  slug
  tenantId
}

input ThreadUpdates {
  _inc: ThreadIncInput
  _set: ThreadSetInput
  where: ThreadBoolExp!
}

type ThreadVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ThreadVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ThreadVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ThreadVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ThreadVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ThreadVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

scalar timestamptz

input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

type User {
  actions(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): [Action!]!
  actionsAggregate(distinctOn: [ActionSelectColumn!], limit: Int, offset: Int, orderBy: [ActionOrderBy!], where: ActionBoolExp): ActionAggregate!
  classGroupTeachers(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): [ClassGroupTeacher!]!
  classGroupTeachersAggregate(distinctOn: [ClassGroupTeacherSelectColumn!], limit: Int, offset: Int, orderBy: [ClassGroupTeacherOrderBy!], where: ClassGroupTeacherBoolExp): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  eventJoins(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): [EventJoin!]!
  eventJoinsAggregate(distinctOn: [EventJoinSelectColumn!], limit: Int, offset: Int, orderBy: [EventJoinOrderBy!], where: EventJoinBoolExp): EventJoinAggregate!
  firstName: String!
  hiddenAt: timestamptz
  id: bigint!
  individual: Individual!
  individualId: bigint!
  isDarkModePreferred: Boolean!
  isDataAnonymizedOnDeactivation: Boolean!
  isDataExportedOnDeactivation: Boolean!
  isIntroductionFinished: Boolean!
  isOnboardingFinished: Boolean!
  lastName: String!
  middleNames: [String!]!
  missionJoins(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): [MissionJoin!]!
  missionJoinsAggregate(distinctOn: [MissionJoinSelectColumn!], limit: Int, offset: Int, orderBy: [MissionJoinOrderBy!], where: MissionJoinBoolExp): MissionJoinAggregate!
  points: Float!
  sessions(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): [Session!]!
  sessionsAggregate(distinctOn: [SessionSelectColumn!], limit: Int, offset: Int, orderBy: [SessionOrderBy!], where: SessionBoolExp): SessionAggregate!
  shortcuts(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): [Shortcut!]!
  shortcutsAggregate(distinctOn: [ShortcutSelectColumn!], limit: Int, offset: Int, orderBy: [ShortcutOrderBy!], where: ShortcutBoolExp): ShortcutAggregate!
  supervisedEvents(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): [EventSupervisor!]!
  supervisedEventsAggregate(distinctOn: [EventSupervisorSelectColumn!], limit: Int, offset: Int, orderBy: [EventSupervisorOrderBy!], where: EventSupervisorBoolExp): EventSupervisorAggregate!
  teamJoins(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): [TeamJoin!]!
  teamJoinsAggregate(distinctOn: [TeamJoinSelectColumn!], limit: Int, offset: Int, orderBy: [TeamJoinOrderBy!], where: TeamJoinBoolExp): TeamJoinAggregate!
  teamMembers(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): [TeamMember!]!
  teamMembersAggregate(distinctOn: [TeamMemberSelectColumn!], limit: Int, offset: Int, orderBy: [TeamMemberOrderBy!], where: TeamMemberBoolExp): TeamMemberAggregate!
  tenant: Tenant!
  tenantId: bigint!
}

type UserAggregate {
  aggregate: UserAggregateFields
  nodes: [User!]!
}

input UserAggregateBoolExp {
  bool_and: userAggregateBoolExpBool_and
  bool_or: userAggregateBoolExpBool_or
  count: userAggregateBoolExpCount
}

input userAggregateBoolExpBool_and {
  arguments: UserSelectColumnUserAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: UserBoolExp
  predicate: BooleanComparisonExp!
}

input userAggregateBoolExpBool_or {
  arguments: UserSelectColumnUserAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: UserBoolExp
  predicate: BooleanComparisonExp!
}

input userAggregateBoolExpCount {
  arguments: [UserSelectColumn!]
  distinct: Boolean
  filter: UserBoolExp
  predicate: IntComparisonExp!
}

type UserAggregateFields {
  avg: UserAvgFields
  count(columns: [UserSelectColumn!], distinct: Boolean): Int!
  max: UserMaxFields
  min: UserMinFields
  stddev: UserStddevFields
  stddevPop: UserStddevPopFields
  stddevSamp: UserStddevSampFields
  sum: UserSumFields
  varPop: UserVarPopFields
  varSamp: UserVarSampFields
  variance: UserVarianceFields
}

input UserAggregateOrderBy {
  avg: UserAvgOrderBy
  count: OrderBy
  max: UserMaxOrderBy
  min: UserMinOrderBy
  stddev: UserStddevOrderBy
  stddevPop: UserStddevPopOrderBy
  stddevSamp: UserStddevSampOrderBy
  sum: UserSumOrderBy
  varPop: UserVarPopOrderBy
  varSamp: UserVarSampOrderBy
  variance: UserVarianceOrderBy
}

input UserArrRelInsertInput {
  data: [UserInsertInput!]!
  onConflict: UserOnConflict
}

type UserAvgFields {
  createdById: Float
  id: Float
  individualId: Float
  points: Float
  tenantId: Float
}

input UserAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

input UserBoolExp {
  _and: [UserBoolExp!]
  _not: UserBoolExp
  _or: [UserBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  firstName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
  isDarkModePreferred: BooleanComparisonExp
  isDataAnonymizedOnDeactivation: BooleanComparisonExp
  isDataExportedOnDeactivation: BooleanComparisonExp
  isIntroductionFinished: BooleanComparisonExp
  isOnboardingFinished: BooleanComparisonExp
  lastName: StringComparisonExp
  middleNames: StringArrayComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  points: FloatComparisonExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  supervisedEvents: EventSupervisorBoolExp
  supervisedEventsAggregate: EventSupervisorAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum UserConstraint {
  user_individual_id_unique
  user_pkey
}

input UserIncInput {
  createdById: bigint
  id: bigint
  individualId: bigint
  points: Float
  tenantId: bigint
}

input UserInsertInput {
  actions: ActionArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  eventJoins: EventJoinArrRelInsertInput
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
  isDarkModePreferred: Boolean
  isDataAnonymizedOnDeactivation: Boolean
  isDataExportedOnDeactivation: Boolean
  isIntroductionFinished: Boolean
  isOnboardingFinished: Boolean
  lastName: String
  middleNames: [String!]
  missionJoins: MissionJoinArrRelInsertInput
  points: Float
  sessions: SessionArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  supervisedEvents: EventSupervisorArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type UserMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  lastName: String
  middleNames: [String!]
  points: Float
  tenantId: bigint
}

input UserMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individualId: OrderBy
  lastName: OrderBy
  middleNames: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

type UserMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  lastName: String
  middleNames: [String!]
  points: Float
  tenantId: bigint
}

input UserMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individualId: OrderBy
  lastName: OrderBy
  middleNames: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

type UserMutationResponse {
  affectedRows: Int!
  returning: [User!]!
}

input UserObjRelInsertInput {
  data: UserInsertInput!
  onConflict: UserOnConflict
}

input UserOnConflict {
  constraint: UserConstraint!
  updateColumns: [UserUpdateColumn!]! = []
  where: UserBoolExp
}

input UserOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
  isDarkModePreferred: OrderBy
  isDataAnonymizedOnDeactivation: OrderBy
  isDataExportedOnDeactivation: OrderBy
  isIntroductionFinished: OrderBy
  isOnboardingFinished: OrderBy
  lastName: OrderBy
  middleNames: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  points: OrderBy
  sessionsAggregate: SessionAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  supervisedEventsAggregate: EventSupervisorAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input UserPkColumnsInput {
  id: bigint!
}

enum UserSelectColumn {
  createdAt
  createdById
  deletedAt
  firstName
  hiddenAt
  id
  individualId
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
  lastName
  middleNames
  points
  tenantId
}

enum UserSelectColumnUserAggregateBoolExpBool_andArgumentsColumns {
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
}

enum UserSelectColumnUserAggregateBoolExpBool_orArgumentsColumns {
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
}

input UserSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  isDarkModePreferred: Boolean
  isDataAnonymizedOnDeactivation: Boolean
  isDataExportedOnDeactivation: Boolean
  isIntroductionFinished: Boolean
  isOnboardingFinished: Boolean
  lastName: String
  middleNames: [String!]
  points: Float
  tenantId: bigint
}

type UserStddevFields {
  createdById: Float
  id: Float
  individualId: Float
  points: Float
  tenantId: Float
}

input UserStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

type UserStddevPopFields {
  createdById: Float
  id: Float
  individualId: Float
  points: Float
  tenantId: Float
}

input UserStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

type UserStddevSampFields {
  createdById: Float
  id: Float
  individualId: Float
  points: Float
  tenantId: Float
}

input UserStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

input UserStreamCursorInput {
  initialValue: UserStreamCursorValueInput!
  ordering: CursorOrdering
}

input UserStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individualId: bigint
  isDarkModePreferred: Boolean
  isDataAnonymizedOnDeactivation: Boolean
  isDataExportedOnDeactivation: Boolean
  isIntroductionFinished: Boolean
  isOnboardingFinished: Boolean
  lastName: String
  middleNames: [String!]
  points: Float
  tenantId: bigint
}

type UserSumFields {
  createdById: bigint
  id: bigint
  individualId: bigint
  points: Float
  tenantId: bigint
}

input UserSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

enum UserUpdateColumn {
  createdAt
  createdById
  deletedAt
  firstName
  hiddenAt
  id
  individualId
  isDarkModePreferred
  isDataAnonymizedOnDeactivation
  isDataExportedOnDeactivation
  isIntroductionFinished
  isOnboardingFinished
  lastName
  middleNames
  points
  tenantId
}

input UserUpdates {
  _inc: UserIncInput
  _set: UserSetInput
  where: UserBoolExp!
}

type UserVarianceFields {
  createdById: Float
  id: Float
  individualId: Float
  points: Float
  tenantId: Float
}

input UserVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

type UserVarPopFields {
  createdById: Float
  id: Float
  individualId: Float
  points: Float
  tenantId: Float
}

input UserVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

type UserVarSampFields {
  createdById: Float
  id: Float
  individualId: Float
  points: Float
  tenantId: Float
}

input UserVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  points: OrderBy
  tenantId: OrderBy
}

type Validation {
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

type ValidationAggregate {
  aggregate: ValidationAggregateFields
  nodes: [Validation!]!
}

input ValidationAggregateBoolExp {
  count: validationAggregateBoolExpCount
}

input validationAggregateBoolExpCount {
  arguments: [ValidationSelectColumn!]
  distinct: Boolean
  filter: ValidationBoolExp
  predicate: IntComparisonExp!
}

type ValidationAggregateFields {
  avg: ValidationAvgFields
  count(columns: [ValidationSelectColumn!], distinct: Boolean): Int!
  max: ValidationMaxFields
  min: ValidationMinFields
  stddev: ValidationStddevFields
  stddevPop: ValidationStddevPopFields
  stddevSamp: ValidationStddevSampFields
  sum: ValidationSumFields
  varPop: ValidationVarPopFields
  varSamp: ValidationVarSampFields
  variance: ValidationVarianceFields
}

input ValidationAggregateOrderBy {
  avg: ValidationAvgOrderBy
  count: OrderBy
  max: ValidationMaxOrderBy
  min: ValidationMinOrderBy
  stddev: ValidationStddevOrderBy
  stddevPop: ValidationStddevPopOrderBy
  stddevSamp: ValidationStddevSampOrderBy
  sum: ValidationSumOrderBy
  varPop: ValidationVarPopOrderBy
  varSamp: ValidationVarSampOrderBy
  variance: ValidationVarianceOrderBy
}

input ValidationArrRelInsertInput {
  data: [ValidationInsertInput!]!
  onConflict: ValidationOnConflict
}

type ValidationAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ValidationBoolExp {
  _and: [ValidationBoolExp!]
  _not: ValidationBoolExp
  _or: [ValidationBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

enum ValidationConstraint {
  validation_pkey
}

input ValidationIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ValidationInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

type ValidationMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

input ValidationMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ValidationMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

input ValidationMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

type ValidationMutationResponse {
  affectedRows: Int!
  returning: [Validation!]!
}

input ValidationOnConflict {
  constraint: ValidationConstraint!
  updateColumns: [ValidationUpdateColumn!]! = []
  where: ValidationBoolExp
}

input ValidationOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

input ValidationPkColumnsInput {
  id: bigint!
}

enum ValidationSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  type
}

input ValidationSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

type ValidationStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ValidationStreamCursorInput {
  initialValue: ValidationStreamCursorValueInput!
  ordering: CursorOrdering
}

input ValidationStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

type ValidationSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ValidationSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ValidationUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  type
}

input ValidationUpdates {
  _inc: ValidationIncInput
  _set: ValidationSetInput
  where: ValidationBoolExp!
}

type ValidationVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ValidationVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ValidationVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type View {
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
}

type ViewAggregate {
  aggregate: ViewAggregateFields
  nodes: [View!]!
}

input ViewAggregateBoolExp {
  count: viewAggregateBoolExpCount
}

input viewAggregateBoolExpCount {
  arguments: [ViewSelectColumn!]
  distinct: Boolean
  filter: ViewBoolExp
  predicate: IntComparisonExp!
}

type ViewAggregateFields {
  avg: ViewAvgFields
  count(columns: [ViewSelectColumn!], distinct: Boolean): Int!
  max: ViewMaxFields
  min: ViewMinFields
  stddev: ViewStddevFields
  stddevPop: ViewStddevPopFields
  stddevSamp: ViewStddevSampFields
  sum: ViewSumFields
  varPop: ViewVarPopFields
  varSamp: ViewVarSampFields
  variance: ViewVarianceFields
}

input ViewAggregateOrderBy {
  avg: ViewAvgOrderBy
  count: OrderBy
  max: ViewMaxOrderBy
  min: ViewMinOrderBy
  stddev: ViewStddevOrderBy
  stddevPop: ViewStddevPopOrderBy
  stddevSamp: ViewStddevSampOrderBy
  sum: ViewSumOrderBy
  varPop: ViewVarPopOrderBy
  varSamp: ViewVarSampOrderBy
  variance: ViewVarianceOrderBy
}

input ViewArrRelInsertInput {
  data: [ViewInsertInput!]!
  onConflict: ViewOnConflict
}

type ViewAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ViewAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ViewBoolExp {
  _and: [ViewBoolExp!]
  _not: ViewBoolExp
  _or: [ViewBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

enum ViewConstraint {
  view_pkey
}

input ViewIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ViewInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

type ViewMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input ViewMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ViewMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

input ViewMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ViewMutationResponse {
  affectedRows: Int!
  returning: [View!]!
}

input ViewOnConflict {
  constraint: ViewConstraint!
  updateColumns: [ViewUpdateColumn!]! = []
  where: ViewBoolExp
}

input ViewOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

input ViewPkColumnsInput {
  id: bigint!
}

enum ViewSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input ViewSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type ViewStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ViewStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ViewStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ViewStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ViewStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ViewStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

input ViewStreamCursorInput {
  initialValue: ViewStreamCursorValueInput!
  ordering: CursorOrdering
}

input ViewStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

type ViewSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

input ViewSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

enum ViewUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
}

input ViewUpdates {
  _inc: ViewIncInput
  _set: ViewSetInput
  where: ViewBoolExp!
}

type ViewVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ViewVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ViewVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ViewVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type ViewVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

input ViewVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Vote {
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!
  tenant: Tenant!
  tenantId: bigint!
  value: smallint!
}

type VoteAggregate {
  aggregate: VoteAggregateFields
  nodes: [Vote!]!
}

input VoteAggregateBoolExp {
  count: voteAggregateBoolExpCount
}

input voteAggregateBoolExpCount {
  arguments: [VoteSelectColumn!]
  distinct: Boolean
  filter: VoteBoolExp
  predicate: IntComparisonExp!
}

type VoteAggregateFields {
  avg: VoteAvgFields
  count(columns: [VoteSelectColumn!], distinct: Boolean): Int!
  max: VoteMaxFields
  min: VoteMinFields
  stddev: VoteStddevFields
  stddevPop: VoteStddevPopFields
  stddevSamp: VoteStddevSampFields
  sum: VoteSumFields
  varPop: VoteVarPopFields
  varSamp: VoteVarSampFields
  variance: VoteVarianceFields
}

input VoteAggregateOrderBy {
  avg: VoteAvgOrderBy
  count: OrderBy
  max: VoteMaxOrderBy
  min: VoteMinOrderBy
  stddev: VoteStddevOrderBy
  stddevPop: VoteStddevPopOrderBy
  stddevSamp: VoteStddevSampOrderBy
  sum: VoteSumOrderBy
  varPop: VoteVarPopOrderBy
  varSamp: VoteVarSampOrderBy
  variance: VoteVarianceOrderBy
}

input VoteArrRelInsertInput {
  data: [VoteInsertInput!]!
  onConflict: VoteOnConflict
}

type VoteAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

input VoteBoolExp {
  _and: [VoteBoolExp!]
  _not: VoteBoolExp
  _or: [VoteBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  value: SmallintComparisonExp
}

enum VoteConstraint {
  vote_pkey
}

input VoteIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

input VoteInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  value: smallint
}

type VoteMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  value: smallint
}

input VoteMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  value: smallint
}

input VoteMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteMutationResponse {
  affectedRows: Int!
  returning: [Vote!]!
}

input VoteOnConflict {
  constraint: VoteConstraint!
  updateColumns: [VoteUpdateColumn!]! = []
  where: VoteBoolExp
}

input VoteOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  value: OrderBy
}

input VotePkColumnsInput {
  id: bigint!
}

enum VoteSelectColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  value
}

input VoteSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  value: smallint
}

type VoteStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

input VoteStreamCursorInput {
  initialValue: VoteStreamCursorValueInput!
  ordering: CursorOrdering
}

input VoteStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  value: smallint
}

type VoteSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

input VoteSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

enum VoteUpdateColumn {
  contentId
  createdAt
  createdById
  deletedAt
  hiddenAt
  id
  tenantId
  value
}

input VoteUpdates {
  _inc: VoteIncInput
  _set: VoteSetInput
  where: VoteBoolExp!
}

type VoteVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type VoteVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

input VoteVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

type Log {
  id: String!
  createdAt: timestamptz!
  createdBy: Individual
  eventType: String!
  context: String!
  entityName: String!
  entityId: bigint!
  diff: jsonb!
  note: String!
  team: Team
  event: Event
  individual: Individual
  tenant: Tenant
}

scalar Upload

input LoginInput {
  username: String!
  password: String!
}

type UserLogin {
  user: User!
  canManageTenant: Boolean!
  onboardingTeams: [Team!]!
}

type GeocodeAddress {
  latitude: Float!
  longitude: Float!
  category: String!
  name: String!
  streetNumber: String!
  street: String!
  zip: String!
  city: String!
  state: String!
  country: String!
  geoapifyId: String!
}

type AddressInfo {
  streetNumber: Int
  streetType: String!
  streetName: String!
  city: String!
  cityCode: String!
}

type CompanyInfo {
  nationalId: String!
  type: String
  activity: String
  name: String!
  address: AddressInfo!
}

input AddressInfoInput {
  streetNumber: Int!
  streetType: String!
  streetName: String!
  city: String!
  cityCode: String!
}

input SearchCompanyQuery {
  name: String!
  address: AddressInfoInput
}

type LineItem {
  name: String!
  quantity: Int!
  price: Float!
}

type ProcessedReceipt {
  amount: Float
  lineItems: [LineItem!]!
  address: String!
  tax: Float
  date: String
  vendorName: String
  phone: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}