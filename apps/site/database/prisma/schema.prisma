generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Action {
  id                BigInt     @id @default(dbgenerated("snowflake()"))
  createdAt         DateTime   @default(now()) @db.Timestamptz(0)
  createdById       BigInt?
  deletedAt         DateTime?  @db.Timestamptz(0)
  tenantScopeId     BigInt
  name              String
  description       String     @default("")
  points            Int?       @db.SmallInt
  state             String
  processedById     BigInt?
  pointsProcessedAt DateTime?  @db.Timestamptz(0)
  teamId            BigInt?
  userId            BigInt
  eventJoinId       BigInt?
  projectId         BigInt?
  eventJoin         EventJoin? @relation(fields: [eventJoinId], references: [id], map: "action_event_join_id_foreign")
  processedBy       User?      @relation("action_processed_by", fields: [processedById], references: [id], map: "action_processed_by_id_foreign")
  project           Project?   @relation(fields: [projectId], references: [id], map: "action_project_id_foreign")
  team              Team?      @relation(fields: [teamId], references: [id], map: "action_team_id_foreign")
  user              User       @relation("action_user", fields: [userId], references: [id], onDelete: NoAction, map: "action_user_id_foreign")
  createdBy         User?      @relation("action_created_by", fields: [createdById], references: [id], map: "action_created_by_id_foreign")
  tenantScope       Tenant     @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "action_tenant_scope_id_foreign")

  @@map("action")
}

model Actor {
  id                   BigInt        @id @default(dbgenerated("snowflake()"))
  createdAt            DateTime      @default(now()) @db.Timestamptz(0)
  createdById          BigInt?
  deletedAt            DateTime?     @db.Timestamptz(0)
  tenantScopeId        BigInt?
  name                 String
  avatar               String?
  banner               String?
  status               String        @default("")
  bio                  String        @default("")
  email                String?
  website              String?
  ical                 String        @unique(map: "actor_ical_unique") @default(dbgenerated("id_generator(21)"))
  actorImages          ActorImage[]
  actorTags            ActorTag[]
  bankInfos            BankInfo[]
  followers            Follow[]
  locations            Location[]
  socials              Social[]
  legalUnit            LegalUnit?
  team                 Team?
  tenant               Tenant?       @relation("tenant_actor")
  user                 User?         @relation("user_actor")
  payedTransactions    Transaction[] @relation("transaction_payed_by")
  receivedTransactions Transaction[] @relation("transaction_received_by")
  createdBy            User?         @relation("actor_created_by", fields: [createdById], references: [id], map: "actor_created_by_id_foreign")
  tenantScope          Tenant?       @relation("actor_tenant_scope", fields: [tenantScopeId], references: [id], map: "actor_tenant_scope_id_foreign")

  @@map("actor")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ActorImage {
  id            BigInt     @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime   @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime?  @db.Timestamptz(0)
  tenantScopeId BigInt?
  actorId       BigInt
  imageId       BigInt     @unique(map: "actor_image_image_id_unique")
  type          String
  actor         Actor      @relation(fields: [actorId], references: [id], onDelete: Cascade, map: "actor_image_actor_id_foreign")
  image         FileUpload @relation(fields: [imageId], references: [id], onDelete: Cascade, map: "actor_image_image_id_foreign")
  createdBy     User?      @relation(fields: [createdById], references: [id], map: "actor_image_created_by_id_foreign")
  tenantScope   Tenant?    @relation(fields: [tenantScopeId], references: [id], map: "actor_image_tenant_scope_id_foreign")

  @@map("actor_image")
}

model ActorTag {
  id          BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt   DateTime  @default(now()) @db.Timestamptz(0)
  createdById BigInt?
  deletedAt   DateTime? @db.Timestamptz(0)
  actorId     BigInt
  tagId       BigInt    @unique(map: "actor_tag_tag_id_unique")
  actor       Actor     @relation(fields: [actorId], references: [id], onDelete: Cascade, map: "actor_tag_actor_id_foreign")
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "actor_tag_tag_id_foreign")
  createdBy   User?     @relation(fields: [createdById], references: [id], map: "actor_tag_created_by_id_foreign")

  @@map("actor_tag")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Address {
  geoapifyId         String     @id
  createdAt          DateTime   @default(now()) @db.Timestamptz(0)
  deletedAt          DateTime?  @db.Timestamptz(0)
  latitude           Float?     @db.Real
  longitude          Float?     @db.Real
  category           String     @default("")
  name               String     @default("")
  streetNumber       String
  street             String
  zip                String
  city               String
  state              String     @default("")
  country            String     @default("FR")
  addressOfBanks     BankInfo[]
  addressOfLocations Location[]

  @@map("address")
}

model AdminRole {
  id                      BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt               DateTime  @default(now()) @db.Timestamptz(0)
  createdById             BigInt?
  deletedAt               DateTime? @db.Timestamptz(0)
  userId                  BigInt
  tenantId                BigInt?
  canCreateTenant         Boolean   @default(false)
  canManageTenantEntities Boolean   @default(false)
  canDeleteTenantEntities Boolean   @default(false)
  user                    User      @relation("admin_role_user", fields: [userId], references: [id], onDelete: NoAction, map: "admin_role_user_id_foreign")
  createdBy               User?     @relation("admin_role_created_by", fields: [createdById], references: [id], map: "admin_role_created_by_id_foreign")
  tenant                  Tenant?   @relation(fields: [tenantId], references: [id], map: "admin_role_tenant_id_foreign")

  @@map("admin_role")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model BankAccount {
  id            BigInt        @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime      @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime?     @db.Timestamptz(0)
  tenantScopeId BigInt
  type          String        @default("Primary")
  name          String?
  parentId      BigInt?
  bankInfoId    BigInt?
  teamId        BigInt
  bankInfo      BankInfo?     @relation(fields: [bankInfoId], references: [id], map: "bank_account_bank_info_id_foreign")
  parent        BankAccount?  @relation("bank_account", fields: [parentId], references: [id], map: "bank_account_parent_id_foreign")
  children      BankAccount[] @relation("bank_account")
  team          Team          @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "bank_account_team_id_foreign")
  transactions  Transaction[]
  createdBy     User?         @relation(fields: [createdById], references: [id], map: "bank_account_created_by_id_foreign")
  tenantScope   Tenant        @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "bank_account_tenant_scope_id_foreign")

  @@map("bank_account")
}

model BankInfo {
  id              BigInt        @id @default(dbgenerated("snowflake()"))
  createdAt       DateTime      @default(now()) @db.Timestamptz(0)
  createdById     BigInt?
  deletedAt       DateTime?     @db.Timestamptz(0)
  tenantScopeId   BigInt?
  bicSwift        String
  holderName      String        @default("")
  iban            String
  actorId         BigInt
  bankId          BigInt
  branchAddressId String
  bankAccounts    BankAccount[]
  actor           Actor         @relation(fields: [actorId], references: [id], onDelete: NoAction, map: "bank_info_actor_id_foreign")
  bank            LegalUnit     @relation(fields: [bankId], references: [id], onDelete: NoAction, map: "bank_info_bank_id_foreign")
  branchAddress   Address       @relation(fields: [branchAddressId], references: [geoapifyId], onDelete: NoAction, map: "bank_info_branch_address_id_foreign")
  expenses        Expense[]
  createdBy       User?         @relation(fields: [createdById], references: [id], map: "bank_info_created_by_id_foreign")
  tenantScope     Tenant?       @relation(fields: [tenantScopeId], references: [id], map: "bank_info_tenant_scope_id_foreign")

  @@map("bank_info")
}

model Campus {
  id              BigInt        @id @default(dbgenerated("snowflake()"))
  createdAt       DateTime      @default(now()) @db.Timestamptz(0)
  createdById     BigInt?
  deletedAt       DateTime?     @db.Timestamptz(0)
  tenantScopeId   BigInt
  hiddenAt        DateTime?     @db.Timestamptz(0)
  name            String
  slug            String
  locationId      BigInt
  campusClusterId BigInt
  campusCluster   CampusCluster @relation(fields: [campusClusterId], references: [id], onDelete: NoAction, map: "campus_campus_cluster_id_foreign")
  location        Location      @relation(fields: [locationId], references: [id], onDelete: NoAction, map: "campus_location_id_foreign")
  createdBy       User?         @relation(fields: [createdById], references: [id], map: "campus_created_by_id_foreign")
  tenantScope     Tenant        @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "campus_tenant_scope_id_foreign")

  @@map("campus")
}

model CampusCluster {
  id            BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime? @db.Timestamptz(0)
  tenantScopeId BigInt
  hiddenAt      DateTime? @db.Timestamptz(0)
  name          String
  slug          String
  campuses      Campus[]
  createdBy     User?     @relation(fields: [createdById], references: [id], map: "campus_cluster_created_by_id_foreign")
  tenantScope   Tenant    @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "campus_cluster_tenant_scope_id_foreign")

  @@map("campus_cluster")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Event {
  id                         BigInt             @id @default(dbgenerated("snowflake()"))
  createdAt                  DateTime           @default(now()) @db.Timestamptz(0)
  createdById                BigInt?
  deletedAt                  DateTime?          @db.Timestamptz(0)
  tenantScopeId              BigInt
  hiddenAt                   DateTime?          @db.Timestamptz(0)
  start                      DateTime           @db.Timestamptz(0)
  end                        DateTime           @db.Timestamptz(0)
  name                       String
  description                String
  slug                       String             @unique(map: "event_slug_unique")
  price                      Float              @default(0) @db.Real
  pointsAwardedForAttendance Float              @default(0) @db.Real
  maxParticipants            Int?               @db.SmallInt
  state                      String             @default("Draft")
  isPrivate                  Boolean            @default(false)
  isAutoAcceptingJoins       Boolean            @default(true)
  isTemplate                 Boolean            @default(false)
  meta                       Json               @default("{}")
  locationId                 BigInt
  approvalSubmissionId       BigInt?            @unique(map: "event_event_approval_submission_id_unique")
  bannerId                   BigInt?
  joinFormId                 BigInt?            @unique(map: "event_join_form_id_unique")
  nextApprovalStepId         BigInt?
  approvalSubmission         FormSubmission?    @relation(fields: [approvalSubmissionId], references: [id], map: "event_event_approval_submission_id_foreign")
  banner                     FileUpload?        @relation(fields: [bannerId], references: [id], onDelete: Cascade, map: "event_banner_id_foreign")
  location                   Location           @relation(fields: [locationId], references: [id], onDelete: NoAction, map: "event_location_id_foreign")
  nextApprovalStep           EventApprovalStep? @relation(fields: [nextApprovalStepId], references: [id], map: "event_next_event_approval_step_id_foreign")
  eventApprovals             EventApproval[]
  eventFavorites             EventFavorite[]
  eventJoins                 EventJoin[]
  eventOrganizes             EventOrganize[]
  joinForm                   Form?              @relation("event_join_form_id", fields: [joinFormId], references: [id], onDelete: NoAction, map: "event_join_form_id_foreign")
  logs                       Log[]
  transactions               Transaction[]
  createdBy                  User?              @relation(fields: [createdById], references: [id], map: "event_created_by_id_foreign")
  tenantScope                Tenant             @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_tenant_scope_id_foreign")

  @@index([isPrivate], map: "event_is_private_index")
  @@map("event")
}

model EventApproval {
  id                  BigInt             @id @default(dbgenerated("snowflake()"))
  createdAt           DateTime           @default(now()) @db.Timestamptz(0)
  createdById         BigInt?
  deletedAt           DateTime?          @db.Timestamptz(0)
  tenantScopeId       BigInt
  hiddenAt            DateTime?          @db.Timestamptz(0)
  message             String             @default("")
  isApproved          Boolean            @default(true)
  eventId             BigInt?
  eventApprovalStepId BigInt?
  eventApprovalStep   EventApprovalStep? @relation(fields: [eventApprovalStepId], references: [id], onDelete: Cascade, map: "event_approval_event_approval_step_id_foreign")
  event               Event?             @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "event_approval_event_id_foreign")
  createdBy           User?              @relation(fields: [createdById], references: [id], map: "event_approval_created_by_id_foreign")
  tenantScope         Tenant             @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_approval_tenant_scope_id_foreign")

  @@map("event_approval")
}

model EventApprovalStep {
  id                      BigInt                   @id @default(dbgenerated("snowflake()"))
  createdAt               DateTime                 @default(now()) @db.Timestamptz(0)
  createdById             BigInt?
  deletedAt               DateTime?                @db.Timestamptz(0)
  tenantScopeId           BigInt
  hiddenAt                DateTime?                @db.Timestamptz(0)
  name                    String                   @db.VarChar(255)
  order                   Int
  description             String                   @default("") @db.VarChar(255)
  previousStepId          BigInt?
  events                  Event[]
  eventApprovals          EventApproval[]
  previousStep            EventApprovalStep?       @relation("event_approval_step", fields: [previousStepId], references: [id], map: "event_approval_step_previous_step_id_foreign")
  nextSteps               EventApprovalStep[]      @relation("event_approval_step")
  eventApprovalValidators EventApprovalValidator[]
  createdBy               User?                    @relation(fields: [createdById], references: [id], map: "event_approval_step_created_by_id_foreign")
  tenantScope             Tenant                   @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_approval_step_tenant_scope_id_foreign")

  @@map("event_approval_step")
}

model EventApprovalValidator {
  id            BigInt            @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime          @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime?         @db.Timestamptz(0)
  tenantScopeId BigInt
  stepId        BigInt
  userId        BigInt
  canValidate   Boolean           @default(false)
  isNotified    Boolean           @default(false)
  step          EventApprovalStep @relation(fields: [stepId], references: [id], onDelete: NoAction, map: "event_approval_validator_step_id_foreign")
  user          User              @relation("event_approval_validator_user", fields: [userId], references: [id], onDelete: NoAction, map: "event_approval_validator_user_id_foreign")
  createdBy     User?             @relation("event_approval_validator_created_by", fields: [createdById], references: [id], map: "event_approval_validator_created_by_id_foreign")
  tenantScope   Tenant            @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_approval_validator_tenant_scope_id_foreign")

  @@map("event_approval_validator")
}

model EventFavorite {
  id            BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime? @db.Timestamptz(0)
  tenantScopeId BigInt
  eventId       BigInt
  event         Event     @relation(fields: [eventId], references: [id], onDelete: NoAction, map: "event_favorite_event_id_foreign")
  createdBy     User?     @relation(fields: [createdById], references: [id], map: "event_favorite_created_by_id_foreign")
  tenantScope   Tenant    @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_favorite_tenant_scope_id_foreign")

  @@map("event_favorite")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model EventJoin {
  id                         BigInt          @id @default(dbgenerated("snowflake()"))
  createdAt                  DateTime        @default(now()) @db.Timestamptz(0)
  createdById                BigInt?
  deletedAt                  DateTime?       @db.Timestamptz(0)
  tenantScopeId              BigInt
  state                      String          @default("Pending")
  isPresent                  Boolean?
  processedById              BigInt?
  processedAt                DateTime?       @db.Timestamptz(0)
  participationProcessedById BigInt?
  participationProcessedAt   DateTime?       @db.Timestamptz(0)
  participationProcessedVia  String?
  eventId                    BigInt
  joinedById                 BigInt
  qrCodeId                   BigInt?
  missionJoinId              BigInt?
  joinFormSubmissionId       BigInt?         @unique(map: "event_join_form_submission_id_unique")
  actions                    Action[]
  missionJoins               MissionJoin[]
  event                      Event           @relation(fields: [eventId], references: [id], onDelete: NoAction, map: "event_join_event_id_foreign")
  joinFormSubmission         FormSubmission? @relation(fields: [joinFormSubmissionId], references: [id], map: "event_join_form_submission_id_foreign")
  joinedBy                   User            @relation("event_join_joined_by", fields: [joinedById], references: [id], onDelete: NoAction, map: "event_join_joined_by_id_foreign")
  participationProcessedBy   User?           @relation("event_join_participation_processed_by", fields: [participationProcessedById], references: [id], map: "event_join_participation_processed_by_id_foreign")
  processedBy                User?           @relation("event_join_processed_by", fields: [processedById], references: [id], map: "event_join_processed_by_id_foreign")
  qrCode                     FileUpload?     @relation(fields: [qrCodeId], references: [id], map: "event_join_qr_code_id_foreign")
  createdBy                  User?           @relation("event_join_created_by", fields: [createdById], references: [id], map: "event_join_created_by_id_foreign")
  tenantScope                Tenant          @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_join_tenant_scope_id_foreign")

  @@map("event_join")
}

model EventOrganize {
  id               BigInt            @id @default(dbgenerated("snowflake()"))
  createdAt        DateTime          @default(now()) @db.Timestamptz(0)
  createdById      BigInt?
  deletedAt        DateTime?         @db.Timestamptz(0)
  tenantScopeId    BigInt
  description      String            @default("")
  eventId          BigInt
  teamId           BigInt
  projectId        BigInt?
  event            Event             @relation(fields: [eventId], references: [id], onDelete: NoAction, map: "event_organize_event_id_foreign")
  project          Project?          @relation(fields: [projectId], references: [id], map: "event_organize_project_id_foreign")
  team             Team              @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "event_organize_team_id_foreign")
  eventSupervisors EventSupervisor[]
  missions         Mission[]
  createdBy        User?             @relation(fields: [createdById], references: [id], map: "event_organize_created_by_id_foreign")
  tenantScope      Tenant            @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_organize_tenant_scope_id_foreign")

  @@map("event_organize")
}

model EventSupervisor {
  id              BigInt        @id @default(dbgenerated("snowflake()"))
  createdAt       DateTime      @default(now()) @db.Timestamptz(0)
  createdById     BigInt?
  deletedAt       DateTime?     @db.Timestamptz(0)
  tenantScopeId   BigInt
  title           String?
  userId          BigInt
  eventOrganizeId BigInt
  eventOrganize   EventOrganize @relation(fields: [eventOrganizeId], references: [id], onDelete: NoAction, map: "event_supervisor_event_organize_id_foreign")
  user            User          @relation("event_supervisor_user", fields: [userId], references: [id], onDelete: NoAction, map: "event_supervisor_user_id_foreign")
  createdBy       User?         @relation("event_supervisor_created_by", fields: [createdById], references: [id], map: "event_supervisor_created_by_id_foreign")
  tenantScope     Tenant        @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "event_supervisor_tenant_scope_id_foreign")

  @@map("event_supervisor")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Expense {
  id              BigInt        @id @default(dbgenerated("snowflake()"))
  createdAt       DateTime      @default(now()) @db.Timestamptz(0)
  createdById     BigInt?
  deletedAt       DateTime?     @db.Timestamptz(0)
  tenantScopeId   BigInt
  hiddenAt        DateTime?     @db.Timestamptz(0)
  description     String
  state           String        @default("Pending")
  lastNotifiedAt  DateTime?     @db.Timestamptz(0)
  processedById   BigInt?
  processedAt     DateTime?     @db.Timestamptz(0)
  expenseReportId BigInt
  bankInfoId      BigInt
  bankInfo        BankInfo      @relation(fields: [bankInfoId], references: [id], onDelete: NoAction, map: "expense_bank_info_id_foreign")
  expenseReport   FileUpload    @relation(fields: [expenseReportId], references: [id], onDelete: NoAction, map: "expense_expense_report_id_foreign")
  expenseItems    ExpenseItem[]
  transaction     Transaction?
  processedBy     User?         @relation("expense_processed_by", fields: [processedById], references: [id], map: "expense_processed_by_id_foreign")
  createdBy       User?         @relation("expense_created_by", fields: [createdById], references: [id], map: "expense_created_by_id_foreign")
  tenantScope     Tenant        @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "expense_tenant_scope_id_foreign")

  @@map("expense")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ExpenseItem {
  id            BigInt                   @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime                 @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime?                @db.Timestamptz(0)
  tenantScopeId BigInt
  name          String
  description   String                   @default("")
  unitCost      Float                    @db.Real
  quantity      Int                      @db.SmallInt
  category      String                   @default("Other")
  payedAt       DateTime?                @db.Timestamptz(0)
  companyId     BigInt?
  expenseId     BigInt?
  company       LegalUnit?               @relation(fields: [companyId], references: [id], map: "expense_item_company_id_foreign")
  expense       Expense?                 @relation(fields: [expenseId], references: [id], map: "expense_item_expense_id_foreign")
  attachments   ExpenseItemAttachments[]
  createdBy     User?                    @relation(fields: [createdById], references: [id], map: "expense_item_created_by_id_foreign")
  tenantScope   Tenant                   @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "expense_item_tenant_scope_id_foreign")

  @@map("expense_item")
}

model ExpenseItemAttachments {
  expenseItemId BigInt
  fileUploadId  BigInt      @unique(map: "expense_item_attachments_file_upload_id_unique")
  expenseItem   ExpenseItem @relation(fields: [expenseItemId], references: [id], onDelete: Cascade, map: "expense_item_attachments_expense_item_id_foreign")
  fileUpload    FileUpload  @relation(fields: [fileUploadId], references: [id], onDelete: Cascade, map: "expense_item_attachments_file_upload_id_foreign")

  @@id([expenseItemId, fileUploadId])
  @@map("expense_item_attachments")
}

model FileUpload {
  id                                          BigInt                     @id @default(dbgenerated("snowflake()"))
  createdAt                                   DateTime                   @default(now()) @db.Timestamptz(0)
  createdById                                 BigInt?
  deletedAt                                   DateTime?                  @db.Timestamptz(0)
  tenantScopeId                               BigInt?
  linkedFormSubmissionId                      BigInt?
  signatureGrantId                            BigInt?
  signatureGrantAllocateId                    BigInt?
  generatedDocumentGrantId                    BigInt?
  generatedDocumentGrantAllocateId            BigInt?
  hiddenAt                                    DateTime?                  @db.Timestamptz(0)
  name                                        String
  size                                        Int
  type                                        String
  url                                         String                     @unique(map: "file_upload_url_unique")
  bucket                                      String
  fileLastModifiedAt                          DateTime                   @default(now()) @db.Timestamptz(0)
  actorImage                                  ActorImage?
  events                                      Event[]
  eventJoins                                  EventJoin[]
  expenses                                    Expense[]
  linkedFormSubmission                        FormSubmission?            @relation("form_submission_file_upload", fields: [linkedFormSubmissionId], references: [id], onDelete: NoAction, map: "file_upload_attachment_of_form_submission_id_foreign")
  expenseItemAttachment                       ExpenseItemAttachments?
  grantAllocateAttachments                    GrantAllocateAttachments[]
  grantAttachments                            GrantAttachments[]
  grantGrantGeneratedDocument                 Grant?                     @relation("grant_generated_document")
  grantGrantSignature                         Grant?                     @relation("grant_signature")
  grantAllocateGrantAllocateGeneratedDocument GrantAllocate?             @relation("grant_allocate_generated_document")
  grantAllocateGrantAllocateSignature         GrantAllocate?             @relation("grant_allocate_signature")
  locationImages                              LocationImages?
  projects                                    Project[]
  tags                                        Tag[]
  teams                                       Team[]
  teamDocument                                TeamDocument?
  transactionAttachments                      TransactionAttachments[]
  createdBy                                   User?                      @relation(fields: [createdById], references: [id], map: "file_upload_created_by_id_foreign")
  tenantScope                                 Tenant?                    @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "file_upload_tenant_scope_id_foreign")

  @@map("file_upload")
}

model Follow {
  id              BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt       DateTime  @default(now()) @db.Timestamptz(0)
  createdById     BigInt?
  deletedAt       DateTime? @db.Timestamptz(0)
  tenantScopeId   BigInt
  followedActorId BigInt
  followedActor   Actor     @relation(fields: [followedActorId], references: [id], onDelete: NoAction, map: "follow_followed_actor_id_foreign")
  createdBy       User?     @relation(fields: [createdById], references: [id], map: "follow_created_by_id_foreign")
  tenantScope     Tenant    @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "follow_tenant_scope_id_foreign")

  @@map("follow")
}

model Form {
  id                        BigInt           @id @default(dbgenerated("snowflake()"))
  createdAt                 DateTime         @default(now()) @db.Timestamptz(0)
  createdById               BigInt?
  deletedAt                 DateTime?        @db.Timestamptz(0)
  hiddenAt                  DateTime?        @db.Timestamptz(0)
  tenantScopeId             BigInt
  schema                    Json
  isEnabled                 Boolean          @default(true)
  isAllowingMultipleAnswers Boolean          @default(false)
  isAllowingEditingAnswers  Boolean          @default(true)
  isLocked                  Boolean          @default(false)
  formSubmissions           FormSubmission[]
  joinFormOfTeam            Team?            @relation("team_join_form_id")
  joinFormOfEvent           Event?           @relation("event_join_form_id")
  tenantValidationForm      Tenant?          @relation("tenant_event_validation_form")
  createdBy                 User?            @relation(fields: [createdById], references: [id], map: "form_created_by_id_foreign")
  tenantScope               Tenant           @relation("form_tenant_scope", fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "form_tenant_scope_id_foreign")

  @@map("form")
}

model FormSubmission {
  id            BigInt       @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime     @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime?    @db.Timestamptz(0)
  tenantScopeId BigInt
  submission    Json
  formId        BigInt
  event         Event?
  eventJoin     EventJoin?
  teamJoin      TeamJoin?
  fileUploads   FileUpload[] @relation("form_submission_file_upload")
  form          Form         @relation(fields: [formId], references: [id], onDelete: NoAction, map: "form_submission_form_id_foreign")
  createdBy     User?        @relation(fields: [createdById], references: [id], map: "form_submission_created_by_id_foreign")
  tenantScope   Tenant       @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "form_submission_tenant_scope_id_foreign")

  @@map("form_submission")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Grant {
  id                          BigInt             @id @default(dbgenerated("snowflake()"))
  createdAt                   DateTime           @default(now()) @db.Timestamptz(0)
  createdById                 BigInt?
  deletedAt                   DateTime?          @db.Timestamptz(0)
  tenantScopeId               BigInt
  askedAmount                 Float              @db.Real
  receivedAmount              Float              @db.Real
  state                       String             @default("Completed")
  receivedAmountProcessedById BigInt?
  receivedAmountProcessedAt   DateTime?          @db.Timestamptz(0)
  teamId                      BigInt
  signatureId                 BigInt?            @unique(map: "grant_signature_id_unique")
  generatedDocumentId         BigInt?            @unique(map: "grant_generated_document_id_unique")
  generatedDocument           FileUpload?        @relation("grant_generated_document", fields: [generatedDocumentId], references: [id], map: "grant_generated_document_id_foreign")
  receivedAmountProcessedBy   User?              @relation("grant_received_amount_processed_by", fields: [receivedAmountProcessedById], references: [id], map: "grant_received_amount_processed_by_id_foreign")
  signature                   FileUpload?        @relation("grant_signature", fields: [signatureId], references: [id], map: "grant_signature_id_foreign")
  team                        Team               @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "grant_team_id_foreign")
  grantAllocates              GrantAllocate[]
  attachments                 GrantAttachments[]
  projects                    Project[]
  createdBy                   User?              @relation("grant_created_by", fields: [createdById], references: [id], map: "grant_created_by_id_foreign")
  tenantScope                 Tenant             @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "grant_tenant_scope_id_foreign")

  @@map("grant")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model GrantAllocate {
  id                          BigInt                     @id @default(dbgenerated("snowflake()"))
  createdAt                   DateTime                   @default(now()) @db.Timestamptz(0)
  createdById                 BigInt?
  deletedAt                   DateTime?                  @db.Timestamptz(0)
  tenantScopeId               BigInt
  askedAmount                 Float                      @db.Real
  receivedAmount              Float?                     @db.Real
  state                       String                     @default("Completed")
  receivedAmountProcessedById BigInt?
  receivedAmountProcessedAt   DateTime?                  @db.Timestamptz(0)
  grantId                     BigInt
  transactionId               BigInt?
  signatureId                 BigInt?                    @unique(map: "grant_allocate_signature_id_unique")
  generatedDocumentId         BigInt?                    @unique(map: "grant_allocate_generated_document_id_unique")
  generatedDocument           FileUpload?                @relation("grant_allocate_generated_document", fields: [generatedDocumentId], references: [id], map: "grant_allocate_generated_document_id_foreign")
  grant                       Grant                      @relation(fields: [grantId], references: [id], onDelete: NoAction, map: "grant_allocate_grant_id_foreign")
  processedBy                 User?                      @relation("grant_allocate_received_amount_processed_by", fields: [receivedAmountProcessedById], references: [id], map: "grant_allocate_received_amount_processed_by_id_foreign")
  signature                   FileUpload?                @relation("grant_allocate_signature", fields: [signatureId], references: [id], map: "grant_allocate_signature_id_foreign")
  transaction                 Transaction?               @relation(fields: [transactionId], references: [id], map: "grant_allocate_transaction_id_foreign")
  attachments                 GrantAllocateAttachments[]
  createdBy                   User?                      @relation("grant_allocate_created_by", fields: [createdById], references: [id], map: "grant_allocate_created_by_id_foreign")
  tenantScope                 Tenant                     @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "grant_allocate_tenant_scope_id_foreign")

  @@map("grant_allocate")
}

model GrantAllocateAttachments {
  grantAllocateId BigInt
  fileUploadId    BigInt
  fileUpload      FileUpload    @relation(fields: [fileUploadId], references: [id], onDelete: Cascade, map: "grant_allocate_attachments_file_upload_id_foreign")
  grantAllocate   GrantAllocate @relation(fields: [grantAllocateId], references: [id], onDelete: Cascade, map: "grant_allocate_attachments_grant_allocate_id_foreign")

  @@id([grantAllocateId, fileUploadId])
  @@map("grant_allocate_attachments")
}

model GrantAttachments {
  grantId      BigInt
  fileUploadId BigInt
  fileUpload   FileUpload @relation(fields: [fileUploadId], references: [id], onDelete: Cascade, map: "grant_attachments_file_upload_id_foreign")
  grant        Grant      @relation(fields: [grantId], references: [id], onDelete: Cascade, map: "grant_attachments_grant_id_foreign")

  @@id([grantId, fileUploadId])
  @@map("grant_attachments")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model LegalUnit {
  id               BigInt        @id @default(dbgenerated("snowflake()"))
  createdAt        DateTime      @default(now()) @db.Timestamptz(0)
  deletedAt        DateTime?     @db.Timestamptz(0)
  slug             String        @unique(map: "legal_unit_slug_unique")
  type             String
  siren            String?       @db.VarChar(255)
  nic              String?       @db.VarChar(255)
  legalCategory    String?       @db.VarChar(255)
  activityCategory String?       @db.VarChar(255)
  legalName        String        @db.VarChar(255)
  isFranchise      Boolean       @default(false)
  isFranchiseBrand Boolean       @default(false)
  bankCode         Int?
  actorId          BigInt        @unique(map: "legal_unit_actor_id_unique")
  parentId         BigInt?
  locationId       BigInt?
  bankLocationCode Int?
  actor            Actor         @relation(fields: [actorId], references: [id], onDelete: NoAction, map: "legal_unit_actor_id_foreign")
  parent           LegalUnit?    @relation("legal_unit", fields: [parentId], references: [id], map: "legal_unit_parent_id_foreign")
  children         LegalUnit[]   @relation("legal_unit")
  location         Location?     @relation(fields: [locationId], references: [id], map: "legal_unit_location_location_id_foreign")
  expenseItems     ExpenseItem[]
  bankOfInfos      BankInfo[]
  grantFundOfTeams Team[]

  @@map("legal_unit")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Location {
  id             BigInt           @id @default(dbgenerated("snowflake()"))
  createdAt      DateTime         @default(now()) @db.Timestamptz(0)
  createdById    BigInt?
  deletedAt      DateTime?        @db.Timestamptz(0)
  tenantScopeId  BigInt
  hiddenAt       DateTime?        @db.Timestamptz(0)
  type           String
  name           String           @default("")
  link           String           @default("")
  details        String           @default("")
  actorId        BigInt
  geoapifyId     String?
  campuses       Campus[]
  events         Event[]
  legalUnits     LegalUnit[]
  actor          Actor            @relation(fields: [actorId], references: [id], onDelete: NoAction, map: "location_actor_id_foreign")
  address        Address?         @relation(fields: [geoapifyId], references: [geoapifyId], map: "location_geoapify_id_foreign")
  locationImages LocationImages[]
  transactions   Transaction[]
  createdBy      User?            @relation(fields: [createdById], references: [id], map: "location_created_by_id_foreign")
  tenantScope    Tenant           @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "location_tenant_scope_id_foreign")

  @@map("location")
}

model LocationImages {
  locationId   BigInt
  fileUploadId BigInt     @unique(map: "location_image_file_upload_id_unique")
  fileUpload   FileUpload @relation(fields: [fileUploadId], references: [id], onDelete: Cascade, map: "location_images_file_upload_id_foreign")
  location     Location   @relation(fields: [locationId], references: [id], onDelete: Cascade, map: "location_images_location_id_foreign")

  @@id([locationId, fileUploadId])
  @@map("location_images")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Log {
  id                 BigInt       @id @default(dbgenerated("snowflake()"))
  createdAt          DateTime     @default(now()) @db.Timestamptz(0)
  createdById        BigInt?
  type               String
  context            String
  diff               Json         @default("{}")
  entityName         String
  entityId           BigInt
  note               String       @default("")
  teamId             BigInt?
  transactionId      BigInt?
  eventId            BigInt?
  userId             BigInt?
  tenantId           BigInt?
  eventContext       Event?       @relation(fields: [eventId], references: [id], map: "log_event_id_foreign")
  teamContext        Team?        @relation(fields: [teamId], references: [id], map: "log_team_id_foreign")
  tenantContext      Tenant?      @relation(fields: [tenantId], references: [id], map: "log_tenant_id_foreign")
  transactionContext Transaction? @relation(fields: [transactionId], references: [id], map: "log_transaction_id_foreign")
  userContext        User?        @relation("log_user", fields: [userId], references: [id], map: "log_user_id_foreign")
  createdBy          User?        @relation("log_created_by", fields: [createdById], references: [id], map: "log_created_by_id_foreign")

  @@map("log")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Mission {
  id                     BigInt         @id @default(dbgenerated("snowflake()"))
  createdAt              DateTime       @default(now()) @db.Timestamptz(0)
  createdById            BigInt?
  deletedAt              DateTime?      @db.Timestamptz(0)
  tenantScopeId          BigInt
  name                   String
  description            String         @default("")
  pointsMinimum          Int            @db.SmallInt
  pointsMaximum          Int            @db.SmallInt
  quantity               Int            @default(1) @db.SmallInt
  isAutoAcceptingMembers Boolean        @default(false)
  isTemplate             Boolean        @default(false)
  color                  String         @default("Blue")
  teamId                 BigInt
  eventOrganizeId        BigInt?
  projectId              BigInt?
  missionJoins           MissionJoin[]
  eventOrganize          EventOrganize? @relation(fields: [eventOrganizeId], references: [id], map: "mission_event_organize_id_foreign")
  project                Project?       @relation(fields: [projectId], references: [id], map: "mission_project_id_foreign")
  team                   Team           @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "mission_team_id_foreign")
  createdBy              User?          @relation(fields: [createdById], references: [id], map: "mission_created_by_id_foreign")
  tenantScope            Tenant         @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "mission_tenant_scope_id_foreign")

  @@map("mission")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model MissionJoin {
  id                  BigInt     @id @default(dbgenerated("snowflake()"))
  createdAt           DateTime   @default(now()) @db.Timestamptz(0)
  createdById         BigInt?
  deletedAt           DateTime?  @db.Timestamptz(0)
  tenantScopeId       BigInt
  state               String     @default("Pending")
  points              Int?       @db.SmallInt
  processedById       BigInt?
  processedAt         DateTime?  @db.Timestamptz(0)
  pointsProcessedById BigInt?
  pointsProcessedAt   DateTime?  @db.Timestamptz(0)
  missionId           BigInt
  joinedById          BigInt
  projectId           BigInt?
  eventJoinId         BigInt?
  joinedBy            User       @relation("mission_join_joined_by", fields: [joinedById], references: [id], onDelete: NoAction, map: "mission_join_joined_by_id_foreign")
  mission             Mission    @relation(fields: [missionId], references: [id], onDelete: NoAction, map: "mission_join_mission_id_foreign")
  pointsProcessedBy   User?      @relation("mission_join_points_processed_by", fields: [pointsProcessedById], references: [id], map: "mission_join_points_processed_by_id_foreign")
  processedBy         User?      @relation("mission_join_processed_by", fields: [processedById], references: [id], map: "mission_join_processed_by_id_foreign")
  project             Project?   @relation(fields: [projectId], references: [id], map: "mission_join_project_id_foreign")
  eventJoin           EventJoin? @relation(fields: [eventJoinId], references: [id])
  createdBy           User?      @relation("mission_join_created_by", fields: [createdById], references: [id], map: "mission_join_created_by_id_foreign")
  tenantScope         Tenant     @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "mission_join_tenant_scope_id_foreign")

  @@map("mission_join")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Project {
  id                   BigInt              @id @default(dbgenerated("snowflake()"))
  createdAt            DateTime            @default(now()) @db.Timestamptz(0)
  createdById          BigInt?
  deletedAt            DateTime?           @db.Timestamptz(0)
  tenantScopeId        BigInt
  hiddenAt             DateTime?           @db.Timestamptz(0)
  name                 String
  description          String              @default("")
  slug                 String
  color                String              @default("Blue")
  type                 String              @default("Other")
  regularEventInterval String              @default("")
  start                DateTime?           @db.Timestamptz(0)
  end                  DateTime?           @db.Timestamptz(0)
  budget               Float               @default(0) @db.Real
  isPrivate            Boolean             @default(false)
  isTemplate           Boolean             @default(false)
  teamId               BigInt
  bannerId             BigInt?
  grantId              BigInt?
  actions              Action[]
  eventOrganizes       EventOrganize[]
  missions             Mission[]
  missionJoins         MissionJoin[]
  projectSupervisors   ProjectSupervisor[]
  transactions         Transaction[]
  banner               FileUpload?         @relation(fields: [bannerId], references: [id], map: "project_banner_id_foreign")
  grant                Grant?              @relation(fields: [grantId], references: [id], map: "project_grant_id_foreign")
  team                 Team                @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "project_team_id_foreign")
  createdBy            User?               @relation(fields: [createdById], references: [id], map: "project_created_by_id_foreign")
  tenantScope          Tenant              @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "project_tenant_scope_id_foreign")

  @@map("project")
}

model ProjectSupervisor {
  id            BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime? @db.Timestamptz(0)
  tenantScopeId BigInt
  title         String?
  userId        BigInt
  projectId     BigInt
  user          User      @relation("project_supervisor_user", fields: [userId], references: [id], onDelete: NoAction, map: "project_supervisor_user_id_foreign")
  project       Project   @relation(fields: [projectId], references: [id], onDelete: NoAction, map: "project_supervisor_project_id_foreign")
  createdBy     User?     @relation("project_supervisor_created_by", fields: [createdById], references: [id], map: "project_supervisor_created_by_id_foreign")
  tenantScope   Tenant    @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "project_supervisor_tenant_scope_id_foreign")

  @@map("project_supervisor")
}

model RequiredDocument {
  id            BigInt         @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime       @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime?      @db.Timestamptz(0)
  tenantScopeId BigInt
  hiddenAt      DateTime?      @db.Timestamptz(0)
  name          String
  description   String         @default("")
  teamTypes     String[]       @default([])
  isRequired    Boolean        @default(false)
  teamDocuments TeamDocument[]
  createdBy     User?          @relation(fields: [createdById], references: [id], map: "required_document_created_by_id_foreign")
  tenantScope   Tenant         @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "required_document_tenant_scope_id_foreign")

  @@map("required_document")
}

model RequiredRole {
  id                BigInt             @id @default(dbgenerated("snowflake()"))
  createdAt         DateTime           @default(now()) @db.Timestamptz(0)
  createdById       BigInt?
  deletedAt         DateTime?          @db.Timestamptz(0)
  tenantScopeId     BigInt
  hiddenAt          DateTime?          @db.Timestamptz(0)
  name              String
  description       String             @default("")
  teamTypes         String[]           @default([])
  isRequired        Boolean            @default(false)
  teamRequiredRoles TeamRequiredRole[]
  createdBy         User?              @relation(fields: [createdById], references: [id], map: "required_role_created_by_id_foreign")
  tenantScope       Tenant             @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "required_role_tenant_scope_id_foreign")

  @@map("required_role")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Session {
  id               BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt        DateTime  @default(now()) @db.Timestamptz(0)
  ip               String    @db.VarChar(255)
  device           Json
  country          String    @db.VarChar(255)
  refreshTokenHash String    @db.VarChar(255)
  tokenFamily      String    @db.VarChar(255)
  userId           BigInt
  lastActivityAt   DateTime  @default(now()) @db.Timestamptz(0)
  lastIssuedAt     DateTime  @default(now()) @db.Timestamptz(0)
  revokedAt        DateTime? @db.Timestamptz(0)
  expiredAt        DateTime? @db.Timestamptz(0)
  user             User      @relation("session_user", fields: [userId], references: [id], onDelete: NoAction, map: "session_user_id_foreign")

  @@map("session")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Social {
  id          BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt   DateTime  @default(now()) @db.Timestamptz(0)
  createdById BigInt?
  deletedAt   DateTime? @db.Timestamptz(0)
  actorId     BigInt
  order       Int       @db.SmallInt
  type        String
  pseudo      String
  url         String
  actor       Actor     @relation(fields: [actorId], references: [id], onDelete: Cascade, map: "social_actor_id_foreign")
  createdBy   User?     @relation(fields: [createdById], references: [id], map: "social_created_by_id_foreign")

  @@map("social")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Tag {
  id            BigInt      @id @default(dbgenerated("snowflake()"))
  createdAt     DateTime    @default(now()) @db.Timestamptz(0)
  createdById   BigInt?
  deletedAt     DateTime?   @db.Timestamptz(0)
  tenantScopeId BigInt
  hiddenAt      DateTime?   @db.Timestamptz(0)
  type          String
  name          String
  slug          String
  description   String      @default("")
  imageId       BigInt?
  color         String
  actorTag      ActorTag?
  image         FileUpload? @relation(fields: [imageId], references: [id], map: "tag_image_id_foreign")
  createdBy     User?       @relation(fields: [createdById], references: [id], map: "tag_created_by_id_foreign")
  tenantScope   Tenant      @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "tag_tenant_scope_id_foreign")

  @@map("tag")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Team {
  id                      BigInt          @id @default(dbgenerated("snowflake()"))
  createdAt               DateTime        @default(now()) @db.Timestamptz(0)
  createdById             BigInt?
  deletedAt               DateTime?       @db.Timestamptz(0)
  tenantScopeId           BigInt
  hiddenAt                DateTime?       @db.Timestamptz(0)
  type                    String          @default("Club")
  slug                    String          @unique(map: "team_slug_unique")
  membershipFees          Float           @default(0) @db.Real
  membershipDuration      String          @default("")
  directorsCategoryName   String          @default("Directors")
  managersCategoryName    String          @default("Managers")
  membersCategoryName     String          @default("Members")
  expectingPresidentEmail String?
  expectingTreasurerEmail String?
  expectingSecretaryEmail String?
  isOnboardingComplete    Boolean         @default(true)
  isJoinFormActive        Boolean         @default(true)
  joinFormId              BigInt?         @unique(map: "team_join_form_id_unique")
  actorId                 BigInt          @unique(map: "team_actor_id_unique")
  tenantGrantFundId       BigInt?
  videoId                 BigInt?
  parentId                BigInt?
  actions                 Action[]
  bankAccounts            BankAccount[]
  eventOrganizes          EventOrganize[]
  grants                  Grant[]
  logs                    Log[]
  missions                Mission[]
  projects                Project[]
  teamDocuments           TeamDocument[]
  teamHistories           TeamHistory[]
  teamJoins               TeamJoin[]
  teamMembers             TeamMember[]
  teamRoles               TeamRole[]
  children                Team[]          @relation("team")
  actor                   Actor           @relation(fields: [actorId], references: [id], onDelete: NoAction, map: "team_actor_id_foreign")
  joinForm                Form?           @relation("team_join_form_id", fields: [joinFormId], references: [id], onDelete: NoAction, map: "team_join_form_id_foreign")
  parent                  Team?           @relation("team", fields: [parentId], references: [id], map: "team_parent_id_foreign")
  video                   FileUpload?     @relation(fields: [videoId], references: [id], map: "team_video_id_foreign")
  tenantGrantFund         LegalUnit?      @relation(fields: [tenantGrantFundId], references: [id], map: "team_tenant_grant_fund_id_foreign")
  createdBy               User?           @relation(fields: [createdById], references: [id], map: "team_created_by_id_foreign")
  tenantScope             Tenant          @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "team_tenant_scope_id_foreign")

  @@map("team")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TeamDocument {
  id                 BigInt            @id @default(dbgenerated("snowflake()"))
  createdAt          DateTime          @default(now()) @db.Timestamptz(0)
  createdById        BigInt?
  deletedAt          DateTime?         @db.Timestamptz(0)
  tenantScopeId      BigInt
  name               String
  description        String
  yearVersion        Int?              @db.SmallInt
  type               String
  fileUploadId       BigInt?           @unique(map: "team_document_file_id_unique")
  teamId             BigInt
  requiredDocumentId BigInt?
  fileUpload         FileUpload?       @relation(fields: [fileUploadId], references: [id], onDelete: Cascade, map: "team_document_file_id_foreign")
  requiredDocument   RequiredDocument? @relation(fields: [requiredDocumentId], references: [id], map: "team_document_required_document_id_foreign")
  team               Team              @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "team_document_team_id_foreign")
  createdBy          User?             @relation(fields: [createdById], references: [id], map: "team_document_created_by_id_foreign")
  tenantScope        Tenant            @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "team_document_tenant_scope_id_foreign")

  @@map("team_document")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TeamHistory {
  id              BigInt    @id @default(dbgenerated("snowflake()"))
  createdAt       DateTime  @default(now()) @db.Timestamptz(0)
  createdById     BigInt?
  deletedAt       DateTime? @db.Timestamptz(0)
  tenantScopeId   BigInt
  approximateDate String
  eventDate       DateTime  @db.Timestamptz(0)
  eventType       String
  teamId          BigInt
  team            Team      @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "team_history_team_id_foreign")
  createdBy       User?     @relation(fields: [createdById], references: [id], map: "team_history_created_by_id_foreign")
  tenantScope     Tenant    @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "team_history_tenant_scope_id_foreign")

  @@map("team_history")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TeamJoin {
  id                   BigInt          @id @default(dbgenerated("snowflake()"))
  createdAt            DateTime        @default(now()) @db.Timestamptz(0)
  createdById          BigInt?
  deletedAt            DateTime?       @db.Timestamptz(0)
  tenantScopeId        BigInt
  state                String          @default("Pending")
  joinedById           BigInt
  processedById        BigInt?
  processedAt          DateTime?       @db.Timestamptz(0)
  joinFormSubmissionId BigInt?         @unique(map: "team_join_form_submission_id_unique")
  teamId               BigInt
  joinFormSubmission   FormSubmission? @relation(fields: [joinFormSubmissionId], references: [id], map: "team_join_form_submission_id_foreign")
  joinedBy             User            @relation("team_join_joined_by", fields: [joinedById], references: [id], onDelete: NoAction, map: "team_join_joined_by_id_foreign")
  processedBy          User?           @relation("team_join_processed_by", fields: [processedById], references: [id], map: "team_join_processed_by_id_foreign")
  team                 Team            @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "team_join_team_id_foreign")
  createdBy            User?           @relation("team_join_created_by", fields: [createdById], references: [id], map: "team_join_created_by_id_foreign")
  tenantScope          Tenant          @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "team_join_tenant_scope_id_foreign")

  @@map("team_join")
}

model TeamMember {
  id                BigInt             @id @default(dbgenerated("snowflake()"))
  createdAt         DateTime           @default(now()) @db.Timestamptz(0)
  createdById       BigInt?
  deletedAt         DateTime?          @db.Timestamptz(0)
  tenantScopeId     BigInt
  teamId            BigInt
  userId            BigInt
  teamMemberRoles   TeamMemberRole[]
  teamRequiredRoles TeamRequiredRole[]
  team              Team               @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "team_member_team_id_foreign")
  user              User               @relation("team_member_user", fields: [userId], references: [id], onDelete: NoAction, map: "team_member_user_id_foreign")
  createdBy         User?              @relation("team_member_created_by", fields: [createdById], references: [id], map: "team_member_created_by_id_foreign")
  tenantScope       Tenant             @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "team_member_tenant_scope_id_foreign")

  @@map("team_member")
}

model TeamMemberRole {
  id           BigInt     @id @default(dbgenerated("snowflake()"))
  createdAt    DateTime   @default(now()) @db.Timestamptz(0)
  createdById  BigInt?
  deletedAt    DateTime?  @db.Timestamptz(0)
  teamMemberId BigInt
  teamRoleId   BigInt
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: NoAction, map: "team_member_role_team_member_id_foreign")
  teamRole     TeamRole   @relation(fields: [teamRoleId], references: [id], onDelete: NoAction, map: "team_member_role_team_role_id_foreign")
  createdBy    User?      @relation(fields: [createdById], references: [id], map: "team_member_role_created_by_id_foreign")

  @@map("team_member_role")
}

model TeamRequiredRole {
  id             BigInt       @id @default(dbgenerated("snowflake()"))
  createdAt      DateTime     @default(now()) @db.Timestamptz(0)
  createdById    BigInt?
  deletedAt      DateTime?    @db.Timestamptz(0)
  tenantScopeId  BigInt
  teamMemberId   BigInt
  requiredRoleId BigInt
  teamMember     TeamMember   @relation(fields: [teamMemberId], references: [id], onDelete: NoAction, map: "team_required_role_team_member_id_foreign")
  requiredRole   RequiredRole @relation(fields: [requiredRoleId], references: [id], onDelete: NoAction, map: "team_required_role_required_role_id_foreign")
  createdBy      User?        @relation(fields: [createdById], references: [id], map: "team_required_role_created_by_id_foreign")
  tenantScope    Tenant       @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "team_required_role_tenant_scope_id_foreign")

  @@map("team_required_role")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TeamRole {
  id                   BigInt           @id @default(dbgenerated("snowflake()"))
  createdAt            DateTime         @default(now()) @db.Timestamptz(0)
  createdById          BigInt?
  deletedAt            DateTime?        @db.Timestamptz(0)
  tenantScopeId        BigInt
  name                 String
  teamId               BigInt
  managerId            BigInt?
  color                String
  type                 String?
  isPole               Boolean          @default(false)
  canManageProfile     Boolean          @default(false)
  canViewTreasury      Boolean          @default(false)
  canManageTreasury    Boolean          @default(false)
  canViewJoins         Boolean          @default(false)
  canManageJoins       Boolean          @default(false)
  canManageMemberRoles Boolean          @default(false)
  canManageRoles       Boolean          @default(false)
  canCreateEvents      Boolean          @default(false)
  canManageEvents      Boolean          @default(false)
  canViewDraftEvents   Boolean          @default(false)
  canCreateActions     Boolean          @default(false)
  canManageActions     Boolean          @default(false)
  canCreateContents    Boolean          @default(false)
  canManageContents    Boolean          @default(false)
  canManageDocuments   Boolean          @default(false)
  teamMemberRoles      TeamMemberRole[]
  manager              User?            @relation("team_role_manager", fields: [managerId], references: [id], map: "team_role_manager_id_foreign")
  team                 Team             @relation(fields: [teamId], references: [id], onDelete: NoAction, map: "team_role_team_id_foreign")
  createdBy            User?            @relation("team_role_created_by", fields: [createdById], references: [id], map: "team_role_created_by_id_foreign")
  tenantScope          Tenant           @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "team_role_tenant_scope_id_foreign")

  @@map("team_role")
}

model Tenant {
  id                            BigInt                   @id @default(dbgenerated("snowflake()"))
  createdAt                     DateTime                 @default(now()) @db.Timestamptz(0)
  deletedAt                     DateTime?                @db.Timestamptz(0)
  domain                        String                   @unique(map: "tenant_domain_unique")
  pointName                     String
  isOidcEnabled                 Boolean                  @default(false)
  oidcName                      String                   @unique(map: "tenant_oidc_name_unique") @default("")
  oidcClientId                  String                   @default("")
  oidcClientSecret              String                   @default("")
  oidcDiscoveryUrl              String                   @default("")
  oidcScopes                    String                   @default("")
  oidcCallbackUri               String                   @default("")
  eventValidationFormId         BigInt?                  @unique(map: "tenant_event_validation_form_id_unique")
  actorId                       BigInt                   @unique(map: "tenant_actor_id_unique")
  tenantMembers                 TenantMember[]
  tenantRoles                   TenantRole[]
  scopedActions                 Action[]
  scopedActorImages             ActorImage[]
  scopedAdminRoles              AdminRole[]
  scopedBankAccounts            BankAccount[]
  scopedBankInfos               BankInfo[]
  scopedCampuses                Campus[]
  scopedCampusClusters          CampusCluster[]
  scopedEvents                  Event[]
  scopedEventApprovals          EventApproval[]
  scopedEventApprovalSteps      EventApprovalStep[]
  scopedEventApprovalValidators EventApprovalValidator[]
  scopedEventFavorites          EventFavorite[]
  scopedEventJoins              EventJoin[]
  scopedEventOrganizes          EventOrganize[]
  scopedEventSupervisors        EventSupervisor[]
  scopedExpenses                Expense[]
  scopedExpenseItems            ExpenseItem[]
  scopedFileUploads             FileUpload[]
  scopedFollows                 Follow[]
  scopedFormSubmissions         FormSubmission[]
  scopedGrants                  Grant[]
  scopedGrantAllocates          GrantAllocate[]
  scopedLocations               Location[]
  scopedLogs                    Log[]
  scopedMissions                Mission[]
  scopedMissionJoins            MissionJoin[]
  scopedProjects                Project[]
  scopedProjectSupervisors      ProjectSupervisor[]
  scopedRequiredDocuments       RequiredDocument[]
  scopedRequiredRoles           RequiredRole[]
  scopedTags                    Tag[]
  scopedTeams                   Team[]
  scopedTeamDocuments           TeamDocument[]
  scopedTeamHistories           TeamHistory[]
  scopedTeamJoins               TeamJoin[]
  scopedTeamMembers             TeamMember[]
  scopedTeamRequiredRoles       TeamRequiredRole[]
  scopedTeamRoles               TeamRole[]
  scopedTransactions            Transaction[]
  scopedActors                  Actor[]                  @relation("actor_tenant_scope")
  scopedForms                   Form[]                   @relation("form_tenant_scope")
  scopedUsers                   User[]                   @relation("user_tenant_scope")
  actor                         Actor                    @relation("tenant_actor", fields: [actorId], references: [id], onDelete: NoAction, map: "tenant_actor_id_foreign")
  eventValidationForm           Form?                    @relation("tenant_event_validation_form", fields: [eventValidationFormId], references: [id], map: "tenant_event_validation_form_id_foreign")

  @@map("tenant")
}

model TenantMember {
  id                BigInt             @id @default(dbgenerated("snowflake()"))
  createdAt         DateTime           @default(now()) @db.Timestamptz(0)
  createdById       BigInt?
  deletedAt         DateTime?          @db.Timestamptz(0)
  tenantScopeId     BigInt
  userId            BigInt
  tenantMemberRoles TenantMemberRole[]
  user              User               @relation("tenant_member_user", fields: [userId], references: [id], onDelete: NoAction, map: "tenant_member_user_id_foreign")
  createdBy         User?              @relation("tenant_member_created_by", fields: [createdById], references: [id], map: "tenant_member_created_by_id_foreign")
  tenantScope       Tenant             @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "tenant_member_tenant_scope_id_foreign")

  @@map("tenant_member")
}

model TenantMemberRole {
  id             BigInt       @id @default(dbgenerated("snowflake()"))
  createdAt      DateTime     @default(now()) @db.Timestamptz(0)
  createdById    BigInt?
  deletedAt      DateTime?    @db.Timestamptz(0)
  tenantMemberId BigInt
  tenantRoleId   BigInt
  tenantMember   TenantMember @relation(fields: [tenantMemberId], references: [id], onDelete: NoAction, map: "tenant_member_role_tenant_member_id_foreign")
  tenantRole     TenantRole   @relation(fields: [tenantRoleId], references: [id], onDelete: NoAction, map: "tenant_member_role_tenant_role_id_foreign")
  createdBy      User?        @relation(fields: [createdById], references: [id], map: "tenant_member_role_created_by_id_foreign")

  @@map("tenant_member_role")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TenantRole {
  id                          BigInt             @id @default(dbgenerated("snowflake()"))
  createdAt                   DateTime           @default(now()) @db.Timestamptz(0)
  createdById                 BigInt?
  deletedAt                   DateTime?          @db.Timestamptz(0)
  tenantScopeId               BigInt
  name                        String
  color                       String
  type                        String?
  canViewHidden               Boolean            @default(false)
  canHide                     Boolean            @default(false)
  canCreateTeam               Boolean            @default(false)
  canManageCampus             Boolean            @default(false)
  canManageEventApprovalSteps Boolean            @default(false)
  canManageEventApprovals     Boolean            @default(false)
  canManageTenant             Boolean            @default(false)
  tenantMemberRoles           TenantMemberRole[]
  createdBy                   User?              @relation(fields: [createdById], references: [id], map: "tenant_role_created_by_id_foreign")
  tenantScope                 Tenant             @relation(fields: [tenantScopeId], references: [id], onDelete: NoAction, map: "tenant_role_tenant_scope_id_foreign")

  @@map("tenant_role")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Transaction {
  id              BigInt                   @id @default(dbgenerated("snowflake()"))
  createdAt       DateTime                 @default(now()) @db.Timestamptz(0)
  createdById     BigInt?
  deletedAt       DateTime?                @db.Timestamptz(0)
  tenantScopeId   BigInt?
  description     String                   @default("")
  amount          Float                    @db.Real
  isOnline        Boolean                  @default(false)
  method          String
  state           String                   @default("Completed")
  category        String
  payedById       BigInt
  receivedById    BigInt
  processedById   BigInt?
  processedByType String                   @default("Manual")
  payedAt         DateTime                 @db.Timestamptz(0)
  bankAccountId   BigInt
  expenseId       BigInt?                  @unique(map: "transaction_expense_id_unique")
  eventId         BigInt?
  locationId      BigInt?
  projectId       BigInt?
  attachments     TransactionAttachments[]
  grantAllocates  GrantAllocate[]
  logs            Log[]
  bankAccount     BankAccount              @relation(fields: [bankAccountId], references: [id], onDelete: NoAction, map: "transaction_bank_account_id_foreign")
  event           Event?                   @relation(fields: [eventId], references: [id], map: "transaction_event_id_foreign")
  expense         Expense?                 @relation(fields: [expenseId], references: [id], map: "transaction_expense_id_foreign")
  location        Location?                @relation(fields: [locationId], references: [id], map: "transaction_location_id_foreign")
  project         Project?                 @relation(fields: [projectId], references: [id], map: "transaction_project_id_foreign")
  payedBy         Actor                    @relation("transaction_payed_by", fields: [payedById], references: [id], onDelete: NoAction, map: "transaction_payed_by_id_foreign")
  receivedBy      Actor                    @relation("transaction_received_by", fields: [receivedById], references: [id], onDelete: NoAction, map: "transaction_received_by_id_foreign")
  processedBy     User?                    @relation("transaction_processed_by", fields: [processedById], references: [id], map: "transaction_processed_by_id_foreign")
  createdBy       User?                    @relation("transaction_created_by", fields: [createdById], references: [id], map: "transaction_created_by_id_foreign")
  tenantScope     Tenant?                  @relation(fields: [tenantScopeId], references: [id], map: "transaction_tenant_scope_id_foreign")

  @@map("transaction")
}

model TransactionAttachments {
  transactionId BigInt
  fileUploadId  BigInt
  fileUpload    FileUpload  @relation(fields: [fileUploadId], references: [id], onDelete: Cascade, map: "transaction_attachments_file_upload_id_foreign")
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade, map: "transaction_attachments_transaction_id_foreign")

  @@id([transactionId, fileUploadId])
  @@map("transaction_attachments")
}

model User {
  id                                     BigInt                   @id @default(dbgenerated("snowflake()"))
  createdAt                              DateTime                 @default(now()) @db.Timestamptz(0)
  createdById                            BigInt?
  deletedAt                              DateTime?                @db.Timestamptz(0)
  originalTenantScopeId                  BigInt
  hiddenAt                               DateTime?                @db.Timestamptz(0)
  slug                                   String                   @unique(map: "user_slug_unique")
  passwordHash                           String?
  isBot                                  Boolean                  @default(false)
  actorId                                BigInt                   @unique(map: "user_actor_id_unique")
  firstName                              String
  lastName                               String
  middleNames                            String[]                 @default([])
  points                                 Float                    @default(0) @db.Real
  isOnboardingFinished                   Boolean                  @default(false)
  isIntroductionFinished                 Boolean                  @default(false)
  isDarkModePreferred                    Boolean                  @default(false)
  isDataExportedOnDeactivation           Boolean                  @default(true)
  isDataAnonymizedOnDeactivation         Boolean                  @default(false)
  logs                                   Log[]                    @relation("log_user")
  adminRoles                             AdminRole[]              @relation("admin_role_user")
  followings                             Follow[]
  sessions                               Session[]                @relation("session_user")
  actions                                Action[]                 @relation("action_user")
  joinedEvents                           EventJoin[]              @relation("event_join_joined_by")
  joinedMissions                         MissionJoin[]            @relation("mission_join_joined_by")
  joinedTeams                            TeamJoin[]               @relation("team_join_joined_by")
  managedTeamRoles                       TeamRole[]               @relation("team_role_manager")
  supervisedEvents                       EventSupervisor[]        @relation("event_supervisor_user")
  supervisedProjects                     ProjectSupervisor[]      @relation("project_supervisor_user")
  validatedApprovalSteps                 EventApprovalValidator[] @relation("event_approval_validator_user")
  teamMemberships                        TeamMember[]             @relation("team_member_user")
  tenantMemberships                      TenantMember[]           @relation("tenant_member_user")
  processedActions                       Action[]                 @relation("action_processed_by")
  processedEventJoinsParticipations      EventJoin[]              @relation("event_join_participation_processed_by")
  processedEventJoins                    EventJoin[]              @relation("event_join_processed_by")
  processedExpenses                      Expense[]                @relation("expense_processed_by")
  processedGrantsReceivedAmounts         Grant[]                  @relation("grant_received_amount_processed_by")
  processedGrantAllocatesReceivedAmounts GrantAllocate[]          @relation("grant_allocate_received_amount_processed_by")
  processedMissionJoins                  MissionJoin[]            @relation("mission_join_processed_by")
  processedMissionJoinsPoints            MissionJoin[]            @relation("mission_join_points_processed_by")
  processedTeamJoins                     TeamJoin[]               @relation("team_join_processed_by")
  processedTransactions                  Transaction[]            @relation("transaction_processed_by")
  createdActions                         Action[]                 @relation("action_created_by")
  createdActors                          Actor[]                  @relation("actor_created_by")
  createdActorImages                     ActorImage[]
  createdActorTags                       ActorTag[]
  createdAdminRoles                      AdminRole[]              @relation("admin_role_created_by")
  createdBankAccounts                    BankAccount[]
  createdBankInfos                       BankInfo[]
  createdCampuses                        Campus[]
  createdCampusClusters                  CampusCluster[]
  createdEvents                          Event[]
  createdEventApprovals                  EventApproval[]
  createdEventApprovalSteps              EventApprovalStep[]
  createdEventApprovalValidators         EventApprovalValidator[] @relation("event_approval_validator_created_by")
  createdEventFavorites                  EventFavorite[]
  createdEventJoins                      EventJoin[]              @relation("event_join_created_by")
  createdEventOrganizes                  EventOrganize[]
  createdEventSupervisors                EventSupervisor[]        @relation("event_supervisor_created_by")
  createdExpenses                        Expense[]                @relation("expense_created_by")
  createdExpenseItems                    ExpenseItem[]
  createdFileUploads                     FileUpload[]
  createdForms                           Form[]
  createdFormSubmissions                 FormSubmission[]
  createdGrants                          Grant[]                  @relation("grant_created_by")
  createdGrantAllocates                  GrantAllocate[]          @relation("grant_allocate_created_by")
  createdLocations                       Location[]
  createdLogs                            Log[]                    @relation("log_created_by")
  createdMissions                        Mission[]
  createdMissionJoins                    MissionJoin[]            @relation("mission_join_created_by")
  createdProjects                        Project[]
  createdRequiredDocuments               RequiredDocument[]
  createdRequiredRoles                   RequiredRole[]
  createdSocials                         Social[]
  createdTags                            Tag[]
  createdTeams                           Team[]
  createdTeamDocuments                   TeamDocument[]
  createdTeamHistories                   TeamHistory[]
  createdTeamJoins                       TeamJoin[]               @relation("team_join_created_by")
  createdTeamMembers                     TeamMember[]             @relation("team_member_created_by")
  createdTeamMemberRoles                 TeamMemberRole[]
  createdTeamRequiredRoles               TeamRequiredRole[]
  createdTeamRoles                       TeamRole[]               @relation("team_role_created_by")
  createdTenantMembers                   TenantMember[]           @relation("tenant_member_created_by")
  createdTenantMemberRoles               TenantMemberRole[]
  createdTenantRoles                     TenantRole[]
  createdTransactions                    Transaction[]            @relation("transaction_created_by")
  createdUsers                           User[]                   @relation("user")
  createdProjectSupervisors              ProjectSupervisor[]      @relation("project_supervisor_created_by")
  actor                                  Actor                    @relation("user_actor", fields: [actorId], references: [id], onDelete: NoAction, map: "user_actor_id_foreign")
  createdBy                              User?                    @relation("user", fields: [createdById], references: [id], map: "user_created_by_id_foreign")
  originalTenantScope                    Tenant                   @relation("user_tenant_scope", fields: [originalTenantScopeId], references: [id], onDelete: NoAction, map: "user_tenant_scope_id_foreign")

  @@map("user")
}
