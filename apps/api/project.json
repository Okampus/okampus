{
  "name": "api",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/api/src",
  "projectType": "application",
  "targets": {
    "build": {
      "command": "vite build --config apps/api/vite.config.ts --mode production"
    },
    "migration:create": {
      "command": "cross-env MIKRO_ORM_MIGRATION=create node dist/apps/api/main.mjs | pino-pretty -c -t",
      "dependsOn": ["build"]
    },
    "migration:up": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "tsc --pretty -p apps/api/tsconfig.migrations.json",
          "cross-env MIKRO_ORM_MIGRATION=up node dist/apps/api/main.mjs | tee /dev/null | pino-pretty -c -t"
        ]
      },
      "dependsOn": ["migration:create"]
    },
    "serve": {
      "command": "vite serve --config apps/api/vite.config.ts --mode development | tee /dev/null | pino-pretty -c -t",
      "dependsOn": ["merge", "migration:up"]
    },
    "lint": {
      "executor": "nx:run-commands",
      "options": {
        "color": true,
        "commands": ["nx run api:ts-check", "nx run api:eslint", "nx run api:prettier"]
      }
    },
    "lint:fix": {
      "executor": "nx:run-commands",
      "options": {
        "color": true,
        "commands": ["nx run api:eslint --fix", "prettier --write apps/api"],
        "parallel": false
      }
    },
    "ts-check": {
      "command": "tsc --pretty --noEmit -p apps/api/tsconfig.app.json"
    },
    "eslint": {
      "command": "eslint apps/api --ext .ts --cache --cache-location node_modules/.cache/.eslintcache"
    },
    "prettier": {
      "executor": "nx:run-commands",
      "options": {
        "commands": ["prettier --check apps/api"]
      }
    },
    "hasura:schema": {
      "command": "bash apps/api/database/hasura/run.sh -d && echo 'Downloading Hasura schema...' && bash -c 'while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' 127.0.0.1:8080/healthz)\" != \"200\" ]]; do sleep 1; done' && get-graphql-schema \"http://127.0.0.1:8080/v1/graphql\" | sed -e '1,6d' -e \"s/query_root/Query/\" -e \"s/mutation_root/Mutation/\" -e \"s/subscription_root/Subscription/\" > apps/api/database/hasura/schema.gql && bash apps/api/database/hasura/close.sh"
    },
    "hasura:serve": {
      "command": "bash apps/api/database/hasura/run.sh"
    },
    "hasura:metadata:apply": {
      "command": "bash apps/api/database/hasura/run.sh -d && echo 'Applying Hasura metadata...' && bash -c 'while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' 127.0.0.1:8080/healthz)\" != \"200\" ]]; do sleep 1; done' && pnpm run hasura:apply && bash apps/api/database/hasura/close.sh"
    },
    "hasura:metadata:export": {
      "command": "bash apps/api/database/hasura/run.sh -d && echo 'Exporting Hasura metadata...' && bash -c 'while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' 127.0.0.1:8080/healthz)\" != \"200\" ]]; do sleep 1; done' && cd apps/api/database/hasura && hasura metadata export && cd ../../../.. && bash apps/api/database/hasura/close.sh"
    },
    "graphql:codegen": {
      "dependsOn": ["graphql:merge"],
      "command": "zeus libs/shared/graphql/src/schema.merged.graphql libs/shared/graphql/src --typescript --apollo --typedDocumentNode && printf '%s\n%s\n' \"/* eslint-disable */\n// @ts-nocheck\" \"$(sed '1d' libs/shared/graphql/src/zeus/index.ts)\" > libs/shared/graphql/src/zeus/index.ts && printf '%s\n%s\n' \"/* eslint-disable */\" \"$(cat libs/shared/graphql/src/zeus/typedDocumentNode.ts)\" > libs/shared/graphql/src/zeus/typedDocumentNode.ts && sed -i -e 's/ | Variable<any, string>//g' -e 's/\\[\"bigint\"\\]:[^;]*;/[\"bigint\"]: string;/g' -e 's/\\[\"timestamptz\"\\]:[^;]*;/[\"timestamptz\"]: string;/g' -e 's/\\[\"smallint\"\\]:[^;]*;/[\"smallint\"]: number;/g' libs/shared/graphql/src/zeus/index.ts"
    },
    "graphql:merge": {
      "dependsOn": ["hasura:schema"],
      "command": "node tools/scripts/graphql-merge.mjs"
    }
  },
  "tags": ["scope:api", "type:app"]
}
