# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Badge {
  badgeId: Int!
  createdAt: DateTime!
  description: String!
  icon: String!
  level: BadgeLevel!
  name: String!
  pointPrize: Int!
  series: String!
  updatedAt: DateTime!
}

enum BadgeLevel {
  Bronze
  Gold
  Silver
}

type BadgeUnlock {
  badge: Badge!
  badgeUnlockId: Int!
  createdAt: DateTime!
  unlockDate: DateTime!
  updatedAt: DateTime!
  user: User!
}

enum Colors {
  Amber
  Blue
  Cyan
  Emerald
  Fuchsia
  Gray
  Green
  Indigo
  Lime
  Neutral
  Orange
  Pink
  Purple
  Red
  Rose
  Sky
  Slate
  Stone
  Teal
  Violet
  Yellow
  Zinc
}

type Content {
  author: User!
  body: String!
  contentId: Int!
  contentMaster: ContentMaster!
  contentMasterId: Int!
  contentMasterType: Int!
  createdAt: DateTime!
  downvotes: Int!
  edits: [ContentEdit!]
  hidden: Boolean!
  isVisible: Boolean!
  kind: ContentKind!
  lastEdit: ContentEdit!
  parent: Content!
  reportCount: Int!
  updatedAt: DateTime!
  upvotes: Int!
  votes: Int!
}

type ContentEdit {
  body: String!
  contentEditId: Int!
  createdAt: DateTime!
  editOrder: Int!
  editedBy: User!
  parent: Content!
  updatedAt: DateTime!
}

enum ContentKind {
  Comment
  Post
  Reply
}

type ContentMaster {
  contentMasterId: Int!
  createdAt: DateTime!
  post: Content!
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  thread(id: Int): [Thread!]!
}

enum Role {
  Admin
  ClubManager
  Moderator
  RestaurantManager
  User
}

enum SchoolRole {
  Admin
  Student
  Teacher
}

type Tag {
  color: Colors!
  createdAt: DateTime!
  description: String!
  name: String!
  updatedAt: DateTime!
}

type Thread {
  contentMasterId: Int!
  createdAt: DateTime!
  post: Content!
  tags: [Tag!]!
  title: String!
  type: ThreadType!
  updatedAt: DateTime!
}

enum ThreadType {
  Discussion
  Other
  Problem
  Question
  Suggestion
}

type User {
  avatar: String
  badges: [BadgeUnlock!]
  banner: String
  color: String!
  createdAt: DateTime!
  email: String!
  firstname: String!
  lastname: String!
  points: Int!
  reputation: Int!
  roles: [Role!]
  schoolRole: SchoolRole!
  shortDescription: String!
  signature: String!
  updatedAt: DateTime!
  userId: String!
}