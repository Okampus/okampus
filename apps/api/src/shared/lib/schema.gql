# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AllReactionValue {
  Bump
  Interesting
  Laugh
  Like
  NotAnIssue
  Partial
  Perfect
  Unsure
  What
}

type Badge {
  createdAt: DateTime!
  description: String!
  icon: String!
  id: Int!
  level: BadgeLevel!
  name: String!
  pointPrize: Int!
  series: String!
  updatedAt: DateTime!
}

enum BadgeLevel {
  Bronze
  Gold
  Silver
}

type BadgeUnlock {
  badge: Badge!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  user: User!
}

enum Colors {
  Amber
  Blue
  Cyan
  Emerald
  Fuchsia
  Gray
  Green
  Indigo
  Lime
  Neutral
  Orange
  Pink
  Purple
  Red
  Rose
  Sky
  Slate
  Stone
  Teal
  Violet
  Yellow
  Zinc
}

type Content {
  author: User!
  body: String!
  children: [Content!]!
  contentMaster: ContentMaster
  createdAt: DateTime!
  downvoteCount: Int!
  edits: [ContentEdit!]
  favoriteCount: Int!
  hidden: Boolean!
  id: Int!
  interactions: ContentInteractions!
  isAnonymous: Boolean!
  isVisible: Boolean!
  kind: ContentKind!
  lastEdit: ContentEdit
  parent: Content
  replyCount: Int!
  reportCount: Int!
  totalVoteCount: Int!
  updatedAt: DateTime!
  upvoteCount: Int!
}

type ContentEdit {
  body: String!
  createdAt: DateTime!
  editOrder: Int!
  editedBy: User!
  id: Int!
  parent: Content!
  updatedAt: DateTime!
}

type ContentInteractions {
  reactions: [Reaction!]!
  userFavorited: Boolean!
  userReported: Report
  userVoted: Int
}

enum ContentKind {
  Comment
  Post
  Reply
}

type ContentMaster {
  createdAt: DateTime!
  id: Int!
  kind: ContentMasterType!
  participants: [User!]!
  post: Content!
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime!
}

enum ContentMasterType {
  Blog
  Thread
}

input CreateContentWithKindDto {
  body: String!
  contentKind: ContentKind!
  isAnonymous: Boolean = false
  parentId: Int!
}

input CreateReportDto {
  reason: String!
}

input CreateTeamDto {
  avatar: String
  banner: String
  category: String!
  kind: TeamKind!
  longDescription: String
  name: String!
  shortDescription: String
  tags: [String!]
}

input CreateTeamEventRegistrationDto {
  formSubmission: JSON
  originalFormId: Int
  status: TeamEventRegisterStatus!
}

input CreateTeamFinanceDto {
  amount: Float!
  category: TeamFinanceCategory!
  description: String
  dueTo: String
  event: Int
  means: TeamFinanceMeans!
  receipt: String
  title: String!
  type: TeamFinanceType!
}

input CreateTeamMembershipRequestDto {
  formSubmission: JSON
  originalFormId: Int
  role: TeamRole
}

input CreateThreadDto {
  assignedTeams: [Int!]
  assignedUsers: [String!]
  body: String!
  isAnonymous: Boolean = false
  scope: String!
  tags: [String!]
  title: String!
  type: ThreadType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum FileKind {
  Attachment
  InfoDoc
  ProfileImage
  StudyDoc
  TeamFile
}

type FileUpload {
  createdAt: DateTime!
  fileKind: FileKind!
  fileLastModifiedAt: DateTime!
  fileSize: Float!
  id: String!
  mimeType: String!
  name: String!
  updatedAt: DateTime!
  url: String!
  user: User!
  validated: Boolean!
  visible: Boolean!
}

input FilterMembershipRequestsDto {
  state: MembershipRequestState
  type: MembershipRequestDirection
}

input FilterRegisteredEventsDto {
  eventId: Int
  present: Boolean
  status: TeamEventRegisterStatus
  userId: String
}

input InviteMemberDto {
  force: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input ListMetricsDto {
  after: DateTime!
  before: DateTime!
  interval: String!
  names: String!
}

enum MembershipRequestDirection {
  All
  Incoming
  Outgoing
}

enum MembershipRequestIssuer {
  Team
  User
}

enum MembershipRequestState {
  Approved
  Pending
  Rejected
}

type Metric {
  createdAt: DateTime!
  id: Int!
  name: MetricName!
  updatedAt: DateTime!
  value: Float!
}

enum MetricName {
  ClubCount
  ClubCreatedEventCount
  ClubEventCount
  ClubMembershipCount
  ClubUniqueMembershipCount
  UserCount
}

type Mutation {
  addContent(child: CreateContentWithKindDto!): Content!
  addTeam(team: CreateTeamDto!): Team!
  addTeamEventRegistration(id: Int!, registration: CreateTeamEventRegistrationDto!): TeamEvent!
  addTeamFinance(finance: CreateTeamFinanceDto!, id: Int!): TeamFinance!
  addThread(thread: CreateThreadDto!): Thread!
  addUserToTeam(invite: InviteMemberDto!, teamId: Int!, userId: Int!): TeamMember!
  favoriteContent(favorite: Boolean!, id: Int!): Content!
  handleTeamMembershipRequest(payload: PutTeamMembershipRequestDto!, requestId: Int!): TeamMembershipRequest!
  joinTeam(id: Int!, request: CreateTeamMembershipRequestDto!): Team!
  login(password: String!, username: String!): User!
  removeTeamMember(teamId: Int!, userId: Int!): TeamMember
  reportContent(id: Int!, report: CreateReportDto!): Content!
  updateContent(content: UpdateContentDto!, id: Int!): Content!
  updateSettings(settings: UpdateSettingsDto!): Settings!
  updateTeam(id: Int!, team: UpdateTeamDto!): Team!
  updateTeamEventRegistration(id: Int!, registration: UpdateTeamEventRegistrationDto!): TeamEventRegistration!
  updateTeamFinance(finance: UpdateTeamFinanceDto!, id: Int!): TeamFinance!
  updateTeamMember(teamId: Int!, update: UpdateTeamMemberDto!, userId: Int!): TeamMember!
  updateTeamMembershipRequest(requestId: Int!, update: UpdateTeamMembershipRequestDto!): TeamMembershipRequest!
  updateThread(id: Int!, thread: UpdateThreadDto!): Thread!
  updateUser(id: String!, user: UpdateUserDto!): User!
  voteContent(id: Int!, value: Int!): Content!
}

input PutTeamMembershipRequestDto {
  handledMessage: String
  state: MembershipRequestState!
}

type Query {
  clubById(id: Int!): Team
  clubs: [Team!]!
  contentById(id: Int!): Content
  eventById(id: Int!): TeamEvent!
  events: [TeamEvent!]!
  me: User!
  metrics(metrics: ListMetricsDto!): [Metric!]!
  reportById(id: Int!): Report!
  reports: [Report!]!
  schoolGroupById(id: String!): SchoolGroup!
  schoolGroupMembershipsById(id: String!): SchoolGroupMembership!
  schoolGroups: [SchoolGroup!]!
  schoolYearById(id: String!): SchoolYear!
  settings: Settings!
  tagById(id: String!): Tag!
  tags: [Tag!]!
  teamById(id: Int!): Team
  teamEventRegistrationById(id: Int!): TeamEventRegistration
  teamEventRegistrations(filters: FilterRegisteredEventsDto!): [TeamEventRegistration!]!
  teamFinanceById(id: Int!): TeamFinance
  teamFinances(filters: TeamFinancesFilterDto!): [TeamFinance!]!
  teamMembers(id: Int!): [TeamMember!]
  teamMembershipRequests(filter: FilterMembershipRequestsDto, id: Int!): [TeamMembershipRequest!]
  teamMembershipRequestsByUserId(filters: FilterMembershipRequestsDto, id: String!): [TeamMembershipRequest!]!
  teamMembershipsByUserId(id: String!): [TeamMember!]
  teams(filters: TeamsFilterDto): [Team!]!
  threadById(id: Int!): Thread
  threads: [Thread!]!
  userById(id: String!): User!
  users: [User!]!
  validationById(id: Int!): Validation!
}

type Reaction {
  content: Content!
  contentMaster: ContentMaster
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  user: User!
  value: AllReactionValue!
}

type Report {
  content: Content!
  contentMaster: ContentMaster
  createdAt: DateTime!
  id: Int!
  reason: String
  target: User!
  updatedAt: DateTime!
  user: User!
}

enum Role {
  Admin
  ClubManager
  Moderator
  RestaurantManager
  User
}

type SchoolGroup {
  active: Boolean!
  createdAt: DateTime!
  description: String
  englishName: String
  id: String!
  memberships: [SchoolGroupMembership!]!
  name: String!
  parent: SchoolGroup
  type: SchoolGroupType!
  updatedAt: DateTime!
}

type SchoolGroupMembership {
  createdAt: DateTime!
  getParents: [SchoolGroup!]!
  id: Int!
  role: SchoolGroupRole!
  schoolGroup: SchoolGroup!
  schoolYear: SchoolYear!
  updatedAt: DateTime!
  user: User!
}

enum SchoolGroupRole {
  Representative
  Student
  Substitute
}

enum SchoolGroupType {
  Class
  Everyone
  Program
  Sector
  Year
}

enum SchoolRole {
  Admin
  Student
  Teacher
}

type SchoolYear {
  active: Boolean!
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type Settings {
  createdAt: DateTime!
  gdprEndOfLifeAnonymize: Boolean!
  gdprEndOfLifeExport: Boolean!
  notificationAdminReportCreated: Int!
  notificationAdminRoleUpdated: Int!
  notificationAdminTeamContactUpdated: Int!
  notificationAdminTeamEventValidationApproved: Int!
  notificationAdminTeamEventValidationRejected: Int!
  notificationAdminTeamEventValidationStarted: Int!
  notificationAdminTeamEventValidationStep: Int!
  notificationAdminTeamLegalFileUpdated: Int!
  notificationAdminThreadAssigned: Int!
  notificationAdminThreadAssignedStale: Int!
  notificationAdminThreadAssignedStaleThreshold: Int!
  notificationAdminThreadStale: Int!
  notificationAdminThreadStaleThreshold: Int!
  notificationBadgeUnlocked: Int!
  notificationBlogSubscribedUpdated: Int!
  notificationContentRemoved: Int!
  notificationMentionned: Int!
  notificationRoleUpdated: Int!
  notificationTeamEventCreated: Int!
  notificationTeamEventManagedApproved: Int!
  notificationTeamEventManagedRegistrationCreated: Int!
  notificationTeamEventManagedRejected: Int!
  notificationTeamEventSubscribedUpdated: Int!
  notificationTeamManagedEventUpdated: Int!
  notificationTeamManagedFormUpdated: Int!
  notificationTeamManagedMemberRoleUpdated: Int!
  notificationTeamManagedMembershipRequestUpdated: Int!
  notificationTeamSubscribedEventCreated: Int!
  notificationThreadSubscribedAnswered: Int!
  notificationThreadSubscribedUpdated: Int!
  updatedAt: DateTime!
  user: User!
}

type Subscription {
  teamAdded: Team!
  teamEventRegistrationAdded: TeamEventRegistration!
  teamEventRegistrationUpdated: TeamEventRegistration!
  teamFinanceAdded: TeamFinance!
  teamFinanceUpdated: TeamFinance!
  teamMemberInvited: TeamMember!
  teamMemberUpdated: TeamMember!
  teamMembershipRequestAdded: TeamMembershipRequest!
  teamMembershipRequestUpdated: TeamMembershipRequest!
  teamUpdated: Team!
  threadAdded: Thread!
  updatedThread: Thread!
}

type Tag {
  color: Colors!
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type Team {
  activeMemberCount: Int!
  avatar: String
  banner: String
  boardMembers: [TeamMember!]!
  category: String!
  createdAt: DateTime!
  id: Int!
  kind: TeamKind!
  longDescription: String
  members: [TeamMember!]!
  membershipRequestForm: TeamForm
  name: String!
  shortDescription: String
  tags: [String!]!
  updatedAt: DateTime!
  userMembership: TeamMembershipStatus
}

type TeamEvent {
  createdAt: DateTime!
  createdBy: User!
  description: String!
  end: DateTime!
  id: Int!
  location: String!
  meta: JSON!
  name: String!
  price: Float!
  private: Boolean!
  registrationForm: TeamForm
  registrations: [TeamEventRegistration!]!
  start: DateTime!
  state: TeamEventState!
  supervisor: User
  team: Team!
  updatedAt: DateTime!
  usedTemplate: TeamEvent
  userRegistration: TeamEventRegistration
  validationStep: Int!
}

enum TeamEventRegisterStatus {
  Absent
  Maybe
  Sure
}

type TeamEventRegistration {
  createdAt: DateTime!
  event: TeamEvent!
  formSubmission: JSON
  id: Int!
  originalForm: TeamForm
  participationScore: Int!
  present: Boolean!
  status: TeamEventRegisterStatus!
  updatedAt: DateTime!
  user: User!
}

enum TeamEventState {
  Draft
  Published
  Rejected
  Submitted
  Template
}

type TeamFile {
  createdAt: DateTime!
  description: String
  file: FileUpload!
  id: String!
  team: Team!
  type: TeamFileType!
  updatedAt: DateTime!
}

enum TeamFileType {
  Document
  Gallery
  Receipt
}

type TeamFinance {
  amount: Float!
  category: TeamFinanceCategory!
  createdAt: DateTime!
  createdBy: User!
  description: String
  dueTo: User
  event: TeamEvent
  id: Int!
  means: TeamFinanceMeans!
  receipt: TeamFile
  team: Team!
  title: String!
  type: TeamFinanceType!
  updatedAt: DateTime!
}

enum TeamFinanceCategory {
  Entertainment
  Equipement
  Errands
  Fees
  Insurance
  Logistics
  Marketing
  Other
  Provider
  Subscriptions
  Transportation
}

enum TeamFinanceMeans {
  Card
  Cash
  Check
  Other
  Transfer
}

enum TeamFinanceType {
  Expense
  Income
}

input TeamFinancesFilterDto {
  category: TeamFinanceCategory
  dueTo: String
  event: Int
  id: Int!
  type: TeamFinanceType
}

type TeamForm {
  createdAt: DateTime!
  createdBy: User!
  description: String
  form: JSON!
  id: Int!
  isTemplate: Boolean!
  name: String!
  team: Team!
  updatedAt: DateTime!
}

enum TeamKind {
  Club
  Department
}

type TeamMember {
  createdAt: DateTime!
  id: Int!
  joinDate: DateTime!
  participationScore: Int!
  participations: Int!
  role: TeamRole!
  roleLabel: String
  team: Team!
  updatedAt: DateTime!
  user: User!
}

type TeamMembershipRequest {
  createdAt: DateTime!
  formSubmission: JSON
  handledAt: DateTime
  handledBy: User
  handledMessage: String
  id: Int!
  issuedBy: User!
  issuer: MembershipRequestIssuer!
  originalForm: TeamForm
  role: TeamRole!
  state: MembershipRequestState!
  team: Team!
  updatedAt: DateTime!
  user: User!
}

type TeamMembershipStatus {
  membership: TeamMember
  pendingRequest: Boolean!
}

enum TeamRole {
  Coowner
  Manager
  Member
  Owner
  Secretary
  Treasurer
}

input TeamsFilterDto {
  kind: TeamKind!
}

type Thread {
  adminValidations: [Validation!]!
  assignedTeams: [Team!]!
  assignedUsers: [User!]!
  createdAt: DateTime!
  id: Int!
  kind: ContentMasterType!
  locked: Boolean!
  opValidation: Validation
  participants: [User!]!
  post: Content!
  scope: SchoolGroup
  tags: [Tag!]!
  title: String!
  type: ThreadType!
  updatedAt: DateTime!
}

enum ThreadType {
  Discussion
  Other
  Problem
  Question
  Suggestion
}

input UpdateContentDto {
  body: String
  hidden: Boolean
  isAnonymous: Boolean = false
}

input UpdateSettingsDto {
  gdprEndOfLifeAnonymize: Boolean
  gdprEndOfLifeExport: Boolean
  notificationAdminReportCreated: Int
  notificationAdminRoleUpdated: Int
  notificationAdminTeamContactUpdated: Int
  notificationAdminTeamEventValidationApproved: Int
  notificationAdminTeamEventValidationRejected: Int
  notificationAdminTeamEventValidationStarted: Int
  notificationAdminTeamEventValidationStep: Int
  notificationAdminTeamLegalFileUpdated: Int
  notificationAdminThreadAssigned: Int
  notificationAdminThreadAssignedStale: Int
  notificationAdminThreadAssignedStaleThreshold: Int
  notificationAdminThreadStale: Int
  notificationAdminThreadStaleThreshold: Int
  notificationBadgeUnlocked: Int
  notificationBlogSubscribedUpdated: Int
  notificationContentRemoved: Int
  notificationMentionned: Int
  notificationRoleUpdated: Int
  notificationTeamEventCreated: Int
  notificationTeamEventManagedApproved: Int
  notificationTeamEventManagedRegistrationCreated: Int
  notificationTeamEventManagedRejected: Int
  notificationTeamEventSubscribedUpdated: Int
  notificationTeamManagedEventUpdated: Int
  notificationTeamManagedFormUpdated: Int
  notificationTeamManagedMemberRoleUpdated: Int
  notificationTeamManagedMembershipRequestUpdated: Int
  notificationTeamSubscribedEventCreated: Int
  notificationThreadSubscribedAnswered: Int
  notificationThreadSubscribedUpdated: Int
}

input UpdateTeamDto {
  membershipRequestFormId: Int!
}

input UpdateTeamEventRegistrationDto {
  participationScore: Int
  present: Boolean
  status: TeamEventRegisterStatus
}

input UpdateTeamFinanceDto {
  amount: Float
  category: TeamFinanceCategory
  description: String
  dueTo: String
  event: Int
  means: TeamFinanceMeans
  receipt: String
  title: String
  type: TeamFinanceType
}

input UpdateTeamMemberDto {
  role: TeamRole
  roleLabel: String
  transferTo: String
}

input UpdateTeamMembershipRequestDto {
  formSubmission: JSON
  originalFormId: Int
  role: TeamRole
}

input UpdateThreadDto {
  assignedTeams: [Int!]
  assignedUsers: [String!]
  body: String
  isAnonymous: Boolean = false
  locked: Boolean
  scope: String
  tags: [String!]
  title: String
  type: ThreadType
  validatedWithContent: Int
}

input UpdateUserDto {
  avatar: String!
  banner: String!
  color: String!
  email: String!
  shortDescription: String!
  signature: String!
}

type User {
  avatar: String
  badges: [BadgeUnlock!]
  banner: String
  bot: Boolean!
  color: String
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: String!
  lastname: String!
  points: Int!
  reputation: Int!
  roles: [Role!]!
  schoolGroupMemberships: [SchoolGroupMembership!]!
  schoolRole: SchoolRole!
  settings: Settings!
  shortDescription: String
  signature: String
  teamEventIcal: String!
  teamMembershipRequests: [TeamMembershipRequest!]!
  teamMemberships: [TeamMember!]!
  updatedAt: DateTime!
}

type Validation {
  active: Boolean!
  content: Content!
  contentMaster: ContentMaster
  createdAt: DateTime!
  id: Int!
  type: ValidationType!
  updatedAt: DateTime!
  user: User!
}

enum ValidationType {
  Admin
  Op
}