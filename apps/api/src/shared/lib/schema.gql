# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AllReactionValue {
  Bump
  Interesting
  Laugh
  Like
  NotAnIssue
  Partial
  Perfect
  Unsure
  What
}

type Badge {
  createdAt: DateTime!
  description: String!
  icon: String!
  id: Int!
  level: BadgeLevel!
  name: String!
  pointPrize: Int!
  series: String!
  updatedAt: DateTime!
}

enum BadgeLevel {
  Bronze
  Gold
  Silver
}

type BadgeUnlock {
  badge: Badge!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  user: User!
}

enum Colors {
  Amber
  Blue
  Cyan
  Emerald
  Fuchsia
  Gray
  Green
  Indigo
  Lime
  Neutral
  Orange
  Pink
  Purple
  Red
  Rose
  Sky
  Slate
  Stone
  Teal
  Violet
  Yellow
  Zinc
}

type Content {
  author: User!
  body: String!
  children: [Content!]!
  contentMaster: ContentMaster
  createdAt: DateTime!
  downvoteCount: Int!
  edits: [ContentEdit!]
  favoriteCount: Int!
  hidden: Boolean!
  id: Int!
  interactions: ContentInteractions!
  isVisible: Boolean!
  kind: ContentKind!
  lastEdit: ContentEdit
  parent: Content
  replyCount: Int!
  reportCount: Int!
  totalVoteCount: Int!
  updatedAt: DateTime!
  upvoteCount: Int!
}

type ContentEdit {
  body: String!
  createdAt: DateTime!
  editOrder: Int!
  editedBy: User!
  id: Int!
  parent: Content!
  updatedAt: DateTime!
}

type ContentInteractions {
  reactions: [Reaction!]!
  userFavorited: Boolean!
  userReported: Report
  userVoted: Int
}

enum ContentKind {
  Comment
  Post
  Reply
}

type ContentMaster {
  createdAt: DateTime!
  id: Int!
  post: Content!
  tags: [Tag!]!
  title: String!
  updatedAt: DateTime!
}

input CreateContentWithKindDto {
  body: String!
  contentKind: ContentKind!
  parentId: Int!
}

input CreateReportDto {
  reason: String!
}

input CreateTeamDto {
  avatar: String
  banner: String
  category: String!
  kind: TeamKind!
  longDescription: String
  membershipRequestLink: URL
  membershipRequestMessage: String
  name: String!
  shortDescription: String
  tags: [String!]
}

input CreateTeamFinanceDto {
  amount: Float!
  category: TeamFinanceCategory!
  description: String
  dueTo: String
  event: Int
  mean: TeamFinanceMean!
  receipt: String
  title: String!
  type: TeamFinanceType!
}

input CreateThreadDto {
  assignees: [String!]
  body: String!
  tags: [String!]
  title: String!
  type: ThreadType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum FileKind {
  Attachment
  InfoDoc
  ProfileImage
  StudyDoc
  TeamFile
}

type FileUpload {
  createdAt: DateTime!
  fileKind: FileKind!
  fileLastModifiedAt: DateTime!
  fileSize: Float!
  id: String!
  mimeType: String!
  name: String!
  updatedAt: DateTime!
  url: String!
  user: User!
  validated: Boolean!
  visible: Boolean!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addContent(child: CreateContentWithKindDto!): Content!
  addTeam(team: CreateTeamDto!): Team!
  addTeamFinance(finance: CreateTeamFinanceDto!, id: Int!): TeamFinance!
  addThread(thread: CreateThreadDto!): Thread!
  favoriteContent(favorite: Boolean!, id: Int!): Content!
  reportContent(id: Int!, report: CreateReportDto!): Content!
  updateContent(content: UpdateContentDto!, id: Int!): Content!
  updateSettings(settings: UpdateSettingsDto!): Settings!
  updateTeam(id: Int!, team: UpdateTeamDto!): Team!
  updateTeamFinance(finance: UpdateTeamFinanceDto!, id: Int!): TeamFinance!
  updateThread(id: Int!, thread: UpdateThreadDto!): Thread!
  voteContent(id: Int!, value: Int!): Content!
}

type Query {
  contentById(id: Int!): Content
  reportById(id: Int!): Report!
  reports: [Report!]!
  settings: Settings!
  tagById(id: String!): Tag!
  tags: [Tag!]!
  teamById(id: Int!): Team
  teamFinanceById(id: Int!): TeamFinance
  teamFinances(filters: TeamFinancesFilterDto!): [TeamFinance!]!
  teams(filters: TeamsFilterDto!): [Team!]!
  threadById(id: Int!): Thread
  threads: [Thread!]!
  validationById(id: Int!): Validation!
}

type Reaction {
  content: Content!
  contentMaster: ContentMaster
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  user: User!
  value: AllReactionValue!
}

type Report {
  content: Content!
  contentMaster: ContentMaster
  createdAt: DateTime!
  id: Int!
  reason: String
  target: User!
  updatedAt: DateTime!
  user: User!
}

enum Role {
  Admin
  ClubManager
  Moderator
  RestaurantManager
  User
}

enum SchoolRole {
  Admin
  Student
  Teacher
}

type Settings {
  createdAt: DateTime!
  gdprEndOfLifeAnonymize: Boolean!
  gdprEndOfLifeExport: Boolean!
  notificationAdminReportCreated: Int!
  notificationAdminRoleUpdated: Int!
  notificationAdminTeamContactUpdated: Int!
  notificationAdminTeamEventValidationApproved: Int!
  notificationAdminTeamEventValidationRejected: Int!
  notificationAdminTeamEventValidationStarted: Int!
  notificationAdminTeamEventValidationStep: Int!
  notificationAdminTeamLegalFileUpdated: Int!
  notificationAdminThreadAssigned: Int!
  notificationAdminThreadAssignedStale: Int!
  notificationAdminThreadAssignedStaleThreshold: Int!
  notificationAdminThreadStale: Int!
  notificationAdminThreadStaleThreshold: Int!
  notificationBadgeUnlocked: Int!
  notificationBlogSubscribedUpdated: Int!
  notificationContentRemoved: Int!
  notificationMentionned: Int!
  notificationRoleUpdated: Int!
  notificationTeamEventCreated: Int!
  notificationTeamEventManagedApproved: Int!
  notificationTeamEventManagedRegistrationCreated: Int!
  notificationTeamEventManagedRejected: Int!
  notificationTeamEventSubscribedUpdated: Int!
  notificationTeamManagedEventUpdated: Int!
  notificationTeamManagedFormUpdated: Int!
  notificationTeamManagedMemberRoleUpdated: Int!
  notificationTeamManagedMembershipRequestUpdated: Int!
  notificationTeamSubscribedEventCreated: Int!
  notificationThreadSubscribedAnswered: Int!
  notificationThreadSubscribedUpdated: Int!
  updatedAt: DateTime!
  user: User!
}

type Subscription {
  teamAdded: Team!
  teamFinanceAdded: TeamFinance!
  teamFinanceUpdated: TeamFinance!
  teamUpdated: Team!
  threadAdded: Thread!
  updatedThread: Thread!
}

type Tag {
  color: Colors!
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type Team {
  avatar: String
  banner: String
  category: String!
  createdAt: DateTime!
  id: Int!
  kind: TeamKind!
  longDescription: String
  members: [TeamMember!]!
  membershipRequestForm: TeamForm
  membershipRequestLink: String
  membershipRequestMessage: String
  name: String!
  shortDescription: String
  tags: [String!]!
  updatedAt: DateTime!
}

type TeamEvent {
  createdAt: DateTime!
  createdBy: User!
  description: String!
  end: DateTime!
  form: TeamForm
  id: Int!
  meta: JSONObject!
  name: String!
  place: String!
  price: Float!
  private: Boolean!
  start: DateTime!
  state: TeamEventState!
  supervisor: User
  team: Team!
  updatedAt: DateTime!
  usedTemplate: TeamEvent
}

enum TeamEventState {
  Approved
  Draft
  Published
  Rejected
  Template
}

type TeamFile {
  createdAt: DateTime!
  description: String
  file: FileUpload!
  id: String!
  team: Team!
  type: TeamFileType!
  updatedAt: DateTime!
}

enum TeamFileType {
  Document
  Gallery
  Receipt
}

type TeamFinance {
  amount: Float!
  category: TeamFinanceCategory!
  createdAt: DateTime!
  createdBy: User!
  description: String
  dueTo: User
  event: TeamEvent
  id: Int!
  mean: TeamFinanceMean!
  receipt: TeamFile
  team: Team!
  title: String!
  type: TeamFinanceType!
  updatedAt: DateTime!
}

enum TeamFinanceCategory {
  Entertainment
  Equipement
  Errands
  Fees
  Insurance
  Logistics
  Marketing
  Other
  Provider
  Subscriptions
  Transportation
}

enum TeamFinanceMean {
  Card
  Cash
  Check
  Other
  Transfer
}

enum TeamFinanceType {
  Expense
  Income
}

input TeamFinancesFilterDto {
  category: TeamFinanceCategory
  dueTo: String
  event: Int
  id: Int!
  type: TeamFinanceType
}

type TeamForm {
  createdAt: DateTime!
  createdBy: User!
  description: String
  form: JSONObject!
  id: Int!
  isTemplate: Boolean!
  name: String!
  team: Team!
  updatedAt: DateTime!
}

enum TeamKind {
  Club
  Team
}

type TeamMember {
  createdAt: DateTime!
  id: Int!
  joinDate: DateTime!
  role: TeamRole!
  roleLabel: String
  team: Team!
  updatedAt: DateTime!
  user: User!
}

enum TeamRole {
  Coowner
  Manager
  Member
  Owner
  Secretary
  Treasurer
}

input TeamsFilterDto {
  kind: TeamKind!
}

type Thread {
  adminValidations: [Validation!]!
  assignees: [User!]!
  createdAt: DateTime!
  id: Int!
  locked: Boolean!
  opValidation: Validation
  post: Content!
  tags: [Tag!]!
  title: String!
  type: ThreadType!
  updatedAt: DateTime!
}

enum ThreadType {
  Discussion
  Other
  Problem
  Question
  Suggestion
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UpdateContentDto {
  body: String
  hidden: Boolean
}

input UpdateSettingsDto {
  gdprEndOfLifeAnonymize: Boolean
  gdprEndOfLifeExport: Boolean
  notificationAdminReportCreated: Int
  notificationAdminRoleUpdated: Int
  notificationAdminTeamContactUpdated: Int
  notificationAdminTeamEventValidationApproved: Int
  notificationAdminTeamEventValidationRejected: Int
  notificationAdminTeamEventValidationStarted: Int
  notificationAdminTeamEventValidationStep: Int
  notificationAdminTeamLegalFileUpdated: Int
  notificationAdminThreadAssigned: Int
  notificationAdminThreadAssignedStale: Int
  notificationAdminThreadAssignedStaleThreshold: Int
  notificationAdminThreadStale: Int
  notificationAdminThreadStaleThreshold: Int
  notificationBadgeUnlocked: Int
  notificationBlogSubscribedUpdated: Int
  notificationContentRemoved: Int
  notificationMentionned: Int
  notificationRoleUpdated: Int
  notificationTeamEventCreated: Int
  notificationTeamEventManagedApproved: Int
  notificationTeamEventManagedRegistrationCreated: Int
  notificationTeamEventManagedRejected: Int
  notificationTeamEventSubscribedUpdated: Int
  notificationTeamManagedEventUpdated: Int
  notificationTeamManagedFormUpdated: Int
  notificationTeamManagedMemberRoleUpdated: Int
  notificationTeamManagedMembershipRequestUpdated: Int
  notificationTeamSubscribedEventCreated: Int
  notificationThreadSubscribedAnswered: Int
  notificationThreadSubscribedUpdated: Int
}

input UpdateTeamDto {
  membershipRequestFormId: Int!
}

input UpdateTeamFinanceDto {
  amount: Float
  category: TeamFinanceCategory
  description: String
  dueTo: String
  event: Int
  mean: TeamFinanceMean
  receipt: String
  title: String
  type: TeamFinanceType
}

input UpdateThreadDto {
  assignees: [String!]
  body: String
  locked: Boolean
  tags: [String!]
  title: String
  type: ThreadType
  validatedWithContent: Int
}

type User {
  avatar: String
  badges: [BadgeUnlock!]
  banner: String
  color: String
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: String!
  lastname: String!
  points: Int!
  reputation: Int!
  roles: [Role!]
  schoolRole: SchoolRole!
  settings: Settings!
  shortDescription: String
  signature: String
  updatedAt: DateTime!
}

type Validation {
  active: Boolean!
  content: Content!
  contentMaster: ContentMaster
  createdAt: DateTime!
  id: Int!
  type: ValidationType!
  updatedAt: DateTime!
  user: User!
}

enum ValidationType {
  Admin
  Op
}