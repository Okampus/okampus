# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Tenant {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  eventValidationForm: JSON
  logo: String
  logoDark: String
  tenantOidcName: String!
  oidcEnabled: Boolean!
  oidcClientId: String!
  oidcClientSecret: String!
  oidcDiscoveryUrl: String!
  oidcScopes: String!
  oidcCallbackUri: String!
  userValidations: [ValidationStep!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Class {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  name: String!
  englishName: String
  type: ClassType!
  parent: Class
  description: String
  memberships: [ClassMembership!]!
  active: Boolean!
}

enum ClassType {
  Everyone
  Program
  Year
  Sector
  Class
}

type SchoolYear {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  name: String!
  active: Boolean!
}

type ClassMembership {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  user: User!
  schoolYear: SchoolYear!
  schoolGroup: Class!
  role: ClassRole!
  getParents: [Class!]!
}

enum ClassRole {
  Representative
  Substitute
  Student
}

type Label {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  name: String!
  tooltip: String
  image: String
  type: TeamLabelType!
}

enum TeamLabelType {
  Category
  Descriptor
  Meta
}

type TeamForm {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  name: String!
  description: String
  schema: JSON!
  type: TeamFormType!
  createdBy: User!
  team: Team!
  isTemplate: Boolean!
}

enum TeamFormType {
  MembershipRequest
  Internal
  EventRegistration
  Survey
}

type TeamHistory {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  day: Int
  month: Int
  year: Int!
  name: String!
  parent: Team
  team: Team!
  state: TeamHistoryState!
  active: Boolean!
}

enum TeamHistoryState {
  Started
  Recognized
  Modified
  Declared
  Undeclared
  Ended
}

type TeamMember {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  user: User!
  team: Team!
  role: TeamRole!
  roleLabel: String
  joinDate: DateTime!
  participations: Int!
  participationScore: Int!
  active: Boolean!
}

enum TeamRole {
  Owner
  Coowner
  Treasurer
  Secretary
  Manager
  Member
}

type Social {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  socialType: SocialAccountType!
  link: String!
  pseudo: String!
  user: User
  team: Team
}

enum SocialAccountType {
  Discord
  Instagram
  YouTube
  TikTok
  Twitch
  LinkedIn
}

type Team {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  id: Int!
  kind: TeamKind!
  name: String!
  shortDescription: String
  longDescription: String
  category: String!
  email: String
  labels: [Label!]!
  histories: [TeamHistory!]!
  socials: [Social!]!
  status: String
  location: String
  presentationVideo: String
  avatar: String
  banner: String
  members: [TeamMember!]!
  activeMemberCount: Int!
  membershipRequestForm: TeamForm
  boardMembers: [TeamMember!]!
  activeMembers: [TeamMember!]!
  teamFiles: [TeamFile!]!
  mainGalleries: [TeamGallery!]!
  forms: [TeamForm!]!
  formTemplates: [TeamForm!]!
  userInterest: Interest
  userMembership: TeamMembershipStatus
  interest: [Interest!]
}

enum TeamKind {
  SchoolDepartment
  Club
}

type Interest {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  state: InterestState!
  message: String
  team: Team!
  user: User!
}

enum InterestState {
  Nope
  Like
  SuperLike
}

type TeamMembershipRequest {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  team: Team!
  user: User!
  issuer: MembershipRequestIssuer!
  state: MembershipRequestState!
  role: TeamRole!
  handledBy: User
  handledAt: DateTime
  handledMessage: String
  issuedBy: User!
  originalForm: TeamForm
  formSubmission: JSON
}

enum MembershipRequestIssuer {
  Team
  User
}

enum MembershipRequestState {
  Pending
  Approved
  Rejected
}

type Badge {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  name: String!
  description: String!
  pointPrize: Int!
  level: BadgeLevel!
  icon: String!
  series: String!
}

enum BadgeLevel {
  Bronze
  Silver
  Gold
  Platinum
}

type BadgeUnlock {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  user: User!
  badge: Badge!
}

type Settings {
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  gdprEndOfLifeExport: Boolean!
  gdprEndOfLifeAnonymize: Boolean!
  notificationMentionned: Int!
  notificationBadgeUnlocked: Int!
  notificationBlogSubscribedUpdated: Int!
  notificationContentRemoved: Int!
  notificationAdminReportCreated: Int!
  notificationTeamEventCreated: Int!
  notificationTeamSubscribedEventCreated: Int!
  notificationTeamManagedFormUpdated: Int!
  notificationTeamManagedEventUpdated: Int!
  notificationTeamManagedMembershipRequestUpdated: Int!
  notificationTeamManagedMemberRoleUpdated: Int!
  notificationAdminTeamSocialUpdated: Int!
  notificationAdminTeamLegalFileUpdated: Int!
  notificationTeamEventSubscribedUpdated: Int!
  notificationTeamEventManagedApproved: Int!
  notificationTeamEventManagedRejected: Int!
  notificationTeamEventManagedRegistrationCreated: Int!
  notificationAdminTeamEventValidationStarted: Int!
  notificationAdminTeamEventValidationStep: Int!
  notificationAdminTeamEventValidationApproved: Int!
  notificationAdminTeamEventValidationRejected: Int!
  notificationThreadSubscribedUpdated: Int!
  notificationThreadSubscribedAnswered: Int!
  notificationAdminThreadStale: Int!
  notificationAdminThreadStaleThreshold: Int!
  notificationAdminThreadAssignedStale: Int!
  notificationAdminThreadAssignedStaleThreshold: Int!
  notificationAdminThreadAssigned: Int!
  notificationRoleUpdated: Int!
  notificationAdminRoleUpdated: Int!
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  id: String!
  firstname: String!
  lastname: String!
  email: String!
  badges: [BadgeUnlock!]
  bot: Boolean!
  reputation: Int!
  avatar: String
  roles: [Role!]!
  schoolRole: SchoolRole!
  schoolGroupMemberships: [ClassMembership!]!
  teamMembershipRequests: [TeamMembershipRequest!]!
  teamMemberships: [TeamMember!]!
  interests: [Interest!]!
  color: String
  signature: String
  banner: String
  shortDescription: String
  settings: Settings!
  points: Int!
  teamEventIcal: String!
  finishedIntroduction: Boolean!
  finishedOnboarding: Boolean!
  socials: [Social!]!
}

enum Role {
  User
  Moderator
  RestaurantManager
  ClubManager
  Admin
}

enum SchoolRole {
  Student
  Teacher
  Admin
}

type FileUpload {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  id: String!
  user: User!
  name: String!
  fileSize: Float!
  mimeType: String!
  fileLastModifiedAt: DateTime!
  validated: Boolean!
  url: String!
  fileKind: FileKind!
  width: Int
  height: Int
  visible: Boolean!
}

enum FileKind {
  ProfileImage
  InfoDoc
  Attachment
  StudyDoc
  TeamFile
  TeamGallery
  TeamReceipt
  Tenant
}

type ProfileImage {
  createdAt: DateTime!
  updatedAt: DateTime!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  user: User
  team: Team
  tenant: Tenant
  type: String!
}

type Tag {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  name: String!
  color: Colors!
  description: String
}

enum Colors {
  Amber
  Blue
  Cyan
  Emerald
  Fuchsia
  Gray
  Green
  Indigo
  Lime
  Neutral
  Orange
  Pink
  Purple
  Red
  Rose
  Sky
  Slate
  Stone
  Teal
  Violet
  Yellow
  Zinc
}

type Reaction {
  createdAt: DateTime!
  updatedAt: DateTime!
  contentMaster: ContentMaster
  user: User!
  content: Content!
  id: Int!
  value: AllReactionValue!
}

enum AllReactionValue {
  What
  Interesting
  Like
  NotAnIssue
  Bump
  Laugh
  Unsure
  Partial
  Perfect
}

type Report {
  createdAt: DateTime!
  updatedAt: DateTime!
  contentMaster: ContentMaster
  user: User!
  content: Content!
  id: Int!
  target: User!
  reason: String
}

type Edit {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  body: String!
  editOrder: Int!
  parent: Content!
  editedBy: User!
}

type Content {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  body: String!
  isAnonymous: Boolean!
  author: User!
  realAuthor: User!
  upvoteCount: Int!
  downvoteCount: Int!
  totalVoteCount: Int!
  reportCount: Int!
  favoriteCount: Int!
  replyCount: Int!
  kind: ContentKind!
  parent: Content
  edits: [Edit!]
  contentMaster: ContentMaster
  hidden: Boolean!
  isVisible: Boolean!
  lastEdit: Edit
  children: [Content!]!
  interactions: Interactions!
}

enum ContentKind {
  Post
  Reply
  Comment
}

type ContentMaster {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  tags: [Tag!]!
  post: Content!
  participants: [User!]!
  kind: ContentMasterType!
}

enum ContentMasterType {
  Blog
  Thread
}

type Validation {
  createdAt: DateTime!
  updatedAt: DateTime!
  contentMaster: ContentMaster
  user: User!
  content: Content!
  id: Int!
  active: Boolean!
  type: ValidationType!
}

enum ValidationType {
  Op
  Admin
}

type Thread {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  tags: [Tag!]!
  post: Content!
  participants: [User!]!
  kind: ContentMasterType!
  type: ThreadType!
  scope: Class
  locked: Boolean!
  opValidation: Validation
  adminValidations: [Validation!]!
  assignedTeams: [Team!]!
  assignedUsers: [User!]!
}

enum ThreadType {
  Question
  Suggestion
  Problem
  Discussion
  Other
}

type ValidationStep {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  tenant: Tenant!
  step: Int!
  name: String!
  type: ValidationStepType!
  users: [User!]!
}

enum ValidationStepType {
  TeamEvent
}

type TeamEventRegistration {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  event: TeamEvent!
  user: User!
  status: TeamEventRegisterStatus!
  present: Boolean!
  participationScore: Int!
  originalForm: TeamForm
  formSubmission: JSON
}

enum TeamEventRegisterStatus {
  Sure
  Maybe
  Absent
}

type TeamEvent {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  start: DateTime!
  end: DateTime!
  name: String!
  description: String!
  price: Float!
  createdBy: User!
  team: Team!
  registrations: [TeamEventRegistration!]!
  location: String!
  supervisor: TeamMember
  private: Boolean!
  state: TeamEventState!
  lastValidationStep: ValidationStep
  registrationForm: TeamForm
  usedTemplate: TeamEvent
  meta: JSON!
  eventValidationSubmission: JSON!
  userRegistration: TeamEventRegistration
}

enum TeamEventState {
  Template
  Draft
  Submitted
  Rejected
  Published
}

type TeamFile {
  createdAt: DateTime!
  updatedAt: DateTime!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  team: Team!
  type: TeamFileType!
  specialType: String!
  description: String
}

enum TeamFileType {
  Constitution
  Rules
  Transcript
  LegalReceipt
  Brochure
  GraphicCharter
}

type TeamFinance {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  description: String
  createdBy: User!
  team: Team!
  dueTo: User
  amount: Float!
  method: PaymentMethod!
  type: TeamFinanceType!
  category: TeamFinanceCategory!
  event: TeamEvent
  receipt: TeamFile
}

enum PaymentMethod {
  Cash
  CreditCard
  Transfer
  Check
  MobilePayment
  Other
}

enum TeamFinanceType {
  Expense
  Income
}

enum TeamFinanceCategory {
  Entertainment
  Equipement
  Errands
  Fees
  Insurance
  Logistics
  Marketing
  Provider
  Subscriptions
  Transportation
  Other
}

type Metric {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  value: Float!
  name: MetricName!
}

enum MetricName {
  ClubCount
  ClubMembershipCount
  ClubUniqueMembershipCount
  ClubEventCount
  ClubCreatedEventCount
  UserCount
}

type OIDCEnabled {
  id: String!
  isEnabled: Boolean!
  tenantOidcName: String
}

type TenantLogoUrls {
  id: String!
  logoUrl: String
  logoDarkUrl: String
}

type IndexedUser {
  id: String!
  realId: String!
  metaType: String!
  title: String!
  picture: String
  category: String!
  createdDate: Int!
  updatedDate: Int!
  score: Int!
  tags: [String!]!
}

type Interactions {
  reactions: [Reaction!]!
  userFavorited: Boolean!
  userVoted: Int
  userReported: Report
}

type TeamGallery {
  createdAt: DateTime!
  updatedAt: DateTime!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  team: Team!
  event: TeamEvent
  order: Int!
}

type TeamMembershipStatus {
  membership: TeamMember
  pendingRequest: Boolean!
}

type TeamReceipt {
  createdAt: DateTime!
  updatedAt: DateTime!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  team: Team!
  description: String
  payedAt: DateTime!
  payedBy: User
  paymentLocation: String
  paymentMethod: String
  amount: Float!
  amountPayed: Float!
}

type Query {
  me: User!
  userById(id: String!): User!
  users: [User!]!
  searchUsers(search: String!, query: PaginateDto): [IndexedUser!]!
  schoolGroupMembershipsById(id: String!): ClassMembership!
  schoolGroups: [Class!]!
  schoolGroupById(id: String!): Class!
  interestById(id: Int!): Interest!
  interests: [Interest!]!
  tenantById(id: String!): Tenant!
  getLogos(id: String!): [ProfileImage!]!
  getLogoUrls(id: String!): TenantLogoUrls!
  oidcEnabled(id: String!): OIDCEnabled!
  contentById(id: Int!): Content
  reports: [Report!]!
  reportById(id: Int!): Report!
  validationById(id: Int!): Validation!
  metrics(metrics: ListMetricsDto!): [Metric!]!
  settings: Settings!
  tags: [Tag!]!
  tagById(id: String!): Tag!
  teamById(id: Int!): Team
  clubById(id: Int!): Team
  teams(filters: TeamsFilterDto): [Team!]!
  clubs: [Team!]!
  teamFormById(id: Int!): TeamForm!
  teamEventRegistrationById(id: Int!): TeamEventRegistration
  teamEventRegistrations(filters: FilterRegisteredEventsDto!): [TeamEventRegistration!]!
  eventById(id: Int!): TeamEvent!
  events(filter: ListTeamEventsDto!): [TeamEvent!]!
  teamFinanceById(id: Int!): TeamFinance
  teamFinances(filters: TeamFinancesFilterDto!): [TeamFinance!]!
  teamMembershipRequests(id: Int!, filter: FilterMembershipRequestsDto): [TeamMembershipRequest!]
  teamMembershipsByUserId(id: String!): [TeamMember!]
  teamMembershipRequestsByUserId(id: String!, filters: ListMembershipRequestsDto): [TeamMembershipRequest!]!
  teamMembers(id: Int!): [TeamMember!]
  schoolYearById(id: String!): SchoolYear!
  threadById(id: Int!): Thread
  threads: [Thread!]!
}

input PaginateDto {
  page: Int!
  itemsPerPage: Int!
}

input ListMetricsDto {
  names: String!
  before: DateTime!
  after: DateTime!
  interval: String!
}

input TeamsFilterDto {
  kind: TeamKind!
}

input FilterRegisteredEventsDto {
  eventId: Int
  userId: String
  status: TeamEventRegisterStatus
  present: Boolean
}

input ListTeamEventsDto {
  id: Int
  before: DateTime
  after: DateTime
  priceBelow: Float
  state: TeamEventState
}

input TeamFinancesFilterDto {
  id: Int!
  type: TeamFinanceType
  category: TeamFinanceCategory
  dueTo: String
  event: Int
}

input FilterMembershipRequestsDto {
  state: MembershipRequestState
  type: MembershipRequestDirection
}

enum MembershipRequestDirection {
  All
  Incoming
  Outgoing
}

input ListMembershipRequestsDto {
  state: MembershipRequestState
  type: MembershipRequestDirection
  page: Int!
  itemsPerPage: Int!
}

type Mutation {
  login(username: String!, password: String!): User!
  wsToken: User!
  updateUser(id: String!, user: UpdateUserDto!): User!
  createInterest(input: CreateInterestDto!): Interest!
  updateInterest(id: Int!, input: UpdateInterestDto!): Interest!
  deleteInterest(id: Int!): Interest!
  updateTenant(id: String!, updateTenant: UpdateTenantDto!): Tenant!
  unsetLogo(id: String!, isLogoDark: Boolean!): Tenant!
  createContent(child: CreateContentWithKindDto!): Content!
  updateContent(id: Int!, content: UpdateContentDto!): Content!
  createReport(id: Int!, report: CreateReportDto!): Content!
  addTeamReceipt(file: Upload!, createReceipt: CreateTeamReceiptDto!): TeamReceipt!
  updateSettings(settings: UpdateSettingsDto!): Settings!
  addTeamFile(file: Upload!, createFile: CreateTeamFileDto!): Team!
  deleteTeamFile(id: String!): Team!
  addTeam(team: CreateTeamDto!): Team!
  updateTeam(id: Int!, team: UpdateTeamDto!): Team!
  createTeamForm(id: Int!, createForm: CreateTeamFormDto!): Team!
  updateTeamForm(id: Int!, updateForm: UpdateTeamFormDto!): TeamForm!
  addTeamEventRegistration(id: Int!, registration: CreateTeamEventRegistrationDto!): TeamEvent!
  updateTeamEventRegistration(id: Int!, registration: UpdateTeamEventRegistrationDto!): TeamEventRegistration!
  createEvent(id: Int!, createEvent: CreateTeamEventDto!): TeamEvent!
  updateEvent(id: Int!, updateEvent: UpdateTeamEventDto!): TeamEvent!
  validateEvent(id: Int!, createValidation: CreateTeamEventValidationDto!): TeamEvent!
  addTeamFinance(id: Int!, finance: CreateTeamFinanceDto!): TeamFinance!
  updateTeamFinance(id: Int!, finance: UpdateTeamFinanceDto!): TeamFinance!
  joinTeam(id: Int!, request: CreateTeamMembershipRequestDto!): Team!
  updateTeamMembershipRequest(requestId: Int!, update: UpdateTeamMembershipRequestDto!): TeamMembershipRequest!
  handleTeamMembershipRequest(id: Int!, updateRequest: PutTeamMembershipRequestDto!): TeamMembershipRequest!
  addUserToTeam(teamId: Int!, userId: Int!, invite: InviteMemberDto!): TeamMember!
  updateTeamMember(teamId: Int!, userId: Int!, update: UpdateTeamMemberDto!): TeamMember!
  removeTeamMember(teamId: Int!, userId: Int!): TeamMember
  addValidationStep(createStep: CreateValidationStepDto!): Tenant!
  updateValidationStep(id: Int!, updateStep: UpdateValidationStepDto!): ValidationStep!
  insertStep(step: Int!, atStep: Int!): Tenant!
  createThread(thread: CreateThreadDto!): Thread!
  updateThread(id: Int!, thread: UpdateThreadDto!): Thread!
}

input UpdateUserDto {
  email: String
  signature: String
  color: String
  shortDescription: String
  avatar: String
  banner: String
  finishedIntroduction: Boolean
}

input CreateInterestDto {
  state: InterestState!
  message: String = null
  teamId: Float!
  userId: String!
}

input UpdateInterestDto {
  state: InterestState
  message: String = null
}

input UpdateTenantDto {
  id: String
  eventValidationForm: JSON = null
  logo: String
  logoDark: String
  tenantOidcName: String
  oidcEnabled: Boolean
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcScopes: String
  oidcCallbackUri: String
}

input CreateContentWithKindDto {
  body: String!
  isAnonymous: Boolean = false
  contentKind: ContentKind!
  parentId: Int!
}

input UpdateContentDto {
  body: String
  isAnonymous: Boolean = false
  hidden: Boolean
}

input CreateReportDto {
  reason: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateTeamReceiptDto {
  fileLastModifiedAt: DateTime
  teamId: Int!
  description: String
  payedAt: DateTime!
  payedById: String!
  paymentLocation: String = null
  paymentMethod: String = null
  amount: Float!
  amountPayed: Float!
}

input UpdateSettingsDto {
  gdprEndOfLifeExport: Boolean
  gdprEndOfLifeAnonymize: Boolean
  notificationMentionned: Int
  notificationBadgeUnlocked: Int
  notificationBlogSubscribedUpdated: Int
  notificationContentRemoved: Int
  notificationAdminReportCreated: Int
  notificationTeamEventCreated: Int
  notificationTeamSubscribedEventCreated: Int
  notificationTeamManagedFormUpdated: Int
  notificationTeamManagedEventUpdated: Int
  notificationTeamManagedMembershipRequestUpdated: Int
  notificationTeamManagedMemberRoleUpdated: Int
  notificationAdminTeamContactUpdated: Int
  notificationAdminTeamLegalFileUpdated: Int
  notificationTeamEventSubscribedUpdated: Int
  notificationTeamEventManagedApproved: Int
  notificationTeamEventManagedRejected: Int
  notificationTeamEventManagedRegistrationCreated: Int
  notificationAdminTeamEventValidationStarted: Int
  notificationAdminTeamEventValidationStep: Int
  notificationAdminTeamEventValidationApproved: Int
  notificationAdminTeamEventValidationRejected: Int
  notificationThreadSubscribedUpdated: Int
  notificationThreadSubscribedAnswered: Int
  notificationAdminThreadStale: Int
  notificationAdminThreadStaleThreshold: Int
  notificationAdminThreadAssignedStale: Int
  notificationAdminThreadAssignedStaleThreshold: Int
  notificationAdminThreadAssigned: Int
  notificationRoleUpdated: Int
  notificationAdminRoleUpdated: Int
}

input CreateTeamFileDto {
  fileLastModifiedAt: DateTime
  teamId: Int!
  type: String!
  specialType: String
  description: String
}

input CreateTeamDto {
  name: String!
  kind: TeamKind!
  shortDescription: String
  longDescription: String
  category: String!
  email: String
  labels: [String!] = []
  status: String
  location: String
  presentationVideo: String
  avatar: String
  banner: String
}

input UpdateTeamDto {
  name: String
  kind: TeamKind
  shortDescription: String
  longDescription: String
  category: String
  email: String
  labels: [String!] = []
  status: String
  location: String
  presentationVideo: String
  avatar: String
  banner: String
  membershipRequestFormId: Int
}

input CreateTeamFormDto {
  name: String!
  description: String!
  type: TeamFormType!
  isTemplate: Boolean!
  schema: JSON!
}

input UpdateTeamFormDto {
  name: String
  description: String
  type: TeamFormType
  isTemplate: Boolean
  schema: JSON
}

input CreateTeamEventRegistrationDto {
  status: TeamEventRegisterStatus!
  originalFormId: Int
  formSubmission: JSON
}

input UpdateTeamEventRegistrationDto {
  status: TeamEventRegisterStatus
  present: Boolean
  participationScore: Int
}

input CreateTeamEventDto {
  start: DateTime!
  end: DateTime!
  name: String!
  description: String!
  location: String!
  price: Float!
  supervisorId: String!
  private: Boolean = false
  state: TeamEventState!
  formId: Int
  templateId: Int
  meta: JSON
  eventValidationSubmission: JSON
}

input UpdateTeamEventDto {
  start: DateTime
  end: DateTime
  name: String
  description: String
  location: String
  price: Float
  supervisorId: String
  private: Boolean = false
  state: TeamEventState
  formId: Int
  meta: JSON
  eventValidationSubmission: JSON
}

input CreateTeamEventValidationDto {
  approved: Boolean!
  message: String
  stepId: Int!
}

input CreateTeamFinanceDto {
  title: String!
  amount: Float!
  method: PaymentMethod!
  type: TeamFinanceType!
  category: TeamFinanceCategory!
  description: String
  dueTo: String
  event: Int
  receipt: String
}

input UpdateTeamFinanceDto {
  title: String
  amount: Float
  method: PaymentMethod
  type: TeamFinanceType
  category: TeamFinanceCategory
  description: String
  dueTo: String
  event: Int
  receipt: String
}

input CreateTeamMembershipRequestDto {
  role: TeamRole
  originalFormId: Int
  formSubmission: JSON
}

input UpdateTeamMembershipRequestDto {
  role: TeamRole
  originalFormId: Int
  formSubmission: JSON
}

input PutTeamMembershipRequestDto {
  state: MembershipRequestState!
  handledMessage: String
}

input InviteMemberDto {
  force: Boolean
}

input UpdateTeamMemberDto {
  role: TeamRole
  roleLabel: String
  transferTo: String
}

input CreateValidationStepDto {
  step: Int!
  name: String!
  type: ValidationStepType!
  users: [String!]!
}

input UpdateValidationStepDto {
  name: String
  type: ValidationStepType
  users: [String!]
}

input CreateThreadDto {
  body: String!
  isAnonymous: Boolean = false
  assignedTeams: [Int!]
  assignedUsers: [String!]
  tags: [String!]
  title: String!
  type: ThreadType!
  scope: String!
}

input UpdateThreadDto {
  body: String
  isAnonymous: Boolean = false
  assignedTeams: [Int!]
  assignedUsers: [String!]
  tags: [String!]
  title: String
  type: ThreadType
  scope: String
  locked: Boolean
  validatedWithContent: Int
}

type Subscription {
  updatedUser: User!
  teamAdded: Team!
  teamUpdated: Team!
  teamEventRegistrationAdded: TeamEventRegistration!
  teamEventRegistrationUpdated: TeamEventRegistration!
  teamFinanceAdded: TeamFinance!
  teamFinanceUpdated: TeamFinance!
  teamMembershipRequestAdded: TeamMembershipRequest!
  teamMembershipRequestUpdated: TeamMembershipRequest!
  teamMemberInvited: TeamMember!
  teamMemberUpdated: TeamMember!
  threadAdded: Thread!
  updatedThread: Thread!
}