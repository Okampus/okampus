# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  currentPage: Float!
  countBefore: Float!
  countCurrent: Float!
  countAfter: Float!
  countTotal: Float!
}

type ApprovalStep {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  tenant: Tenant!
  step: Int!
  name: String!
  type: ApprovalStepType!
  users: [User!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum ApprovalStepType {
  Event
}

type FileUpload {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  user: User!
  name: String!
  size: Float!
  mimeType: String!
  kind: FileKind!
  fileLastModifiedAt: DateTime!
  url: String!
  width: Int
  height: Int
}

enum FileKind {
  UserImage
  TeamImage
  TenantImage
  Attachment
  Tenant
  StudyDoc
  InfoDoc
  TeamFile
  TeamGallery
  TeamReceipt
}

type TenantImage {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  tenant: Tenant!
  type: TenantImageType!
  descriptor: String
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
}

enum TenantImageType {
  Logo
  LogoDark
  Profile
  Other
}

type Tenant {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  approvalSteps: [ApprovalStep!]!
  eventApprovalForm: JSON
  logo: TenantImage
  logoDark: TenantImage
  tenantOidcName: String!
  oidcEnabled: Boolean!
  oidcClientId: String!
  oidcClientSecret: String!
  oidcDiscoveryUrl: String!
  oidcScopes: String!
  oidcCallbackUri: String!
  approvalStepsByUser: [ApprovalStep!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type TenantEdge {
  cursor: String!
  node: Tenant!
}

type Label {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  name: String!
  tooltip: String
  image: String
  type: TeamLabelType!
}

enum TeamLabelType {
  Category
  Descriptor
  Meta
}

type TeamForm {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  name: String!
  description: String
  schema: JSON!
  type: TeamFormType!
  createdBy: User!
  team: Team!
  isTemplate: Boolean!
}

enum TeamFormType {
  MembershipRequest
  Internal
  EventRegistration
  Survey
}

type TeamFormEdge {
  cursor: String!
  node: TeamForm!
}

type PaginatedTeamForm {
  edges: [TeamFormEdge!]
  pageInfo: PageInfo
}

type TeamHistory {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  day: Int
  month: Int
  year: Int!
  name: String!
  parent: Team
  team: Team!
  state: TeamHistoryState!
  active: Boolean!
}

enum TeamHistoryState {
  Started
  Recognized
  Modified
  Declared
  Undeclared
  Ended
}

type TeamMember {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  user: User!
  team: Team!
  role: TeamRole!
  roleLabel: String
  joinDate: DateTime!
  participations: Int!
  participationScore: Int!
  active: Boolean!
}

enum TeamRole {
  Owner
  Coowner
  Treasurer
  Secretary
  Manager
  Member
}

type TeamMemberEdge {
  cursor: String!
  node: TeamMember!
}

type PaginatedTeamMember {
  edges: [TeamMemberEdge!]
  pageInfo: PageInfo
}

type Social {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  socialType: SocialAccountType!
  link: String!
  pseudo: String!
  user: User
  team: Team
}

enum SocialAccountType {
  Discord
  Instagram
  YouTube
  TikTok
  Twitch
  LinkedIn
}

type TeamImage {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  team: User!
  type: TeamImageType!
  descriptor: String
}

enum TeamImageType {
  Logo
  LogoDark
  Banner
  Profile
  Sticker
  Other
}

type Team {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  id: Int!
  kind: TeamKind!
  name: String!
  shortDescription: String
  longDescription: String
  category: String!
  email: String
  labels: [Label!]!
  histories: [TeamHistory!]!
  socials: [Social!]!
  status: String
  presentationVideo: String
  logo: TeamImage
  logoDark: TeamImage
  banner: TeamImage
  members: [TeamMember!]!
  activeMemberCount: Int!
  membershipRequestForm: TeamForm
  boardMembers: [TeamMember!]!
  activeMembers: [TeamMember!]!
  teamFiles: PaginatedTeamFile!
  mainGalleries: [TeamGallery!]!
  forms: PaginatedTeamForm!
  formTemplates: PaginatedTeamForm!
  userInterest: Interest
  userMembership: TeamMembershipStatus
  interest: [Interest!]
}

enum TeamKind {
  SchoolDepartment
  Club
}

type TeamEdge {
  cursor: String!
  node: Team!
}

type PaginatedTeam {
  edges: [TeamEdge!]
  pageInfo: PageInfo
}

type Interest {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  state: InterestState!
  message: String
  team: Team!
  user: User!
}

enum InterestState {
  Nope
  Like
  SuperLike
}

type InterestEdge {
  cursor: String!
  node: Interest!
}

type PaginatedInterest {
  edges: [InterestEdge!]
  pageInfo: PageInfo
}

type TeamMembershipRequest {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  team: Team!
  user: User!
  issuer: MembershipRequestIssuer!
  state: MembershipRequestState!
  role: TeamRole!
  handledBy: User
  handledAt: DateTime
  handledMessage: String
  issuedBy: User!
  originalForm: TeamForm
  formSubmission: JSON
}

enum MembershipRequestIssuer {
  Team
  User
}

enum MembershipRequestState {
  Pending
  Approved
  Rejected
}

type TeamMembershipRequestEdge {
  cursor: String!
  node: TeamMembershipRequest!
}

type PaginatedTeamMembershipRequest {
  edges: [TeamMembershipRequestEdge!]
  pageInfo: PageInfo
}

type Badge {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  name: String!
  description: String!
  pointPrize: Int!
  level: BadgeLevel!
  icon: String!
  series: String!
}

enum BadgeLevel {
  Bronze
  Silver
  Gold
  Platinum
}

type BadgeUnlock {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  user: User!
  badge: Badge!
}

type Settings {
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  gdprEndOfLifeExport: Boolean!
  gdprEndOfLifeAnonymize: Boolean!
  notificationMentionned: Int!
  notificationBadgeUnlocked: Int!
  notificationBlogSubscribedUpdated: Int!
  notificationContentRemoved: Int!
  notificationAdminReportCreated: Int!
  notificationEventCreated: Int!
  notificationTeamSubscribedEventCreated: Int!
  notificationTeamManagedFormUpdated: Int!
  notificationTeamManagedEventUpdated: Int!
  notificationTeamManagedMembershipRequestUpdated: Int!
  notificationTeamManagedMemberRoleUpdated: Int!
  notificationAdminTeamSocialUpdated: Int!
  notificationAdminTeamLegalFileUpdated: Int!
  notificationEventSubscribedUpdated: Int!
  notificationEventManagedApproved: Int!
  notificationEventManagedRejected: Int!
  notificationEventManagedRegistrationCreated: Int!
  notificationAdminEventValidationStarted: Int!
  notificationAdminEventValidationStep: Int!
  notificationAdminEventValidationApproved: Int!
  notificationAdminEventValidationRejected: Int!
  notificationThreadSubscribedUpdated: Int!
  notificationThreadSubscribedAnswered: Int!
  notificationAdminThreadStale: Int!
  notificationAdminThreadStaleThreshold: Int!
  notificationAdminThreadAssignedStale: Int!
  notificationAdminThreadAssignedStaleThreshold: Int!
  notificationAdminThreadAssigned: Int!
  notificationRoleUpdated: Int!
  notificationAdminRoleUpdated: Int!
}

type UserImage {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  user: User!
  type: UserImageType!
  descriptor: String
}

enum UserImageType {
  Avatar
  Banner
  Profile
  Other
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  id: String!
  email: String
  bot: Boolean!
  name: String!
  lastName: String
  eventIcal: String!
  roles: [Role!]!
  scopeRole: ScopeRole!
  settings: Settings!
  points: Int!
  badges: [BadgeUnlock!]
  avatar: UserImage
  banner: UserImage
  status: String
  color: String
  signature: String
  finishedIntroduction: Boolean!
  finishedOnboarding: Boolean!
  classMemberships: [ClassMembership!]!
  teamMembershipRequests: [TeamMembershipRequest!]!
  teamMemberships: [TeamMember!]!
  interests: [Interest!]!
  socials: [Social!]!
}

enum Role {
  User
  Moderator
  CafeteriaManager
  ClubManager
  TenantAdmin
}

enum ScopeRole {
  Student
  Teacher
  Admin
  AdminBot
  UserBot
}

type UserEdge {
  cursor: String!
  node: User!
}

type PaginatedUser {
  edges: [UserEdge!]
  pageInfo: PageInfo
}

type SchoolYear {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  name: String!
  active: Boolean!
}

type SchoolYearEdge {
  cursor: String!
  node: SchoolYear!
}

type PaginatedSchoolYear {
  edges: [SchoolYearEdge!]
  pageInfo: PageInfo
}

type ClassMembership {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  user: User!
  schoolYear: SchoolYear!
  schoolClass: Class!
  role: ClassRole!
  getParents: [Class!]!
}

enum ClassRole {
  Representative
  Substitute
  Student
}

type ClassMembershipEdge {
  cursor: String!
  node: ClassMembership!
}

type PaginatedClassMembership {
  edges: [ClassMembershipEdge!]
  pageInfo: PageInfo
}

type Class {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  name: String!
  englishName: String
  type: ClassType!
  parent: Class
  description: String
  memberships: [ClassMembership!]!
  active: Boolean!
}

enum ClassType {
  Everyone
  Program
  Year
  Sector
  Class
}

type ClassEdge {
  cursor: String!
  node: Class!
}

type PaginatedClass {
  edges: [ClassEdge!]
  pageInfo: PageInfo
}

type Tag {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  name: String!
  color: Colors!
  description: String
}

enum Colors {
  Amber
  Blue
  Cyan
  Emerald
  Fuchsia
  Gray
  Green
  Indigo
  Lime
  Neutral
  Orange
  Pink
  Purple
  Red
  Rose
  Sky
  Slate
  Stone
  Teal
  Violet
  Yellow
  Zinc
}

type TagEdge {
  cursor: String!
  node: Tag!
}

type PaginatedTags {
  edges: [TagEdge!]
  pageInfo: PageInfo
}

type Favorite {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  active: Boolean!
  content: Content!
  contentMaster: ContentMaster
  user: User!
}

type FavoriteEdge {
  cursor: String!
  node: Favorite!
}

type Reaction {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  value: AllReactionValue!
  content: Content!
  contentMaster: ContentMaster
  user: User!
}

enum AllReactionValue {
  What
  Interesting
  Like
  NotAnIssue
  Bump
  Laugh
  Unsure
  Partial
  Perfect
}

type Report {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  target: User!
  reason: String
  content: Content!
  contentMaster: ContentMaster
  user: User!
}

type ReportEdge {
  cursor: String!
  node: Report!
}

type PaginatedReport {
  edges: [ReportEdge!]
  pageInfo: PageInfo
}

type Vote {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  value: Int!
  content: Content!
  contentMaster: ContentMaster
  user: User!
}

type VoteEdge {
  cursor: String!
  node: Vote!
}

type Edit {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  body: String!
  editOrder: Int!
  parent: Content!
  editedBy: User!
}

type Content {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  body: String!
  isAnonymous: Boolean!
  author: User!
  realAuthor: User!
  upvoteCount: Int!
  downvoteCount: Int!
  totalVoteCount: Int!
  reportCount: Int!
  favoriteCount: Int!
  replyCount: Int!
  kind: ContentKind!
  parent: Content
  edits: [Edit!]
  contentMaster: ContentMaster
  hidden: Boolean!
  isVisible: Boolean!
  lastEdit: Edit
  children: PaginatedContent!
  interactions: Interactions!
}

enum ContentKind {
  Post
  Reply
  Comment
}

type ContentEdge {
  cursor: String!
  node: Content!
}

type PaginatedContent {
  edges: [ContentEdge!]
  pageInfo: PageInfo
}

type ContentMaster {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  tags: [Tag!]!
  post: Content!
  participants: [User!]!
  kind: ContentMasterType!
}

enum ContentMasterType {
  Blog
  Thread
}

type Validation {
  createdAt: DateTime!
  updatedAt: DateTime!
  contentMaster: ContentMaster
  user: User!
  content: Content!
  id: Int!
  active: Boolean!
  type: ValidationType!
}

enum ValidationType {
  Op
  Admin
}

type ValidationEdge {
  cursor: String!
  node: Validation!
}

type Thread {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  tags: [Tag!]!
  post: Content!
  participants: [User!]!
  kind: ContentMasterType!
  type: ThreadType!
  scope: Class
  locked: Boolean!
  opValidation: Validation
  adminValidations: [Validation!]!
  assignedTeams: [Team!]!
  assignedUsers: [User!]!
}

enum ThreadType {
  Question
  Suggestion
  Problem
  Discussion
  Other
}

type ThreadEdge {
  cursor: String!
  node: Thread!
}

type PaginatedThread {
  edges: [ThreadEdge!]
  pageInfo: PageInfo
}

type EventRegistration {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  event: Event!
  user: User!
  status: EventRegisterStatus!
  present: Boolean!
  participationScore: Int!
  originalForm: TeamForm
  formSubmission: JSON
}

enum EventRegisterStatus {
  Sure
  Maybe
  Absent
}

type EventRegistrationEdge {
  cursor: String!
  node: EventRegistration!
}

type PaginatedEventRegistration {
  edges: [EventRegistrationEdge!]
  pageInfo: PageInfo
}

type Event {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  start: DateTime!
  end: DateTime!
  name: String!
  description: String!
  price: Float!
  createdBy: User!
  team: Team!
  registrations: [EventRegistration!]!
  location: String!
  supervisor: TeamMember
  private: Boolean!
  state: EventState!
  lastApprovalStep: ApprovalStep
  registrationForm: TeamForm
  usedTemplate: Event
  meta: JSON!
  eventApprovalSubmission: JSON!
  userRegistration: EventRegistration
}

enum EventState {
  Template
  Draft
  Submitted
  Rejected
  Published
}

type EventEdge {
  cursor: String!
  node: Event!
}

type PaginatedEvent {
  edges: [EventEdge!]
  pageInfo: PageInfo
}

type TeamFile {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  team: Team!
  type: TeamFileType!
  specialType: String!
  description: String
}

enum TeamFileType {
  Constitution
  Rules
  Transcript
  LegalReceipt
  Brochure
  GraphicCharter
}

type TeamFileEdge {
  cursor: String!
  node: TeamFile!
}

type PaginatedTeamFile {
  edges: [TeamFileEdge!]
  pageInfo: PageInfo
}

type TeamFinance {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  title: String!
  description: String
  createdBy: User!
  team: Team!
  dueTo: User
  amount: Float!
  method: PaymentMethod!
  type: TeamFinanceType!
  category: TeamFinanceCategory!
  event: Event
  receipt: TeamFile
}

enum PaymentMethod {
  Cash
  CreditCard
  Transfer
  Check
  MobilePayment
  Other
}

enum TeamFinanceType {
  Expense
  Income
}

enum TeamFinanceCategory {
  Entertainment
  Equipement
  Errands
  Fees
  Insurance
  Logistics
  Marketing
  Provider
  Subscriptions
  Transportation
  Other
}

type TeamFinanceEdge {
  cursor: String!
  node: TeamFinance!
}

type PaginatedTeamFinance {
  edges: [TeamFinanceEdge!]
  pageInfo: PageInfo
}

type Metric {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  value: Float!
  name: MetricName!
}

enum MetricName {
  ClubCount
  ClubMembershipCount
  ClubUniqueMembershipCount
  ClubEventCount
  ClubCreatedEventCount
  UserCount
}

type OIDCEnabled {
  id: String!
  isEnabled: Boolean!
  tenantOidcName: String
}

type IndexedUser {
  id: String!
  realId: String!
  metaType: String!
  title: String!
  picture: String
  category: String!
  createdDate: Int!
  updatedDate: Int!
  score: Int!
  tags: [String!]!
}

type Interactions {
  reactions: [Reaction!]!
  userFavorited: Boolean!
  userVoted: Int
  userReported: Report
}

type TeamGallery {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  team: Team!
  event: Event
  order: Int!
}

type TeamMembershipStatus {
  membership: TeamMember
  pendingRequest: Boolean!
}

type TeamReceipt {
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: String!
  file: FileUpload!
  lastActiveDate: DateTime!
  active: Boolean!
  id: String!
  team: Team!
  description: String
  payedAt: DateTime!
  payedBy: User
  paymentLocation: String
  paymentMethod: String
  amount: Float!
  amountPayed: Float!
}

type App {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: Int!
  name: String!
  description: String
  owner: User!
  bot: User
}

type AppEdge {
  cursor: String!
  node: App!
}

type Query {
  me: User!
  userById(id: String!): User!
  users: PaginatedUser!
  searchUsers(search: String!, query: PaginationOptions): [IndexedUser!]!
  classMembershipsById(id: String!): PaginatedClassMembership!
  classes(pagination: PaginationOptions!): PaginatedClass!
  classById(id: String!): Class!
  interestById(id: Int!): Interest!
  interests: PaginatedInterest!
  tenantById(id: String!): Tenant!
  getLogos(id: String!): [TenantImage]!
  oidcEnabled(id: String!): OIDCEnabled!
  contentById(id: Int!): Content
  schoolYearById(id: String!): SchoolYear!
  schoolYears(pagination: PaginationOptions!): PaginatedSchoolYear!
  metrics(metrics: ListMetricsDto!): [Metric!]!
  reports: PaginatedReport!
  reportById(id: Int!): Report!
  settings: Settings!
  tags(query: PaginationOptions): PaginatedTags!
  tagById(id: String!): Tag!
  teamById(id: Int!): Team
  clubById(id: Int!): Team
  teams(filters: TeamsFilterDto): PaginatedTeam!
  clubs: PaginatedTeam!
  teamFormById(id: Int!): TeamForm!
  eventRegistrationById(id: Int!): EventRegistration
  eventRegistrations(filters: FilterRegisteredEventsDto!): PaginatedEventRegistration!
  eventById(id: Int!): Event!
  events(filter: ListEventsDto!): PaginatedEvent!
  teamFinanceById(id: Int!): TeamFinance
  teamFinances(filters: TeamFinancesFilterDto!): PaginatedTeamFinance!
  teamMembershipRequests(id: Int!, filter: FilterMembershipRequestsDto): PaginatedTeamMembershipRequest
  teamMembershipsByUserId(id: String!): PaginatedTeamMember
  teamMembershipRequestsByUserId(id: String!, filters: ListMembershipRequestsDto): PaginatedTeamMembershipRequest!
  teamMembers(id: Int!): PaginatedTeamMember
  threadById(id: Int!): Thread
  threads: PaginatedThread!
  validationById(id: Int!): Validation!
}

input PaginationOptions {
  limit: Int
  after: String
  before: String
  offset: Int
  orderBy: QueryOrderMap
}

"""QueryOrderMap custom scalar type"""
scalar QueryOrderMap

input ListMetricsDto {
  names: String!
  before: DateTime!
  after: DateTime!
  interval: String!
}

input TeamsFilterDto {
  kind: TeamKind!
}

input FilterRegisteredEventsDto {
  eventId: Int
  userId: String
  status: EventRegisterStatus
  present: Boolean
}

input ListEventsDto {
  id: Int
  beforeDate: DateTime
  afterDate: DateTime
  priceBelow: Float
  state: EventState
}

input TeamFinancesFilterDto {
  id: Int!
  type: TeamFinanceType
  category: TeamFinanceCategory
  dueTo: String
  event: Int
}

input FilterMembershipRequestsDto {
  state: MembershipRequestState
  type: MembershipRequestDirection
}

enum MembershipRequestDirection {
  All
  Incoming
  Outgoing
}

input ListMembershipRequestsDto {
  state: MembershipRequestState
  type: MembershipRequestDirection
  limit: Int
  after: String
  before: String
  offset: Int
  orderBy: QueryOrderMap
}

type Mutation {
  login(username: String!, password: String!): User!
  wsToken: User!
  updateUser(id: String!, user: UpdateUserDto!): User!
  createInterest(input: CreateInterestDto!): Interest!
  updateInterest(id: Int!, input: UpdateInterestDto!): Interest!
  deleteInterest(id: Int!): Interest!
  updateTenant(id: String!, updateTenant: UpdateTenantDto!): Tenant!
  unsetLogo(id: String!): Tenant!
  unsetLogoDark(id: String!): Tenant!
  createContent(child: CreateContentWithKindDto!): Content!
  updateContent(id: Int!, content: UpdateContentDto!): Content!
  addTeamReceipt(file: Upload!, createReceipt: CreateTeamReceiptDto!): TeamReceipt!
  createReport(id: Int!, report: CreateReportDto!): Content!
  updateSettings(settings: UpdateSettingsDto!): Settings!
  addTeamFile(file: Upload!, createFile: CreateTeamFileDto!): Team!
  deleteTeamFile(id: String!): Team!
  addTeam(team: CreateTeamDto!): Team!
  updateTeam(id: Int!, team: UpdateTeamDto!): Team!
  createTeamForm(id: Int!, createForm: CreateTeamFormDto!): Team!
  updateTeamForm(id: Int!, updateForm: UpdateTeamFormDto!): TeamForm!
  addEventRegistration(id: Int!, registration: CreateEventRegistrationDto!): Event!
  updateEventRegistration(id: Int!, registration: UpdateEventRegistrationDto!): EventRegistration!
  createEvent(id: Int!, createEvent: CreateEventDto!): Event!
  updateEvent(id: Int!, updateEvent: UpdateEventDto!): Event!
  validateEvent(id: Int!, createApproval: CreateEventApprovalDto!): Event!
  addTeamFinance(id: Int!, finance: CreateTeamFinanceDto!): TeamFinance!
  updateTeamFinance(id: Int!, finance: UpdateTeamFinanceDto!): TeamFinance!
  joinTeam(id: Int!, request: CreateTeamMembershipRequestDto!): Team!
  updateTeamMembershipRequest(requestId: Int!, update: UpdateTeamMembershipRequestDto!): TeamMembershipRequest!
  handleTeamMembershipRequest(id: Int!, updateRequest: PutTeamMembershipRequestDto!): TeamMembershipRequest!
  addUserToTeam(teamId: Int!, userId: Int!, invite: InviteMemberDto!): TeamMember!
  updateTeamMember(teamId: Int!, userId: Int!, update: UpdateTeamMemberDto!): TeamMember!
  removeTeamMember(teamId: Int!, userId: Int!): TeamMember
  addApprovalStep(createStep: ApprovalStepDto!): Tenant!
  updateApprovalStep(id: Int!, updateStep: UpdateApprovalStepDto!): ApprovalStep!
  reinsertStep(step: Int!, atStepNumber: Int!): [ApprovalStep!]!
  createThread(thread: CreateThreadDto!): Thread!
  updateThread(id: Int!, thread: UpdateThreadDto!): Thread!
}

input UpdateUserDto {
  id: String
  name: String
  lastName: String
  password: String
  email: String
  scopeRole: String
  roles: [Role!]
  status: String
  avatar: String
  banner: String
  color: String
  signature: String
}

input CreateInterestDto {
  state: InterestState!
  message: String = null
  teamId: Float!
  userId: String!
}

input UpdateInterestDto {
  state: InterestState
  message: String = null
}

input UpdateTenantDto {
  id: String
  eventValidationForm: JSON
  logo: String
  logoDark: String
  tenantOidcName: String
  oidcEnabled: Boolean
  oidcClientId: String
  oidcClientSecret: String
  oidcDiscoveryUrl: String
  oidcScopes: String
  oidcCallbackUri: String
}

input CreateContentWithKindDto {
  body: String!
  isAnonymous: Boolean = false
  contentKind: ContentKind!
  parentId: Int!
}

input UpdateContentDto {
  body: String
  isAnonymous: Boolean = false
  hidden: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateTeamReceiptDto {
  fileLastModifiedAt: DateTime
  teamId: Int!
  description: String
  payedAt: DateTime!
  payedById: String!
  paymentLocation: String = null
  paymentMethod: String = null
  amount: Float!
  amountPayed: Float!
}

input CreateReportDto {
  reason: String!
}

input UpdateSettingsDto {
  gdprEndOfLifeExport: Boolean
  gdprEndOfLifeAnonymize: Boolean
  notificationMentionned: Int
  notificationBadgeUnlocked: Int
  notificationBlogSubscribedUpdated: Int
  notificationContentRemoved: Int
  notificationAdminReportCreated: Int
  notificationEventCreated: Int
  notificationTeamSubscribedEventCreated: Int
  notificationTeamManagedFormUpdated: Int
  notificationTeamManagedEventUpdated: Int
  notificationTeamManagedMembershipRequestUpdated: Int
  notificationTeamManagedMemberRoleUpdated: Int
  notificationAdminTeamContactUpdated: Int
  notificationAdminTeamLegalFileUpdated: Int
  notificationEventSubscribedUpdated: Int
  notificationEventManagedApproved: Int
  notificationEventManagedRejected: Int
  notificationEventManagedRegistrationCreated: Int
  notificationAdminEventValidationStarted: Int
  notificationAdminEventValidationStep: Int
  notificationAdminEventValidationApproved: Int
  notificationAdminEventValidationRejected: Int
  notificationThreadSubscribedUpdated: Int
  notificationThreadSubscribedAnswered: Int
  notificationAdminThreadStale: Int
  notificationAdminThreadStaleThreshold: Int
  notificationAdminThreadAssignedStale: Int
  notificationAdminThreadAssignedStaleThreshold: Int
  notificationAdminThreadAssigned: Int
  notificationRoleUpdated: Int
  notificationAdminRoleUpdated: Int
}

input CreateTeamFileDto {
  fileLastModifiedAt: DateTime
  teamId: Int!
  type: String!
  specialType: String
  description: String
}

input CreateTeamDto {
  name: String!
  kind: TeamKind!
  shortDescription: String
  longDescription: String
  category: String!
  email: String
  labels: [String!] = []
  status: String
  presentationVideo: String
  logo: String
  logoDark: String
  banner: String
}

input UpdateTeamDto {
  name: String
  kind: TeamKind
  shortDescription: String
  longDescription: String
  category: String
  email: String
  labels: [String!] = []
  status: String
  presentationVideo: String
  logo: String
  logoDark: String
  banner: String
  membershipRequestFormId: Int
}

input CreateTeamFormDto {
  name: String!
  description: String!
  type: TeamFormType!
  isTemplate: Boolean!
  schema: JSON!
}

input UpdateTeamFormDto {
  name: String
  description: String
  type: TeamFormType
  isTemplate: Boolean
  schema: JSON
}

input CreateEventRegistrationDto {
  status: EventRegisterStatus!
  originalFormId: Int
  formSubmission: JSON
}

input UpdateEventRegistrationDto {
  status: EventRegisterStatus
  present: Boolean
  participationScore: Int
}

input CreateEventDto {
  start: DateTime!
  end: DateTime!
  name: String!
  description: String!
  location: String!
  price: Float!
  supervisorId: String!
  private: Boolean = false
  state: EventState!
  formId: Int
  templateId: Int
  meta: JSON
  eventApprovalSubmission: JSON
}

input UpdateEventDto {
  start: DateTime
  end: DateTime
  name: String
  description: String
  location: String
  price: Float
  supervisorId: String
  private: Boolean = false
  state: EventState
  formId: Int
  meta: JSON
  eventApprovalSubmission: JSON
}

input CreateEventApprovalDto {
  approved: Boolean!
  message: String
  stepId: Int!
}

input CreateTeamFinanceDto {
  title: String!
  amount: Float!
  method: PaymentMethod!
  type: TeamFinanceType!
  category: TeamFinanceCategory!
  description: String
  dueTo: String
  event: Int
  receipt: String
}

input UpdateTeamFinanceDto {
  title: String
  amount: Float
  method: PaymentMethod
  type: TeamFinanceType
  category: TeamFinanceCategory
  description: String
  dueTo: String
  event: Int
  receipt: String
}

input CreateTeamMembershipRequestDto {
  role: TeamRole
  originalFormId: Int
  formSubmission: JSON
}

input UpdateTeamMembershipRequestDto {
  role: TeamRole
  originalFormId: Int
  formSubmission: JSON
}

input PutTeamMembershipRequestDto {
  state: MembershipRequestState!
  handledMessage: String
}

input InviteMemberDto {
  force: Boolean
}

input UpdateTeamMemberDto {
  role: TeamRole
  roleLabel: String
  transferTo: String
}

input ApprovalStepDto {
  step: Int!
  name: String!
  type: ApprovalStepType!
  users: [String!]!
}

input UpdateApprovalStepDto {
  name: String
  type: ApprovalStepType
  users: [String!]
}

input CreateThreadDto {
  body: String!
  isAnonymous: Boolean = false
  assignedTeams: [Int!]
  assignedUsers: [String!]
  tags: [String!]
  title: String!
  type: ThreadType!
  scope: String!
}

input UpdateThreadDto {
  body: String
  isAnonymous: Boolean = false
  assignedTeams: [Int!]
  assignedUsers: [String!]
  tags: [String!]
  title: String
  type: ThreadType
  scope: String
  locked: Boolean
  validatedWithContent: Int
}

type Subscription {
  updatedUser: User!
  teamAdded: Team!
  teamUpdated: Team!
  eventRegistrationAdded: EventRegistration!
  eventRegistrationUpdated: EventRegistration!
  teamFinanceAdded: TeamFinance!
  teamFinanceUpdated: TeamFinance!
  teamMembershipRequestAdded: TeamMembershipRequest!
  teamMembershipRequestUpdated: TeamMembershipRequest!
  teamMemberInvited: TeamMember!
  teamMemberUpdated: TeamMember!
  threadAdded: Thread!
  updatedThread: Thread!
}