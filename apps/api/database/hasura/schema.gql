"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _textComparisonExp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _isNull: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""
columns and relationships of "action"
"""
type Action {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String

  """An object relationship"""
  event: Event
  eventId: bigint

  """An object relationship"""
  eventJoin: EventJoin
  eventJoinId: bigint

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  individualByValidatedById: Individual
  name: String!

  """An object relationship"""
  project: Project
  projectId: bigint
  score: Int!
  state: String!

  """An object relationship"""
  team: Team!
  teamId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
  validatedById: bigint
}

"""
aggregated selection of "action"
"""
type ActionAggregate {
  aggregate: ActionAggregateFields
  nodes: [Action!]!
}

input ActionAggregateBoolExp {
  count: actionAggregateBoolExpCount
}

input actionAggregateBoolExpCount {
  arguments: [ActionSelectColumn!]
  distinct: Boolean
  filter: ActionBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "action"
"""
type ActionAggregateFields {
  avg: ActionAvgFields
  count(columns: [ActionSelectColumn!], distinct: Boolean): Int!
  max: ActionMaxFields
  min: ActionMinFields
  stddev: ActionStddevFields
  stddevPop: ActionStddevPopFields
  stddevSamp: ActionStddevSampFields
  sum: ActionSumFields
  varPop: ActionVarPopFields
  varSamp: ActionVarSampFields
  variance: ActionVarianceFields
}

"""
order by aggregate values of table "action"
"""
input ActionAggregateOrderBy {
  avg: ActionAvgOrderBy
  count: OrderBy
  max: ActionMaxOrderBy
  min: ActionMinOrderBy
  stddev: ActionStddevOrderBy
  stddevPop: ActionStddevPopOrderBy
  stddevSamp: ActionStddevSampOrderBy
  sum: ActionSumOrderBy
  varPop: ActionVarPopOrderBy
  varSamp: ActionVarSampOrderBy
  variance: ActionVarianceOrderBy
}

"""
input type for inserting array relation for remote table "action"
"""
input ActionArrRelInsertInput {
  data: [ActionInsertInput!]!

  """upsert condition"""
  onConflict: ActionOnConflict
}

"""aggregate avg on columns"""
type ActionAvgFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

"""
order by avg() on columns of table "action"
"""
input ActionAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""
Boolean expression to filter rows from the table "action". All fields are combined with a logical 'AND'.
"""
input ActionBoolExp {
  _and: [ActionBoolExp!]
  _not: ActionBoolExp
  _or: [ActionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualByValidatedById: IndividualBoolExp
  name: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  score: IntComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
  validatedById: BigintComparisonExp
}

"""
unique or primary key constraints on table "action"
"""
enum ActionConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  action_pkey
}

"""
input type for incrementing numeric columns in table "action"
"""
input ActionIncInput {
  createdById: bigint
  eventId: bigint
  eventJoinId: bigint
  id: bigint
  projectId: bigint
  score: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

"""
input type for inserting data into table "action"
"""
input ActionInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualByValidatedById: IndividualObjRelInsertInput
  name: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  score: Int
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
  validatedById: bigint
}

"""aggregate max on columns"""
type ActionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

"""
order by max() on columns of table "action"
"""
input ActionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  score: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""aggregate min on columns"""
type ActionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

"""
order by min() on columns of table "action"
"""
input ActionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  score: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""
response of any mutation on the table "action"
"""
type ActionMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Action!]!
}

"""
input type for inserting object relation for remote table "action"
"""
input ActionObjRelInsertInput {
  data: ActionInsertInput!

  """upsert condition"""
  onConflict: ActionOnConflict
}

"""
on_conflict condition type for table "action"
"""
input ActionOnConflict {
  constraint: ActionConstraint!
  updateColumns: [ActionUpdateColumn!]! = []
  where: ActionBoolExp
}

"""Ordering options when selecting data from "action"."""
input ActionOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualByValidatedById: IndividualOrderBy
  name: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  score: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
  validatedById: OrderBy
}

"""primary key columns input for table: action"""
input ActionPkColumnsInput {
  id: bigint!
}

"""
select columns of table "action"
"""
enum ActionSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  eventId

  """column name"""
  eventJoinId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  projectId

  """column name"""
  score

  """column name"""
  state

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  userId

  """column name"""
  validatedById
}

"""
input type for updating data in table "action"
"""
input ActionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

"""aggregate stddev on columns"""
type ActionStddevFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

"""
order by stddev() on columns of table "action"
"""
input ActionStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""aggregate stddevPop on columns"""
type ActionStddevPopFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

"""
order by stddevPop() on columns of table "action"
"""
input ActionStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""aggregate stddevSamp on columns"""
type ActionStddevSampFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

"""
order by stddevSamp() on columns of table "action"
"""
input ActionStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""
Streaming cursor of the table "action"
"""
input ActionStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ActionStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ActionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  score: Int
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

"""aggregate sum on columns"""
type ActionSumFields {
  createdById: bigint
  eventId: bigint
  eventJoinId: bigint
  id: bigint
  projectId: bigint
  score: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
  validatedById: bigint
}

"""
order by sum() on columns of table "action"
"""
input ActionSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""
update columns of table "action"
"""
enum ActionUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  eventId

  """column name"""
  eventJoinId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  projectId

  """column name"""
  score

  """column name"""
  state

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  userId

  """column name"""
  validatedById
}

input ActionUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ActionIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ActionSetInput

  """filter the rows which have to be updated"""
  where: ActionBoolExp!
}

"""aggregate variance on columns"""
type ActionVarianceFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

"""
order by variance() on columns of table "action"
"""
input ActionVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""aggregate varPop on columns"""
type ActionVarPopFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

"""
order by varPop() on columns of table "action"
"""
input ActionVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""aggregate varSamp on columns"""
type ActionVarSampFields {
  createdById: Float
  eventId: Float
  eventJoinId: Float
  id: Float
  projectId: Float
  score: Float
  teamId: Float
  tenantId: Float
  userId: Float
  validatedById: Float
}

"""
order by varSamp() on columns of table "action"
"""
input ActionVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  projectId: OrderBy
  score: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
  validatedById: OrderBy
}

"""
columns and relationships of "actor"
"""
type Actor {
  """An array relationship"""
  actorAddresses(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  """An aggregate relationship"""
  actorAddressesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  """An array relationship"""
  actorBankInfos(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  """An aggregate relationship"""
  actorBankInfosAggregate(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  """An array relationship"""
  actorFinances(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """An aggregate relationship"""
  actorFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!

  """An array relationship"""
  actorImages(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): [ActorImage!]!

  """An aggregate relationship"""
  actorImagesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  """An array relationship"""
  actorTags(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  """An aggregate relationship"""
  actorTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!
  bio: String!

  """An array relationship"""
  botInfos(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): [BotInfo!]!

  """An aggregate relationship"""
  botInfosAggregate(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): BotInfoAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An array relationship"""
  favorites(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): [Favorite!]!

  """An aggregate relationship"""
  favoritesAggregate(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  """An array relationship"""
  follows(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): [Follow!]!

  """An aggregate relationship"""
  followsAggregate(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): FollowAggregate!
  hiddenAt: timestamptz
  ical: String!
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  individualByIndividualId: Individual
  individualId: bigint
  name: String!
  primaryEmail: String

  """An array relationship"""
  reports(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): [Report!]!

  """An aggregate relationship"""
  reportsAggregate(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): ReportAggregate!

  """An array relationship"""
  shortcuts(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): [Shortcut!]!

  """An aggregate relationship"""
  shortcutsAggregate(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): ShortcutAggregate!
  slug: String!

  """An array relationship"""
  socials(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): [Social!]!

  """An aggregate relationship"""
  socialsAggregate(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): SocialAggregate!

  """An object relationship"""
  team: Team

  """An array relationship"""
  teamFinanceEdits(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """An aggregate relationship"""
  teamFinanceEditsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!
  teamId: bigint

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
columns and relationships of "actor_address"
"""
type ActorAddress {
  """An object relationship"""
  actor: Actor!

  """An array relationship"""
  actorBankInfos(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  """An aggregate relationship"""
  actorBankInfosAggregate(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  """An array relationship"""
  actorFinances(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """An aggregate relationship"""
  actorFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!
  actorId: bigint!

  """An object relationship"""
  campus: Campus
  campusId: bigint
  city: String!
  country: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """An object relationship"""
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint

  """An object relationship"""
  individual: Individual
  latitude: Float
  longitude: Float
  name: String!
  public: Boolean!
  state: String!
  street: String!

  """An array relationship"""
  teamFinanceEdits(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """An aggregate relationship"""
  teamFinanceEditsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  zip: String!
}

"""
aggregated selection of "actor_address"
"""
type ActorAddressAggregate {
  aggregate: ActorAddressAggregateFields
  nodes: [ActorAddress!]!
}

input ActorAddressAggregateBoolExp {
  bool_and: actorAddressAggregateBoolExpBool_and
  bool_or: actorAddressAggregateBoolExpBool_or
  count: actorAddressAggregateBoolExpCount
}

input actorAddressAggregateBoolExpBool_and {
  arguments: ActorAddressSelectColumnActorAddressAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: BooleanComparisonExp!
}

input actorAddressAggregateBoolExpBool_or {
  arguments: ActorAddressSelectColumnActorAddressAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: BooleanComparisonExp!
}

input actorAddressAggregateBoolExpCount {
  arguments: [ActorAddressSelectColumn!]
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "actor_address"
"""
type ActorAddressAggregateFields {
  avg: ActorAddressAvgFields
  count(columns: [ActorAddressSelectColumn!], distinct: Boolean): Int!
  max: ActorAddressMaxFields
  min: ActorAddressMinFields
  stddev: ActorAddressStddevFields
  stddevPop: ActorAddressStddevPopFields
  stddevSamp: ActorAddressStddevSampFields
  sum: ActorAddressSumFields
  varPop: ActorAddressVarPopFields
  varSamp: ActorAddressVarSampFields
  variance: ActorAddressVarianceFields
}

"""
order by aggregate values of table "actor_address"
"""
input ActorAddressAggregateOrderBy {
  avg: ActorAddressAvgOrderBy
  count: OrderBy
  max: ActorAddressMaxOrderBy
  min: ActorAddressMinOrderBy
  stddev: ActorAddressStddevOrderBy
  stddevPop: ActorAddressStddevPopOrderBy
  stddevSamp: ActorAddressStddevSampOrderBy
  sum: ActorAddressSumOrderBy
  varPop: ActorAddressVarPopOrderBy
  varSamp: ActorAddressVarSampOrderBy
  variance: ActorAddressVarianceOrderBy
}

"""
input type for inserting array relation for remote table "actor_address"
"""
input ActorAddressArrRelInsertInput {
  data: [ActorAddressInsertInput!]!

  """upsert condition"""
  onConflict: ActorAddressOnConflict
}

"""aggregate avg on columns"""
type ActorAddressAvgFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

"""
order by avg() on columns of table "actor_address"
"""
input ActorAddressAvgOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "actor_address". All fields are combined with a logical 'AND'.
"""
input ActorAddressBoolExp {
  _and: [ActorAddressBoolExp!]
  _not: ActorAddressBoolExp
  _or: [ActorAddressBoolExp!]
  actor: ActorBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorId: BigintComparisonExp
  campus: CampusBoolExp
  campusId: BigintComparisonExp
  city: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  latitude: FloatComparisonExp
  longitude: FloatComparisonExp
  name: StringComparisonExp
  public: BooleanComparisonExp
  state: StringComparisonExp
  street: StringComparisonExp
  teamFinanceEdits: TeamFinanceEditBoolExp
  teamFinanceEditsAggregate: TeamFinanceEditAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  zip: StringComparisonExp
}

"""
unique or primary key constraints on table "actor_address"
"""
enum ActorAddressConstraint {
  """
  unique or primary key constraint on columns "campus_id"
  """
  actor_address_campus_id_unique

  """
  unique or primary key constraint on columns "image_id"
  """
  actor_address_image_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  actor_address_pkey
}

"""
input type for incrementing numeric columns in table "actor_address"
"""
input ActorAddressIncInput {
  actorId: bigint
  campusId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  tenantId: bigint
}

"""
input type for inserting data into table "actor_address"
"""
input ActorAddressInsertInput {
  actor: ActorObjRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorId: bigint
  campus: CampusObjRelInsertInput
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  teamFinanceEdits: TeamFinanceEditArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  zip: String
}

"""aggregate max on columns"""
type ActorAddressMaxFields {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  tenantId: bigint
  zip: String
}

"""
order by max() on columns of table "actor_address"
"""
input ActorAddressMaxOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  tenantId: OrderBy
  zip: OrderBy
}

"""aggregate min on columns"""
type ActorAddressMinFields {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  tenantId: bigint
  zip: String
}

"""
order by min() on columns of table "actor_address"
"""
input ActorAddressMinOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  tenantId: OrderBy
  zip: OrderBy
}

"""
response of any mutation on the table "actor_address"
"""
type ActorAddressMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ActorAddress!]!
}

"""
input type for inserting object relation for remote table "actor_address"
"""
input ActorAddressObjRelInsertInput {
  data: ActorAddressInsertInput!

  """upsert condition"""
  onConflict: ActorAddressOnConflict
}

"""
on_conflict condition type for table "actor_address"
"""
input ActorAddressOnConflict {
  constraint: ActorAddressConstraint!
  updateColumns: [ActorAddressUpdateColumn!]! = []
  where: ActorAddressBoolExp
}

"""Ordering options when selecting data from "actor_address"."""
input ActorAddressOrderBy {
  actor: ActorOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorId: OrderBy
  campus: CampusOrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  public: OrderBy
  state: OrderBy
  street: OrderBy
  teamFinanceEditsAggregate: TeamFinanceEditAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  zip: OrderBy
}

"""primary key columns input for table: actor_address"""
input ActorAddressPkColumnsInput {
  id: bigint!
}

"""
select columns of table "actor_address"
"""
enum ActorAddressSelectColumn {
  """column name"""
  actorId

  """column name"""
  campusId

  """column name"""
  city

  """column name"""
  country

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  name

  """column name"""
  public

  """column name"""
  state

  """column name"""
  street

  """column name"""
  tenantId

  """column name"""
  zip
}

"""
select "actorAddressAggregateBoolExpBool_andArgumentsColumns" columns of table "actor_address"
"""
enum ActorAddressSelectColumnActorAddressAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  public
}

"""
select "actorAddressAggregateBoolExpBool_orArgumentsColumns" columns of table "actor_address"
"""
enum ActorAddressSelectColumnActorAddressAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  public
}

"""
input type for updating data in table "actor_address"
"""
input ActorAddressSetInput {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  tenantId: bigint
  zip: String
}

"""aggregate stddev on columns"""
type ActorAddressStddevFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "actor_address"
"""
input ActorAddressStddevOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ActorAddressStddevPopFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "actor_address"
"""
input ActorAddressStddevPopOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ActorAddressStddevSampFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "actor_address"
"""
input ActorAddressStddevSampOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "actor_address"
"""
input ActorAddressStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ActorAddressStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ActorAddressStreamCursorValueInput {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  tenantId: bigint
  zip: String
}

"""aggregate sum on columns"""
type ActorAddressSumFields {
  actorId: bigint
  campusId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  tenantId: bigint
}

"""
order by sum() on columns of table "actor_address"
"""
input ActorAddressSumOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "actor_address"
"""
enum ActorAddressUpdateColumn {
  """column name"""
  actorId

  """column name"""
  campusId

  """column name"""
  city

  """column name"""
  country

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  name

  """column name"""
  public

  """column name"""
  state

  """column name"""
  street

  """column name"""
  tenantId

  """column name"""
  zip
}

input ActorAddressUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ActorAddressIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ActorAddressSetInput

  """filter the rows which have to be updated"""
  where: ActorAddressBoolExp!
}

"""aggregate variance on columns"""
type ActorAddressVarianceFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

"""
order by variance() on columns of table "actor_address"
"""
input ActorAddressVarianceOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ActorAddressVarPopFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "actor_address"
"""
input ActorAddressVarPopOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ActorAddressVarSampFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "actor_address"
"""
input ActorAddressVarSampOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

"""
aggregated selection of "actor"
"""
type ActorAggregate {
  aggregate: ActorAggregateFields
  nodes: [Actor!]!
}

input ActorAggregateBoolExp {
  count: actorAggregateBoolExpCount
}

input actorAggregateBoolExpCount {
  arguments: [ActorSelectColumn!]
  distinct: Boolean
  filter: ActorBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "actor"
"""
type ActorAggregateFields {
  avg: ActorAvgFields
  count(columns: [ActorSelectColumn!], distinct: Boolean): Int!
  max: ActorMaxFields
  min: ActorMinFields
  stddev: ActorStddevFields
  stddevPop: ActorStddevPopFields
  stddevSamp: ActorStddevSampFields
  sum: ActorSumFields
  varPop: ActorVarPopFields
  varSamp: ActorVarSampFields
  variance: ActorVarianceFields
}

"""
order by aggregate values of table "actor"
"""
input ActorAggregateOrderBy {
  avg: ActorAvgOrderBy
  count: OrderBy
  max: ActorMaxOrderBy
  min: ActorMinOrderBy
  stddev: ActorStddevOrderBy
  stddevPop: ActorStddevPopOrderBy
  stddevSamp: ActorStddevSampOrderBy
  sum: ActorSumOrderBy
  varPop: ActorVarPopOrderBy
  varSamp: ActorVarSampOrderBy
  variance: ActorVarianceOrderBy
}

"""
input type for inserting array relation for remote table "actor"
"""
input ActorArrRelInsertInput {
  data: [ActorInsertInput!]!

  """upsert condition"""
  onConflict: ActorOnConflict
}

"""aggregate avg on columns"""
type ActorAvgFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "actor"
"""
input ActorAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "actor_bank_info"
"""
type ActorBankInfo {
  accountCode: String!

  """An object relationship"""
  actor: Actor!

  """An object relationship"""
  actorAddress: ActorAddress!
  actorId: bigint!
  addressId: bigint!
  agencyCode: String!
  bankCode: String!
  bankCodeBic: String!
  checksum: String!
  country: String!
  countryCode: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An array relationship"""
  expenses(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """An aggregate relationship"""
  expensesAggregate(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): ExpenseAggregate!
  fullAcount: String!
  hiddenAt: timestamptz
  holderName: String!
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "actor_bank_info"
"""
type ActorBankInfoAggregate {
  aggregate: ActorBankInfoAggregateFields
  nodes: [ActorBankInfo!]!
}

input ActorBankInfoAggregateBoolExp {
  count: actorBankInfoAggregateBoolExpCount
}

input actorBankInfoAggregateBoolExpCount {
  arguments: [ActorBankInfoSelectColumn!]
  distinct: Boolean
  filter: ActorBankInfoBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "actor_bank_info"
"""
type ActorBankInfoAggregateFields {
  avg: ActorBankInfoAvgFields
  count(columns: [ActorBankInfoSelectColumn!], distinct: Boolean): Int!
  max: ActorBankInfoMaxFields
  min: ActorBankInfoMinFields
  stddev: ActorBankInfoStddevFields
  stddevPop: ActorBankInfoStddevPopFields
  stddevSamp: ActorBankInfoStddevSampFields
  sum: ActorBankInfoSumFields
  varPop: ActorBankInfoVarPopFields
  varSamp: ActorBankInfoVarSampFields
  variance: ActorBankInfoVarianceFields
}

"""
order by aggregate values of table "actor_bank_info"
"""
input ActorBankInfoAggregateOrderBy {
  avg: ActorBankInfoAvgOrderBy
  count: OrderBy
  max: ActorBankInfoMaxOrderBy
  min: ActorBankInfoMinOrderBy
  stddev: ActorBankInfoStddevOrderBy
  stddevPop: ActorBankInfoStddevPopOrderBy
  stddevSamp: ActorBankInfoStddevSampOrderBy
  sum: ActorBankInfoSumOrderBy
  varPop: ActorBankInfoVarPopOrderBy
  varSamp: ActorBankInfoVarSampOrderBy
  variance: ActorBankInfoVarianceOrderBy
}

"""
input type for inserting array relation for remote table "actor_bank_info"
"""
input ActorBankInfoArrRelInsertInput {
  data: [ActorBankInfoInsertInput!]!

  """upsert condition"""
  onConflict: ActorBankInfoOnConflict
}

"""aggregate avg on columns"""
type ActorBankInfoAvgFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "actor_bank_info"
"""
input ActorBankInfoAvgOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "actor_bank_info". All fields are combined with a logical 'AND'.
"""
input ActorBankInfoBoolExp {
  _and: [ActorBankInfoBoolExp!]
  _not: ActorBankInfoBoolExp
  _or: [ActorBankInfoBoolExp!]
  accountCode: StringComparisonExp
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  actorId: BigintComparisonExp
  addressId: BigintComparisonExp
  agencyCode: StringComparisonExp
  bankCode: StringComparisonExp
  bankCodeBic: StringComparisonExp
  checksum: StringComparisonExp
  country: StringComparisonExp
  countryCode: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fullAcount: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  holderName: StringComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "actor_bank_info"
"""
enum ActorBankInfoConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  actor_bank_info_pkey
}

"""
input type for incrementing numeric columns in table "actor_bank_info"
"""
input ActorBankInfoIncInput {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "actor_bank_info"
"""
input ActorBankInfoInsertInput {
  accountCode: String
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expenses: ExpenseArrRelInsertInput
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ActorBankInfoMaxFields {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "actor_bank_info"
"""
input ActorBankInfoMaxOrderBy {
  accountCode: OrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ActorBankInfoMinFields {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "actor_bank_info"
"""
input ActorBankInfoMinOrderBy {
  accountCode: OrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "actor_bank_info"
"""
type ActorBankInfoMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ActorBankInfo!]!
}

"""
input type for inserting object relation for remote table "actor_bank_info"
"""
input ActorBankInfoObjRelInsertInput {
  data: ActorBankInfoInsertInput!

  """upsert condition"""
  onConflict: ActorBankInfoOnConflict
}

"""
on_conflict condition type for table "actor_bank_info"
"""
input ActorBankInfoOnConflict {
  constraint: ActorBankInfoConstraint!
  updateColumns: [ActorBankInfoUpdateColumn!]! = []
  where: ActorBankInfoBoolExp
}

"""Ordering options when selecting data from "actor_bank_info"."""
input ActorBankInfoOrderBy {
  accountCode: OrderBy
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: actor_bank_info"""
input ActorBankInfoPkColumnsInput {
  id: bigint!
}

"""
select columns of table "actor_bank_info"
"""
enum ActorBankInfoSelectColumn {
  """column name"""
  accountCode

  """column name"""
  actorId

  """column name"""
  addressId

  """column name"""
  agencyCode

  """column name"""
  bankCode

  """column name"""
  bankCodeBic

  """column name"""
  checksum

  """column name"""
  country

  """column name"""
  countryCode

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  fullAcount

  """column name"""
  hiddenAt

  """column name"""
  holderName

  """column name"""
  id

  """column name"""
  tenantId
}

"""
input type for updating data in table "actor_bank_info"
"""
input ActorBankInfoSetInput {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ActorBankInfoStddevFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "actor_bank_info"
"""
input ActorBankInfoStddevOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ActorBankInfoStddevPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "actor_bank_info"
"""
input ActorBankInfoStddevPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ActorBankInfoStddevSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "actor_bank_info"
"""
input ActorBankInfoStddevSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "actor_bank_info"
"""
input ActorBankInfoStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ActorBankInfoStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ActorBankInfoStreamCursorValueInput {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type ActorBankInfoSumFields {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "actor_bank_info"
"""
input ActorBankInfoSumOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "actor_bank_info"
"""
enum ActorBankInfoUpdateColumn {
  """column name"""
  accountCode

  """column name"""
  actorId

  """column name"""
  addressId

  """column name"""
  agencyCode

  """column name"""
  bankCode

  """column name"""
  bankCodeBic

  """column name"""
  checksum

  """column name"""
  country

  """column name"""
  countryCode

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  fullAcount

  """column name"""
  hiddenAt

  """column name"""
  holderName

  """column name"""
  id

  """column name"""
  tenantId
}

input ActorBankInfoUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ActorBankInfoIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ActorBankInfoSetInput

  """filter the rows which have to be updated"""
  where: ActorBankInfoBoolExp!
}

"""aggregate variance on columns"""
type ActorBankInfoVarianceFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "actor_bank_info"
"""
input ActorBankInfoVarianceOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ActorBankInfoVarPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "actor_bank_info"
"""
input ActorBankInfoVarPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ActorBankInfoVarSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "actor_bank_info"
"""
input ActorBankInfoVarSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "actor". All fields are combined with a logical 'AND'.
"""
input ActorBoolExp {
  _and: [ActorBoolExp!]
  _not: ActorBoolExp
  _or: [ActorBoolExp!]
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  bio: StringComparisonExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  ical: StringComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualByIndividualId: IndividualBoolExp
  individualId: BigintComparisonExp
  name: StringComparisonExp
  primaryEmail: StringComparisonExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  slug: StringComparisonExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  team: TeamBoolExp
  teamFinanceEdits: TeamFinanceEditBoolExp
  teamFinanceEditsAggregate: TeamFinanceEditAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "actor"
"""
enum ActorConstraint {
  """
  unique or primary key constraint on columns "ical"
  """
  actor_ical_unique

  """
  unique or primary key constraint on columns "individual_id"
  """
  actor_individual_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  actor_pkey

  """
  unique or primary key constraint on columns "team_id"
  """
  actor_team_id_unique
}

"""
columns and relationships of "actor_finance"
"""
type ActorFinance {
  """An object relationship"""
  actor: Actor

  """An object relationship"""
  actorAddress: ActorAddress
  addressId: bigint
  amount: Float!
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  """An object relationship"""
  expense: Expense
  expenseId: bigint

  """An object relationship"""
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  name: String!
  payedAt: timestamptz!
  payedById: bigint
  receiptId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "actor_finance"
"""
type ActorFinanceAggregate {
  aggregate: ActorFinanceAggregateFields
  nodes: [ActorFinance!]!
}

input ActorFinanceAggregateBoolExp {
  count: actorFinanceAggregateBoolExpCount
}

input actorFinanceAggregateBoolExpCount {
  arguments: [ActorFinanceSelectColumn!]
  distinct: Boolean
  filter: ActorFinanceBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "actor_finance"
"""
type ActorFinanceAggregateFields {
  avg: ActorFinanceAvgFields
  count(columns: [ActorFinanceSelectColumn!], distinct: Boolean): Int!
  max: ActorFinanceMaxFields
  min: ActorFinanceMinFields
  stddev: ActorFinanceStddevFields
  stddevPop: ActorFinanceStddevPopFields
  stddevSamp: ActorFinanceStddevSampFields
  sum: ActorFinanceSumFields
  varPop: ActorFinanceVarPopFields
  varSamp: ActorFinanceVarSampFields
  variance: ActorFinanceVarianceFields
}

"""
order by aggregate values of table "actor_finance"
"""
input ActorFinanceAggregateOrderBy {
  avg: ActorFinanceAvgOrderBy
  count: OrderBy
  max: ActorFinanceMaxOrderBy
  min: ActorFinanceMinOrderBy
  stddev: ActorFinanceStddevOrderBy
  stddevPop: ActorFinanceStddevPopOrderBy
  stddevSamp: ActorFinanceStddevSampOrderBy
  sum: ActorFinanceSumOrderBy
  varPop: ActorFinanceVarPopOrderBy
  varSamp: ActorFinanceVarSampOrderBy
  variance: ActorFinanceVarianceOrderBy
}

"""
input type for inserting array relation for remote table "actor_finance"
"""
input ActorFinanceArrRelInsertInput {
  data: [ActorFinanceInsertInput!]!

  """upsert condition"""
  onConflict: ActorFinanceOnConflict
}

"""aggregate avg on columns"""
type ActorFinanceAvgFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "actor_finance"
"""
input ActorFinanceAvgOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "actor_finance". All fields are combined with a logical 'AND'.
"""
input ActorFinanceBoolExp {
  _and: [ActorFinanceBoolExp!]
  _not: ActorFinanceBoolExp
  _or: [ActorFinanceBoolExp!]
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  amount: FloatComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedById: BigintComparisonExp
  receiptId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "actor_finance"
"""
enum ActorFinanceConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  actor_finance_pkey
}

"""
input type for incrementing numeric columns in table "actor_finance"
"""
input ActorFinanceIncInput {
  addressId: bigint
  amount: Float
  createdById: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "actor_finance"
"""
input ActorFinanceInsertInput {
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ActorFinanceMaxFields {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "actor_finance"
"""
input ActorFinanceMaxOrderBy {
  addressId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ActorFinanceMinFields {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "actor_finance"
"""
input ActorFinanceMinOrderBy {
  addressId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "actor_finance"
"""
type ActorFinanceMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ActorFinance!]!
}

"""
on_conflict condition type for table "actor_finance"
"""
input ActorFinanceOnConflict {
  constraint: ActorFinanceConstraint!
  updateColumns: [ActorFinanceUpdateColumn!]! = []
  where: ActorFinanceBoolExp
}

"""Ordering options when selecting data from "actor_finance"."""
input ActorFinanceOrderBy {
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: actor_finance"""
input ActorFinancePkColumnsInput {
  id: bigint!
}

"""
select columns of table "actor_finance"
"""
enum ActorFinanceSelectColumn {
  """column name"""
  addressId

  """column name"""
  amount

  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  expenseId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  payedAt

  """column name"""
  payedById

  """column name"""
  receiptId

  """column name"""
  tenantId
}

"""
input type for updating data in table "actor_finance"
"""
input ActorFinanceSetInput {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ActorFinanceStddevFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "actor_finance"
"""
input ActorFinanceStddevOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ActorFinanceStddevPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "actor_finance"
"""
input ActorFinanceStddevPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ActorFinanceStddevSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "actor_finance"
"""
input ActorFinanceStddevSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "actor_finance"
"""
input ActorFinanceStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ActorFinanceStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ActorFinanceStreamCursorValueInput {
  addressId: bigint
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type ActorFinanceSumFields {
  addressId: bigint
  amount: Float
  createdById: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  receiptId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "actor_finance"
"""
input ActorFinanceSumOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "actor_finance"
"""
enum ActorFinanceUpdateColumn {
  """column name"""
  addressId

  """column name"""
  amount

  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  expenseId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  payedAt

  """column name"""
  payedById

  """column name"""
  receiptId

  """column name"""
  tenantId
}

input ActorFinanceUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ActorFinanceIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ActorFinanceSetInput

  """filter the rows which have to be updated"""
  where: ActorFinanceBoolExp!
}

"""aggregate variance on columns"""
type ActorFinanceVarianceFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "actor_finance"
"""
input ActorFinanceVarianceOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ActorFinanceVarPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "actor_finance"
"""
input ActorFinanceVarPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ActorFinanceVarSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  expenseId: Float
  id: Float
  payedById: Float
  receiptId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "actor_finance"
"""
input ActorFinanceVarSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  receiptId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "actor_image"
"""
type ActorImage {
  """An object relationship"""
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint!

  """An object relationship"""
  individual: Individual
  lastActiveDate: timestamptz

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "actor_image"
"""
type ActorImageAggregate {
  aggregate: ActorImageAggregateFields
  nodes: [ActorImage!]!
}

input ActorImageAggregateBoolExp {
  count: actorImageAggregateBoolExpCount
}

input actorImageAggregateBoolExpCount {
  arguments: [ActorImageSelectColumn!]
  distinct: Boolean
  filter: ActorImageBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "actor_image"
"""
type ActorImageAggregateFields {
  avg: ActorImageAvgFields
  count(columns: [ActorImageSelectColumn!], distinct: Boolean): Int!
  max: ActorImageMaxFields
  min: ActorImageMinFields
  stddev: ActorImageStddevFields
  stddevPop: ActorImageStddevPopFields
  stddevSamp: ActorImageStddevSampFields
  sum: ActorImageSumFields
  varPop: ActorImageVarPopFields
  varSamp: ActorImageVarSampFields
  variance: ActorImageVarianceFields
}

"""
order by aggregate values of table "actor_image"
"""
input ActorImageAggregateOrderBy {
  avg: ActorImageAvgOrderBy
  count: OrderBy
  max: ActorImageMaxOrderBy
  min: ActorImageMinOrderBy
  stddev: ActorImageStddevOrderBy
  stddevPop: ActorImageStddevPopOrderBy
  stddevSamp: ActorImageStddevSampOrderBy
  sum: ActorImageSumOrderBy
  varPop: ActorImageVarPopOrderBy
  varSamp: ActorImageVarSampOrderBy
  variance: ActorImageVarianceOrderBy
}

"""
input type for inserting array relation for remote table "actor_image"
"""
input ActorImageArrRelInsertInput {
  data: [ActorImageInsertInput!]!

  """upsert condition"""
  onConflict: ActorImageOnConflict
}

"""aggregate avg on columns"""
type ActorImageAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "actor_image"
"""
input ActorImageAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "actor_image". All fields are combined with a logical 'AND'.
"""
input ActorImageBoolExp {
  _and: [ActorImageBoolExp!]
  _not: ActorImageBoolExp
  _or: [ActorImageBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "actor_image"
"""
enum ActorImageConstraint {
  """
  unique or primary key constraint on columns "image_id"
  """
  actor_image_image_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  actor_image_pkey
}

"""
input type for incrementing numeric columns in table "actor_image"
"""
input ActorImageIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "actor_image"
"""
input ActorImageInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type ActorImageMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "actor_image"
"""
input ActorImageMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type ActorImageMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "actor_image"
"""
input ActorImageMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "actor_image"
"""
type ActorImageMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ActorImage!]!
}

"""
input type for inserting object relation for remote table "actor_image"
"""
input ActorImageObjRelInsertInput {
  data: ActorImageInsertInput!

  """upsert condition"""
  onConflict: ActorImageOnConflict
}

"""
on_conflict condition type for table "actor_image"
"""
input ActorImageOnConflict {
  constraint: ActorImageConstraint!
  updateColumns: [ActorImageUpdateColumn!]! = []
  where: ActorImageBoolExp
}

"""Ordering options when selecting data from "actor_image"."""
input ActorImageOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: actor_image"""
input ActorImagePkColumnsInput {
  id: bigint!
}

"""
select columns of table "actor_image"
"""
enum ActorImageSelectColumn {
  """column name"""
  actorId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  lastActiveDate

  """column name"""
  tenantId

  """column name"""
  type
}

"""
input type for updating data in table "actor_image"
"""
input ActorImageSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type ActorImageStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "actor_image"
"""
input ActorImageStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ActorImageStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "actor_image"
"""
input ActorImageStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ActorImageStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "actor_image"
"""
input ActorImageStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "actor_image"
"""
input ActorImageStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ActorImageStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ActorImageStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type ActorImageSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "actor_image"
"""
input ActorImageSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "actor_image"
"""
enum ActorImageUpdateColumn {
  """column name"""
  actorId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  lastActiveDate

  """column name"""
  tenantId

  """column name"""
  type
}

input ActorImageUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ActorImageIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ActorImageSetInput

  """filter the rows which have to be updated"""
  where: ActorImageBoolExp!
}

"""aggregate variance on columns"""
type ActorImageVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "actor_image"
"""
input ActorImageVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ActorImageVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "actor_image"
"""
input ActorImageVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ActorImageVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "actor_image"
"""
input ActorImageVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
input type for incrementing numeric columns in table "actor"
"""
input ActorIncInput {
  createdById: bigint
  id: bigint
  individualId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "actor"
"""
input ActorInsertInput {
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actorTags: ActorTagsArrRelInsertInput
  bio: String
  botInfos: BotInfoArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  favorites: FavoriteArrRelInsertInput
  follows: FollowArrRelInsertInput
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individual: IndividualObjRelInsertInput
  individualByIndividualId: IndividualObjRelInsertInput
  individualId: bigint
  name: String
  primaryEmail: String
  reports: ReportArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  slug: String
  socials: SocialArrRelInsertInput
  team: TeamObjRelInsertInput
  teamFinanceEdits: TeamFinanceEditArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ActorMaxFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  primaryEmail: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "actor"
"""
input ActorMaxOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individualId: OrderBy
  name: OrderBy
  primaryEmail: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ActorMinFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  primaryEmail: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "actor"
"""
input ActorMinOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individualId: OrderBy
  name: OrderBy
  primaryEmail: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "actor"
"""
type ActorMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Actor!]!
}

"""
input type for inserting object relation for remote table "actor"
"""
input ActorObjRelInsertInput {
  data: ActorInsertInput!

  """upsert condition"""
  onConflict: ActorOnConflict
}

"""
on_conflict condition type for table "actor"
"""
input ActorOnConflict {
  constraint: ActorConstraint!
  updateColumns: [ActorUpdateColumn!]! = []
  where: ActorBoolExp
}

"""Ordering options when selecting data from "actor"."""
input ActorOrderBy {
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorTagsAggregate: ActorTagsAggregateOrderBy
  bio: OrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualByIndividualId: IndividualOrderBy
  individualId: OrderBy
  name: OrderBy
  primaryEmail: OrderBy
  reportsAggregate: ReportAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  slug: OrderBy
  socialsAggregate: SocialAggregateOrderBy
  team: TeamOrderBy
  teamFinanceEditsAggregate: TeamFinanceEditAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: actor"""
input ActorPkColumnsInput {
  id: bigint!
}

"""
select columns of table "actor"
"""
enum ActorSelectColumn {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  ical

  """column name"""
  id

  """column name"""
  individualId

  """column name"""
  name

  """column name"""
  primaryEmail

  """column name"""
  slug

  """column name"""
  teamId

  """column name"""
  tenantId
}

"""
input type for updating data in table "actor"
"""
input ActorSetInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  primaryEmail: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ActorStddevFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "actor"
"""
input ActorStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ActorStddevPopFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "actor"
"""
input ActorStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ActorStddevSampFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "actor"
"""
input ActorStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "actor"
"""
input ActorStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ActorStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ActorStreamCursorValueInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  name: String
  primaryEmail: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type ActorSumFields {
  createdById: bigint
  id: bigint
  individualId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "actor"
"""
input ActorSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "actor_tags"
"""
type ActorTags {
  """An object relationship"""
  actor: Actor!
  actorId: bigint!

  """An object relationship"""
  tag: Tag!
  tagId: bigint!
}

"""
aggregated selection of "actor_tags"
"""
type ActorTagsAggregate {
  aggregate: ActorTagsAggregateFields
  nodes: [ActorTags!]!
}

input ActorTagsAggregateBoolExp {
  count: actorTagsAggregateBoolExpCount
}

input actorTagsAggregateBoolExpCount {
  arguments: [ActorTagsSelectColumn!]
  distinct: Boolean
  filter: ActorTagsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "actor_tags"
"""
type ActorTagsAggregateFields {
  avg: ActorTagsAvgFields
  count(columns: [ActorTagsSelectColumn!], distinct: Boolean): Int!
  max: ActorTagsMaxFields
  min: ActorTagsMinFields
  stddev: ActorTagsStddevFields
  stddevPop: ActorTagsStddevPopFields
  stddevSamp: ActorTagsStddevSampFields
  sum: ActorTagsSumFields
  varPop: ActorTagsVarPopFields
  varSamp: ActorTagsVarSampFields
  variance: ActorTagsVarianceFields
}

"""
order by aggregate values of table "actor_tags"
"""
input ActorTagsAggregateOrderBy {
  avg: ActorTagsAvgOrderBy
  count: OrderBy
  max: ActorTagsMaxOrderBy
  min: ActorTagsMinOrderBy
  stddev: ActorTagsStddevOrderBy
  stddevPop: ActorTagsStddevPopOrderBy
  stddevSamp: ActorTagsStddevSampOrderBy
  sum: ActorTagsSumOrderBy
  varPop: ActorTagsVarPopOrderBy
  varSamp: ActorTagsVarSampOrderBy
  variance: ActorTagsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "actor_tags"
"""
input ActorTagsArrRelInsertInput {
  data: [ActorTagsInsertInput!]!

  """upsert condition"""
  onConflict: ActorTagsOnConflict
}

"""aggregate avg on columns"""
type ActorTagsAvgFields {
  actorId: Float
  tagId: Float
}

"""
order by avg() on columns of table "actor_tags"
"""
input ActorTagsAvgOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""
Boolean expression to filter rows from the table "actor_tags". All fields are combined with a logical 'AND'.
"""
input ActorTagsBoolExp {
  _and: [ActorTagsBoolExp!]
  _not: ActorTagsBoolExp
  _or: [ActorTagsBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

"""
unique or primary key constraints on table "actor_tags"
"""
enum ActorTagsConstraint {
  """
  unique or primary key constraint on columns "tag_id", "actor_id"
  """
  actor_tags_pkey
}

"""
input type for incrementing numeric columns in table "actor_tags"
"""
input ActorTagsIncInput {
  actorId: bigint
  tagId: bigint
}

"""
input type for inserting data into table "actor_tags"
"""
input ActorTagsInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

"""aggregate max on columns"""
type ActorTagsMaxFields {
  actorId: bigint
  tagId: bigint
}

"""
order by max() on columns of table "actor_tags"
"""
input ActorTagsMaxOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""aggregate min on columns"""
type ActorTagsMinFields {
  actorId: bigint
  tagId: bigint
}

"""
order by min() on columns of table "actor_tags"
"""
input ActorTagsMinOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""
response of any mutation on the table "actor_tags"
"""
type ActorTagsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ActorTags!]!
}

"""
on_conflict condition type for table "actor_tags"
"""
input ActorTagsOnConflict {
  constraint: ActorTagsConstraint!
  updateColumns: [ActorTagsUpdateColumn!]! = []
  where: ActorTagsBoolExp
}

"""Ordering options when selecting data from "actor_tags"."""
input ActorTagsOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

"""primary key columns input for table: actor_tags"""
input ActorTagsPkColumnsInput {
  actorId: bigint!
  tagId: bigint!
}

"""
select columns of table "actor_tags"
"""
enum ActorTagsSelectColumn {
  """column name"""
  actorId

  """column name"""
  tagId
}

"""
input type for updating data in table "actor_tags"
"""
input ActorTagsSetInput {
  actorId: bigint
  tagId: bigint
}

"""aggregate stddev on columns"""
type ActorTagsStddevFields {
  actorId: Float
  tagId: Float
}

"""
order by stddev() on columns of table "actor_tags"
"""
input ActorTagsStddevOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevPop on columns"""
type ActorTagsStddevPopFields {
  actorId: Float
  tagId: Float
}

"""
order by stddevPop() on columns of table "actor_tags"
"""
input ActorTagsStddevPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ActorTagsStddevSampFields {
  actorId: Float
  tagId: Float
}

"""
order by stddevSamp() on columns of table "actor_tags"
"""
input ActorTagsStddevSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""
Streaming cursor of the table "actor_tags"
"""
input ActorTagsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ActorTagsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ActorTagsStreamCursorValueInput {
  actorId: bigint
  tagId: bigint
}

"""aggregate sum on columns"""
type ActorTagsSumFields {
  actorId: bigint
  tagId: bigint
}

"""
order by sum() on columns of table "actor_tags"
"""
input ActorTagsSumOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "actor_tags"
"""
enum ActorTagsUpdateColumn {
  """column name"""
  actorId

  """column name"""
  tagId
}

input ActorTagsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ActorTagsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ActorTagsSetInput

  """filter the rows which have to be updated"""
  where: ActorTagsBoolExp!
}

"""aggregate variance on columns"""
type ActorTagsVarianceFields {
  actorId: Float
  tagId: Float
}

"""
order by variance() on columns of table "actor_tags"
"""
input ActorTagsVarianceOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""aggregate varPop on columns"""
type ActorTagsVarPopFields {
  actorId: Float
  tagId: Float
}

"""
order by varPop() on columns of table "actor_tags"
"""
input ActorTagsVarPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""aggregate varSamp on columns"""
type ActorTagsVarSampFields {
  actorId: Float
  tagId: Float
}

"""
order by varSamp() on columns of table "actor_tags"
"""
input ActorTagsVarSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "actor"
"""
enum ActorUpdateColumn {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  ical

  """column name"""
  id

  """column name"""
  individualId

  """column name"""
  name

  """column name"""
  primaryEmail

  """column name"""
  slug

  """column name"""
  teamId

  """column name"""
  tenantId
}

input ActorUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ActorIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ActorSetInput

  """filter the rows which have to be updated"""
  where: ActorBoolExp!
}

"""aggregate variance on columns"""
type ActorVarianceFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "actor"
"""
input ActorVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ActorVarPopFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "actor"
"""
input ActorVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ActorVarSampFields {
  createdById: Float
  id: Float
  individualId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "actor"
"""
input ActorVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "bot_info"
"""
type BotInfo {
  """An object relationship"""
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  individualById: Individual
  ownerId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "bot_info"
"""
type BotInfoAggregate {
  aggregate: BotInfoAggregateFields
  nodes: [BotInfo!]!
}

input BotInfoAggregateBoolExp {
  count: botInfoAggregateBoolExpCount
}

input botInfoAggregateBoolExpCount {
  arguments: [BotInfoSelectColumn!]
  distinct: Boolean
  filter: BotInfoBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "bot_info"
"""
type BotInfoAggregateFields {
  avg: BotInfoAvgFields
  count(columns: [BotInfoSelectColumn!], distinct: Boolean): Int!
  max: BotInfoMaxFields
  min: BotInfoMinFields
  stddev: BotInfoStddevFields
  stddevPop: BotInfoStddevPopFields
  stddevSamp: BotInfoStddevSampFields
  sum: BotInfoSumFields
  varPop: BotInfoVarPopFields
  varSamp: BotInfoVarSampFields
  variance: BotInfoVarianceFields
}

"""
order by aggregate values of table "bot_info"
"""
input BotInfoAggregateOrderBy {
  avg: BotInfoAvgOrderBy
  count: OrderBy
  max: BotInfoMaxOrderBy
  min: BotInfoMinOrderBy
  stddev: BotInfoStddevOrderBy
  stddevPop: BotInfoStddevPopOrderBy
  stddevSamp: BotInfoStddevSampOrderBy
  sum: BotInfoSumOrderBy
  varPop: BotInfoVarPopOrderBy
  varSamp: BotInfoVarSampOrderBy
  variance: BotInfoVarianceOrderBy
}

"""
input type for inserting array relation for remote table "bot_info"
"""
input BotInfoArrRelInsertInput {
  data: [BotInfoInsertInput!]!

  """upsert condition"""
  onConflict: BotInfoOnConflict
}

"""aggregate avg on columns"""
type BotInfoAvgFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "bot_info"
"""
input BotInfoAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "bot_info". All fields are combined with a logical 'AND'.
"""
input BotInfoBoolExp {
  _and: [BotInfoBoolExp!]
  _not: BotInfoBoolExp
  _or: [BotInfoBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualById: IndividualBoolExp
  ownerId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "bot_info"
"""
enum BotInfoConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  bot_info_pkey
}

"""
input type for incrementing numeric columns in table "bot_info"
"""
input BotInfoIncInput {
  createdById: bigint
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "bot_info"
"""
input BotInfoInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualById: IndividualObjRelInsertInput
  ownerId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type BotInfoMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "bot_info"
"""
input BotInfoMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type BotInfoMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "bot_info"
"""
input BotInfoMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "bot_info"
"""
type BotInfoMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [BotInfo!]!
}

"""
input type for inserting object relation for remote table "bot_info"
"""
input BotInfoObjRelInsertInput {
  data: BotInfoInsertInput!

  """upsert condition"""
  onConflict: BotInfoOnConflict
}

"""
on_conflict condition type for table "bot_info"
"""
input BotInfoOnConflict {
  constraint: BotInfoConstraint!
  updateColumns: [BotInfoUpdateColumn!]! = []
  where: BotInfoBoolExp
}

"""Ordering options when selecting data from "bot_info"."""
input BotInfoOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualById: IndividualOrderBy
  ownerId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: bot_info"""
input BotInfoPkColumnsInput {
  id: bigint!
}

"""
select columns of table "bot_info"
"""
enum BotInfoSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  ownerId

  """column name"""
  tenantId
}

"""
input type for updating data in table "bot_info"
"""
input BotInfoSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type BotInfoStddevFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "bot_info"
"""
input BotInfoStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type BotInfoStddevPopFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "bot_info"
"""
input BotInfoStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type BotInfoStddevSampFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "bot_info"
"""
input BotInfoStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "bot_info"
"""
input BotInfoStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: BotInfoStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input BotInfoStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type BotInfoSumFields {
  createdById: bigint
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "bot_info"
"""
input BotInfoSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "bot_info"
"""
enum BotInfoUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  ownerId

  """column name"""
  tenantId
}

input BotInfoUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: BotInfoIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: BotInfoSetInput

  """filter the rows which have to be updated"""
  where: BotInfoBoolExp!
}

"""aggregate variance on columns"""
type BotInfoVarianceFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "bot_info"
"""
input BotInfoVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type BotInfoVarPopFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "bot_info"
"""
input BotInfoVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type BotInfoVarSampFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "bot_info"
"""
input BotInfoVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "campus"
"""
type Campus {
  """An object relationship"""
  actorAddress: ActorAddress
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  name: String!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "campus"
"""
type CampusAggregate {
  aggregate: CampusAggregateFields
  nodes: [Campus!]!
}

input CampusAggregateBoolExp {
  count: campusAggregateBoolExpCount
}

input campusAggregateBoolExpCount {
  arguments: [CampusSelectColumn!]
  distinct: Boolean
  filter: CampusBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "campus"
"""
type CampusAggregateFields {
  avg: CampusAvgFields
  count(columns: [CampusSelectColumn!], distinct: Boolean): Int!
  max: CampusMaxFields
  min: CampusMinFields
  stddev: CampusStddevFields
  stddevPop: CampusStddevPopFields
  stddevSamp: CampusStddevSampFields
  sum: CampusSumFields
  varPop: CampusVarPopFields
  varSamp: CampusVarSampFields
  variance: CampusVarianceFields
}

"""
order by aggregate values of table "campus"
"""
input CampusAggregateOrderBy {
  avg: CampusAvgOrderBy
  count: OrderBy
  max: CampusMaxOrderBy
  min: CampusMinOrderBy
  stddev: CampusStddevOrderBy
  stddevPop: CampusStddevPopOrderBy
  stddevSamp: CampusStddevSampOrderBy
  sum: CampusSumOrderBy
  varPop: CampusVarPopOrderBy
  varSamp: CampusVarSampOrderBy
  variance: CampusVarianceOrderBy
}

"""
input type for inserting array relation for remote table "campus"
"""
input CampusArrRelInsertInput {
  data: [CampusInsertInput!]!

  """upsert condition"""
  onConflict: CampusOnConflict
}

"""aggregate avg on columns"""
type CampusAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "campus"
"""
input CampusAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "campus". All fields are combined with a logical 'AND'.
"""
input CampusBoolExp {
  _and: [CampusBoolExp!]
  _not: CampusBoolExp
  _or: [CampusBoolExp!]
  actorAddress: ActorAddressBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "campus"
"""
enum CampusConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  campus_pkey
}

"""
input type for incrementing numeric columns in table "campus"
"""
input CampusIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "campus"
"""
input CampusInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type CampusMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

"""
order by max() on columns of table "campus"
"""
input CampusMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type CampusMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

"""
order by min() on columns of table "campus"
"""
input CampusMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "campus"
"""
type CampusMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Campus!]!
}

"""
input type for inserting object relation for remote table "campus"
"""
input CampusObjRelInsertInput {
  data: CampusInsertInput!

  """upsert condition"""
  onConflict: CampusOnConflict
}

"""
on_conflict condition type for table "campus"
"""
input CampusOnConflict {
  constraint: CampusConstraint!
  updateColumns: [CampusUpdateColumn!]! = []
  where: CampusBoolExp
}

"""Ordering options when selecting data from "campus"."""
input CampusOrderBy {
  actorAddress: ActorAddressOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: campus"""
input CampusPkColumnsInput {
  id: bigint!
}

"""
select columns of table "campus"
"""
enum CampusSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  tenantId
}

"""
input type for updating data in table "campus"
"""
input CampusSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

"""aggregate stddev on columns"""
type CampusStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "campus"
"""
input CampusStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type CampusStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "campus"
"""
input CampusStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type CampusStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "campus"
"""
input CampusStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "campus"
"""
input CampusStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CampusStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CampusStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

"""aggregate sum on columns"""
type CampusSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "campus"
"""
input CampusSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "campus"
"""
enum CampusUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  tenantId
}

input CampusUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CampusIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CampusSetInput

  """filter the rows which have to be updated"""
  where: CampusBoolExp!
}

"""aggregate variance on columns"""
type CampusVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "campus"
"""
input CampusVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type CampusVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "campus"
"""
input CampusVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type CampusVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "campus"
"""
input CampusVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "canteen"
"""
type Canteen {
  """An array relationship"""
  canteenFoods(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  """An aggregate relationship"""
  canteenFoodsAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  """An array relationship"""
  canteenMenus(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  """An aggregate relationship"""
  canteenMenusAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  team: Team

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "canteen"
"""
type CanteenAggregate {
  aggregate: CanteenAggregateFields
  nodes: [Canteen!]!
}

input CanteenAggregateBoolExp {
  count: canteenAggregateBoolExpCount
}

input canteenAggregateBoolExpCount {
  arguments: [CanteenSelectColumn!]
  distinct: Boolean
  filter: CanteenBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "canteen"
"""
type CanteenAggregateFields {
  avg: CanteenAvgFields
  count(columns: [CanteenSelectColumn!], distinct: Boolean): Int!
  max: CanteenMaxFields
  min: CanteenMinFields
  stddev: CanteenStddevFields
  stddevPop: CanteenStddevPopFields
  stddevSamp: CanteenStddevSampFields
  sum: CanteenSumFields
  varPop: CanteenVarPopFields
  varSamp: CanteenVarSampFields
  variance: CanteenVarianceFields
}

"""
order by aggregate values of table "canteen"
"""
input CanteenAggregateOrderBy {
  avg: CanteenAvgOrderBy
  count: OrderBy
  max: CanteenMaxOrderBy
  min: CanteenMinOrderBy
  stddev: CanteenStddevOrderBy
  stddevPop: CanteenStddevPopOrderBy
  stddevSamp: CanteenStddevSampOrderBy
  sum: CanteenSumOrderBy
  varPop: CanteenVarPopOrderBy
  varSamp: CanteenVarSampOrderBy
  variance: CanteenVarianceOrderBy
}

"""
input type for inserting array relation for remote table "canteen"
"""
input CanteenArrRelInsertInput {
  data: [CanteenInsertInput!]!

  """upsert condition"""
  onConflict: CanteenOnConflict
}

"""aggregate avg on columns"""
type CanteenAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "canteen"
"""
input CanteenAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "canteen". All fields are combined with a logical 'AND'.
"""
input CanteenBoolExp {
  _and: [CanteenBoolExp!]
  _not: CanteenBoolExp
  _or: [CanteenBoolExp!]
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "canteen"
"""
enum CanteenConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  canteen_pkey
}

"""
columns and relationships of "canteen_food"
"""
type CanteenFood {
  """An object relationship"""
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "canteen_food"
"""
type CanteenFoodAggregate {
  aggregate: CanteenFoodAggregateFields
  nodes: [CanteenFood!]!
}

input CanteenFoodAggregateBoolExp {
  count: canteenFoodAggregateBoolExpCount
}

input canteenFoodAggregateBoolExpCount {
  arguments: [CanteenFoodSelectColumn!]
  distinct: Boolean
  filter: CanteenFoodBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "canteen_food"
"""
type CanteenFoodAggregateFields {
  avg: CanteenFoodAvgFields
  count(columns: [CanteenFoodSelectColumn!], distinct: Boolean): Int!
  max: CanteenFoodMaxFields
  min: CanteenFoodMinFields
  stddev: CanteenFoodStddevFields
  stddevPop: CanteenFoodStddevPopFields
  stddevSamp: CanteenFoodStddevSampFields
  sum: CanteenFoodSumFields
  varPop: CanteenFoodVarPopFields
  varSamp: CanteenFoodVarSampFields
  variance: CanteenFoodVarianceFields
}

"""
order by aggregate values of table "canteen_food"
"""
input CanteenFoodAggregateOrderBy {
  avg: CanteenFoodAvgOrderBy
  count: OrderBy
  max: CanteenFoodMaxOrderBy
  min: CanteenFoodMinOrderBy
  stddev: CanteenFoodStddevOrderBy
  stddevPop: CanteenFoodStddevPopOrderBy
  stddevSamp: CanteenFoodStddevSampOrderBy
  sum: CanteenFoodSumOrderBy
  varPop: CanteenFoodVarPopOrderBy
  varSamp: CanteenFoodVarSampOrderBy
  variance: CanteenFoodVarianceOrderBy
}

"""
input type for inserting array relation for remote table "canteen_food"
"""
input CanteenFoodArrRelInsertInput {
  data: [CanteenFoodInsertInput!]!

  """upsert condition"""
  onConflict: CanteenFoodOnConflict
}

"""aggregate avg on columns"""
type CanteenFoodAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "canteen_food"
"""
input CanteenFoodAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "canteen_food". All fields are combined with a logical 'AND'.
"""
input CanteenFoodBoolExp {
  _and: [CanteenFoodBoolExp!]
  _not: CanteenFoodBoolExp
  _or: [CanteenFoodBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "canteen_food"
"""
enum CanteenFoodConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  canteen_food_pkey
}

"""
input type for incrementing numeric columns in table "canteen_food"
"""
input CanteenFoodIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "canteen_food"
"""
input CanteenFoodInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type CanteenFoodMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "canteen_food"
"""
input CanteenFoodMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type CanteenFoodMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "canteen_food"
"""
input CanteenFoodMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "canteen_food"
"""
type CanteenFoodMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [CanteenFood!]!
}

"""
on_conflict condition type for table "canteen_food"
"""
input CanteenFoodOnConflict {
  constraint: CanteenFoodConstraint!
  updateColumns: [CanteenFoodUpdateColumn!]! = []
  where: CanteenFoodBoolExp
}

"""Ordering options when selecting data from "canteen_food"."""
input CanteenFoodOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: canteen_food"""
input CanteenFoodPkColumnsInput {
  id: bigint!
}

"""
select columns of table "canteen_food"
"""
enum CanteenFoodSelectColumn {
  """column name"""
  canteenId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

"""
input type for updating data in table "canteen_food"
"""
input CanteenFoodSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type CanteenFoodStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "canteen_food"
"""
input CanteenFoodStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type CanteenFoodStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "canteen_food"
"""
input CanteenFoodStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type CanteenFoodStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "canteen_food"
"""
input CanteenFoodStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "canteen_food"
"""
input CanteenFoodStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CanteenFoodStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CanteenFoodStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type CanteenFoodSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "canteen_food"
"""
input CanteenFoodSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "canteen_food"
"""
enum CanteenFoodUpdateColumn {
  """column name"""
  canteenId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

input CanteenFoodUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CanteenFoodIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CanteenFoodSetInput

  """filter the rows which have to be updated"""
  where: CanteenFoodBoolExp!
}

"""aggregate variance on columns"""
type CanteenFoodVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "canteen_food"
"""
input CanteenFoodVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type CanteenFoodVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "canteen_food"
"""
input CanteenFoodVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type CanteenFoodVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "canteen_food"
"""
input CanteenFoodVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
input type for incrementing numeric columns in table "canteen"
"""
input CanteenIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "canteen"
"""
input CanteenInsertInput {
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type CanteenMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "canteen"
"""
input CanteenMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "canteen_menu"
"""
type CanteenMenu {
  """An object relationship"""
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "canteen_menu"
"""
type CanteenMenuAggregate {
  aggregate: CanteenMenuAggregateFields
  nodes: [CanteenMenu!]!
}

input CanteenMenuAggregateBoolExp {
  count: canteenMenuAggregateBoolExpCount
}

input canteenMenuAggregateBoolExpCount {
  arguments: [CanteenMenuSelectColumn!]
  distinct: Boolean
  filter: CanteenMenuBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "canteen_menu"
"""
type CanteenMenuAggregateFields {
  avg: CanteenMenuAvgFields
  count(columns: [CanteenMenuSelectColumn!], distinct: Boolean): Int!
  max: CanteenMenuMaxFields
  min: CanteenMenuMinFields
  stddev: CanteenMenuStddevFields
  stddevPop: CanteenMenuStddevPopFields
  stddevSamp: CanteenMenuStddevSampFields
  sum: CanteenMenuSumFields
  varPop: CanteenMenuVarPopFields
  varSamp: CanteenMenuVarSampFields
  variance: CanteenMenuVarianceFields
}

"""
order by aggregate values of table "canteen_menu"
"""
input CanteenMenuAggregateOrderBy {
  avg: CanteenMenuAvgOrderBy
  count: OrderBy
  max: CanteenMenuMaxOrderBy
  min: CanteenMenuMinOrderBy
  stddev: CanteenMenuStddevOrderBy
  stddevPop: CanteenMenuStddevPopOrderBy
  stddevSamp: CanteenMenuStddevSampOrderBy
  sum: CanteenMenuSumOrderBy
  varPop: CanteenMenuVarPopOrderBy
  varSamp: CanteenMenuVarSampOrderBy
  variance: CanteenMenuVarianceOrderBy
}

"""
input type for inserting array relation for remote table "canteen_menu"
"""
input CanteenMenuArrRelInsertInput {
  data: [CanteenMenuInsertInput!]!

  """upsert condition"""
  onConflict: CanteenMenuOnConflict
}

"""aggregate avg on columns"""
type CanteenMenuAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "canteen_menu"
"""
input CanteenMenuAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "canteen_menu". All fields are combined with a logical 'AND'.
"""
input CanteenMenuBoolExp {
  _and: [CanteenMenuBoolExp!]
  _not: CanteenMenuBoolExp
  _or: [CanteenMenuBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "canteen_menu"
"""
enum CanteenMenuConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  canteen_menu_pkey
}

"""
input type for incrementing numeric columns in table "canteen_menu"
"""
input CanteenMenuIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "canteen_menu"
"""
input CanteenMenuInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type CanteenMenuMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "canteen_menu"
"""
input CanteenMenuMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type CanteenMenuMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "canteen_menu"
"""
input CanteenMenuMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "canteen_menu"
"""
type CanteenMenuMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [CanteenMenu!]!
}

"""
on_conflict condition type for table "canteen_menu"
"""
input CanteenMenuOnConflict {
  constraint: CanteenMenuConstraint!
  updateColumns: [CanteenMenuUpdateColumn!]! = []
  where: CanteenMenuBoolExp
}

"""Ordering options when selecting data from "canteen_menu"."""
input CanteenMenuOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: canteen_menu"""
input CanteenMenuPkColumnsInput {
  id: bigint!
}

"""
select columns of table "canteen_menu"
"""
enum CanteenMenuSelectColumn {
  """column name"""
  canteenId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

"""
input type for updating data in table "canteen_menu"
"""
input CanteenMenuSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type CanteenMenuStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "canteen_menu"
"""
input CanteenMenuStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type CanteenMenuStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "canteen_menu"
"""
input CanteenMenuStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type CanteenMenuStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "canteen_menu"
"""
input CanteenMenuStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "canteen_menu"
"""
input CanteenMenuStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CanteenMenuStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CanteenMenuStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type CanteenMenuSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "canteen_menu"
"""
input CanteenMenuSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "canteen_menu"
"""
enum CanteenMenuUpdateColumn {
  """column name"""
  canteenId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

input CanteenMenuUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CanteenMenuIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CanteenMenuSetInput

  """filter the rows which have to be updated"""
  where: CanteenMenuBoolExp!
}

"""aggregate variance on columns"""
type CanteenMenuVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "canteen_menu"
"""
input CanteenMenuVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type CanteenMenuVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "canteen_menu"
"""
input CanteenMenuVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type CanteenMenuVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "canteen_menu"
"""
input CanteenMenuVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type CanteenMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "canteen"
"""
input CanteenMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "canteen"
"""
type CanteenMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Canteen!]!
}

"""
input type for inserting object relation for remote table "canteen"
"""
input CanteenObjRelInsertInput {
  data: CanteenInsertInput!

  """upsert condition"""
  onConflict: CanteenOnConflict
}

"""
on_conflict condition type for table "canteen"
"""
input CanteenOnConflict {
  constraint: CanteenConstraint!
  updateColumns: [CanteenUpdateColumn!]! = []
  where: CanteenBoolExp
}

"""Ordering options when selecting data from "canteen"."""
input CanteenOrderBy {
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: canteen"""
input CanteenPkColumnsInput {
  id: bigint!
}

"""
select columns of table "canteen"
"""
enum CanteenSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

"""
input type for updating data in table "canteen"
"""
input CanteenSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type CanteenStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "canteen"
"""
input CanteenStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type CanteenStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "canteen"
"""
input CanteenStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type CanteenStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "canteen"
"""
input CanteenStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "canteen"
"""
input CanteenStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CanteenStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CanteenStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type CanteenSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "canteen"
"""
input CanteenSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "canteen"
"""
enum CanteenUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

input CanteenUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CanteenIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CanteenSetInput

  """filter the rows which have to be updated"""
  where: CanteenBoolExp!
}

"""aggregate variance on columns"""
type CanteenVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "canteen"
"""
input CanteenVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type CanteenVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "canteen"
"""
input CanteenVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type CanteenVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "canteen"
"""
input CanteenVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "change_role"
"""
type ChangeRole {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  note: String!

  """An object relationship"""
  pole: Pole
  receivedPoleId: bigint
  receivedRoleId: bigint

  """An object relationship"""
  role: Role

  """An object relationship"""
  team: Team!
  teamId: bigint!

  """An object relationship"""
  teamJoin: TeamJoin

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "change_role"
"""
type ChangeRoleAggregate {
  aggregate: ChangeRoleAggregateFields
  nodes: [ChangeRole!]!
}

input ChangeRoleAggregateBoolExp {
  count: changeRoleAggregateBoolExpCount
}

input changeRoleAggregateBoolExpCount {
  arguments: [ChangeRoleSelectColumn!]
  distinct: Boolean
  filter: ChangeRoleBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "change_role"
"""
type ChangeRoleAggregateFields {
  avg: ChangeRoleAvgFields
  count(columns: [ChangeRoleSelectColumn!], distinct: Boolean): Int!
  max: ChangeRoleMaxFields
  min: ChangeRoleMinFields
  stddev: ChangeRoleStddevFields
  stddevPop: ChangeRoleStddevPopFields
  stddevSamp: ChangeRoleStddevSampFields
  sum: ChangeRoleSumFields
  varPop: ChangeRoleVarPopFields
  varSamp: ChangeRoleVarSampFields
  variance: ChangeRoleVarianceFields
}

"""
order by aggregate values of table "change_role"
"""
input ChangeRoleAggregateOrderBy {
  avg: ChangeRoleAvgOrderBy
  count: OrderBy
  max: ChangeRoleMaxOrderBy
  min: ChangeRoleMinOrderBy
  stddev: ChangeRoleStddevOrderBy
  stddevPop: ChangeRoleStddevPopOrderBy
  stddevSamp: ChangeRoleStddevSampOrderBy
  sum: ChangeRoleSumOrderBy
  varPop: ChangeRoleVarPopOrderBy
  varSamp: ChangeRoleVarSampOrderBy
  variance: ChangeRoleVarianceOrderBy
}

"""
input type for inserting array relation for remote table "change_role"
"""
input ChangeRoleArrRelInsertInput {
  data: [ChangeRoleInsertInput!]!

  """upsert condition"""
  onConflict: ChangeRoleOnConflict
}

"""aggregate avg on columns"""
type ChangeRoleAvgFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by avg() on columns of table "change_role"
"""
input ChangeRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to filter rows from the table "change_role". All fields are combined with a logical 'AND'.
"""
input ChangeRoleBoolExp {
  _and: [ChangeRoleBoolExp!]
  _not: ChangeRoleBoolExp
  _or: [ChangeRoleBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  note: StringComparisonExp
  pole: PoleBoolExp
  receivedPoleId: BigintComparisonExp
  receivedRoleId: BigintComparisonExp
  role: RoleBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoin: TeamJoinBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "change_role"
"""
enum ChangeRoleConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  change_role_pkey
}

"""
input type for incrementing numeric columns in table "change_role"
"""
input ChangeRoleIncInput {
  createdById: bigint
  id: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
input type for inserting data into table "change_role"
"""
input ChangeRoleInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  note: String
  pole: PoleObjRelInsertInput
  receivedPoleId: bigint
  receivedRoleId: bigint
  role: RoleObjRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoin: TeamJoinObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type ChangeRoleMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by max() on columns of table "change_role"
"""
input ChangeRoleMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate min on columns"""
type ChangeRoleMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by min() on columns of table "change_role"
"""
input ChangeRoleMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
response of any mutation on the table "change_role"
"""
type ChangeRoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ChangeRole!]!
}

"""
input type for inserting object relation for remote table "change_role"
"""
input ChangeRoleObjRelInsertInput {
  data: ChangeRoleInsertInput!

  """upsert condition"""
  onConflict: ChangeRoleOnConflict
}

"""
on_conflict condition type for table "change_role"
"""
input ChangeRoleOnConflict {
  constraint: ChangeRoleConstraint!
  updateColumns: [ChangeRoleUpdateColumn!]! = []
  where: ChangeRoleBoolExp
}

"""Ordering options when selecting data from "change_role"."""
input ChangeRoleOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  note: OrderBy
  pole: PoleOrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  role: RoleOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoin: TeamJoinOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: change_role"""
input ChangeRolePkColumnsInput {
  id: bigint!
}

"""
select columns of table "change_role"
"""
enum ChangeRoleSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  note

  """column name"""
  receivedPoleId

  """column name"""
  receivedRoleId

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  userId
}

"""
input type for updating data in table "change_role"
"""
input ChangeRoleSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""aggregate stddev on columns"""
type ChangeRoleStddevFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddev() on columns of table "change_role"
"""
input ChangeRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevPop on columns"""
type ChangeRoleStddevPopFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevPop() on columns of table "change_role"
"""
input ChangeRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ChangeRoleStddevSampFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevSamp() on columns of table "change_role"
"""
input ChangeRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "change_role"
"""
input ChangeRoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ChangeRoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ChangeRoleStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""aggregate sum on columns"""
type ChangeRoleSumFields {
  createdById: bigint
  id: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by sum() on columns of table "change_role"
"""
input ChangeRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "change_role"
"""
enum ChangeRoleUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  note

  """column name"""
  receivedPoleId

  """column name"""
  receivedRoleId

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  userId
}

input ChangeRoleUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ChangeRoleIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ChangeRoleSetInput

  """filter the rows which have to be updated"""
  where: ChangeRoleBoolExp!
}

"""aggregate variance on columns"""
type ChangeRoleVarianceFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by variance() on columns of table "change_role"
"""
input ChangeRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varPop on columns"""
type ChangeRoleVarPopFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by varPop() on columns of table "change_role"
"""
input ChangeRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varSamp on columns"""
type ChangeRoleVarSampFields {
  createdById: Float
  id: Float
  receivedPoleId: Float
  receivedRoleId: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by varSamp() on columns of table "change_role"
"""
input ChangeRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
columns and relationships of "class_group"
"""
type ClassGroup {
  """An array relationship"""
  classGroupTeachers(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  """An aggregate relationship"""
  classGroupTeachersAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An array relationship"""
  subjectClassGroups(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  """An aggregate relationship"""
  subjectClassGroupsAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  """An object relationship"""
  team: Team

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "class_group"
"""
type ClassGroupAggregate {
  aggregate: ClassGroupAggregateFields
  nodes: [ClassGroup!]!
}

input ClassGroupAggregateBoolExp {
  count: classGroupAggregateBoolExpCount
}

input classGroupAggregateBoolExpCount {
  arguments: [ClassGroupSelectColumn!]
  distinct: Boolean
  filter: ClassGroupBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "class_group"
"""
type ClassGroupAggregateFields {
  avg: ClassGroupAvgFields
  count(columns: [ClassGroupSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupMaxFields
  min: ClassGroupMinFields
  stddev: ClassGroupStddevFields
  stddevPop: ClassGroupStddevPopFields
  stddevSamp: ClassGroupStddevSampFields
  sum: ClassGroupSumFields
  varPop: ClassGroupVarPopFields
  varSamp: ClassGroupVarSampFields
  variance: ClassGroupVarianceFields
}

"""
order by aggregate values of table "class_group"
"""
input ClassGroupAggregateOrderBy {
  avg: ClassGroupAvgOrderBy
  count: OrderBy
  max: ClassGroupMaxOrderBy
  min: ClassGroupMinOrderBy
  stddev: ClassGroupStddevOrderBy
  stddevPop: ClassGroupStddevPopOrderBy
  stddevSamp: ClassGroupStddevSampOrderBy
  sum: ClassGroupSumOrderBy
  varPop: ClassGroupVarPopOrderBy
  varSamp: ClassGroupVarSampOrderBy
  variance: ClassGroupVarianceOrderBy
}

"""
input type for inserting array relation for remote table "class_group"
"""
input ClassGroupArrRelInsertInput {
  data: [ClassGroupInsertInput!]!

  """upsert condition"""
  onConflict: ClassGroupOnConflict
}

"""aggregate avg on columns"""
type ClassGroupAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "class_group"
"""
input ClassGroupAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "class_group". All fields are combined with a logical 'AND'.
"""
input ClassGroupBoolExp {
  _and: [ClassGroupBoolExp!]
  _not: ClassGroupBoolExp
  _or: [ClassGroupBoolExp!]
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "class_group"
"""
enum ClassGroupConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  class_group_pkey
}

"""
input type for incrementing numeric columns in table "class_group"
"""
input ClassGroupIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "class_group"
"""
input ClassGroupInsertInput {
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type ClassGroupMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "class_group"
"""
input ClassGroupMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type ClassGroupMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "class_group"
"""
input ClassGroupMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "class_group"
"""
type ClassGroupMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ClassGroup!]!
}

"""
input type for inserting object relation for remote table "class_group"
"""
input ClassGroupObjRelInsertInput {
  data: ClassGroupInsertInput!

  """upsert condition"""
  onConflict: ClassGroupOnConflict
}

"""
on_conflict condition type for table "class_group"
"""
input ClassGroupOnConflict {
  constraint: ClassGroupConstraint!
  updateColumns: [ClassGroupUpdateColumn!]! = []
  where: ClassGroupBoolExp
}

"""Ordering options when selecting data from "class_group"."""
input ClassGroupOrderBy {
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: class_group"""
input ClassGroupPkColumnsInput {
  id: bigint!
}

"""
select columns of table "class_group"
"""
enum ClassGroupSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId

  """column name"""
  type
}

"""
input type for updating data in table "class_group"
"""
input ClassGroupSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type ClassGroupStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "class_group"
"""
input ClassGroupStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ClassGroupStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "class_group"
"""
input ClassGroupStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ClassGroupStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "class_group"
"""
input ClassGroupStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "class_group"
"""
input ClassGroupStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ClassGroupStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ClassGroupStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type ClassGroupSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "class_group"
"""
input ClassGroupSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "class_group_teacher"
"""
type ClassGroupTeacher {
  """An object relationship"""
  classGroup: ClassGroup!
  classGroupId: bigint!

  """An array relationship"""
  classGroupTeacherSubjects(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  """An aggregate relationship"""
  classGroupTeacherSubjectsAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  startDate: timestamptz!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "class_group_teacher"
"""
type ClassGroupTeacherAggregate {
  aggregate: ClassGroupTeacherAggregateFields
  nodes: [ClassGroupTeacher!]!
}

input ClassGroupTeacherAggregateBoolExp {
  count: classGroupTeacherAggregateBoolExpCount
}

input classGroupTeacherAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "class_group_teacher"
"""
type ClassGroupTeacherAggregateFields {
  avg: ClassGroupTeacherAvgFields
  count(columns: [ClassGroupTeacherSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherMaxFields
  min: ClassGroupTeacherMinFields
  stddev: ClassGroupTeacherStddevFields
  stddevPop: ClassGroupTeacherStddevPopFields
  stddevSamp: ClassGroupTeacherStddevSampFields
  sum: ClassGroupTeacherSumFields
  varPop: ClassGroupTeacherVarPopFields
  varSamp: ClassGroupTeacherVarSampFields
  variance: ClassGroupTeacherVarianceFields
}

"""
order by aggregate values of table "class_group_teacher"
"""
input ClassGroupTeacherAggregateOrderBy {
  avg: ClassGroupTeacherAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherMaxOrderBy
  min: ClassGroupTeacherMinOrderBy
  stddev: ClassGroupTeacherStddevOrderBy
  stddevPop: ClassGroupTeacherStddevPopOrderBy
  stddevSamp: ClassGroupTeacherStddevSampOrderBy
  sum: ClassGroupTeacherSumOrderBy
  varPop: ClassGroupTeacherVarPopOrderBy
  varSamp: ClassGroupTeacherVarSampOrderBy
  variance: ClassGroupTeacherVarianceOrderBy
}

"""
input type for inserting array relation for remote table "class_group_teacher"
"""
input ClassGroupTeacherArrRelInsertInput {
  data: [ClassGroupTeacherInsertInput!]!

  """upsert condition"""
  onConflict: ClassGroupTeacherOnConflict
}

"""aggregate avg on columns"""
type ClassGroupTeacherAvgFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by avg() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherAvgOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to filter rows from the table "class_group_teacher". All fields are combined with a logical 'AND'.
"""
input ClassGroupTeacherBoolExp {
  _and: [ClassGroupTeacherBoolExp!]
  _not: ClassGroupTeacherBoolExp
  _or: [ClassGroupTeacherBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  startDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "class_group_teacher"
"""
enum ClassGroupTeacherConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  class_group_teacher_pkey
}

"""
input type for incrementing numeric columns in table "class_group_teacher"
"""
input ClassGroupTeacherIncInput {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

"""
input type for inserting data into table "class_group_teacher"
"""
input ClassGroupTeacherInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  startDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type ClassGroupTeacherMaxFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

"""
order by max() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherMaxOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate min on columns"""
type ClassGroupTeacherMinFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

"""
order by min() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherMinOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
response of any mutation on the table "class_group_teacher"
"""
type ClassGroupTeacherMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ClassGroupTeacher!]!
}

"""
input type for inserting object relation for remote table "class_group_teacher"
"""
input ClassGroupTeacherObjRelInsertInput {
  data: ClassGroupTeacherInsertInput!

  """upsert condition"""
  onConflict: ClassGroupTeacherOnConflict
}

"""
on_conflict condition type for table "class_group_teacher"
"""
input ClassGroupTeacherOnConflict {
  constraint: ClassGroupTeacherConstraint!
  updateColumns: [ClassGroupTeacherUpdateColumn!]! = []
  where: ClassGroupTeacherBoolExp
}

"""Ordering options when selecting data from "class_group_teacher"."""
input ClassGroupTeacherOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  startDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: class_group_teacher"""
input ClassGroupTeacherPkColumnsInput {
  id: bigint!
}

"""
select columns of table "class_group_teacher"
"""
enum ClassGroupTeacherSelectColumn {
  """column name"""
  classGroupId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  endDate

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  startDate

  """column name"""
  tenantId

  """column name"""
  userId
}

"""
input type for updating data in table "class_group_teacher"
"""
input ClassGroupTeacherSetInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

"""aggregate stddev on columns"""
type ClassGroupTeacherStddevFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddev() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherStddevOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevPop on columns"""
type ClassGroupTeacherStddevPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevPop() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherStddevPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ClassGroupTeacherStddevSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevSamp() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherStddevSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "class_group_teacher"
"""
input ClassGroupTeacherStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ClassGroupTeacherStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ClassGroupTeacherStreamCursorValueInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

"""
columns and relationships of "class_group_teacher_subjects"
"""
type ClassGroupTeacherSubjects {
  """An object relationship"""
  classGroupTeacher: ClassGroupTeacher!
  classGroupTeacherId: bigint!

  """An object relationship"""
  subject: Subject!
  subjectId: bigint!
}

"""
aggregated selection of "class_group_teacher_subjects"
"""
type ClassGroupTeacherSubjectsAggregate {
  aggregate: ClassGroupTeacherSubjectsAggregateFields
  nodes: [ClassGroupTeacherSubjects!]!
}

input ClassGroupTeacherSubjectsAggregateBoolExp {
  count: classGroupTeacherSubjectsAggregateBoolExpCount
}

input classGroupTeacherSubjectsAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSubjectsSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherSubjectsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "class_group_teacher_subjects"
"""
type ClassGroupTeacherSubjectsAggregateFields {
  avg: ClassGroupTeacherSubjectsAvgFields
  count(columns: [ClassGroupTeacherSubjectsSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherSubjectsMaxFields
  min: ClassGroupTeacherSubjectsMinFields
  stddev: ClassGroupTeacherSubjectsStddevFields
  stddevPop: ClassGroupTeacherSubjectsStddevPopFields
  stddevSamp: ClassGroupTeacherSubjectsStddevSampFields
  sum: ClassGroupTeacherSubjectsSumFields
  varPop: ClassGroupTeacherSubjectsVarPopFields
  varSamp: ClassGroupTeacherSubjectsVarSampFields
  variance: ClassGroupTeacherSubjectsVarianceFields
}

"""
order by aggregate values of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsAggregateOrderBy {
  avg: ClassGroupTeacherSubjectsAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherSubjectsMaxOrderBy
  min: ClassGroupTeacherSubjectsMinOrderBy
  stddev: ClassGroupTeacherSubjectsStddevOrderBy
  stddevPop: ClassGroupTeacherSubjectsStddevPopOrderBy
  stddevSamp: ClassGroupTeacherSubjectsStddevSampOrderBy
  sum: ClassGroupTeacherSubjectsSumOrderBy
  varPop: ClassGroupTeacherSubjectsVarPopOrderBy
  varSamp: ClassGroupTeacherSubjectsVarSampOrderBy
  variance: ClassGroupTeacherSubjectsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsArrRelInsertInput {
  data: [ClassGroupTeacherSubjectsInsertInput!]!

  """upsert condition"""
  onConflict: ClassGroupTeacherSubjectsOnConflict
}

"""aggregate avg on columns"""
type ClassGroupTeacherSubjectsAvgFields {
  classGroupTeacherId: Float
  subjectId: Float
}

"""
order by avg() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsAvgOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""
Boolean expression to filter rows from the table "class_group_teacher_subjects".
All fields are combined with a logical 'AND'.
"""
input ClassGroupTeacherSubjectsBoolExp {
  _and: [ClassGroupTeacherSubjectsBoolExp!]
  _not: ClassGroupTeacherSubjectsBoolExp
  _or: [ClassGroupTeacherSubjectsBoolExp!]
  classGroupTeacher: ClassGroupTeacherBoolExp
  classGroupTeacherId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

"""
unique or primary key constraints on table "class_group_teacher_subjects"
"""
enum ClassGroupTeacherSubjectsConstraint {
  """
  unique or primary key constraint on columns "class_group_teacher_id", "subject_id"
  """
  class_group_teacher_subjects_pkey
}

"""
input type for incrementing numeric columns in table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsIncInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

"""
input type for inserting data into table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsInsertInput {
  classGroupTeacher: ClassGroupTeacherObjRelInsertInput
  classGroupTeacherId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

"""aggregate max on columns"""
type ClassGroupTeacherSubjectsMaxFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

"""
order by max() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsMaxOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""aggregate min on columns"""
type ClassGroupTeacherSubjectsMinFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

"""
order by min() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsMinOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""
response of any mutation on the table "class_group_teacher_subjects"
"""
type ClassGroupTeacherSubjectsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ClassGroupTeacherSubjects!]!
}

"""
on_conflict condition type for table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsOnConflict {
  constraint: ClassGroupTeacherSubjectsConstraint!
  updateColumns: [ClassGroupTeacherSubjectsUpdateColumn!]! = []
  where: ClassGroupTeacherSubjectsBoolExp
}

"""
Ordering options when selecting data from "class_group_teacher_subjects".
"""
input ClassGroupTeacherSubjectsOrderBy {
  classGroupTeacher: ClassGroupTeacherOrderBy
  classGroupTeacherId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

"""primary key columns input for table: class_group_teacher_subjects"""
input ClassGroupTeacherSubjectsPkColumnsInput {
  classGroupTeacherId: bigint!
  subjectId: bigint!
}

"""
select columns of table "class_group_teacher_subjects"
"""
enum ClassGroupTeacherSubjectsSelectColumn {
  """column name"""
  classGroupTeacherId

  """column name"""
  subjectId
}

"""
input type for updating data in table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsSetInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

"""aggregate stddev on columns"""
type ClassGroupTeacherSubjectsStddevFields {
  classGroupTeacherId: Float
  subjectId: Float
}

"""
order by stddev() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsStddevOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""aggregate stddevPop on columns"""
type ClassGroupTeacherSubjectsStddevPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

"""
order by stddevPop() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsStddevPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ClassGroupTeacherSubjectsStddevSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

"""
order by stddevSamp() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsStddevSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""
Streaming cursor of the table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ClassGroupTeacherSubjectsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ClassGroupTeacherSubjectsStreamCursorValueInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

"""aggregate sum on columns"""
type ClassGroupTeacherSubjectsSumFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

"""
order by sum() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsSumOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""
update columns of table "class_group_teacher_subjects"
"""
enum ClassGroupTeacherSubjectsUpdateColumn {
  """column name"""
  classGroupTeacherId

  """column name"""
  subjectId
}

input ClassGroupTeacherSubjectsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ClassGroupTeacherSubjectsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ClassGroupTeacherSubjectsSetInput

  """filter the rows which have to be updated"""
  where: ClassGroupTeacherSubjectsBoolExp!
}

"""aggregate variance on columns"""
type ClassGroupTeacherSubjectsVarianceFields {
  classGroupTeacherId: Float
  subjectId: Float
}

"""
order by variance() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsVarianceOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""aggregate varPop on columns"""
type ClassGroupTeacherSubjectsVarPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

"""
order by varPop() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsVarPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""aggregate varSamp on columns"""
type ClassGroupTeacherSubjectsVarSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

"""
order by varSamp() on columns of table "class_group_teacher_subjects"
"""
input ClassGroupTeacherSubjectsVarSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

"""aggregate sum on columns"""
type ClassGroupTeacherSumFields {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by sum() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherSumOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "class_group_teacher"
"""
enum ClassGroupTeacherUpdateColumn {
  """column name"""
  classGroupId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  endDate

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  startDate

  """column name"""
  tenantId

  """column name"""
  userId
}

input ClassGroupTeacherUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ClassGroupTeacherIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ClassGroupTeacherSetInput

  """filter the rows which have to be updated"""
  where: ClassGroupTeacherBoolExp!
}

"""aggregate variance on columns"""
type ClassGroupTeacherVarianceFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by variance() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherVarianceOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varPop on columns"""
type ClassGroupTeacherVarPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by varPop() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherVarPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varSamp on columns"""
type ClassGroupTeacherVarSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by varSamp() on columns of table "class_group_teacher"
"""
input ClassGroupTeacherVarSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "class_group"
"""
enum ClassGroupUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId

  """column name"""
  type
}

input ClassGroupUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ClassGroupIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ClassGroupSetInput

  """filter the rows which have to be updated"""
  where: ClassGroupBoolExp!
}

"""aggregate variance on columns"""
type ClassGroupVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "class_group"
"""
input ClassGroupVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ClassGroupVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "class_group"
"""
input ClassGroupVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ClassGroupVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "class_group"
"""
input ClassGroupVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "cohort"
"""
type Cohort {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  team: Team

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  year: smallint!
}

"""
aggregated selection of "cohort"
"""
type CohortAggregate {
  aggregate: CohortAggregateFields
  nodes: [Cohort!]!
}

input CohortAggregateBoolExp {
  count: cohortAggregateBoolExpCount
}

input cohortAggregateBoolExpCount {
  arguments: [CohortSelectColumn!]
  distinct: Boolean
  filter: CohortBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "cohort"
"""
type CohortAggregateFields {
  avg: CohortAvgFields
  count(columns: [CohortSelectColumn!], distinct: Boolean): Int!
  max: CohortMaxFields
  min: CohortMinFields
  stddev: CohortStddevFields
  stddevPop: CohortStddevPopFields
  stddevSamp: CohortStddevSampFields
  sum: CohortSumFields
  varPop: CohortVarPopFields
  varSamp: CohortVarSampFields
  variance: CohortVarianceFields
}

"""
order by aggregate values of table "cohort"
"""
input CohortAggregateOrderBy {
  avg: CohortAvgOrderBy
  count: OrderBy
  max: CohortMaxOrderBy
  min: CohortMinOrderBy
  stddev: CohortStddevOrderBy
  stddevPop: CohortStddevPopOrderBy
  stddevSamp: CohortStddevSampOrderBy
  sum: CohortSumOrderBy
  varPop: CohortVarPopOrderBy
  varSamp: CohortVarSampOrderBy
  variance: CohortVarianceOrderBy
}

"""
input type for inserting array relation for remote table "cohort"
"""
input CohortArrRelInsertInput {
  data: [CohortInsertInput!]!

  """upsert condition"""
  onConflict: CohortOnConflict
}

"""aggregate avg on columns"""
type CohortAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

"""
order by avg() on columns of table "cohort"
"""
input CohortAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""
Boolean expression to filter rows from the table "cohort". All fields are combined with a logical 'AND'.
"""
input CohortBoolExp {
  _and: [CohortBoolExp!]
  _not: CohortBoolExp
  _or: [CohortBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  year: SmallintComparisonExp
}

"""
unique or primary key constraints on table "cohort"
"""
enum CohortConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  cohort_pkey
}

"""
input type for incrementing numeric columns in table "cohort"
"""
input CohortIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

"""
input type for inserting data into table "cohort"
"""
input CohortInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  year: smallint
}

"""aggregate max on columns"""
type CohortMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

"""
order by max() on columns of table "cohort"
"""
input CohortMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""aggregate min on columns"""
type CohortMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

"""
order by min() on columns of table "cohort"
"""
input CohortMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""
response of any mutation on the table "cohort"
"""
type CohortMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Cohort!]!
}

"""
input type for inserting object relation for remote table "cohort"
"""
input CohortObjRelInsertInput {
  data: CohortInsertInput!

  """upsert condition"""
  onConflict: CohortOnConflict
}

"""
on_conflict condition type for table "cohort"
"""
input CohortOnConflict {
  constraint: CohortConstraint!
  updateColumns: [CohortUpdateColumn!]! = []
  where: CohortBoolExp
}

"""Ordering options when selecting data from "cohort"."""
input CohortOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""primary key columns input for table: cohort"""
input CohortPkColumnsInput {
  id: bigint!
}

"""
select columns of table "cohort"
"""
enum CohortSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId

  """column name"""
  year
}

"""
input type for updating data in table "cohort"
"""
input CohortSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

"""aggregate stddev on columns"""
type CohortStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

"""
order by stddev() on columns of table "cohort"
"""
input CohortStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""aggregate stddevPop on columns"""
type CohortStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

"""
order by stddevPop() on columns of table "cohort"
"""
input CohortStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""aggregate stddevSamp on columns"""
type CohortStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

"""
order by stddevSamp() on columns of table "cohort"
"""
input CohortStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""
Streaming cursor of the table "cohort"
"""
input CohortStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CohortStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CohortStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

"""aggregate sum on columns"""
type CohortSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

"""
order by sum() on columns of table "cohort"
"""
input CohortSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""
update columns of table "cohort"
"""
enum CohortUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId

  """column name"""
  year
}

input CohortUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CohortIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CohortSetInput

  """filter the rows which have to be updated"""
  where: CohortBoolExp!
}

"""aggregate variance on columns"""
type CohortVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

"""
order by variance() on columns of table "cohort"
"""
input CohortVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""aggregate varPop on columns"""
type CohortVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

"""
order by varPop() on columns of table "cohort"
"""
input CohortVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""aggregate varSamp on columns"""
type CohortVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

"""
order by varSamp() on columns of table "cohort"
"""
input CohortVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

"""
columns and relationships of "content"
"""
type Content {
  """An object relationship"""
  content: Content

  """An array relationship"""
  contentAttachments(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  """An aggregate relationship"""
  contentAttachmentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!

  """An array relationship"""
  contentEdits(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): [ContentEdit!]!

  """An aggregate relationship"""
  contentEditsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): ContentEditAggregate!

  """An object relationship"""
  contentMaster: ContentMaster

  """An array relationship"""
  contentTeams(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): [ContentTeams!]!

  """An aggregate relationship"""
  contentTeamsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): ContentTeamsAggregate!

  """An array relationship"""
  contents(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): [Content!]!

  """An aggregate relationship"""
  contentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  event: Event
  eventId: bigint

  """An array relationship"""
  favorites(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): [Favorite!]!

  """An aggregate relationship"""
  favoritesAggregate(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): FavoriteAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  isAnonymous: Boolean!
  parentId: bigint

  """An array relationship"""
  reactions(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): [Reaction!]!

  """An aggregate relationship"""
  reactionsAggregate(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): ReactionAggregate!

  """An array relationship"""
  reports(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): [Report!]!

  """An aggregate relationship"""
  reportsAggregate(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): ReportAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  text: String!

  """An array relationship"""
  validations(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): [Validation!]!

  """An aggregate relationship"""
  validationsAggregate(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): ValidationAggregate!

  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): [Vote!]!

  """An aggregate relationship"""
  votesAggregate(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): VoteAggregate!
}

"""
aggregated selection of "content"
"""
type ContentAggregate {
  aggregate: ContentAggregateFields
  nodes: [Content!]!
}

input ContentAggregateBoolExp {
  bool_and: contentAggregateBoolExpBool_and
  bool_or: contentAggregateBoolExpBool_or
  count: contentAggregateBoolExpCount
}

input contentAggregateBoolExpBool_and {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpBool_or {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpCount {
  arguments: [ContentSelectColumn!]
  distinct: Boolean
  filter: ContentBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "content"
"""
type ContentAggregateFields {
  avg: ContentAvgFields
  count(columns: [ContentSelectColumn!], distinct: Boolean): Int!
  max: ContentMaxFields
  min: ContentMinFields
  stddev: ContentStddevFields
  stddevPop: ContentStddevPopFields
  stddevSamp: ContentStddevSampFields
  sum: ContentSumFields
  varPop: ContentVarPopFields
  varSamp: ContentVarSampFields
  variance: ContentVarianceFields
}

"""
order by aggregate values of table "content"
"""
input ContentAggregateOrderBy {
  avg: ContentAvgOrderBy
  count: OrderBy
  max: ContentMaxOrderBy
  min: ContentMinOrderBy
  stddev: ContentStddevOrderBy
  stddevPop: ContentStddevPopOrderBy
  stddevSamp: ContentStddevSampOrderBy
  sum: ContentSumOrderBy
  varPop: ContentVarPopOrderBy
  varSamp: ContentVarSampOrderBy
  variance: ContentVarianceOrderBy
}

"""
input type for inserting array relation for remote table "content"
"""
input ContentArrRelInsertInput {
  data: [ContentInsertInput!]!

  """upsert condition"""
  onConflict: ContentOnConflict
}

"""
columns and relationships of "content_attachments"
"""
type ContentAttachments {
  """An object relationship"""
  content: Content!
  contentId: bigint!

  """An object relationship"""
  fileUpload: FileUpload!
  fileUploadId: bigint!
}

"""
aggregated selection of "content_attachments"
"""
type ContentAttachmentsAggregate {
  aggregate: ContentAttachmentsAggregateFields
  nodes: [ContentAttachments!]!
}

input ContentAttachmentsAggregateBoolExp {
  count: contentAttachmentsAggregateBoolExpCount
}

input contentAttachmentsAggregateBoolExpCount {
  arguments: [ContentAttachmentsSelectColumn!]
  distinct: Boolean
  filter: ContentAttachmentsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "content_attachments"
"""
type ContentAttachmentsAggregateFields {
  avg: ContentAttachmentsAvgFields
  count(columns: [ContentAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: ContentAttachmentsMaxFields
  min: ContentAttachmentsMinFields
  stddev: ContentAttachmentsStddevFields
  stddevPop: ContentAttachmentsStddevPopFields
  stddevSamp: ContentAttachmentsStddevSampFields
  sum: ContentAttachmentsSumFields
  varPop: ContentAttachmentsVarPopFields
  varSamp: ContentAttachmentsVarSampFields
  variance: ContentAttachmentsVarianceFields
}

"""
order by aggregate values of table "content_attachments"
"""
input ContentAttachmentsAggregateOrderBy {
  avg: ContentAttachmentsAvgOrderBy
  count: OrderBy
  max: ContentAttachmentsMaxOrderBy
  min: ContentAttachmentsMinOrderBy
  stddev: ContentAttachmentsStddevOrderBy
  stddevPop: ContentAttachmentsStddevPopOrderBy
  stddevSamp: ContentAttachmentsStddevSampOrderBy
  sum: ContentAttachmentsSumOrderBy
  varPop: ContentAttachmentsVarPopOrderBy
  varSamp: ContentAttachmentsVarSampOrderBy
  variance: ContentAttachmentsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "content_attachments"
"""
input ContentAttachmentsArrRelInsertInput {
  data: [ContentAttachmentsInsertInput!]!

  """upsert condition"""
  onConflict: ContentAttachmentsOnConflict
}

"""aggregate avg on columns"""
type ContentAttachmentsAvgFields {
  contentId: Float
  fileUploadId: Float
}

"""
order by avg() on columns of table "content_attachments"
"""
input ContentAttachmentsAvgOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""
Boolean expression to filter rows from the table "content_attachments". All fields are combined with a logical 'AND'.
"""
input ContentAttachmentsBoolExp {
  _and: [ContentAttachmentsBoolExp!]
  _not: ContentAttachmentsBoolExp
  _or: [ContentAttachmentsBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
}

"""
unique or primary key constraints on table "content_attachments"
"""
enum ContentAttachmentsConstraint {
  """
  unique or primary key constraint on columns "file_upload_id", "content_id"
  """
  content_attachments_pkey
}

"""
input type for incrementing numeric columns in table "content_attachments"
"""
input ContentAttachmentsIncInput {
  contentId: bigint
  fileUploadId: bigint
}

"""
input type for inserting data into table "content_attachments"
"""
input ContentAttachmentsInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
}

"""aggregate max on columns"""
type ContentAttachmentsMaxFields {
  contentId: bigint
  fileUploadId: bigint
}

"""
order by max() on columns of table "content_attachments"
"""
input ContentAttachmentsMaxOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""aggregate min on columns"""
type ContentAttachmentsMinFields {
  contentId: bigint
  fileUploadId: bigint
}

"""
order by min() on columns of table "content_attachments"
"""
input ContentAttachmentsMinOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""
response of any mutation on the table "content_attachments"
"""
type ContentAttachmentsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ContentAttachments!]!
}

"""
on_conflict condition type for table "content_attachments"
"""
input ContentAttachmentsOnConflict {
  constraint: ContentAttachmentsConstraint!
  updateColumns: [ContentAttachmentsUpdateColumn!]! = []
  where: ContentAttachmentsBoolExp
}

"""Ordering options when selecting data from "content_attachments"."""
input ContentAttachmentsOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
}

"""primary key columns input for table: content_attachments"""
input ContentAttachmentsPkColumnsInput {
  contentId: bigint!
  fileUploadId: bigint!
}

"""
select columns of table "content_attachments"
"""
enum ContentAttachmentsSelectColumn {
  """column name"""
  contentId

  """column name"""
  fileUploadId
}

"""
input type for updating data in table "content_attachments"
"""
input ContentAttachmentsSetInput {
  contentId: bigint
  fileUploadId: bigint
}

"""aggregate stddev on columns"""
type ContentAttachmentsStddevFields {
  contentId: Float
  fileUploadId: Float
}

"""
order by stddev() on columns of table "content_attachments"
"""
input ContentAttachmentsStddevOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""aggregate stddevPop on columns"""
type ContentAttachmentsStddevPopFields {
  contentId: Float
  fileUploadId: Float
}

"""
order by stddevPop() on columns of table "content_attachments"
"""
input ContentAttachmentsStddevPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ContentAttachmentsStddevSampFields {
  contentId: Float
  fileUploadId: Float
}

"""
order by stddevSamp() on columns of table "content_attachments"
"""
input ContentAttachmentsStddevSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""
Streaming cursor of the table "content_attachments"
"""
input ContentAttachmentsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ContentAttachmentsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ContentAttachmentsStreamCursorValueInput {
  contentId: bigint
  fileUploadId: bigint
}

"""aggregate sum on columns"""
type ContentAttachmentsSumFields {
  contentId: bigint
  fileUploadId: bigint
}

"""
order by sum() on columns of table "content_attachments"
"""
input ContentAttachmentsSumOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""
update columns of table "content_attachments"
"""
enum ContentAttachmentsUpdateColumn {
  """column name"""
  contentId

  """column name"""
  fileUploadId
}

input ContentAttachmentsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ContentAttachmentsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ContentAttachmentsSetInput

  """filter the rows which have to be updated"""
  where: ContentAttachmentsBoolExp!
}

"""aggregate variance on columns"""
type ContentAttachmentsVarianceFields {
  contentId: Float
  fileUploadId: Float
}

"""
order by variance() on columns of table "content_attachments"
"""
input ContentAttachmentsVarianceOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""aggregate varPop on columns"""
type ContentAttachmentsVarPopFields {
  contentId: Float
  fileUploadId: Float
}

"""
order by varPop() on columns of table "content_attachments"
"""
input ContentAttachmentsVarPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""aggregate varSamp on columns"""
type ContentAttachmentsVarSampFields {
  contentId: Float
  fileUploadId: Float
}

"""
order by varSamp() on columns of table "content_attachments"
"""
input ContentAttachmentsVarSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

"""aggregate avg on columns"""
type ContentAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  parentId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "content"
"""
input ContentAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "content". All fields are combined with a logical 'AND'.
"""
input ContentBoolExp {
  _and: [ContentBoolExp!]
  _not: ContentBoolExp
  _or: [ContentBoolExp!]
  content: ContentBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  contentEdits: ContentEditBoolExp
  contentEditsAggregate: ContentEditAggregateBoolExp
  contentMaster: ContentMasterBoolExp
  contentTeams: ContentTeamsBoolExp
  contentTeamsAggregate: ContentTeamsAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isAnonymous: BooleanComparisonExp
  parentId: BigintComparisonExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  text: StringComparisonExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

"""
unique or primary key constraints on table "content"
"""
enum ContentConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  content_pkey
}

"""
columns and relationships of "content_edit"
"""
type ContentEdit {
  addedDiff(
    """JSON select path"""
    path: String
  ): jsonb

  """An object relationship"""
  content: Content!
  contentId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  newVersion: String!
  note: String

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "content_edit"
"""
type ContentEditAggregate {
  aggregate: ContentEditAggregateFields
  nodes: [ContentEdit!]!
}

input ContentEditAggregateBoolExp {
  count: contentEditAggregateBoolExpCount
}

input contentEditAggregateBoolExpCount {
  arguments: [ContentEditSelectColumn!]
  distinct: Boolean
  filter: ContentEditBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "content_edit"
"""
type ContentEditAggregateFields {
  avg: ContentEditAvgFields
  count(columns: [ContentEditSelectColumn!], distinct: Boolean): Int!
  max: ContentEditMaxFields
  min: ContentEditMinFields
  stddev: ContentEditStddevFields
  stddevPop: ContentEditStddevPopFields
  stddevSamp: ContentEditStddevSampFields
  sum: ContentEditSumFields
  varPop: ContentEditVarPopFields
  varSamp: ContentEditVarSampFields
  variance: ContentEditVarianceFields
}

"""
order by aggregate values of table "content_edit"
"""
input ContentEditAggregateOrderBy {
  avg: ContentEditAvgOrderBy
  count: OrderBy
  max: ContentEditMaxOrderBy
  min: ContentEditMinOrderBy
  stddev: ContentEditStddevOrderBy
  stddevPop: ContentEditStddevPopOrderBy
  stddevSamp: ContentEditStddevSampOrderBy
  sum: ContentEditSumOrderBy
  varPop: ContentEditVarPopOrderBy
  varSamp: ContentEditVarSampOrderBy
  variance: ContentEditVarianceOrderBy
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input ContentEditAppendInput {
  addedDiff: jsonb
}

"""
input type for inserting array relation for remote table "content_edit"
"""
input ContentEditArrRelInsertInput {
  data: [ContentEditInsertInput!]!

  """upsert condition"""
  onConflict: ContentEditOnConflict
}

"""aggregate avg on columns"""
type ContentEditAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "content_edit"
"""
input ContentEditAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "content_edit". All fields are combined with a logical 'AND'.
"""
input ContentEditBoolExp {
  _and: [ContentEditBoolExp!]
  _not: ContentEditBoolExp
  _or: [ContentEditBoolExp!]
  addedDiff: JsonbComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  newVersion: StringComparisonExp
  note: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "content_edit"
"""
enum ContentEditConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  content_edit_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input ContentEditDeleteAtPathInput {
  addedDiff: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input ContentEditDeleteElemInput {
  addedDiff: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input ContentEditDeleteKeyInput {
  addedDiff: String
}

"""
input type for incrementing numeric columns in table "content_edit"
"""
input ContentEditIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "content_edit"
"""
input ContentEditInsertInput {
  addedDiff: jsonb
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  newVersion: String
  note: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ContentEditMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  newVersion: String
  note: String
  tenantId: bigint
}

"""
order by max() on columns of table "content_edit"
"""
input ContentEditMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  newVersion: OrderBy
  note: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ContentEditMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  newVersion: String
  note: String
  tenantId: bigint
}

"""
order by min() on columns of table "content_edit"
"""
input ContentEditMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  newVersion: OrderBy
  note: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "content_edit"
"""
type ContentEditMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ContentEdit!]!
}

"""
on_conflict condition type for table "content_edit"
"""
input ContentEditOnConflict {
  constraint: ContentEditConstraint!
  updateColumns: [ContentEditUpdateColumn!]! = []
  where: ContentEditBoolExp
}

"""Ordering options when selecting data from "content_edit"."""
input ContentEditOrderBy {
  addedDiff: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  newVersion: OrderBy
  note: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: content_edit"""
input ContentEditPkColumnsInput {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input ContentEditPrependInput {
  addedDiff: jsonb
}

"""
select columns of table "content_edit"
"""
enum ContentEditSelectColumn {
  """column name"""
  addedDiff

  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersion

  """column name"""
  note

  """column name"""
  tenantId
}

"""
input type for updating data in table "content_edit"
"""
input ContentEditSetInput {
  addedDiff: jsonb
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  newVersion: String
  note: String
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ContentEditStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "content_edit"
"""
input ContentEditStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ContentEditStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "content_edit"
"""
input ContentEditStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ContentEditStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "content_edit"
"""
input ContentEditStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "content_edit"
"""
input ContentEditStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ContentEditStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ContentEditStreamCursorValueInput {
  addedDiff: jsonb
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  newVersion: String
  note: String
  tenantId: bigint
}

"""aggregate sum on columns"""
type ContentEditSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "content_edit"
"""
input ContentEditSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "content_edit"
"""
enum ContentEditUpdateColumn {
  """column name"""
  addedDiff

  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersion

  """column name"""
  note

  """column name"""
  tenantId
}

input ContentEditUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: ContentEditAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: ContentEditDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _deleteElem: ContentEditDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: ContentEditDeleteKeyInput

  """increments the numeric columns with given value of the filtered values"""
  _inc: ContentEditIncInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: ContentEditPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: ContentEditSetInput

  """filter the rows which have to be updated"""
  where: ContentEditBoolExp!
}

"""aggregate variance on columns"""
type ContentEditVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "content_edit"
"""
input ContentEditVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ContentEditVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "content_edit"
"""
input ContentEditVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ContentEditVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "content_edit"
"""
input ContentEditVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
input type for incrementing numeric columns in table "content"
"""
input ContentIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  parentId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "content"
"""
input ContentInsertInput {
  content: ContentObjRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  contentEdits: ContentEditArrRelInsertInput
  contentMaster: ContentMasterObjRelInsertInput
  contentTeams: ContentTeamsArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventId: bigint
  favorites: FavoriteArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isAnonymous: Boolean
  parentId: bigint
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  text: String
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

"""
columns and relationships of "content_master"
"""
type ContentMaster {
  """An object relationship"""
  content: Content!

  """An array relationship"""
  contentMasterContributors(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): [ContentMasterContributors!]!

  """An aggregate relationship"""
  contentMasterContributorsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): ContentMasterContributorsAggregate!

  """An array relationship"""
  contentMasterTags(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): [ContentMasterTags!]!

  """An aggregate relationship"""
  contentMasterTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): ContentMasterTagsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  event: Event
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  issue: Issue
  name: String!
  rootContentId: bigint!
  slug: String!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "content_master"
"""
type ContentMasterAggregate {
  aggregate: ContentMasterAggregateFields
  nodes: [ContentMaster!]!
}

input ContentMasterAggregateBoolExp {
  count: contentMasterAggregateBoolExpCount
}

input contentMasterAggregateBoolExpCount {
  arguments: [ContentMasterSelectColumn!]
  distinct: Boolean
  filter: ContentMasterBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "content_master"
"""
type ContentMasterAggregateFields {
  avg: ContentMasterAvgFields
  count(columns: [ContentMasterSelectColumn!], distinct: Boolean): Int!
  max: ContentMasterMaxFields
  min: ContentMasterMinFields
  stddev: ContentMasterStddevFields
  stddevPop: ContentMasterStddevPopFields
  stddevSamp: ContentMasterStddevSampFields
  sum: ContentMasterSumFields
  varPop: ContentMasterVarPopFields
  varSamp: ContentMasterVarSampFields
  variance: ContentMasterVarianceFields
}

"""
order by aggregate values of table "content_master"
"""
input ContentMasterAggregateOrderBy {
  avg: ContentMasterAvgOrderBy
  count: OrderBy
  max: ContentMasterMaxOrderBy
  min: ContentMasterMinOrderBy
  stddev: ContentMasterStddevOrderBy
  stddevPop: ContentMasterStddevPopOrderBy
  stddevSamp: ContentMasterStddevSampOrderBy
  sum: ContentMasterSumOrderBy
  varPop: ContentMasterVarPopOrderBy
  varSamp: ContentMasterVarSampOrderBy
  variance: ContentMasterVarianceOrderBy
}

"""
input type for inserting array relation for remote table "content_master"
"""
input ContentMasterArrRelInsertInput {
  data: [ContentMasterInsertInput!]!

  """upsert condition"""
  onConflict: ContentMasterOnConflict
}

"""aggregate avg on columns"""
type ContentMasterAvgFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "content_master"
"""
input ContentMasterAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "content_master". All fields are combined with a logical 'AND'.
"""
input ContentMasterBoolExp {
  _and: [ContentMasterBoolExp!]
  _not: ContentMasterBoolExp
  _or: [ContentMasterBoolExp!]
  content: ContentBoolExp
  contentMasterContributors: ContentMasterContributorsBoolExp
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateBoolExp
  contentMasterTags: ContentMasterTagsBoolExp
  contentMasterTagsAggregate: ContentMasterTagsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  issue: IssueBoolExp
  name: StringComparisonExp
  rootContentId: BigintComparisonExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "content_master"
"""
enum ContentMasterConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  content_master_pkey

  """
  unique or primary key constraint on columns "root_content_id"
  """
  content_master_root_content_id_unique
}

"""
columns and relationships of "content_master_contributors"
"""
type ContentMasterContributors {
  """An object relationship"""
  contentMaster: ContentMaster!
  contentMasterId: bigint!

  """An object relationship"""
  individual: Individual!
  individualId: bigint!
}

"""
aggregated selection of "content_master_contributors"
"""
type ContentMasterContributorsAggregate {
  aggregate: ContentMasterContributorsAggregateFields
  nodes: [ContentMasterContributors!]!
}

input ContentMasterContributorsAggregateBoolExp {
  count: contentMasterContributorsAggregateBoolExpCount
}

input contentMasterContributorsAggregateBoolExpCount {
  arguments: [ContentMasterContributorsSelectColumn!]
  distinct: Boolean
  filter: ContentMasterContributorsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "content_master_contributors"
"""
type ContentMasterContributorsAggregateFields {
  avg: ContentMasterContributorsAvgFields
  count(columns: [ContentMasterContributorsSelectColumn!], distinct: Boolean): Int!
  max: ContentMasterContributorsMaxFields
  min: ContentMasterContributorsMinFields
  stddev: ContentMasterContributorsStddevFields
  stddevPop: ContentMasterContributorsStddevPopFields
  stddevSamp: ContentMasterContributorsStddevSampFields
  sum: ContentMasterContributorsSumFields
  varPop: ContentMasterContributorsVarPopFields
  varSamp: ContentMasterContributorsVarSampFields
  variance: ContentMasterContributorsVarianceFields
}

"""
order by aggregate values of table "content_master_contributors"
"""
input ContentMasterContributorsAggregateOrderBy {
  avg: ContentMasterContributorsAvgOrderBy
  count: OrderBy
  max: ContentMasterContributorsMaxOrderBy
  min: ContentMasterContributorsMinOrderBy
  stddev: ContentMasterContributorsStddevOrderBy
  stddevPop: ContentMasterContributorsStddevPopOrderBy
  stddevSamp: ContentMasterContributorsStddevSampOrderBy
  sum: ContentMasterContributorsSumOrderBy
  varPop: ContentMasterContributorsVarPopOrderBy
  varSamp: ContentMasterContributorsVarSampOrderBy
  variance: ContentMasterContributorsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "content_master_contributors"
"""
input ContentMasterContributorsArrRelInsertInput {
  data: [ContentMasterContributorsInsertInput!]!

  """upsert condition"""
  onConflict: ContentMasterContributorsOnConflict
}

"""aggregate avg on columns"""
type ContentMasterContributorsAvgFields {
  contentMasterId: Float
  individualId: Float
}

"""
order by avg() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsAvgOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""
Boolean expression to filter rows from the table "content_master_contributors".
All fields are combined with a logical 'AND'.
"""
input ContentMasterContributorsBoolExp {
  _and: [ContentMasterContributorsBoolExp!]
  _not: ContentMasterContributorsBoolExp
  _or: [ContentMasterContributorsBoolExp!]
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

"""
unique or primary key constraints on table "content_master_contributors"
"""
enum ContentMasterContributorsConstraint {
  """
  unique or primary key constraint on columns "content_master_id", "individual_id"
  """
  content_master_contributors_pkey
}

"""
input type for incrementing numeric columns in table "content_master_contributors"
"""
input ContentMasterContributorsIncInput {
  contentMasterId: bigint
  individualId: bigint
}

"""
input type for inserting data into table "content_master_contributors"
"""
input ContentMasterContributorsInsertInput {
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

"""aggregate max on columns"""
type ContentMasterContributorsMaxFields {
  contentMasterId: bigint
  individualId: bigint
}

"""
order by max() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsMaxOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""aggregate min on columns"""
type ContentMasterContributorsMinFields {
  contentMasterId: bigint
  individualId: bigint
}

"""
order by min() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsMinOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""
response of any mutation on the table "content_master_contributors"
"""
type ContentMasterContributorsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ContentMasterContributors!]!
}

"""
on_conflict condition type for table "content_master_contributors"
"""
input ContentMasterContributorsOnConflict {
  constraint: ContentMasterContributorsConstraint!
  updateColumns: [ContentMasterContributorsUpdateColumn!]! = []
  where: ContentMasterContributorsBoolExp
}

"""
Ordering options when selecting data from "content_master_contributors".
"""
input ContentMasterContributorsOrderBy {
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

"""primary key columns input for table: content_master_contributors"""
input ContentMasterContributorsPkColumnsInput {
  contentMasterId: bigint!
  individualId: bigint!
}

"""
select columns of table "content_master_contributors"
"""
enum ContentMasterContributorsSelectColumn {
  """column name"""
  contentMasterId

  """column name"""
  individualId
}

"""
input type for updating data in table "content_master_contributors"
"""
input ContentMasterContributorsSetInput {
  contentMasterId: bigint
  individualId: bigint
}

"""aggregate stddev on columns"""
type ContentMasterContributorsStddevFields {
  contentMasterId: Float
  individualId: Float
}

"""
order by stddev() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsStddevOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""aggregate stddevPop on columns"""
type ContentMasterContributorsStddevPopFields {
  contentMasterId: Float
  individualId: Float
}

"""
order by stddevPop() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsStddevPopOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ContentMasterContributorsStddevSampFields {
  contentMasterId: Float
  individualId: Float
}

"""
order by stddevSamp() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsStddevSampOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""
Streaming cursor of the table "content_master_contributors"
"""
input ContentMasterContributorsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ContentMasterContributorsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ContentMasterContributorsStreamCursorValueInput {
  contentMasterId: bigint
  individualId: bigint
}

"""aggregate sum on columns"""
type ContentMasterContributorsSumFields {
  contentMasterId: bigint
  individualId: bigint
}

"""
order by sum() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsSumOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""
update columns of table "content_master_contributors"
"""
enum ContentMasterContributorsUpdateColumn {
  """column name"""
  contentMasterId

  """column name"""
  individualId
}

input ContentMasterContributorsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ContentMasterContributorsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ContentMasterContributorsSetInput

  """filter the rows which have to be updated"""
  where: ContentMasterContributorsBoolExp!
}

"""aggregate variance on columns"""
type ContentMasterContributorsVarianceFields {
  contentMasterId: Float
  individualId: Float
}

"""
order by variance() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsVarianceOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""aggregate varPop on columns"""
type ContentMasterContributorsVarPopFields {
  contentMasterId: Float
  individualId: Float
}

"""
order by varPop() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsVarPopOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""aggregate varSamp on columns"""
type ContentMasterContributorsVarSampFields {
  contentMasterId: Float
  individualId: Float
}

"""
order by varSamp() on columns of table "content_master_contributors"
"""
input ContentMasterContributorsVarSampOrderBy {
  contentMasterId: OrderBy
  individualId: OrderBy
}

"""
input type for incrementing numeric columns in table "content_master"
"""
input ContentMasterIncInput {
  createdById: bigint
  id: bigint
  rootContentId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "content_master"
"""
input ContentMasterInsertInput {
  content: ContentObjRelInsertInput
  contentMasterContributors: ContentMasterContributorsArrRelInsertInput
  contentMasterTags: ContentMasterTagsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  issue: IssueObjRelInsertInput
  name: String
  rootContentId: bigint
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type ContentMasterMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "content_master"
"""
input ContentMasterMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  rootContentId: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type ContentMasterMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "content_master"
"""
input ContentMasterMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  rootContentId: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "content_master"
"""
type ContentMasterMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ContentMaster!]!
}

"""
input type for inserting object relation for remote table "content_master"
"""
input ContentMasterObjRelInsertInput {
  data: ContentMasterInsertInput!

  """upsert condition"""
  onConflict: ContentMasterOnConflict
}

"""
on_conflict condition type for table "content_master"
"""
input ContentMasterOnConflict {
  constraint: ContentMasterConstraint!
  updateColumns: [ContentMasterUpdateColumn!]! = []
  where: ContentMasterBoolExp
}

"""Ordering options when selecting data from "content_master"."""
input ContentMasterOrderBy {
  content: ContentOrderBy
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateOrderBy
  contentMasterTagsAggregate: ContentMasterTagsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  issue: IssueOrderBy
  name: OrderBy
  rootContentId: OrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: content_master"""
input ContentMasterPkColumnsInput {
  id: bigint!
}

"""
select columns of table "content_master"
"""
enum ContentMasterSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  rootContentId

  """column name"""
  slug

  """column name"""
  tenantId

  """column name"""
  type
}

"""
input type for updating data in table "content_master"
"""
input ContentMasterSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type ContentMasterStddevFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "content_master"
"""
input ContentMasterStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ContentMasterStddevPopFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "content_master"
"""
input ContentMasterStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ContentMasterStddevSampFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "content_master"
"""
input ContentMasterStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "content_master"
"""
input ContentMasterStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ContentMasterStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ContentMasterStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  rootContentId: bigint
  slug: String
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type ContentMasterSumFields {
  createdById: bigint
  id: bigint
  rootContentId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "content_master"
"""
input ContentMasterSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "content_master_tags"
"""
type ContentMasterTags {
  """An object relationship"""
  contentMaster: ContentMaster!
  contentMasterId: bigint!

  """An object relationship"""
  tag: Tag!
  tagId: bigint!
}

"""
aggregated selection of "content_master_tags"
"""
type ContentMasterTagsAggregate {
  aggregate: ContentMasterTagsAggregateFields
  nodes: [ContentMasterTags!]!
}

input ContentMasterTagsAggregateBoolExp {
  count: contentMasterTagsAggregateBoolExpCount
}

input contentMasterTagsAggregateBoolExpCount {
  arguments: [ContentMasterTagsSelectColumn!]
  distinct: Boolean
  filter: ContentMasterTagsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "content_master_tags"
"""
type ContentMasterTagsAggregateFields {
  avg: ContentMasterTagsAvgFields
  count(columns: [ContentMasterTagsSelectColumn!], distinct: Boolean): Int!
  max: ContentMasterTagsMaxFields
  min: ContentMasterTagsMinFields
  stddev: ContentMasterTagsStddevFields
  stddevPop: ContentMasterTagsStddevPopFields
  stddevSamp: ContentMasterTagsStddevSampFields
  sum: ContentMasterTagsSumFields
  varPop: ContentMasterTagsVarPopFields
  varSamp: ContentMasterTagsVarSampFields
  variance: ContentMasterTagsVarianceFields
}

"""
order by aggregate values of table "content_master_tags"
"""
input ContentMasterTagsAggregateOrderBy {
  avg: ContentMasterTagsAvgOrderBy
  count: OrderBy
  max: ContentMasterTagsMaxOrderBy
  min: ContentMasterTagsMinOrderBy
  stddev: ContentMasterTagsStddevOrderBy
  stddevPop: ContentMasterTagsStddevPopOrderBy
  stddevSamp: ContentMasterTagsStddevSampOrderBy
  sum: ContentMasterTagsSumOrderBy
  varPop: ContentMasterTagsVarPopOrderBy
  varSamp: ContentMasterTagsVarSampOrderBy
  variance: ContentMasterTagsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "content_master_tags"
"""
input ContentMasterTagsArrRelInsertInput {
  data: [ContentMasterTagsInsertInput!]!

  """upsert condition"""
  onConflict: ContentMasterTagsOnConflict
}

"""aggregate avg on columns"""
type ContentMasterTagsAvgFields {
  contentMasterId: Float
  tagId: Float
}

"""
order by avg() on columns of table "content_master_tags"
"""
input ContentMasterTagsAvgOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""
Boolean expression to filter rows from the table "content_master_tags". All fields are combined with a logical 'AND'.
"""
input ContentMasterTagsBoolExp {
  _and: [ContentMasterTagsBoolExp!]
  _not: ContentMasterTagsBoolExp
  _or: [ContentMasterTagsBoolExp!]
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

"""
unique or primary key constraints on table "content_master_tags"
"""
enum ContentMasterTagsConstraint {
  """
  unique or primary key constraint on columns "content_master_id", "tag_id"
  """
  content_master_tags_pkey
}

"""
input type for incrementing numeric columns in table "content_master_tags"
"""
input ContentMasterTagsIncInput {
  contentMasterId: bigint
  tagId: bigint
}

"""
input type for inserting data into table "content_master_tags"
"""
input ContentMasterTagsInsertInput {
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

"""aggregate max on columns"""
type ContentMasterTagsMaxFields {
  contentMasterId: bigint
  tagId: bigint
}

"""
order by max() on columns of table "content_master_tags"
"""
input ContentMasterTagsMaxOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""aggregate min on columns"""
type ContentMasterTagsMinFields {
  contentMasterId: bigint
  tagId: bigint
}

"""
order by min() on columns of table "content_master_tags"
"""
input ContentMasterTagsMinOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""
response of any mutation on the table "content_master_tags"
"""
type ContentMasterTagsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ContentMasterTags!]!
}

"""
on_conflict condition type for table "content_master_tags"
"""
input ContentMasterTagsOnConflict {
  constraint: ContentMasterTagsConstraint!
  updateColumns: [ContentMasterTagsUpdateColumn!]! = []
  where: ContentMasterTagsBoolExp
}

"""Ordering options when selecting data from "content_master_tags"."""
input ContentMasterTagsOrderBy {
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

"""primary key columns input for table: content_master_tags"""
input ContentMasterTagsPkColumnsInput {
  contentMasterId: bigint!
  tagId: bigint!
}

"""
select columns of table "content_master_tags"
"""
enum ContentMasterTagsSelectColumn {
  """column name"""
  contentMasterId

  """column name"""
  tagId
}

"""
input type for updating data in table "content_master_tags"
"""
input ContentMasterTagsSetInput {
  contentMasterId: bigint
  tagId: bigint
}

"""aggregate stddev on columns"""
type ContentMasterTagsStddevFields {
  contentMasterId: Float
  tagId: Float
}

"""
order by stddev() on columns of table "content_master_tags"
"""
input ContentMasterTagsStddevOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevPop on columns"""
type ContentMasterTagsStddevPopFields {
  contentMasterId: Float
  tagId: Float
}

"""
order by stddevPop() on columns of table "content_master_tags"
"""
input ContentMasterTagsStddevPopOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ContentMasterTagsStddevSampFields {
  contentMasterId: Float
  tagId: Float
}

"""
order by stddevSamp() on columns of table "content_master_tags"
"""
input ContentMasterTagsStddevSampOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""
Streaming cursor of the table "content_master_tags"
"""
input ContentMasterTagsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ContentMasterTagsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ContentMasterTagsStreamCursorValueInput {
  contentMasterId: bigint
  tagId: bigint
}

"""aggregate sum on columns"""
type ContentMasterTagsSumFields {
  contentMasterId: bigint
  tagId: bigint
}

"""
order by sum() on columns of table "content_master_tags"
"""
input ContentMasterTagsSumOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "content_master_tags"
"""
enum ContentMasterTagsUpdateColumn {
  """column name"""
  contentMasterId

  """column name"""
  tagId
}

input ContentMasterTagsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ContentMasterTagsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ContentMasterTagsSetInput

  """filter the rows which have to be updated"""
  where: ContentMasterTagsBoolExp!
}

"""aggregate variance on columns"""
type ContentMasterTagsVarianceFields {
  contentMasterId: Float
  tagId: Float
}

"""
order by variance() on columns of table "content_master_tags"
"""
input ContentMasterTagsVarianceOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""aggregate varPop on columns"""
type ContentMasterTagsVarPopFields {
  contentMasterId: Float
  tagId: Float
}

"""
order by varPop() on columns of table "content_master_tags"
"""
input ContentMasterTagsVarPopOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""aggregate varSamp on columns"""
type ContentMasterTagsVarSampFields {
  contentMasterId: Float
  tagId: Float
}

"""
order by varSamp() on columns of table "content_master_tags"
"""
input ContentMasterTagsVarSampOrderBy {
  contentMasterId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "content_master"
"""
enum ContentMasterUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  rootContentId

  """column name"""
  slug

  """column name"""
  tenantId

  """column name"""
  type
}

input ContentMasterUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ContentMasterIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ContentMasterSetInput

  """filter the rows which have to be updated"""
  where: ContentMasterBoolExp!
}

"""aggregate variance on columns"""
type ContentMasterVarianceFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "content_master"
"""
input ContentMasterVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ContentMasterVarPopFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "content_master"
"""
input ContentMasterVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ContentMasterVarSampFields {
  createdById: Float
  id: Float
  rootContentId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "content_master"
"""
input ContentMasterVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  rootContentId: OrderBy
  tenantId: OrderBy
}

"""aggregate max on columns"""
type ContentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  tenantId: bigint
  text: String
}

"""
order by max() on columns of table "content"
"""
input ContentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

"""aggregate min on columns"""
type ContentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  tenantId: bigint
  text: String
}

"""
order by min() on columns of table "content"
"""
input ContentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

"""
response of any mutation on the table "content"
"""
type ContentMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Content!]!
}

"""
input type for inserting object relation for remote table "content"
"""
input ContentObjRelInsertInput {
  data: ContentInsertInput!

  """upsert condition"""
  onConflict: ContentOnConflict
}

"""
on_conflict condition type for table "content"
"""
input ContentOnConflict {
  constraint: ContentConstraint!
  updateColumns: [ContentUpdateColumn!]! = []
  where: ContentBoolExp
}

"""Ordering options when selecting data from "content"."""
input ContentOrderBy {
  content: ContentOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  contentEditsAggregate: ContentEditAggregateOrderBy
  contentMaster: ContentMasterOrderBy
  contentTeamsAggregate: ContentTeamsAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isAnonymous: OrderBy
  parentId: OrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  text: OrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

"""primary key columns input for table: content"""
input ContentPkColumnsInput {
  id: bigint!
}

"""
select columns of table "content"
"""
enum ContentSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  isAnonymous

  """column name"""
  parentId

  """column name"""
  tenantId

  """column name"""
  text
}

"""
select "contentAggregateBoolExpBool_andArgumentsColumns" columns of table "content"
"""
enum ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  isAnonymous
}

"""
select "contentAggregateBoolExpBool_orArgumentsColumns" columns of table "content"
"""
enum ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  isAnonymous
}

"""
input type for updating data in table "content"
"""
input ContentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  tenantId: bigint
  text: String
}

"""aggregate stddev on columns"""
type ContentStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  parentId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "content"
"""
input ContentStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ContentStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  parentId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "content"
"""
input ContentStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ContentStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  parentId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "content"
"""
input ContentStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "content"
"""
input ContentStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ContentStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ContentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  tenantId: bigint
  text: String
}

"""aggregate sum on columns"""
type ContentSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  parentId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "content"
"""
input ContentSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "content_teams"
"""
type ContentTeams {
  """An object relationship"""
  content: Content!
  contentId: bigint!

  """An object relationship"""
  team: Team!
  teamId: bigint!
}

"""
aggregated selection of "content_teams"
"""
type ContentTeamsAggregate {
  aggregate: ContentTeamsAggregateFields
  nodes: [ContentTeams!]!
}

input ContentTeamsAggregateBoolExp {
  count: contentTeamsAggregateBoolExpCount
}

input contentTeamsAggregateBoolExpCount {
  arguments: [ContentTeamsSelectColumn!]
  distinct: Boolean
  filter: ContentTeamsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "content_teams"
"""
type ContentTeamsAggregateFields {
  avg: ContentTeamsAvgFields
  count(columns: [ContentTeamsSelectColumn!], distinct: Boolean): Int!
  max: ContentTeamsMaxFields
  min: ContentTeamsMinFields
  stddev: ContentTeamsStddevFields
  stddevPop: ContentTeamsStddevPopFields
  stddevSamp: ContentTeamsStddevSampFields
  sum: ContentTeamsSumFields
  varPop: ContentTeamsVarPopFields
  varSamp: ContentTeamsVarSampFields
  variance: ContentTeamsVarianceFields
}

"""
order by aggregate values of table "content_teams"
"""
input ContentTeamsAggregateOrderBy {
  avg: ContentTeamsAvgOrderBy
  count: OrderBy
  max: ContentTeamsMaxOrderBy
  min: ContentTeamsMinOrderBy
  stddev: ContentTeamsStddevOrderBy
  stddevPop: ContentTeamsStddevPopOrderBy
  stddevSamp: ContentTeamsStddevSampOrderBy
  sum: ContentTeamsSumOrderBy
  varPop: ContentTeamsVarPopOrderBy
  varSamp: ContentTeamsVarSampOrderBy
  variance: ContentTeamsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "content_teams"
"""
input ContentTeamsArrRelInsertInput {
  data: [ContentTeamsInsertInput!]!

  """upsert condition"""
  onConflict: ContentTeamsOnConflict
}

"""aggregate avg on columns"""
type ContentTeamsAvgFields {
  contentId: Float
  teamId: Float
}

"""
order by avg() on columns of table "content_teams"
"""
input ContentTeamsAvgOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""
Boolean expression to filter rows from the table "content_teams". All fields are combined with a logical 'AND'.
"""
input ContentTeamsBoolExp {
  _and: [ContentTeamsBoolExp!]
  _not: ContentTeamsBoolExp
  _or: [ContentTeamsBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
}

"""
unique or primary key constraints on table "content_teams"
"""
enum ContentTeamsConstraint {
  """
  unique or primary key constraint on columns "content_id", "team_id"
  """
  content_teams_pkey
}

"""
input type for incrementing numeric columns in table "content_teams"
"""
input ContentTeamsIncInput {
  contentId: bigint
  teamId: bigint
}

"""
input type for inserting data into table "content_teams"
"""
input ContentTeamsInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
}

"""aggregate max on columns"""
type ContentTeamsMaxFields {
  contentId: bigint
  teamId: bigint
}

"""
order by max() on columns of table "content_teams"
"""
input ContentTeamsMaxOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""aggregate min on columns"""
type ContentTeamsMinFields {
  contentId: bigint
  teamId: bigint
}

"""
order by min() on columns of table "content_teams"
"""
input ContentTeamsMinOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""
response of any mutation on the table "content_teams"
"""
type ContentTeamsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ContentTeams!]!
}

"""
on_conflict condition type for table "content_teams"
"""
input ContentTeamsOnConflict {
  constraint: ContentTeamsConstraint!
  updateColumns: [ContentTeamsUpdateColumn!]! = []
  where: ContentTeamsBoolExp
}

"""Ordering options when selecting data from "content_teams"."""
input ContentTeamsOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
}

"""primary key columns input for table: content_teams"""
input ContentTeamsPkColumnsInput {
  contentId: bigint!
  teamId: bigint!
}

"""
select columns of table "content_teams"
"""
enum ContentTeamsSelectColumn {
  """column name"""
  contentId

  """column name"""
  teamId
}

"""
input type for updating data in table "content_teams"
"""
input ContentTeamsSetInput {
  contentId: bigint
  teamId: bigint
}

"""aggregate stddev on columns"""
type ContentTeamsStddevFields {
  contentId: Float
  teamId: Float
}

"""
order by stddev() on columns of table "content_teams"
"""
input ContentTeamsStddevOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""aggregate stddevPop on columns"""
type ContentTeamsStddevPopFields {
  contentId: Float
  teamId: Float
}

"""
order by stddevPop() on columns of table "content_teams"
"""
input ContentTeamsStddevPopOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ContentTeamsStddevSampFields {
  contentId: Float
  teamId: Float
}

"""
order by stddevSamp() on columns of table "content_teams"
"""
input ContentTeamsStddevSampOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""
Streaming cursor of the table "content_teams"
"""
input ContentTeamsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ContentTeamsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ContentTeamsStreamCursorValueInput {
  contentId: bigint
  teamId: bigint
}

"""aggregate sum on columns"""
type ContentTeamsSumFields {
  contentId: bigint
  teamId: bigint
}

"""
order by sum() on columns of table "content_teams"
"""
input ContentTeamsSumOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""
update columns of table "content_teams"
"""
enum ContentTeamsUpdateColumn {
  """column name"""
  contentId

  """column name"""
  teamId
}

input ContentTeamsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ContentTeamsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ContentTeamsSetInput

  """filter the rows which have to be updated"""
  where: ContentTeamsBoolExp!
}

"""aggregate variance on columns"""
type ContentTeamsVarianceFields {
  contentId: Float
  teamId: Float
}

"""
order by variance() on columns of table "content_teams"
"""
input ContentTeamsVarianceOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""aggregate varPop on columns"""
type ContentTeamsVarPopFields {
  contentId: Float
  teamId: Float
}

"""
order by varPop() on columns of table "content_teams"
"""
input ContentTeamsVarPopOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""aggregate varSamp on columns"""
type ContentTeamsVarSampFields {
  contentId: Float
  teamId: Float
}

"""
order by varSamp() on columns of table "content_teams"
"""
input ContentTeamsVarSampOrderBy {
  contentId: OrderBy
  teamId: OrderBy
}

"""
update columns of table "content"
"""
enum ContentUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  isAnonymous

  """column name"""
  parentId

  """column name"""
  tenantId

  """column name"""
  text
}

input ContentUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ContentIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ContentSetInput

  """filter the rows which have to be updated"""
  where: ContentBoolExp!
}

"""aggregate variance on columns"""
type ContentVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  parentId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "content"
"""
input ContentVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ContentVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  parentId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "content"
"""
input ContentVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ContentVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  parentId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "content"
"""
input ContentVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
}

"""ordering argument of a cursor"""
enum CursorOrdering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "document"
"""
type Document {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  """An array relationship"""
  documentEdits(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): [DocumentEdit!]!

  """An aggregate relationship"""
  documentEditsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): DocumentEditAggregate!
  fileId: bigint

  """An object relationship"""
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  name: String!

  """An object relationship"""
  subject: Subject
  subjectId: bigint

  """An object relationship"""
  team: Team
  teamId: bigint

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  yearVersion: smallint
}

"""
aggregated selection of "document"
"""
type DocumentAggregate {
  aggregate: DocumentAggregateFields
  nodes: [Document!]!
}

input DocumentAggregateBoolExp {
  count: documentAggregateBoolExpCount
}

input documentAggregateBoolExpCount {
  arguments: [DocumentSelectColumn!]
  distinct: Boolean
  filter: DocumentBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "document"
"""
type DocumentAggregateFields {
  avg: DocumentAvgFields
  count(columns: [DocumentSelectColumn!], distinct: Boolean): Int!
  max: DocumentMaxFields
  min: DocumentMinFields
  stddev: DocumentStddevFields
  stddevPop: DocumentStddevPopFields
  stddevSamp: DocumentStddevSampFields
  sum: DocumentSumFields
  varPop: DocumentVarPopFields
  varSamp: DocumentVarSampFields
  variance: DocumentVarianceFields
}

"""
order by aggregate values of table "document"
"""
input DocumentAggregateOrderBy {
  avg: DocumentAvgOrderBy
  count: OrderBy
  max: DocumentMaxOrderBy
  min: DocumentMinOrderBy
  stddev: DocumentStddevOrderBy
  stddevPop: DocumentStddevPopOrderBy
  stddevSamp: DocumentStddevSampOrderBy
  sum: DocumentSumOrderBy
  varPop: DocumentVarPopOrderBy
  varSamp: DocumentVarSampOrderBy
  variance: DocumentVarianceOrderBy
}

"""
input type for inserting array relation for remote table "document"
"""
input DocumentArrRelInsertInput {
  data: [DocumentInsertInput!]!

  """upsert condition"""
  onConflict: DocumentOnConflict
}

"""aggregate avg on columns"""
type DocumentAvgFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by avg() on columns of table "document"
"""
input DocumentAvgOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
Boolean expression to filter rows from the table "document". All fields are combined with a logical 'AND'.
"""
input DocumentBoolExp {
  _and: [DocumentBoolExp!]
  _not: DocumentBoolExp
  _or: [DocumentBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  fileId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  yearVersion: SmallintComparisonExp
}

"""
unique or primary key constraints on table "document"
"""
enum DocumentConstraint {
  """
  unique or primary key constraint on columns "file_id"
  """
  document_file_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  document_pkey
}

"""
columns and relationships of "document_edit"
"""
type DocumentEdit {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  document: Document!
  documentId: bigint!

  """An object relationship"""
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  newVersionId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  yearVersion: smallint
}

"""
aggregated selection of "document_edit"
"""
type DocumentEditAggregate {
  aggregate: DocumentEditAggregateFields
  nodes: [DocumentEdit!]!
}

input DocumentEditAggregateBoolExp {
  count: documentEditAggregateBoolExpCount
}

input documentEditAggregateBoolExpCount {
  arguments: [DocumentEditSelectColumn!]
  distinct: Boolean
  filter: DocumentEditBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "document_edit"
"""
type DocumentEditAggregateFields {
  avg: DocumentEditAvgFields
  count(columns: [DocumentEditSelectColumn!], distinct: Boolean): Int!
  max: DocumentEditMaxFields
  min: DocumentEditMinFields
  stddev: DocumentEditStddevFields
  stddevPop: DocumentEditStddevPopFields
  stddevSamp: DocumentEditStddevSampFields
  sum: DocumentEditSumFields
  varPop: DocumentEditVarPopFields
  varSamp: DocumentEditVarSampFields
  variance: DocumentEditVarianceFields
}

"""
order by aggregate values of table "document_edit"
"""
input DocumentEditAggregateOrderBy {
  avg: DocumentEditAvgOrderBy
  count: OrderBy
  max: DocumentEditMaxOrderBy
  min: DocumentEditMinOrderBy
  stddev: DocumentEditStddevOrderBy
  stddevPop: DocumentEditStddevPopOrderBy
  stddevSamp: DocumentEditStddevSampOrderBy
  sum: DocumentEditSumOrderBy
  varPop: DocumentEditVarPopOrderBy
  varSamp: DocumentEditVarSampOrderBy
  variance: DocumentEditVarianceOrderBy
}

"""
input type for inserting array relation for remote table "document_edit"
"""
input DocumentEditArrRelInsertInput {
  data: [DocumentEditInsertInput!]!

  """upsert condition"""
  onConflict: DocumentEditOnConflict
}

"""aggregate avg on columns"""
type DocumentEditAvgFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by avg() on columns of table "document_edit"
"""
input DocumentEditAvgOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
Boolean expression to filter rows from the table "document_edit". All fields are combined with a logical 'AND'.
"""
input DocumentEditBoolExp {
  _and: [DocumentEditBoolExp!]
  _not: DocumentEditBoolExp
  _or: [DocumentEditBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  document: DocumentBoolExp
  documentId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  newVersionId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  yearVersion: SmallintComparisonExp
}

"""
unique or primary key constraints on table "document_edit"
"""
enum DocumentEditConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  document_edit_pkey
}

"""
input type for incrementing numeric columns in table "document_edit"
"""
input DocumentEditIncInput {
  createdById: bigint
  documentId: bigint
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  yearVersion: smallint
}

"""
input type for inserting data into table "document_edit"
"""
input DocumentEditInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  document: DocumentObjRelInsertInput
  documentId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  newVersionId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""aggregate max on columns"""
type DocumentEditMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""
order by max() on columns of table "document_edit"
"""
input DocumentEditMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

"""aggregate min on columns"""
type DocumentEditMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""
order by min() on columns of table "document_edit"
"""
input DocumentEditMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

"""
response of any mutation on the table "document_edit"
"""
type DocumentEditMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [DocumentEdit!]!
}

"""
on_conflict condition type for table "document_edit"
"""
input DocumentEditOnConflict {
  constraint: DocumentEditConstraint!
  updateColumns: [DocumentEditUpdateColumn!]! = []
  where: DocumentEditBoolExp
}

"""Ordering options when selecting data from "document_edit"."""
input DocumentEditOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  document: DocumentOrderBy
  documentId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  newVersionId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

"""primary key columns input for table: document_edit"""
input DocumentEditPkColumnsInput {
  id: bigint!
}

"""
select columns of table "document_edit"
"""
enum DocumentEditSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  documentId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersionId

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  yearVersion
}

"""
input type for updating data in table "document_edit"
"""
input DocumentEditSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""aggregate stddev on columns"""
type DocumentEditStddevFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by stddev() on columns of table "document_edit"
"""
input DocumentEditStddevOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate stddevPop on columns"""
type DocumentEditStddevPopFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by stddevPop() on columns of table "document_edit"
"""
input DocumentEditStddevPopOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate stddevSamp on columns"""
type DocumentEditStddevSampFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by stddevSamp() on columns of table "document_edit"
"""
input DocumentEditStddevSampOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
Streaming cursor of the table "document_edit"
"""
input DocumentEditStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: DocumentEditStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input DocumentEditStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""aggregate sum on columns"""
type DocumentEditSumFields {
  createdById: bigint
  documentId: bigint
  id: bigint
  newVersionId: bigint
  tenantId: bigint
  yearVersion: smallint
}

"""
order by sum() on columns of table "document_edit"
"""
input DocumentEditSumOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
update columns of table "document_edit"
"""
enum DocumentEditUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  documentId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersionId

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  yearVersion
}

input DocumentEditUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: DocumentEditIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: DocumentEditSetInput

  """filter the rows which have to be updated"""
  where: DocumentEditBoolExp!
}

"""aggregate variance on columns"""
type DocumentEditVarianceFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by variance() on columns of table "document_edit"
"""
input DocumentEditVarianceOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate varPop on columns"""
type DocumentEditVarPopFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by varPop() on columns of table "document_edit"
"""
input DocumentEditVarPopOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate varSamp on columns"""
type DocumentEditVarSampFields {
  createdById: Float
  documentId: Float
  id: Float
  newVersionId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by varSamp() on columns of table "document_edit"
"""
input DocumentEditVarSampOrderBy {
  createdById: OrderBy
  documentId: OrderBy
  id: OrderBy
  newVersionId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
input type for incrementing numeric columns in table "document"
"""
input DocumentIncInput {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

"""
input type for inserting data into table "document"
"""
input DocumentInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  documentEdits: DocumentEditArrRelInsertInput
  fileId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  subject: SubjectObjRelInsertInput
  subjectId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""aggregate max on columns"""
type DocumentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""
order by max() on columns of table "document"
"""
input DocumentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

"""aggregate min on columns"""
type DocumentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""
order by min() on columns of table "document"
"""
input DocumentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

"""
response of any mutation on the table "document"
"""
type DocumentMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Document!]!
}

"""
input type for inserting object relation for remote table "document"
"""
input DocumentObjRelInsertInput {
  data: DocumentInsertInput!

  """upsert condition"""
  onConflict: DocumentOnConflict
}

"""
on_conflict condition type for table "document"
"""
input DocumentOnConflict {
  constraint: DocumentConstraint!
  updateColumns: [DocumentUpdateColumn!]! = []
  where: DocumentBoolExp
}

"""Ordering options when selecting data from "document"."""
input DocumentOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  fileId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

"""primary key columns input for table: document"""
input DocumentPkColumnsInput {
  id: bigint!
}

"""
select columns of table "document"
"""
enum DocumentSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  fileId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  subjectId

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  yearVersion
}

"""
input type for updating data in table "document"
"""
input DocumentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""aggregate stddev on columns"""
type DocumentStddevFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by stddev() on columns of table "document"
"""
input DocumentStddevOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate stddevPop on columns"""
type DocumentStddevPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by stddevPop() on columns of table "document"
"""
input DocumentStddevPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate stddevSamp on columns"""
type DocumentStddevSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by stddevSamp() on columns of table "document"
"""
input DocumentStddevSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
Streaming cursor of the table "document"
"""
input DocumentStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: DocumentStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input DocumentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

"""aggregate sum on columns"""
type DocumentSumFields {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

"""
order by sum() on columns of table "document"
"""
input DocumentSumOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
update columns of table "document"
"""
enum DocumentUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  fileId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  subjectId

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  yearVersion
}

input DocumentUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: DocumentIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: DocumentSetInput

  """filter the rows which have to be updated"""
  where: DocumentBoolExp!
}

"""aggregate variance on columns"""
type DocumentVarianceFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by variance() on columns of table "document"
"""
input DocumentVarianceOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate varPop on columns"""
type DocumentVarPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by varPop() on columns of table "document"
"""
input DocumentVarPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""aggregate varSamp on columns"""
type DocumentVarSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

"""
order by varSamp() on columns of table "document"
"""
input DocumentVarSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

"""
columns and relationships of "event"
"""
type Event {
  """An array relationship"""
  actions(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """An object relationship"""
  actorAddress: ActorAddress!
  addressId: bigint!
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean!
  budget: Float

  """An object relationship"""
  contentMaster: ContentMaster
  contentMasterId: bigint

  """An array relationship"""
  contents(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): [Content!]!

  """An aggregate relationship"""
  contentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz!

  """An object relationship"""
  event: Event

  """An object relationship"""
  eventApprovalStep: EventApprovalStep

  """An array relationship"""
  eventApprovals(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  """An aggregate relationship"""
  eventApprovalsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """An array relationship"""
  eventRoles(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """An aggregate relationship"""
  eventRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): EventRoleAggregate!

  """An array relationship"""
  eventTags(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): [EventTags!]!

  """An aggregate relationship"""
  eventTagsAggregate(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """An object relationship"""
  fileUpload: FileUpload

  """An object relationship"""
  form: Form

  """An object relationship"""
  formSubmission: FormSubmission
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint

  """An object relationship"""
  individual: Individual
  isPrivate: Boolean!
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta(
    """JSON select path"""
    path: String
  ): jsonb!
  presenceReward: Float!
  price: Float!

  """An object relationship"""
  project: Project!
  projectId: bigint!
  regularEventId: bigint
  regularEventInterval: String
  start: timestamptz!
  state: String!
  supervisorId: bigint!

  """An array relationship"""
  teamEvents(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  """An aggregate relationship"""
  teamEventsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  """An array relationship"""
  teamFinanceEdits(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """An aggregate relationship"""
  teamFinanceEditsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "event"
"""
type EventAggregate {
  aggregate: EventAggregateFields
  nodes: [Event!]!
}

input EventAggregateBoolExp {
  bool_and: eventAggregateBoolExpBool_and
  bool_or: eventAggregateBoolExpBool_or
  count: eventAggregateBoolExpCount
}

input eventAggregateBoolExpBool_and {
  arguments: EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpBool_or {
  arguments: EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpCount {
  arguments: [EventSelectColumn!]
  distinct: Boolean
  filter: EventBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event"
"""
type EventAggregateFields {
  avg: EventAvgFields
  count(columns: [EventSelectColumn!], distinct: Boolean): Int!
  max: EventMaxFields
  min: EventMinFields
  stddev: EventStddevFields
  stddevPop: EventStddevPopFields
  stddevSamp: EventStddevSampFields
  sum: EventSumFields
  varPop: EventVarPopFields
  varSamp: EventVarSampFields
  variance: EventVarianceFields
}

"""
order by aggregate values of table "event"
"""
input EventAggregateOrderBy {
  avg: EventAvgOrderBy
  count: OrderBy
  max: EventMaxOrderBy
  min: EventMinOrderBy
  stddev: EventStddevOrderBy
  stddevPop: EventStddevPopOrderBy
  stddevSamp: EventStddevSampOrderBy
  sum: EventSumOrderBy
  varPop: EventVarPopOrderBy
  varSamp: EventVarSampOrderBy
  variance: EventVarianceOrderBy
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input EventAppendInput {
  meta: jsonb
}

"""
columns and relationships of "event_approval"
"""
type EventApproval {
  approved: Boolean!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  event: Event

  """An object relationship"""
  eventApprovalStep: EventApprovalStep
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  message: String
  stepId: bigint

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "event_approval"
"""
type EventApprovalAggregate {
  aggregate: EventApprovalAggregateFields
  nodes: [EventApproval!]!
}

input EventApprovalAggregateBoolExp {
  bool_and: eventApprovalAggregateBoolExpBool_and
  bool_or: eventApprovalAggregateBoolExpBool_or
  count: eventApprovalAggregateBoolExpCount
}

input eventApprovalAggregateBoolExpBool_and {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpBool_or {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpCount {
  arguments: [EventApprovalSelectColumn!]
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_approval"
"""
type EventApprovalAggregateFields {
  avg: EventApprovalAvgFields
  count(columns: [EventApprovalSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalMaxFields
  min: EventApprovalMinFields
  stddev: EventApprovalStddevFields
  stddevPop: EventApprovalStddevPopFields
  stddevSamp: EventApprovalStddevSampFields
  sum: EventApprovalSumFields
  varPop: EventApprovalVarPopFields
  varSamp: EventApprovalVarSampFields
  variance: EventApprovalVarianceFields
}

"""
order by aggregate values of table "event_approval"
"""
input EventApprovalAggregateOrderBy {
  avg: EventApprovalAvgOrderBy
  count: OrderBy
  max: EventApprovalMaxOrderBy
  min: EventApprovalMinOrderBy
  stddev: EventApprovalStddevOrderBy
  stddevPop: EventApprovalStddevPopOrderBy
  stddevSamp: EventApprovalStddevSampOrderBy
  sum: EventApprovalSumOrderBy
  varPop: EventApprovalVarPopOrderBy
  varSamp: EventApprovalVarSampOrderBy
  variance: EventApprovalVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_approval"
"""
input EventApprovalArrRelInsertInput {
  data: [EventApprovalInsertInput!]!

  """upsert condition"""
  onConflict: EventApprovalOnConflict
}

"""aggregate avg on columns"""
type EventApprovalAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "event_approval"
"""
input EventApprovalAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "event_approval". All fields are combined with a logical 'AND'.
"""
input EventApprovalBoolExp {
  _and: [EventApprovalBoolExp!]
  _not: EventApprovalBoolExp
  _or: [EventApprovalBoolExp!]
  approved: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  message: StringComparisonExp
  stepId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "event_approval"
"""
enum EventApprovalConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  event_approval_pkey
}

"""
input type for incrementing numeric columns in table "event_approval"
"""
input EventApprovalIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  stepId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "event_approval"
"""
input EventApprovalInsertInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  message: String
  stepId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type EventApprovalMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "event_approval"
"""
input EventApprovalMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type EventApprovalMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "event_approval"
"""
input EventApprovalMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "event_approval"
"""
type EventApprovalMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventApproval!]!
}

"""
on_conflict condition type for table "event_approval"
"""
input EventApprovalOnConflict {
  constraint: EventApprovalConstraint!
  updateColumns: [EventApprovalUpdateColumn!]! = []
  where: EventApprovalBoolExp
}

"""Ordering options when selecting data from "event_approval"."""
input EventApprovalOrderBy {
  approved: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  message: OrderBy
  stepId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: event_approval"""
input EventApprovalPkColumnsInput {
  id: bigint!
}

"""
select columns of table "event_approval"
"""
enum EventApprovalSelectColumn {
  """column name"""
  approved

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  message

  """column name"""
  stepId

  """column name"""
  tenantId
}

"""
select "eventApprovalAggregateBoolExpBool_andArgumentsColumns" columns of table "event_approval"
"""
enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  approved
}

"""
select "eventApprovalAggregateBoolExpBool_orArgumentsColumns" columns of table "event_approval"
"""
enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  approved
}

"""
input type for updating data in table "event_approval"
"""
input EventApprovalSetInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type EventApprovalStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "event_approval"
"""
input EventApprovalStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventApprovalStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "event_approval"
"""
input EventApprovalStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventApprovalStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "event_approval"
"""
input EventApprovalStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "event_approval_step"
"""
type EventApprovalStep {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  """An object relationship"""
  eventApprovalStep: EventApprovalStep

  """An array relationship"""
  eventApprovalStepNotifiees(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  """An aggregate relationship"""
  eventApprovalStepNotifieesAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  """An array relationship"""
  eventApprovalStepValidators(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  """An aggregate relationship"""
  eventApprovalStepValidatorsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  """An array relationship"""
  eventApprovalSteps(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  """An aggregate relationship"""
  eventApprovalStepsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  """An array relationship"""
  eventApprovals(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  """An aggregate relationship"""
  eventApprovalsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  name: String!
  previousStepId: bigint

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "event_approval_step"
"""
type EventApprovalStepAggregate {
  aggregate: EventApprovalStepAggregateFields
  nodes: [EventApprovalStep!]!
}

input EventApprovalStepAggregateBoolExp {
  count: eventApprovalStepAggregateBoolExpCount
}

input eventApprovalStepAggregateBoolExpCount {
  arguments: [EventApprovalStepSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_approval_step"
"""
type EventApprovalStepAggregateFields {
  avg: EventApprovalStepAvgFields
  count(columns: [EventApprovalStepSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepMaxFields
  min: EventApprovalStepMinFields
  stddev: EventApprovalStepStddevFields
  stddevPop: EventApprovalStepStddevPopFields
  stddevSamp: EventApprovalStepStddevSampFields
  sum: EventApprovalStepSumFields
  varPop: EventApprovalStepVarPopFields
  varSamp: EventApprovalStepVarSampFields
  variance: EventApprovalStepVarianceFields
}

"""
order by aggregate values of table "event_approval_step"
"""
input EventApprovalStepAggregateOrderBy {
  avg: EventApprovalStepAvgOrderBy
  count: OrderBy
  max: EventApprovalStepMaxOrderBy
  min: EventApprovalStepMinOrderBy
  stddev: EventApprovalStepStddevOrderBy
  stddevPop: EventApprovalStepStddevPopOrderBy
  stddevSamp: EventApprovalStepStddevSampOrderBy
  sum: EventApprovalStepSumOrderBy
  varPop: EventApprovalStepVarPopOrderBy
  varSamp: EventApprovalStepVarSampOrderBy
  variance: EventApprovalStepVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_approval_step"
"""
input EventApprovalStepArrRelInsertInput {
  data: [EventApprovalStepInsertInput!]!

  """upsert condition"""
  onConflict: EventApprovalStepOnConflict
}

"""aggregate avg on columns"""
type EventApprovalStepAvgFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "event_approval_step"
"""
input EventApprovalStepAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "event_approval_step". All fields are combined with a logical 'AND'.
"""
input EventApprovalStepBoolExp {
  _and: [EventApprovalStepBoolExp!]
  _not: EventApprovalStepBoolExp
  _or: [EventApprovalStepBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepNotifiees: EventApprovalStepNotifieesBoolExp
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateBoolExp
  eventApprovalStepValidators: EventApprovalStepValidatorsBoolExp
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateBoolExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  previousStepId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "event_approval_step"
"""
enum EventApprovalStepConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  event_approval_step_pkey
}

"""
input type for incrementing numeric columns in table "event_approval_step"
"""
input EventApprovalStepIncInput {
  createdById: bigint
  id: bigint
  previousStepId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "event_approval_step"
"""
input EventApprovalStepInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepNotifiees: EventApprovalStepNotifieesArrRelInsertInput
  eventApprovalStepValidators: EventApprovalStepValidatorsArrRelInsertInput
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  events: EventArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  previousStepId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type EventApprovalStepMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "event_approval_step"
"""
input EventApprovalStepMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type EventApprovalStepMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "event_approval_step"
"""
input EventApprovalStepMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "event_approval_step"
"""
type EventApprovalStepMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventApprovalStep!]!
}

"""
columns and relationships of "event_approval_step_notifiees"
"""
type EventApprovalStepNotifiees {
  """An object relationship"""
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!

  """An object relationship"""
  individual: Individual!
  individualId: bigint!
}

"""
aggregated selection of "event_approval_step_notifiees"
"""
type EventApprovalStepNotifieesAggregate {
  aggregate: EventApprovalStepNotifieesAggregateFields
  nodes: [EventApprovalStepNotifiees!]!
}

input EventApprovalStepNotifieesAggregateBoolExp {
  count: eventApprovalStepNotifieesAggregateBoolExpCount
}

input eventApprovalStepNotifieesAggregateBoolExpCount {
  arguments: [EventApprovalStepNotifieesSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepNotifieesBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_approval_step_notifiees"
"""
type EventApprovalStepNotifieesAggregateFields {
  avg: EventApprovalStepNotifieesAvgFields
  count(columns: [EventApprovalStepNotifieesSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepNotifieesMaxFields
  min: EventApprovalStepNotifieesMinFields
  stddev: EventApprovalStepNotifieesStddevFields
  stddevPop: EventApprovalStepNotifieesStddevPopFields
  stddevSamp: EventApprovalStepNotifieesStddevSampFields
  sum: EventApprovalStepNotifieesSumFields
  varPop: EventApprovalStepNotifieesVarPopFields
  varSamp: EventApprovalStepNotifieesVarSampFields
  variance: EventApprovalStepNotifieesVarianceFields
}

"""
order by aggregate values of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesAggregateOrderBy {
  avg: EventApprovalStepNotifieesAvgOrderBy
  count: OrderBy
  max: EventApprovalStepNotifieesMaxOrderBy
  min: EventApprovalStepNotifieesMinOrderBy
  stddev: EventApprovalStepNotifieesStddevOrderBy
  stddevPop: EventApprovalStepNotifieesStddevPopOrderBy
  stddevSamp: EventApprovalStepNotifieesStddevSampOrderBy
  sum: EventApprovalStepNotifieesSumOrderBy
  varPop: EventApprovalStepNotifieesVarPopOrderBy
  varSamp: EventApprovalStepNotifieesVarSampOrderBy
  variance: EventApprovalStepNotifieesVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesArrRelInsertInput {
  data: [EventApprovalStepNotifieesInsertInput!]!

  """upsert condition"""
  onConflict: EventApprovalStepNotifieesOnConflict
}

"""aggregate avg on columns"""
type EventApprovalStepNotifieesAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by avg() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
Boolean expression to filter rows from the table
"event_approval_step_notifiees". All fields are combined with a logical 'AND'.
"""
input EventApprovalStepNotifieesBoolExp {
  _and: [EventApprovalStepNotifieesBoolExp!]
  _not: EventApprovalStepNotifieesBoolExp
  _or: [EventApprovalStepNotifieesBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

"""
unique or primary key constraints on table "event_approval_step_notifiees"
"""
enum EventApprovalStepNotifieesConstraint {
  """
  unique or primary key constraint on columns "event_approval_step_id", "individual_id"
  """
  event_approval_step_notifiees_pkey
}

"""
input type for incrementing numeric columns in table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
input type for inserting data into table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

"""aggregate max on columns"""
type EventApprovalStepNotifieesMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
order by max() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate min on columns"""
type EventApprovalStepNotifieesMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
order by min() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
response of any mutation on the table "event_approval_step_notifiees"
"""
type EventApprovalStepNotifieesMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventApprovalStepNotifiees!]!
}

"""
on_conflict condition type for table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesOnConflict {
  constraint: EventApprovalStepNotifieesConstraint!
  updateColumns: [EventApprovalStepNotifieesUpdateColumn!]! = []
  where: EventApprovalStepNotifieesBoolExp
}

"""
Ordering options when selecting data from "event_approval_step_notifiees".
"""
input EventApprovalStepNotifieesOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

"""primary key columns input for table: event_approval_step_notifiees"""
input EventApprovalStepNotifieesPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

"""
select columns of table "event_approval_step_notifiees"
"""
enum EventApprovalStepNotifieesSelectColumn {
  """column name"""
  eventApprovalStepId

  """column name"""
  individualId
}

"""
input type for updating data in table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""aggregate stddev on columns"""
type EventApprovalStepNotifieesStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by stddev() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventApprovalStepNotifieesStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by stddevPop() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventApprovalStepNotifieesStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by stddevSamp() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
Streaming cursor of the table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventApprovalStepNotifieesStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventApprovalStepNotifieesStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""aggregate sum on columns"""
type EventApprovalStepNotifieesSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
order by sum() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
update columns of table "event_approval_step_notifiees"
"""
enum EventApprovalStepNotifieesUpdateColumn {
  """column name"""
  eventApprovalStepId

  """column name"""
  individualId
}

input EventApprovalStepNotifieesUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventApprovalStepNotifieesIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventApprovalStepNotifieesSetInput

  """filter the rows which have to be updated"""
  where: EventApprovalStepNotifieesBoolExp!
}

"""aggregate variance on columns"""
type EventApprovalStepNotifieesVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by variance() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate varPop on columns"""
type EventApprovalStepNotifieesVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by varPop() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate varSamp on columns"""
type EventApprovalStepNotifieesVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by varSamp() on columns of table "event_approval_step_notifiees"
"""
input EventApprovalStepNotifieesVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
input type for inserting object relation for remote table "event_approval_step"
"""
input EventApprovalStepObjRelInsertInput {
  data: EventApprovalStepInsertInput!

  """upsert condition"""
  onConflict: EventApprovalStepOnConflict
}

"""
on_conflict condition type for table "event_approval_step"
"""
input EventApprovalStepOnConflict {
  constraint: EventApprovalStepConstraint!
  updateColumns: [EventApprovalStepUpdateColumn!]! = []
  where: EventApprovalStepBoolExp
}

"""Ordering options when selecting data from "event_approval_step"."""
input EventApprovalStepOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateOrderBy
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateOrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: event_approval_step"""
input EventApprovalStepPkColumnsInput {
  id: bigint!
}

"""
select columns of table "event_approval_step"
"""
enum EventApprovalStepSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  previousStepId

  """column name"""
  tenantId
}

"""
input type for updating data in table "event_approval_step"
"""
input EventApprovalStepSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type EventApprovalStepStddevFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "event_approval_step"
"""
input EventApprovalStepStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventApprovalStepStddevPopFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "event_approval_step"
"""
input EventApprovalStepStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventApprovalStepStddevSampFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "event_approval_step"
"""
input EventApprovalStepStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "event_approval_step"
"""
input EventApprovalStepStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventApprovalStepStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventApprovalStepStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type EventApprovalStepSumFields {
  createdById: bigint
  id: bigint
  previousStepId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "event_approval_step"
"""
input EventApprovalStepSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "event_approval_step"
"""
enum EventApprovalStepUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  previousStepId

  """column name"""
  tenantId
}

input EventApprovalStepUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventApprovalStepIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventApprovalStepSetInput

  """filter the rows which have to be updated"""
  where: EventApprovalStepBoolExp!
}

"""
columns and relationships of "event_approval_step_validators"
"""
type EventApprovalStepValidators {
  """An object relationship"""
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!

  """An object relationship"""
  individual: Individual!
  individualId: bigint!
}

"""
aggregated selection of "event_approval_step_validators"
"""
type EventApprovalStepValidatorsAggregate {
  aggregate: EventApprovalStepValidatorsAggregateFields
  nodes: [EventApprovalStepValidators!]!
}

input EventApprovalStepValidatorsAggregateBoolExp {
  count: eventApprovalStepValidatorsAggregateBoolExpCount
}

input eventApprovalStepValidatorsAggregateBoolExpCount {
  arguments: [EventApprovalStepValidatorsSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepValidatorsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_approval_step_validators"
"""
type EventApprovalStepValidatorsAggregateFields {
  avg: EventApprovalStepValidatorsAvgFields
  count(columns: [EventApprovalStepValidatorsSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepValidatorsMaxFields
  min: EventApprovalStepValidatorsMinFields
  stddev: EventApprovalStepValidatorsStddevFields
  stddevPop: EventApprovalStepValidatorsStddevPopFields
  stddevSamp: EventApprovalStepValidatorsStddevSampFields
  sum: EventApprovalStepValidatorsSumFields
  varPop: EventApprovalStepValidatorsVarPopFields
  varSamp: EventApprovalStepValidatorsVarSampFields
  variance: EventApprovalStepValidatorsVarianceFields
}

"""
order by aggregate values of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsAggregateOrderBy {
  avg: EventApprovalStepValidatorsAvgOrderBy
  count: OrderBy
  max: EventApprovalStepValidatorsMaxOrderBy
  min: EventApprovalStepValidatorsMinOrderBy
  stddev: EventApprovalStepValidatorsStddevOrderBy
  stddevPop: EventApprovalStepValidatorsStddevPopOrderBy
  stddevSamp: EventApprovalStepValidatorsStddevSampOrderBy
  sum: EventApprovalStepValidatorsSumOrderBy
  varPop: EventApprovalStepValidatorsVarPopOrderBy
  varSamp: EventApprovalStepValidatorsVarSampOrderBy
  variance: EventApprovalStepValidatorsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsArrRelInsertInput {
  data: [EventApprovalStepValidatorsInsertInput!]!

  """upsert condition"""
  onConflict: EventApprovalStepValidatorsOnConflict
}

"""aggregate avg on columns"""
type EventApprovalStepValidatorsAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by avg() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
Boolean expression to filter rows from the table
"event_approval_step_validators". All fields are combined with a logical 'AND'.
"""
input EventApprovalStepValidatorsBoolExp {
  _and: [EventApprovalStepValidatorsBoolExp!]
  _not: EventApprovalStepValidatorsBoolExp
  _or: [EventApprovalStepValidatorsBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

"""
unique or primary key constraints on table "event_approval_step_validators"
"""
enum EventApprovalStepValidatorsConstraint {
  """
  unique or primary key constraint on columns "event_approval_step_id", "individual_id"
  """
  event_approval_step_validators_pkey
}

"""
input type for incrementing numeric columns in table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
input type for inserting data into table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

"""aggregate max on columns"""
type EventApprovalStepValidatorsMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
order by max() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate min on columns"""
type EventApprovalStepValidatorsMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
order by min() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
response of any mutation on the table "event_approval_step_validators"
"""
type EventApprovalStepValidatorsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventApprovalStepValidators!]!
}

"""
on_conflict condition type for table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsOnConflict {
  constraint: EventApprovalStepValidatorsConstraint!
  updateColumns: [EventApprovalStepValidatorsUpdateColumn!]! = []
  where: EventApprovalStepValidatorsBoolExp
}

"""
Ordering options when selecting data from "event_approval_step_validators".
"""
input EventApprovalStepValidatorsOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

"""primary key columns input for table: event_approval_step_validators"""
input EventApprovalStepValidatorsPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

"""
select columns of table "event_approval_step_validators"
"""
enum EventApprovalStepValidatorsSelectColumn {
  """column name"""
  eventApprovalStepId

  """column name"""
  individualId
}

"""
input type for updating data in table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""aggregate stddev on columns"""
type EventApprovalStepValidatorsStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by stddev() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventApprovalStepValidatorsStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by stddevPop() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventApprovalStepValidatorsStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by stddevSamp() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
Streaming cursor of the table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventApprovalStepValidatorsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventApprovalStepValidatorsStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""aggregate sum on columns"""
type EventApprovalStepValidatorsSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

"""
order by sum() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""
update columns of table "event_approval_step_validators"
"""
enum EventApprovalStepValidatorsUpdateColumn {
  """column name"""
  eventApprovalStepId

  """column name"""
  individualId
}

input EventApprovalStepValidatorsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventApprovalStepValidatorsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventApprovalStepValidatorsSetInput

  """filter the rows which have to be updated"""
  where: EventApprovalStepValidatorsBoolExp!
}

"""aggregate variance on columns"""
type EventApprovalStepValidatorsVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by variance() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate varPop on columns"""
type EventApprovalStepValidatorsVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by varPop() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate varSamp on columns"""
type EventApprovalStepValidatorsVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

"""
order by varSamp() on columns of table "event_approval_step_validators"
"""
input EventApprovalStepValidatorsVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

"""aggregate variance on columns"""
type EventApprovalStepVarianceFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "event_approval_step"
"""
input EventApprovalStepVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type EventApprovalStepVarPopFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "event_approval_step"
"""
input EventApprovalStepVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type EventApprovalStepVarSampFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "event_approval_step"
"""
input EventApprovalStepVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "event_approval"
"""
input EventApprovalStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventApprovalStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventApprovalStreamCursorValueInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type EventApprovalSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  stepId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "event_approval"
"""
input EventApprovalSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "event_approval"
"""
enum EventApprovalUpdateColumn {
  """column name"""
  approved

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  message

  """column name"""
  stepId

  """column name"""
  tenantId
}

input EventApprovalUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventApprovalIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventApprovalSetInput

  """filter the rows which have to be updated"""
  where: EventApprovalBoolExp!
}

"""aggregate variance on columns"""
type EventApprovalVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "event_approval"
"""
input EventApprovalVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type EventApprovalVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "event_approval"
"""
input EventApprovalVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type EventApprovalVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "event_approval"
"""
input EventApprovalVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

"""
input type for inserting array relation for remote table "event"
"""
input EventArrRelInsertInput {
  data: [EventInsertInput!]!

  """upsert condition"""
  onConflict: EventOnConflict
}

"""
columns and relationships of "event_attendance"
"""
type EventAttendance {
  confirmedVia: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  eventJoin: EventJoin!
  eventJoinId: bigint!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  participated: Boolean!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "event_attendance"
"""
type EventAttendanceAggregate {
  aggregate: EventAttendanceAggregateFields
  nodes: [EventAttendance!]!
}

input EventAttendanceAggregateBoolExp {
  bool_and: eventAttendanceAggregateBoolExpBool_and
  bool_or: eventAttendanceAggregateBoolExpBool_or
  count: eventAttendanceAggregateBoolExpCount
}

input eventAttendanceAggregateBoolExpBool_and {
  arguments: EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventAttendanceBoolExp
  predicate: BooleanComparisonExp!
}

input eventAttendanceAggregateBoolExpBool_or {
  arguments: EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventAttendanceBoolExp
  predicate: BooleanComparisonExp!
}

input eventAttendanceAggregateBoolExpCount {
  arguments: [EventAttendanceSelectColumn!]
  distinct: Boolean
  filter: EventAttendanceBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_attendance"
"""
type EventAttendanceAggregateFields {
  avg: EventAttendanceAvgFields
  count(columns: [EventAttendanceSelectColumn!], distinct: Boolean): Int!
  max: EventAttendanceMaxFields
  min: EventAttendanceMinFields
  stddev: EventAttendanceStddevFields
  stddevPop: EventAttendanceStddevPopFields
  stddevSamp: EventAttendanceStddevSampFields
  sum: EventAttendanceSumFields
  varPop: EventAttendanceVarPopFields
  varSamp: EventAttendanceVarSampFields
  variance: EventAttendanceVarianceFields
}

"""
order by aggregate values of table "event_attendance"
"""
input EventAttendanceAggregateOrderBy {
  avg: EventAttendanceAvgOrderBy
  count: OrderBy
  max: EventAttendanceMaxOrderBy
  min: EventAttendanceMinOrderBy
  stddev: EventAttendanceStddevOrderBy
  stddevPop: EventAttendanceStddevPopOrderBy
  stddevSamp: EventAttendanceStddevSampOrderBy
  sum: EventAttendanceSumOrderBy
  varPop: EventAttendanceVarPopOrderBy
  varSamp: EventAttendanceVarSampOrderBy
  variance: EventAttendanceVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_attendance"
"""
input EventAttendanceArrRelInsertInput {
  data: [EventAttendanceInsertInput!]!

  """upsert condition"""
  onConflict: EventAttendanceOnConflict
}

"""aggregate avg on columns"""
type EventAttendanceAvgFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "event_attendance"
"""
input EventAttendanceAvgOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "event_attendance". All fields are combined with a logical 'AND'.
"""
input EventAttendanceBoolExp {
  _and: [EventAttendanceBoolExp!]
  _not: EventAttendanceBoolExp
  _or: [EventAttendanceBoolExp!]
  confirmedVia: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  participated: BooleanComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "event_attendance"
"""
enum EventAttendanceConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  event_attendance_pkey
}

"""
input type for incrementing numeric columns in table "event_attendance"
"""
input EventAttendanceIncInput {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "event_attendance"
"""
input EventAttendanceInsertInput {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  participated: Boolean
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type EventAttendanceMaxFields {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "event_attendance"
"""
input EventAttendanceMaxOrderBy {
  confirmedVia: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type EventAttendanceMinFields {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "event_attendance"
"""
input EventAttendanceMinOrderBy {
  confirmedVia: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "event_attendance"
"""
type EventAttendanceMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventAttendance!]!
}

"""
on_conflict condition type for table "event_attendance"
"""
input EventAttendanceOnConflict {
  constraint: EventAttendanceConstraint!
  updateColumns: [EventAttendanceUpdateColumn!]! = []
  where: EventAttendanceBoolExp
}

"""Ordering options when selecting data from "event_attendance"."""
input EventAttendanceOrderBy {
  confirmedVia: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  participated: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: event_attendance"""
input EventAttendancePkColumnsInput {
  id: bigint!
}

"""
select columns of table "event_attendance"
"""
enum EventAttendanceSelectColumn {
  """column name"""
  confirmedVia

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventJoinId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  participated

  """column name"""
  tenantId
}

"""
select "eventAttendanceAggregateBoolExpBool_andArgumentsColumns" columns of table "event_attendance"
"""
enum EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  participated
}

"""
select "eventAttendanceAggregateBoolExpBool_orArgumentsColumns" columns of table "event_attendance"
"""
enum EventAttendanceSelectColumnEventAttendanceAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  participated
}

"""
input type for updating data in table "event_attendance"
"""
input EventAttendanceSetInput {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  participated: Boolean
  tenantId: bigint
}

"""aggregate stddev on columns"""
type EventAttendanceStddevFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "event_attendance"
"""
input EventAttendanceStddevOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventAttendanceStddevPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "event_attendance"
"""
input EventAttendanceStddevPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventAttendanceStddevSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "event_attendance"
"""
input EventAttendanceStddevSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "event_attendance"
"""
input EventAttendanceStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventAttendanceStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventAttendanceStreamCursorValueInput {
  confirmedVia: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  participated: Boolean
  tenantId: bigint
}

"""aggregate sum on columns"""
type EventAttendanceSumFields {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "event_attendance"
"""
input EventAttendanceSumOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "event_attendance"
"""
enum EventAttendanceUpdateColumn {
  """column name"""
  confirmedVia

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventJoinId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  participated

  """column name"""
  tenantId
}

input EventAttendanceUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventAttendanceIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventAttendanceSetInput

  """filter the rows which have to be updated"""
  where: EventAttendanceBoolExp!
}

"""aggregate variance on columns"""
type EventAttendanceVarianceFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "event_attendance"
"""
input EventAttendanceVarianceOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type EventAttendanceVarPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "event_attendance"
"""
input EventAttendanceVarPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type EventAttendanceVarSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "event_attendance"
"""
input EventAttendanceVarSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate avg on columns"""
type EventAvgFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  regularEventId: Float
  supervisorId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "event"
"""
input EventAvgOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
"""
input EventBoolExp {
  _and: [EventBoolExp!]
  _not: EventBoolExp
  _or: [EventBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  approvalSubmissionId: BigintComparisonExp
  autoAcceptJoins: BooleanComparisonExp
  budget: FloatComparisonExp
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  end: TimestamptzComparisonExp
  event: EventBoolExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  fileUpload: FileUploadBoolExp
  form: FormBoolExp
  formSubmission: FormSubmissionBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  isPrivate: BooleanComparisonExp
  joinFormId: BigintComparisonExp
  lastEventApprovalStepId: BigintComparisonExp
  meta: JsonbComparisonExp
  presenceReward: FloatComparisonExp
  price: FloatComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  regularEventId: BigintComparisonExp
  regularEventInterval: StringComparisonExp
  start: TimestamptzComparisonExp
  state: StringComparisonExp
  supervisorId: BigintComparisonExp
  teamEvents: TeamEventsBoolExp
  teamEventsAggregate: TeamEventsAggregateBoolExp
  teamFinanceEdits: TeamFinanceEditBoolExp
  teamFinanceEditsAggregate: TeamFinanceEditAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
columns and relationships of "event_change_role"
"""
type EventChangeRole {
  accepted: Boolean!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  eventJoin: EventJoin

  """An object relationship"""
  eventRole: EventRole
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  note: String!
  receivedRoleId: bigint

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "event_change_role"
"""
type EventChangeRoleAggregate {
  aggregate: EventChangeRoleAggregateFields
  nodes: [EventChangeRole!]!
}

input EventChangeRoleAggregateBoolExp {
  bool_and: eventChangeRoleAggregateBoolExpBool_and
  bool_or: eventChangeRoleAggregateBoolExpBool_or
  count: eventChangeRoleAggregateBoolExpCount
}

input eventChangeRoleAggregateBoolExpBool_and {
  arguments: EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventChangeRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventChangeRoleAggregateBoolExpBool_or {
  arguments: EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventChangeRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventChangeRoleAggregateBoolExpCount {
  arguments: [EventChangeRoleSelectColumn!]
  distinct: Boolean
  filter: EventChangeRoleBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_change_role"
"""
type EventChangeRoleAggregateFields {
  avg: EventChangeRoleAvgFields
  count(columns: [EventChangeRoleSelectColumn!], distinct: Boolean): Int!
  max: EventChangeRoleMaxFields
  min: EventChangeRoleMinFields
  stddev: EventChangeRoleStddevFields
  stddevPop: EventChangeRoleStddevPopFields
  stddevSamp: EventChangeRoleStddevSampFields
  sum: EventChangeRoleSumFields
  varPop: EventChangeRoleVarPopFields
  varSamp: EventChangeRoleVarSampFields
  variance: EventChangeRoleVarianceFields
}

"""
order by aggregate values of table "event_change_role"
"""
input EventChangeRoleAggregateOrderBy {
  avg: EventChangeRoleAvgOrderBy
  count: OrderBy
  max: EventChangeRoleMaxOrderBy
  min: EventChangeRoleMinOrderBy
  stddev: EventChangeRoleStddevOrderBy
  stddevPop: EventChangeRoleStddevPopOrderBy
  stddevSamp: EventChangeRoleStddevSampOrderBy
  sum: EventChangeRoleSumOrderBy
  varPop: EventChangeRoleVarPopOrderBy
  varSamp: EventChangeRoleVarSampOrderBy
  variance: EventChangeRoleVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_change_role"
"""
input EventChangeRoleArrRelInsertInput {
  data: [EventChangeRoleInsertInput!]!

  """upsert condition"""
  onConflict: EventChangeRoleOnConflict
}

"""aggregate avg on columns"""
type EventChangeRoleAvgFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "event_change_role"
"""
input EventChangeRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "event_change_role". All fields are combined with a logical 'AND'.
"""
input EventChangeRoleBoolExp {
  _and: [EventChangeRoleBoolExp!]
  _not: EventChangeRoleBoolExp
  _or: [EventChangeRoleBoolExp!]
  accepted: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoin: EventJoinBoolExp
  eventRole: EventRoleBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  note: StringComparisonExp
  receivedRoleId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "event_change_role"
"""
enum EventChangeRoleConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  event_change_role_pkey
}

"""
input type for incrementing numeric columns in table "event_change_role"
"""
input EventChangeRoleIncInput {
  createdById: bigint
  id: bigint
  receivedRoleId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "event_change_role"
"""
input EventChangeRoleInsertInput {
  accepted: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoinObjRelInsertInput
  eventRole: EventRoleObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  note: String
  receivedRoleId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type EventChangeRoleMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "event_change_role"
"""
input EventChangeRoleMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type EventChangeRoleMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "event_change_role"
"""
input EventChangeRoleMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  note: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "event_change_role"
"""
type EventChangeRoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventChangeRole!]!
}

"""
input type for inserting object relation for remote table "event_change_role"
"""
input EventChangeRoleObjRelInsertInput {
  data: EventChangeRoleInsertInput!

  """upsert condition"""
  onConflict: EventChangeRoleOnConflict
}

"""
on_conflict condition type for table "event_change_role"
"""
input EventChangeRoleOnConflict {
  constraint: EventChangeRoleConstraint!
  updateColumns: [EventChangeRoleUpdateColumn!]! = []
  where: EventChangeRoleBoolExp
}

"""Ordering options when selecting data from "event_change_role"."""
input EventChangeRoleOrderBy {
  accepted: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoin: EventJoinOrderBy
  eventRole: EventRoleOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  note: OrderBy
  receivedRoleId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: event_change_role"""
input EventChangeRolePkColumnsInput {
  id: bigint!
}

"""
select columns of table "event_change_role"
"""
enum EventChangeRoleSelectColumn {
  """column name"""
  accepted

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  note

  """column name"""
  receivedRoleId

  """column name"""
  tenantId
}

"""
select "eventChangeRoleAggregateBoolExpBool_andArgumentsColumns" columns of table "event_change_role"
"""
enum EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  accepted
}

"""
select "eventChangeRoleAggregateBoolExpBool_orArgumentsColumns" columns of table "event_change_role"
"""
enum EventChangeRoleSelectColumnEventChangeRoleAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  accepted
}

"""
input type for updating data in table "event_change_role"
"""
input EventChangeRoleSetInput {
  accepted: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type EventChangeRoleStddevFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "event_change_role"
"""
input EventChangeRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventChangeRoleStddevPopFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "event_change_role"
"""
input EventChangeRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventChangeRoleStddevSampFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "event_change_role"
"""
input EventChangeRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "event_change_role"
"""
input EventChangeRoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventChangeRoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventChangeRoleStreamCursorValueInput {
  accepted: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  note: String
  receivedRoleId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type EventChangeRoleSumFields {
  createdById: bigint
  id: bigint
  receivedRoleId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "event_change_role"
"""
input EventChangeRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "event_change_role"
"""
enum EventChangeRoleUpdateColumn {
  """column name"""
  accepted

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  note

  """column name"""
  receivedRoleId

  """column name"""
  tenantId
}

input EventChangeRoleUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventChangeRoleIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventChangeRoleSetInput

  """filter the rows which have to be updated"""
  where: EventChangeRoleBoolExp!
}

"""aggregate variance on columns"""
type EventChangeRoleVarianceFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "event_change_role"
"""
input EventChangeRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type EventChangeRoleVarPopFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "event_change_role"
"""
input EventChangeRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type EventChangeRoleVarSampFields {
  createdById: Float
  id: Float
  receivedRoleId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "event_change_role"
"""
input EventChangeRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  receivedRoleId: OrderBy
  tenantId: OrderBy
}

"""
unique or primary key constraints on table "event"
"""
enum EventConstraint {
  """
  unique or primary key constraint on columns "approval_submission_id"
  """
  event_approval_submission_id_unique

  """
  unique or primary key constraint on columns "content_master_id"
  """
  event_content_master_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  event_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input EventDeleteAtPathInput {
  meta: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input EventDeleteElemInput {
  meta: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input EventDeleteKeyInput {
  meta: String
}

"""
input type for incrementing numeric columns in table "event"
"""
input EventIncInput {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  presenceReward: Float
  price: Float
  projectId: bigint
  regularEventId: bigint
  supervisorId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "event"
"""
input EventInsertInput {
  actions: ActionArrRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  budget: Float
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  event: EventObjRelInsertInput
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  eventTags: EventTagsArrRelInsertInput
  events: EventArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  form: FormObjRelInsertInput
  formSubmission: FormSubmissionObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  isPrivate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta: jsonb
  presenceReward: Float
  price: Float
  project: ProjectObjRelInsertInput
  projectId: bigint
  regularEventId: bigint
  regularEventInterval: String
  start: timestamptz
  state: String
  supervisorId: bigint
  teamEvents: TeamEventsArrRelInsertInput
  teamFinanceEdits: TeamFinanceEditArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""
columns and relationships of "event_join"
"""
type EventJoin {
  """An object relationship"""
  action: Action
  actionId: bigint

  """An array relationship"""
  actions(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!
  attendanceStatus: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  event: Event!

  """An array relationship"""
  eventAttendances(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): [EventAttendance!]!

  """An aggregate relationship"""
  eventAttendancesAggregate(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): EventAttendanceAggregate!

  """An object relationship"""
  eventChangeRole: EventChangeRole
  eventChangeRoleId: bigint
  eventId: bigint!

  """An object relationship"""
  eventRole: EventRole
  eventRoleId: bigint

  """An object relationship"""
  fileUpload: FileUpload

  """An object relationship"""
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  joinerId: bigint!
  participated: Boolean
  qrCodeId: bigint
  state: String!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "event_join"
"""
type EventJoinAggregate {
  aggregate: EventJoinAggregateFields
  nodes: [EventJoin!]!
}

input EventJoinAggregateBoolExp {
  bool_and: eventJoinAggregateBoolExpBool_and
  bool_or: eventJoinAggregateBoolExpBool_or
  count: eventJoinAggregateBoolExpCount
}

input eventJoinAggregateBoolExpBool_and {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpBool_or {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpCount {
  arguments: [EventJoinSelectColumn!]
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_join"
"""
type EventJoinAggregateFields {
  avg: EventJoinAvgFields
  count(columns: [EventJoinSelectColumn!], distinct: Boolean): Int!
  max: EventJoinMaxFields
  min: EventJoinMinFields
  stddev: EventJoinStddevFields
  stddevPop: EventJoinStddevPopFields
  stddevSamp: EventJoinStddevSampFields
  sum: EventJoinSumFields
  varPop: EventJoinVarPopFields
  varSamp: EventJoinVarSampFields
  variance: EventJoinVarianceFields
}

"""
order by aggregate values of table "event_join"
"""
input EventJoinAggregateOrderBy {
  avg: EventJoinAvgOrderBy
  count: OrderBy
  max: EventJoinMaxOrderBy
  min: EventJoinMinOrderBy
  stddev: EventJoinStddevOrderBy
  stddevPop: EventJoinStddevPopOrderBy
  stddevSamp: EventJoinStddevSampOrderBy
  sum: EventJoinSumOrderBy
  varPop: EventJoinVarPopOrderBy
  varSamp: EventJoinVarSampOrderBy
  variance: EventJoinVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_join"
"""
input EventJoinArrRelInsertInput {
  data: [EventJoinInsertInput!]!

  """upsert condition"""
  onConflict: EventJoinOnConflict
}

"""aggregate avg on columns"""
type EventJoinAvgFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "event_join"
"""
input EventJoinAvgOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "event_join". All fields are combined with a logical 'AND'.
"""
input EventJoinBoolExp {
  _and: [EventJoinBoolExp!]
  _not: EventJoinBoolExp
  _or: [EventJoinBoolExp!]
  action: ActionBoolExp
  actionId: BigintComparisonExp
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  attendanceStatus: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventAttendances: EventAttendanceBoolExp
  eventAttendancesAggregate: EventAttendanceAggregateBoolExp
  eventChangeRole: EventChangeRoleBoolExp
  eventChangeRoleId: BigintComparisonExp
  eventId: BigintComparisonExp
  eventRole: EventRoleBoolExp
  eventRoleId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  joinerId: BigintComparisonExp
  participated: BooleanComparisonExp
  qrCodeId: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "event_join"
"""
enum EventJoinConstraint {
  """
  unique or primary key constraint on columns "event_change_role_id"
  """
  event_join_event_change_role_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  event_join_pkey
}

"""
input type for incrementing numeric columns in table "event_join"
"""
input EventJoinIncInput {
  actionId: bigint
  createdById: bigint
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "event_join"
"""
input EventJoinInsertInput {
  action: ActionObjRelInsertInput
  actionId: bigint
  actions: ActionArrRelInsertInput
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventAttendances: EventAttendanceArrRelInsertInput
  eventChangeRole: EventChangeRoleObjRelInsertInput
  eventChangeRoleId: bigint
  eventId: bigint
  eventRole: EventRoleObjRelInsertInput
  eventRoleId: bigint
  fileUpload: FileUploadObjRelInsertInput
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  joinerId: bigint
  participated: Boolean
  qrCodeId: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type EventJoinMaxFields {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

"""
order by max() on columns of table "event_join"
"""
input EventJoinMaxOrderBy {
  actionId: OrderBy
  attendanceStatus: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type EventJoinMinFields {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

"""
order by min() on columns of table "event_join"
"""
input EventJoinMinOrderBy {
  actionId: OrderBy
  attendanceStatus: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "event_join"
"""
type EventJoinMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventJoin!]!
}

"""
input type for inserting object relation for remote table "event_join"
"""
input EventJoinObjRelInsertInput {
  data: EventJoinInsertInput!

  """upsert condition"""
  onConflict: EventJoinOnConflict
}

"""
on_conflict condition type for table "event_join"
"""
input EventJoinOnConflict {
  constraint: EventJoinConstraint!
  updateColumns: [EventJoinUpdateColumn!]! = []
  where: EventJoinBoolExp
}

"""Ordering options when selecting data from "event_join"."""
input EventJoinOrderBy {
  action: ActionOrderBy
  actionId: OrderBy
  actionsAggregate: ActionAggregateOrderBy
  attendanceStatus: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventAttendancesAggregate: EventAttendanceAggregateOrderBy
  eventChangeRole: EventChangeRoleOrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRole: EventRoleOrderBy
  eventRoleId: OrderBy
  fileUpload: FileUploadOrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  joinerId: OrderBy
  participated: OrderBy
  qrCodeId: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: event_join"""
input EventJoinPkColumnsInput {
  id: bigint!
}

"""
select columns of table "event_join"
"""
enum EventJoinSelectColumn {
  """column name"""
  actionId

  """column name"""
  attendanceStatus

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventChangeRoleId

  """column name"""
  eventId

  """column name"""
  eventRoleId

  """column name"""
  formSubmissionId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  joinerId

  """column name"""
  participated

  """column name"""
  qrCodeId

  """column name"""
  state

  """column name"""
  tenantId
}

"""
select "eventJoinAggregateBoolExpBool_andArgumentsColumns" columns of table "event_join"
"""
enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  participated
}

"""
select "eventJoinAggregateBoolExpBool_orArgumentsColumns" columns of table "event_join"
"""
enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  participated
}

"""
input type for updating data in table "event_join"
"""
input EventJoinSetInput {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  participated: Boolean
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

"""aggregate stddev on columns"""
type EventJoinStddevFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "event_join"
"""
input EventJoinStddevOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventJoinStddevPopFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "event_join"
"""
input EventJoinStddevPopOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventJoinStddevSampFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "event_join"
"""
input EventJoinStddevSampOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "event_join"
"""
input EventJoinStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventJoinStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventJoinStreamCursorValueInput {
  actionId: bigint
  attendanceStatus: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  participated: Boolean
  qrCodeId: bigint
  state: String
  tenantId: bigint
}

"""aggregate sum on columns"""
type EventJoinSumFields {
  actionId: bigint
  createdById: bigint
  eventChangeRoleId: bigint
  eventId: bigint
  eventRoleId: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  qrCodeId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "event_join"
"""
input EventJoinSumOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "event_join"
"""
enum EventJoinUpdateColumn {
  """column name"""
  actionId

  """column name"""
  attendanceStatus

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  eventChangeRoleId

  """column name"""
  eventId

  """column name"""
  eventRoleId

  """column name"""
  formSubmissionId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  joinerId

  """column name"""
  participated

  """column name"""
  qrCodeId

  """column name"""
  state

  """column name"""
  tenantId
}

input EventJoinUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventJoinIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventJoinSetInput

  """filter the rows which have to be updated"""
  where: EventJoinBoolExp!
}

"""aggregate variance on columns"""
type EventJoinVarianceFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "event_join"
"""
input EventJoinVarianceOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type EventJoinVarPopFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "event_join"
"""
input EventJoinVarPopOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type EventJoinVarSampFields {
  actionId: Float
  createdById: Float
  eventChangeRoleId: Float
  eventId: Float
  eventRoleId: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  qrCodeId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "event_join"
"""
input EventJoinVarSampOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventChangeRoleId: OrderBy
  eventId: OrderBy
  eventRoleId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  qrCodeId: OrderBy
  tenantId: OrderBy
}

"""aggregate max on columns"""
type EventMaxFields {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  presenceReward: Float
  price: Float
  projectId: bigint
  regularEventId: bigint
  regularEventInterval: String
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "event"
"""
input EventMaxOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  regularEventInterval: OrderBy
  start: OrderBy
  state: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type EventMinFields {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  presenceReward: Float
  price: Float
  projectId: bigint
  regularEventId: bigint
  regularEventInterval: String
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "event"
"""
input EventMinOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  regularEventInterval: OrderBy
  start: OrderBy
  state: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "event"
"""
type EventMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Event!]!
}

"""
input type for inserting object relation for remote table "event"
"""
input EventObjRelInsertInput {
  data: EventInsertInput!

  """upsert condition"""
  onConflict: EventOnConflict
}

"""
on_conflict condition type for table "event"
"""
input EventOnConflict {
  constraint: EventConstraint!
  updateColumns: [EventUpdateColumn!]! = []
  where: EventBoolExp
}

"""Ordering options when selecting data from "event"."""
input EventOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  autoAcceptJoins: OrderBy
  budget: OrderBy
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  event: EventOrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  fileUpload: FileUploadOrderBy
  form: FormOrderBy
  formSubmission: FormSubmissionOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  isPrivate: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  meta: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  regularEventInterval: OrderBy
  start: OrderBy
  state: OrderBy
  supervisorId: OrderBy
  teamEventsAggregate: TeamEventsAggregateOrderBy
  teamFinanceEditsAggregate: TeamFinanceEditAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: event"""
input EventPkColumnsInput {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input EventPrependInput {
  meta: jsonb
}

"""
columns and relationships of "event_role"
"""
type EventRole {
  autoAccept: Boolean!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  """An object relationship"""
  event: Event!

  """An array relationship"""
  eventChangeRoles(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): [EventChangeRole!]!

  """An aggregate relationship"""
  eventChangeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): EventChangeRoleAggregate!
  eventId: bigint!

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  name: String!

  """An object relationship"""
  projectRole: ProjectRole!
  projectRoleId: bigint!
  required: Boolean!
  rewardMaximum: smallint
  rewardMinimum: smallint

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint

  """An object relationship"""
  userInfo: UserInfo
}

"""
aggregated selection of "event_role"
"""
type EventRoleAggregate {
  aggregate: EventRoleAggregateFields
  nodes: [EventRole!]!
}

input EventRoleAggregateBoolExp {
  bool_and: eventRoleAggregateBoolExpBool_and
  bool_or: eventRoleAggregateBoolExpBool_or
  count: eventRoleAggregateBoolExpCount
}

input eventRoleAggregateBoolExpBool_and {
  arguments: EventRoleSelectColumnEventRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventRoleAggregateBoolExpBool_or {
  arguments: EventRoleSelectColumnEventRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventRoleBoolExp
  predicate: BooleanComparisonExp!
}

input eventRoleAggregateBoolExpCount {
  arguments: [EventRoleSelectColumn!]
  distinct: Boolean
  filter: EventRoleBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_role"
"""
type EventRoleAggregateFields {
  avg: EventRoleAvgFields
  count(columns: [EventRoleSelectColumn!], distinct: Boolean): Int!
  max: EventRoleMaxFields
  min: EventRoleMinFields
  stddev: EventRoleStddevFields
  stddevPop: EventRoleStddevPopFields
  stddevSamp: EventRoleStddevSampFields
  sum: EventRoleSumFields
  varPop: EventRoleVarPopFields
  varSamp: EventRoleVarSampFields
  variance: EventRoleVarianceFields
}

"""
order by aggregate values of table "event_role"
"""
input EventRoleAggregateOrderBy {
  avg: EventRoleAvgOrderBy
  count: OrderBy
  max: EventRoleMaxOrderBy
  min: EventRoleMinOrderBy
  stddev: EventRoleStddevOrderBy
  stddevPop: EventRoleStddevPopOrderBy
  stddevSamp: EventRoleStddevSampOrderBy
  sum: EventRoleSumOrderBy
  varPop: EventRoleVarPopOrderBy
  varSamp: EventRoleVarSampOrderBy
  variance: EventRoleVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_role"
"""
input EventRoleArrRelInsertInput {
  data: [EventRoleInsertInput!]!

  """upsert condition"""
  onConflict: EventRoleOnConflict
}

"""aggregate avg on columns"""
type EventRoleAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

"""
order by avg() on columns of table "event_role"
"""
input EventRoleAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to filter rows from the table "event_role". All fields are combined with a logical 'AND'.
"""
input EventRoleBoolExp {
  _and: [EventRoleBoolExp!]
  _not: EventRoleBoolExp
  _or: [EventRoleBoolExp!]
  autoAccept: BooleanComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventChangeRoles: EventChangeRoleBoolExp
  eventChangeRolesAggregate: EventChangeRoleAggregateBoolExp
  eventId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  projectRole: ProjectRoleBoolExp
  projectRoleId: BigintComparisonExp
  required: BooleanComparisonExp
  rewardMaximum: SmallintComparisonExp
  rewardMinimum: SmallintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "event_role"
"""
enum EventRoleConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  event_role_pkey
}

"""
input type for incrementing numeric columns in table "event_role"
"""
input EventRoleIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

"""
input type for inserting data into table "event_role"
"""
input EventRoleInsertInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventChangeRoles: EventChangeRoleArrRelInsertInput
  eventId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  projectRole: ProjectRoleObjRelInsertInput
  projectRoleId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type EventRoleMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

"""
order by max() on columns of table "event_role"
"""
input EventRoleMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate min on columns"""
type EventRoleMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

"""
order by min() on columns of table "event_role"
"""
input EventRoleMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
response of any mutation on the table "event_role"
"""
type EventRoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventRole!]!
}

"""
input type for inserting object relation for remote table "event_role"
"""
input EventRoleObjRelInsertInput {
  data: EventRoleInsertInput!

  """upsert condition"""
  onConflict: EventRoleOnConflict
}

"""
on_conflict condition type for table "event_role"
"""
input EventRoleOnConflict {
  constraint: EventRoleConstraint!
  updateColumns: [EventRoleUpdateColumn!]! = []
  where: EventRoleBoolExp
}

"""Ordering options when selecting data from "event_role"."""
input EventRoleOrderBy {
  autoAccept: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventChangeRolesAggregate: EventChangeRoleAggregateOrderBy
  eventId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  projectRole: ProjectRoleOrderBy
  projectRoleId: OrderBy
  required: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: event_role"""
input EventRolePkColumnsInput {
  id: bigint!
}

"""
select columns of table "event_role"
"""
enum EventRoleSelectColumn {
  """column name"""
  autoAccept

  """column name"""
  color

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  eventId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  projectRoleId

  """column name"""
  required

  """column name"""
  rewardMaximum

  """column name"""
  rewardMinimum

  """column name"""
  tenantId

  """column name"""
  userId
}

"""
select "eventRoleAggregateBoolExpBool_andArgumentsColumns" columns of table "event_role"
"""
enum EventRoleSelectColumnEventRoleAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  autoAccept

  """column name"""
  required
}

"""
select "eventRoleAggregateBoolExpBool_orArgumentsColumns" columns of table "event_role"
"""
enum EventRoleSelectColumnEventRoleAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  autoAccept

  """column name"""
  required
}

"""
input type for updating data in table "event_role"
"""
input EventRoleSetInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

"""aggregate stddev on columns"""
type EventRoleStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

"""
order by stddev() on columns of table "event_role"
"""
input EventRoleStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventRoleStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevPop() on columns of table "event_role"
"""
input EventRoleStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventRoleStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevSamp() on columns of table "event_role"
"""
input EventRoleStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "event_role"
"""
input EventRoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventRoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventRoleStreamCursorValueInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectRoleId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

"""aggregate sum on columns"""
type EventRoleSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  projectRoleId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
  userId: bigint
}

"""
order by sum() on columns of table "event_role"
"""
input EventRoleSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "event_role"
"""
enum EventRoleUpdateColumn {
  """column name"""
  autoAccept

  """column name"""
  color

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  eventId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  projectRoleId

  """column name"""
  required

  """column name"""
  rewardMaximum

  """column name"""
  rewardMinimum

  """column name"""
  tenantId

  """column name"""
  userId
}

input EventRoleUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventRoleIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventRoleSetInput

  """filter the rows which have to be updated"""
  where: EventRoleBoolExp!
}

"""aggregate variance on columns"""
type EventRoleVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

"""
order by variance() on columns of table "event_role"
"""
input EventRoleVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varPop on columns"""
type EventRoleVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

"""
order by varPop() on columns of table "event_role"
"""
input EventRoleVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varSamp on columns"""
type EventRoleVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  projectRoleId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
  userId: Float
}

"""
order by varSamp() on columns of table "event_role"
"""
input EventRoleVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  projectRoleId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
select columns of table "event"
"""
enum EventSelectColumn {
  """column name"""
  addressId

  """column name"""
  approvalSubmissionId

  """column name"""
  autoAcceptJoins

  """column name"""
  budget

  """column name"""
  contentMasterId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  end

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  isPrivate

  """column name"""
  joinFormId

  """column name"""
  lastEventApprovalStepId

  """column name"""
  meta

  """column name"""
  presenceReward

  """column name"""
  price

  """column name"""
  projectId

  """column name"""
  regularEventId

  """column name"""
  regularEventInterval

  """column name"""
  start

  """column name"""
  state

  """column name"""
  supervisorId

  """column name"""
  tenantId
}

"""
select "eventAggregateBoolExpBool_andArgumentsColumns" columns of table "event"
"""
enum EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  autoAcceptJoins

  """column name"""
  isPrivate
}

"""
select "eventAggregateBoolExpBool_orArgumentsColumns" columns of table "event"
"""
enum EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  autoAcceptJoins

  """column name"""
  isPrivate
}

"""
input type for updating data in table "event"
"""
input EventSetInput {
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta: jsonb
  presenceReward: Float
  price: Float
  projectId: bigint
  regularEventId: bigint
  regularEventInterval: String
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type EventStddevFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  regularEventId: Float
  supervisorId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "event"
"""
input EventStddevOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventStddevPopFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  regularEventId: Float
  supervisorId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "event"
"""
input EventStddevPopOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventStddevSampFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  regularEventId: Float
  supervisorId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "event"
"""
input EventStddevSampOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "event"
"""
input EventStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventStreamCursorValueInput {
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  budget: Float
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  meta: jsonb
  presenceReward: Float
  price: Float
  projectId: bigint
  regularEventId: bigint
  regularEventInterval: String
  start: timestamptz
  state: String
  supervisorId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type EventSumFields {
  addressId: bigint
  approvalSubmissionId: bigint
  budget: Float
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  presenceReward: Float
  price: Float
  projectId: bigint
  regularEventId: bigint
  supervisorId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "event"
"""
input EventSumOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "event_tags"
"""
type EventTags {
  """An object relationship"""
  event: Event!
  eventId: bigint!

  """An object relationship"""
  tag: Tag!
  tagId: bigint!
}

"""
aggregated selection of "event_tags"
"""
type EventTagsAggregate {
  aggregate: EventTagsAggregateFields
  nodes: [EventTags!]!
}

input EventTagsAggregateBoolExp {
  count: eventTagsAggregateBoolExpCount
}

input eventTagsAggregateBoolExpCount {
  arguments: [EventTagsSelectColumn!]
  distinct: Boolean
  filter: EventTagsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "event_tags"
"""
type EventTagsAggregateFields {
  avg: EventTagsAvgFields
  count(columns: [EventTagsSelectColumn!], distinct: Boolean): Int!
  max: EventTagsMaxFields
  min: EventTagsMinFields
  stddev: EventTagsStddevFields
  stddevPop: EventTagsStddevPopFields
  stddevSamp: EventTagsStddevSampFields
  sum: EventTagsSumFields
  varPop: EventTagsVarPopFields
  varSamp: EventTagsVarSampFields
  variance: EventTagsVarianceFields
}

"""
order by aggregate values of table "event_tags"
"""
input EventTagsAggregateOrderBy {
  avg: EventTagsAvgOrderBy
  count: OrderBy
  max: EventTagsMaxOrderBy
  min: EventTagsMinOrderBy
  stddev: EventTagsStddevOrderBy
  stddevPop: EventTagsStddevPopOrderBy
  stddevSamp: EventTagsStddevSampOrderBy
  sum: EventTagsSumOrderBy
  varPop: EventTagsVarPopOrderBy
  varSamp: EventTagsVarSampOrderBy
  variance: EventTagsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "event_tags"
"""
input EventTagsArrRelInsertInput {
  data: [EventTagsInsertInput!]!

  """upsert condition"""
  onConflict: EventTagsOnConflict
}

"""aggregate avg on columns"""
type EventTagsAvgFields {
  eventId: Float
  tagId: Float
}

"""
order by avg() on columns of table "event_tags"
"""
input EventTagsAvgOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""
Boolean expression to filter rows from the table "event_tags". All fields are combined with a logical 'AND'.
"""
input EventTagsBoolExp {
  _and: [EventTagsBoolExp!]
  _not: EventTagsBoolExp
  _or: [EventTagsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

"""
unique or primary key constraints on table "event_tags"
"""
enum EventTagsConstraint {
  """
  unique or primary key constraint on columns "event_id", "tag_id"
  """
  event_tags_pkey
}

"""
input type for incrementing numeric columns in table "event_tags"
"""
input EventTagsIncInput {
  eventId: bigint
  tagId: bigint
}

"""
input type for inserting data into table "event_tags"
"""
input EventTagsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

"""aggregate max on columns"""
type EventTagsMaxFields {
  eventId: bigint
  tagId: bigint
}

"""
order by max() on columns of table "event_tags"
"""
input EventTagsMaxOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""aggregate min on columns"""
type EventTagsMinFields {
  eventId: bigint
  tagId: bigint
}

"""
order by min() on columns of table "event_tags"
"""
input EventTagsMinOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""
response of any mutation on the table "event_tags"
"""
type EventTagsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventTags!]!
}

"""
on_conflict condition type for table "event_tags"
"""
input EventTagsOnConflict {
  constraint: EventTagsConstraint!
  updateColumns: [EventTagsUpdateColumn!]! = []
  where: EventTagsBoolExp
}

"""Ordering options when selecting data from "event_tags"."""
input EventTagsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

"""primary key columns input for table: event_tags"""
input EventTagsPkColumnsInput {
  eventId: bigint!
  tagId: bigint!
}

"""
select columns of table "event_tags"
"""
enum EventTagsSelectColumn {
  """column name"""
  eventId

  """column name"""
  tagId
}

"""
input type for updating data in table "event_tags"
"""
input EventTagsSetInput {
  eventId: bigint
  tagId: bigint
}

"""aggregate stddev on columns"""
type EventTagsStddevFields {
  eventId: Float
  tagId: Float
}

"""
order by stddev() on columns of table "event_tags"
"""
input EventTagsStddevOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevPop on columns"""
type EventTagsStddevPopFields {
  eventId: Float
  tagId: Float
}

"""
order by stddevPop() on columns of table "event_tags"
"""
input EventTagsStddevPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevSamp on columns"""
type EventTagsStddevSampFields {
  eventId: Float
  tagId: Float
}

"""
order by stddevSamp() on columns of table "event_tags"
"""
input EventTagsStddevSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""
Streaming cursor of the table "event_tags"
"""
input EventTagsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: EventTagsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input EventTagsStreamCursorValueInput {
  eventId: bigint
  tagId: bigint
}

"""aggregate sum on columns"""
type EventTagsSumFields {
  eventId: bigint
  tagId: bigint
}

"""
order by sum() on columns of table "event_tags"
"""
input EventTagsSumOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "event_tags"
"""
enum EventTagsUpdateColumn {
  """column name"""
  eventId

  """column name"""
  tagId
}

input EventTagsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventTagsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventTagsSetInput

  """filter the rows which have to be updated"""
  where: EventTagsBoolExp!
}

"""aggregate variance on columns"""
type EventTagsVarianceFields {
  eventId: Float
  tagId: Float
}

"""
order by variance() on columns of table "event_tags"
"""
input EventTagsVarianceOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""aggregate varPop on columns"""
type EventTagsVarPopFields {
  eventId: Float
  tagId: Float
}

"""
order by varPop() on columns of table "event_tags"
"""
input EventTagsVarPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""aggregate varSamp on columns"""
type EventTagsVarSampFields {
  eventId: Float
  tagId: Float
}

"""
order by varSamp() on columns of table "event_tags"
"""
input EventTagsVarSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "event"
"""
enum EventUpdateColumn {
  """column name"""
  addressId

  """column name"""
  approvalSubmissionId

  """column name"""
  autoAcceptJoins

  """column name"""
  budget

  """column name"""
  contentMasterId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  end

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  isPrivate

  """column name"""
  joinFormId

  """column name"""
  lastEventApprovalStepId

  """column name"""
  meta

  """column name"""
  presenceReward

  """column name"""
  price

  """column name"""
  projectId

  """column name"""
  regularEventId

  """column name"""
  regularEventInterval

  """column name"""
  start

  """column name"""
  state

  """column name"""
  supervisorId

  """column name"""
  tenantId
}

input EventUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: EventAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: EventDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _deleteElem: EventDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: EventDeleteKeyInput

  """increments the numeric columns with given value of the filtered values"""
  _inc: EventIncInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: EventPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: EventSetInput

  """filter the rows which have to be updated"""
  where: EventBoolExp!
}

"""aggregate variance on columns"""
type EventVarianceFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  regularEventId: Float
  supervisorId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "event"
"""
input EventVarianceOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type EventVarPopFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  regularEventId: Float
  supervisorId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "event"
"""
input EventVarPopOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type EventVarSampFields {
  addressId: Float
  approvalSubmissionId: Float
  budget: Float
  contentMasterId: Float
  createdById: Float
  id: Float
  imageId: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  presenceReward: Float
  price: Float
  projectId: Float
  regularEventId: Float
  supervisorId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "event"
"""
input EventVarSampOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  budget: OrderBy
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  presenceReward: OrderBy
  price: OrderBy
  projectId: OrderBy
  regularEventId: OrderBy
  supervisorId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "expense"
"""
type Expense {
  """An object relationship"""
  actorBankInfo: ActorBankInfo!

  """An array relationship"""
  actorFinances(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """An aggregate relationship"""
  actorFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!
  bankInfoId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  expenseReportId: bigint!

  """An object relationship"""
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  issue: Issue
  issueId: bigint
  state: String!

  """An object relationship"""
  teamFinance: TeamFinance

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "expense"
"""
type ExpenseAggregate {
  aggregate: ExpenseAggregateFields
  nodes: [Expense!]!
}

input ExpenseAggregateBoolExp {
  count: expenseAggregateBoolExpCount
}

input expenseAggregateBoolExpCount {
  arguments: [ExpenseSelectColumn!]
  distinct: Boolean
  filter: ExpenseBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "expense"
"""
type ExpenseAggregateFields {
  avg: ExpenseAvgFields
  count(columns: [ExpenseSelectColumn!], distinct: Boolean): Int!
  max: ExpenseMaxFields
  min: ExpenseMinFields
  stddev: ExpenseStddevFields
  stddevPop: ExpenseStddevPopFields
  stddevSamp: ExpenseStddevSampFields
  sum: ExpenseSumFields
  varPop: ExpenseVarPopFields
  varSamp: ExpenseVarSampFields
  variance: ExpenseVarianceFields
}

"""
order by aggregate values of table "expense"
"""
input ExpenseAggregateOrderBy {
  avg: ExpenseAvgOrderBy
  count: OrderBy
  max: ExpenseMaxOrderBy
  min: ExpenseMinOrderBy
  stddev: ExpenseStddevOrderBy
  stddevPop: ExpenseStddevPopOrderBy
  stddevSamp: ExpenseStddevSampOrderBy
  sum: ExpenseSumOrderBy
  varPop: ExpenseVarPopOrderBy
  varSamp: ExpenseVarSampOrderBy
  variance: ExpenseVarianceOrderBy
}

"""
input type for inserting array relation for remote table "expense"
"""
input ExpenseArrRelInsertInput {
  data: [ExpenseInsertInput!]!

  """upsert condition"""
  onConflict: ExpenseOnConflict
}

"""aggregate avg on columns"""
type ExpenseAvgFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "expense"
"""
input ExpenseAvgOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "expense". All fields are combined with a logical 'AND'.
"""
input ExpenseBoolExp {
  _and: [ExpenseBoolExp!]
  _not: ExpenseBoolExp
  _or: [ExpenseBoolExp!]
  actorBankInfo: ActorBankInfoBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  bankInfoId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expenseReportId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  issue: IssueBoolExp
  issueId: BigintComparisonExp
  state: StringComparisonExp
  teamFinance: TeamFinanceBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "expense"
"""
enum ExpenseConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  expense_pkey
}

"""
input type for incrementing numeric columns in table "expense"
"""
input ExpenseIncInput {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  issueId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "expense"
"""
input ExpenseInsertInput {
  actorBankInfo: ActorBankInfoObjRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  issue: IssueObjRelInsertInput
  issueId: bigint
  state: String
  teamFinance: TeamFinanceObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ExpenseMaxFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

"""
order by max() on columns of table "expense"
"""
input ExpenseMaxOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  issueId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ExpenseMinFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

"""
order by min() on columns of table "expense"
"""
input ExpenseMinOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  issueId: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "expense"
"""
type ExpenseMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Expense!]!
}

"""
input type for inserting object relation for remote table "expense"
"""
input ExpenseObjRelInsertInput {
  data: ExpenseInsertInput!

  """upsert condition"""
  onConflict: ExpenseOnConflict
}

"""
on_conflict condition type for table "expense"
"""
input ExpenseOnConflict {
  constraint: ExpenseConstraint!
  updateColumns: [ExpenseUpdateColumn!]! = []
  where: ExpenseBoolExp
}

"""Ordering options when selecting data from "expense"."""
input ExpenseOrderBy {
  actorBankInfo: ActorBankInfoOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  issue: IssueOrderBy
  issueId: OrderBy
  state: OrderBy
  teamFinance: TeamFinanceOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: expense"""
input ExpensePkColumnsInput {
  id: bigint!
}

"""
select columns of table "expense"
"""
enum ExpenseSelectColumn {
  """column name"""
  bankInfoId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  expenseReportId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  issueId

  """column name"""
  state

  """column name"""
  tenantId
}

"""
input type for updating data in table "expense"
"""
input ExpenseSetInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ExpenseStddevFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "expense"
"""
input ExpenseStddevOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ExpenseStddevPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "expense"
"""
input ExpenseStddevPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ExpenseStddevSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "expense"
"""
input ExpenseStddevSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "expense"
"""
input ExpenseStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ExpenseStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ExpenseStreamCursorValueInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  issueId: bigint
  state: String
  tenantId: bigint
}

"""aggregate sum on columns"""
type ExpenseSumFields {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  issueId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "expense"
"""
input ExpenseSumOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "expense"
"""
enum ExpenseUpdateColumn {
  """column name"""
  bankInfoId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  expenseReportId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  issueId

  """column name"""
  state

  """column name"""
  tenantId
}

input ExpenseUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ExpenseIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ExpenseSetInput

  """filter the rows which have to be updated"""
  where: ExpenseBoolExp!
}

"""aggregate variance on columns"""
type ExpenseVarianceFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "expense"
"""
input ExpenseVarianceOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ExpenseVarPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "expense"
"""
input ExpenseVarPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ExpenseVarSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  issueId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "expense"
"""
input ExpenseVarSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  issueId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "favorite"
"""
type Favorite {
  """An object relationship"""
  actor: Actor
  actorId: bigint

  """An object relationship"""
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  lastActiveDate: timestamptz

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "favorite"
"""
type FavoriteAggregate {
  aggregate: FavoriteAggregateFields
  nodes: [Favorite!]!
}

input FavoriteAggregateBoolExp {
  count: favoriteAggregateBoolExpCount
}

input favoriteAggregateBoolExpCount {
  arguments: [FavoriteSelectColumn!]
  distinct: Boolean
  filter: FavoriteBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "favorite"
"""
type FavoriteAggregateFields {
  avg: FavoriteAvgFields
  count(columns: [FavoriteSelectColumn!], distinct: Boolean): Int!
  max: FavoriteMaxFields
  min: FavoriteMinFields
  stddev: FavoriteStddevFields
  stddevPop: FavoriteStddevPopFields
  stddevSamp: FavoriteStddevSampFields
  sum: FavoriteSumFields
  varPop: FavoriteVarPopFields
  varSamp: FavoriteVarSampFields
  variance: FavoriteVarianceFields
}

"""
order by aggregate values of table "favorite"
"""
input FavoriteAggregateOrderBy {
  avg: FavoriteAvgOrderBy
  count: OrderBy
  max: FavoriteMaxOrderBy
  min: FavoriteMinOrderBy
  stddev: FavoriteStddevOrderBy
  stddevPop: FavoriteStddevPopOrderBy
  stddevSamp: FavoriteStddevSampOrderBy
  sum: FavoriteSumOrderBy
  varPop: FavoriteVarPopOrderBy
  varSamp: FavoriteVarSampOrderBy
  variance: FavoriteVarianceOrderBy
}

"""
input type for inserting array relation for remote table "favorite"
"""
input FavoriteArrRelInsertInput {
  data: [FavoriteInsertInput!]!

  """upsert condition"""
  onConflict: FavoriteOnConflict
}

"""aggregate avg on columns"""
type FavoriteAvgFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "favorite"
"""
input FavoriteAvgOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "favorite". All fields are combined with a logical 'AND'.
"""
input FavoriteBoolExp {
  _and: [FavoriteBoolExp!]
  _not: FavoriteBoolExp
  _or: [FavoriteBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "favorite"
"""
enum FavoriteConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  favorite_pkey
}

"""
input type for incrementing numeric columns in table "favorite"
"""
input FavoriteIncInput {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "favorite"
"""
input FavoriteInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type FavoriteMaxFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

"""
order by max() on columns of table "favorite"
"""
input FavoriteMaxOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type FavoriteMinFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

"""
order by min() on columns of table "favorite"
"""
input FavoriteMinOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "favorite"
"""
type FavoriteMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Favorite!]!
}

"""
on_conflict condition type for table "favorite"
"""
input FavoriteOnConflict {
  constraint: FavoriteConstraint!
  updateColumns: [FavoriteUpdateColumn!]! = []
  where: FavoriteBoolExp
}

"""Ordering options when selecting data from "favorite"."""
input FavoriteOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: favorite"""
input FavoritePkColumnsInput {
  id: bigint!
}

"""
select columns of table "favorite"
"""
enum FavoriteSelectColumn {
  """column name"""
  actorId

  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  tenantId
}

"""
input type for updating data in table "favorite"
"""
input FavoriteSetInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

"""aggregate stddev on columns"""
type FavoriteStddevFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "favorite"
"""
input FavoriteStddevOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type FavoriteStddevPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "favorite"
"""
input FavoriteStddevPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type FavoriteStddevSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "favorite"
"""
input FavoriteStddevSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "favorite"
"""
input FavoriteStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: FavoriteStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input FavoriteStreamCursorValueInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

"""aggregate sum on columns"""
type FavoriteSumFields {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "favorite"
"""
input FavoriteSumOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "favorite"
"""
enum FavoriteUpdateColumn {
  """column name"""
  actorId

  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  tenantId
}

input FavoriteUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: FavoriteIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: FavoriteSetInput

  """filter the rows which have to be updated"""
  where: FavoriteBoolExp!
}

"""aggregate variance on columns"""
type FavoriteVarianceFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "favorite"
"""
input FavoriteVarianceOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type FavoriteVarPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "favorite"
"""
input FavoriteVarPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type FavoriteVarSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "favorite"
"""
input FavoriteVarSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "file_upload"
"""
type FileUpload {
  """An object relationship"""
  actorAddress: ActorAddress

  """An array relationship"""
  actorFinances(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """An aggregate relationship"""
  actorFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!

  """An object relationship"""
  actorImage: ActorImage

  """An array relationship"""
  contentAttachments(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  """An aggregate relationship"""
  contentAttachmentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  document: Document

  """An array relationship"""
  documentEdits(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): [DocumentEdit!]!

  """An aggregate relationship"""
  documentEditsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): DocumentEditAggregate!

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """An array relationship"""
  expenses(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """An aggregate relationship"""
  expensesAggregate(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): ExpenseAggregate!
  fileLastModifiedAt: timestamptz!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  mime: String!
  name: String!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): [Project!]!

  """An aggregate relationship"""
  projectsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): ProjectAggregate!
  size: Int!

  """An array relationship"""
  tags(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): [Tag!]!

  """An aggregate relationship"""
  tagsAggregate(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): TagAggregate!

  """An array relationship"""
  teamFinanceEdits(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """An aggregate relationship"""
  teamFinanceEditsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!

  """An array relationship"""
  teams(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): [Team!]!

  """An aggregate relationship"""
  teamsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): TeamAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!

  """An array relationship"""
  tenants(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): [Tenant!]!

  """An aggregate relationship"""
  tenantsAggregate(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): TenantAggregate!
  url: String!
}

"""
aggregated selection of "file_upload"
"""
type FileUploadAggregate {
  aggregate: FileUploadAggregateFields
  nodes: [FileUpload!]!
}

input FileUploadAggregateBoolExp {
  count: fileUploadAggregateBoolExpCount
}

input fileUploadAggregateBoolExpCount {
  arguments: [FileUploadSelectColumn!]
  distinct: Boolean
  filter: FileUploadBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "file_upload"
"""
type FileUploadAggregateFields {
  avg: FileUploadAvgFields
  count(columns: [FileUploadSelectColumn!], distinct: Boolean): Int!
  max: FileUploadMaxFields
  min: FileUploadMinFields
  stddev: FileUploadStddevFields
  stddevPop: FileUploadStddevPopFields
  stddevSamp: FileUploadStddevSampFields
  sum: FileUploadSumFields
  varPop: FileUploadVarPopFields
  varSamp: FileUploadVarSampFields
  variance: FileUploadVarianceFields
}

"""
order by aggregate values of table "file_upload"
"""
input FileUploadAggregateOrderBy {
  avg: FileUploadAvgOrderBy
  count: OrderBy
  max: FileUploadMaxOrderBy
  min: FileUploadMinOrderBy
  stddev: FileUploadStddevOrderBy
  stddevPop: FileUploadStddevPopOrderBy
  stddevSamp: FileUploadStddevSampOrderBy
  sum: FileUploadSumOrderBy
  varPop: FileUploadVarPopOrderBy
  varSamp: FileUploadVarSampOrderBy
  variance: FileUploadVarianceOrderBy
}

"""
input type for inserting array relation for remote table "file_upload"
"""
input FileUploadArrRelInsertInput {
  data: [FileUploadInsertInput!]!

  """upsert condition"""
  onConflict: FileUploadOnConflict
}

"""aggregate avg on columns"""
type FileUploadAvgFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

"""
order by avg() on columns of table "file_upload"
"""
input FileUploadAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "file_upload". All fields are combined with a logical 'AND'.
"""
input FileUploadBoolExp {
  _and: [FileUploadBoolExp!]
  _not: FileUploadBoolExp
  _or: [FileUploadBoolExp!]
  actorAddress: ActorAddressBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImage: ActorImageBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  document: DocumentBoolExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fileLastModifiedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  mime: StringComparisonExp
  name: StringComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  size: IntComparisonExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamFinanceEdits: TeamFinanceEditBoolExp
  teamFinanceEditsAggregate: TeamFinanceEditAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tenants: TenantBoolExp
  tenantsAggregate: TenantAggregateBoolExp
  url: StringComparisonExp
}

"""
unique or primary key constraints on table "file_upload"
"""
enum FileUploadConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  file_upload_pkey
}

"""
input type for incrementing numeric columns in table "file_upload"
"""
input FileUploadIncInput {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

"""
input type for inserting data into table "file_upload"
"""
input FileUploadInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImage: ActorImageObjRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  document: DocumentObjRelInsertInput
  documentEdits: DocumentEditArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  events: EventArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  mime: String
  name: String
  projects: ProjectArrRelInsertInput
  size: Int
  tags: TagArrRelInsertInput
  teamFinanceEdits: TeamFinanceEditArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tenants: TenantArrRelInsertInput
  url: String
}

"""aggregate max on columns"""
type FileUploadMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

"""
order by max() on columns of table "file_upload"
"""
input FileUploadMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  mime: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  url: OrderBy
}

"""aggregate min on columns"""
type FileUploadMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

"""
order by min() on columns of table "file_upload"
"""
input FileUploadMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  mime: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  url: OrderBy
}

"""
response of any mutation on the table "file_upload"
"""
type FileUploadMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [FileUpload!]!
}

"""
input type for inserting object relation for remote table "file_upload"
"""
input FileUploadObjRelInsertInput {
  data: FileUploadInsertInput!

  """upsert condition"""
  onConflict: FileUploadOnConflict
}

"""
on_conflict condition type for table "file_upload"
"""
input FileUploadOnConflict {
  constraint: FileUploadConstraint!
  updateColumns: [FileUploadUpdateColumn!]! = []
  where: FileUploadBoolExp
}

"""Ordering options when selecting data from "file_upload"."""
input FileUploadOrderBy {
  actorAddress: ActorAddressOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImage: ActorImageOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  document: DocumentOrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  mime: OrderBy
  name: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  size: OrderBy
  tagsAggregate: TagAggregateOrderBy
  teamFinanceEditsAggregate: TeamFinanceEditAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tenantsAggregate: TenantAggregateOrderBy
  url: OrderBy
}

"""primary key columns input for table: file_upload"""
input FileUploadPkColumnsInput {
  id: bigint!
}

"""
select columns of table "file_upload"
"""
enum FileUploadSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  fileLastModifiedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  mime

  """column name"""
  name

  """column name"""
  size

  """column name"""
  tenantId

  """column name"""
  url
}

"""
input type for updating data in table "file_upload"
"""
input FileUploadSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

"""aggregate stddev on columns"""
type FileUploadStddevFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "file_upload"
"""
input FileUploadStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type FileUploadStddevPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "file_upload"
"""
input FileUploadStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type FileUploadStddevSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "file_upload"
"""
input FileUploadStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "file_upload"
"""
input FileUploadStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: FileUploadStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input FileUploadStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  mime: String
  name: String
  size: Int
  tenantId: bigint
  url: String
}

"""aggregate sum on columns"""
type FileUploadSumFields {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

"""
order by sum() on columns of table "file_upload"
"""
input FileUploadSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "file_upload"
"""
enum FileUploadUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  fileLastModifiedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  mime

  """column name"""
  name

  """column name"""
  size

  """column name"""
  tenantId

  """column name"""
  url
}

input FileUploadUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: FileUploadIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: FileUploadSetInput

  """filter the rows which have to be updated"""
  where: FileUploadBoolExp!
}

"""aggregate variance on columns"""
type FileUploadVarianceFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

"""
order by variance() on columns of table "file_upload"
"""
input FileUploadVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type FileUploadVarPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "file_upload"
"""
input FileUploadVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type FileUploadVarSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "file_upload"
"""
input FileUploadVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
"""
input FloatComparisonExp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _isNull: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
columns and relationships of "follow"
"""
type Follow {
  """An object relationship"""
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "follow"
"""
type FollowAggregate {
  aggregate: FollowAggregateFields
  nodes: [Follow!]!
}

input FollowAggregateBoolExp {
  count: followAggregateBoolExpCount
}

input followAggregateBoolExpCount {
  arguments: [FollowSelectColumn!]
  distinct: Boolean
  filter: FollowBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "follow"
"""
type FollowAggregateFields {
  avg: FollowAvgFields
  count(columns: [FollowSelectColumn!], distinct: Boolean): Int!
  max: FollowMaxFields
  min: FollowMinFields
  stddev: FollowStddevFields
  stddevPop: FollowStddevPopFields
  stddevSamp: FollowStddevSampFields
  sum: FollowSumFields
  varPop: FollowVarPopFields
  varSamp: FollowVarSampFields
  variance: FollowVarianceFields
}

"""
order by aggregate values of table "follow"
"""
input FollowAggregateOrderBy {
  avg: FollowAvgOrderBy
  count: OrderBy
  max: FollowMaxOrderBy
  min: FollowMinOrderBy
  stddev: FollowStddevOrderBy
  stddevPop: FollowStddevPopOrderBy
  stddevSamp: FollowStddevSampOrderBy
  sum: FollowSumOrderBy
  varPop: FollowVarPopOrderBy
  varSamp: FollowVarSampOrderBy
  variance: FollowVarianceOrderBy
}

"""
input type for inserting array relation for remote table "follow"
"""
input FollowArrRelInsertInput {
  data: [FollowInsertInput!]!

  """upsert condition"""
  onConflict: FollowOnConflict
}

"""aggregate avg on columns"""
type FollowAvgFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "follow"
"""
input FollowAvgOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "follow". All fields are combined with a logical 'AND'.
"""
input FollowBoolExp {
  _and: [FollowBoolExp!]
  _not: FollowBoolExp
  _or: [FollowBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  followedActorId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "follow"
"""
enum FollowConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  follow_pkey
}

"""
input type for incrementing numeric columns in table "follow"
"""
input FollowIncInput {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "follow"
"""
input FollowInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type FollowMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "follow"
"""
input FollowMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type FollowMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "follow"
"""
input FollowMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "follow"
"""
type FollowMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Follow!]!
}

"""
on_conflict condition type for table "follow"
"""
input FollowOnConflict {
  constraint: FollowConstraint!
  updateColumns: [FollowUpdateColumn!]! = []
  where: FollowBoolExp
}

"""Ordering options when selecting data from "follow"."""
input FollowOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: follow"""
input FollowPkColumnsInput {
  id: bigint!
}

"""
select columns of table "follow"
"""
enum FollowSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  followedActorId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

"""
input type for updating data in table "follow"
"""
input FollowSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type FollowStddevFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "follow"
"""
input FollowStddevOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type FollowStddevPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "follow"
"""
input FollowStddevPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type FollowStddevSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "follow"
"""
input FollowStddevSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "follow"
"""
input FollowStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: FollowStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input FollowStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type FollowSumFields {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "follow"
"""
input FollowSumOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "follow"
"""
enum FollowUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  followedActorId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

input FollowUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: FollowIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: FollowSetInput

  """filter the rows which have to be updated"""
  where: FollowBoolExp!
}

"""aggregate variance on columns"""
type FollowVarianceFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "follow"
"""
input FollowVarianceOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type FollowVarPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "follow"
"""
input FollowVarPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type FollowVarSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "follow"
"""
input FollowVarSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "form"
"""
type Form {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """An array relationship"""
  formEdits(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): [FormEdit!]!

  """An aggregate relationship"""
  formEditsAggregate(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): FormEditAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  isAllowingEditingAnswers: Boolean!
  isAllowingMultipleAnswers: Boolean!
  isEnabled: Boolean!
  isRequired: Boolean!
  isTemplate: Boolean!
  name: String!
  schema(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  team: Team
  teamId: bigint

  """An object relationship"""
  tenant: Tenant!

  """An object relationship"""
  tenantById: Tenant
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "form"
"""
type FormAggregate {
  aggregate: FormAggregateFields
  nodes: [Form!]!
}

input FormAggregateBoolExp {
  bool_and: formAggregateBoolExpBool_and
  bool_or: formAggregateBoolExpBool_or
  count: formAggregateBoolExpCount
}

input formAggregateBoolExpBool_and {
  arguments: FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpBool_or {
  arguments: FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpCount {
  arguments: [FormSelectColumn!]
  distinct: Boolean
  filter: FormBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "form"
"""
type FormAggregateFields {
  avg: FormAvgFields
  count(columns: [FormSelectColumn!], distinct: Boolean): Int!
  max: FormMaxFields
  min: FormMinFields
  stddev: FormStddevFields
  stddevPop: FormStddevPopFields
  stddevSamp: FormStddevSampFields
  sum: FormSumFields
  varPop: FormVarPopFields
  varSamp: FormVarSampFields
  variance: FormVarianceFields
}

"""
order by aggregate values of table "form"
"""
input FormAggregateOrderBy {
  avg: FormAvgOrderBy
  count: OrderBy
  max: FormMaxOrderBy
  min: FormMinOrderBy
  stddev: FormStddevOrderBy
  stddevPop: FormStddevPopOrderBy
  stddevSamp: FormStddevSampOrderBy
  sum: FormSumOrderBy
  varPop: FormVarPopOrderBy
  varSamp: FormVarSampOrderBy
  variance: FormVarianceOrderBy
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input FormAppendInput {
  schema: jsonb
}

"""
input type for inserting array relation for remote table "form"
"""
input FormArrRelInsertInput {
  data: [FormInsertInput!]!

  """upsert condition"""
  onConflict: FormOnConflict
}

"""aggregate avg on columns"""
type FormAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "form"
"""
input FormAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "form". All fields are combined with a logical 'AND'.
"""
input FormBoolExp {
  _and: [FormBoolExp!]
  _not: FormBoolExp
  _or: [FormBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  formEdits: FormEditBoolExp
  formEditsAggregate: FormEditAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isAllowingEditingAnswers: BooleanComparisonExp
  isAllowingMultipleAnswers: BooleanComparisonExp
  isEnabled: BooleanComparisonExp
  isRequired: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  name: StringComparisonExp
  schema: JsonbComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantById: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "form"
"""
enum FormConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  form_pkey

  """
  unique or primary key constraint on columns "team_id"
  """
  form_team_id_unique
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input FormDeleteAtPathInput {
  schema: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input FormDeleteElemInput {
  schema: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input FormDeleteKeyInput {
  schema: String
}

"""
columns and relationships of "form_edit"
"""
type FormEdit {
  addedDiff(
    """JSON select path"""
    path: String
  ): jsonb
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  form: Form!
  formId: bigint!

  """An array relationship"""
  formSubmissions(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  """An aggregate relationship"""
  formSubmissionsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  newVersion(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "form_edit"
"""
type FormEditAggregate {
  aggregate: FormEditAggregateFields
  nodes: [FormEdit!]!
}

input FormEditAggregateBoolExp {
  count: formEditAggregateBoolExpCount
}

input formEditAggregateBoolExpCount {
  arguments: [FormEditSelectColumn!]
  distinct: Boolean
  filter: FormEditBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "form_edit"
"""
type FormEditAggregateFields {
  avg: FormEditAvgFields
  count(columns: [FormEditSelectColumn!], distinct: Boolean): Int!
  max: FormEditMaxFields
  min: FormEditMinFields
  stddev: FormEditStddevFields
  stddevPop: FormEditStddevPopFields
  stddevSamp: FormEditStddevSampFields
  sum: FormEditSumFields
  varPop: FormEditVarPopFields
  varSamp: FormEditVarSampFields
  variance: FormEditVarianceFields
}

"""
order by aggregate values of table "form_edit"
"""
input FormEditAggregateOrderBy {
  avg: FormEditAvgOrderBy
  count: OrderBy
  max: FormEditMaxOrderBy
  min: FormEditMinOrderBy
  stddev: FormEditStddevOrderBy
  stddevPop: FormEditStddevPopOrderBy
  stddevSamp: FormEditStddevSampOrderBy
  sum: FormEditSumOrderBy
  varPop: FormEditVarPopOrderBy
  varSamp: FormEditVarSampOrderBy
  variance: FormEditVarianceOrderBy
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input FormEditAppendInput {
  addedDiff: jsonb
  newVersion: jsonb
}

"""
input type for inserting array relation for remote table "form_edit"
"""
input FormEditArrRelInsertInput {
  data: [FormEditInsertInput!]!

  """upsert condition"""
  onConflict: FormEditOnConflict
}

"""aggregate avg on columns"""
type FormEditAvgFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "form_edit"
"""
input FormEditAvgOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "form_edit". All fields are combined with a logical 'AND'.
"""
input FormEditBoolExp {
  _and: [FormEditBoolExp!]
  _not: FormEditBoolExp
  _or: [FormEditBoolExp!]
  addedDiff: JsonbComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  form: FormBoolExp
  formId: BigintComparisonExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  newVersion: JsonbComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "form_edit"
"""
enum FormEditConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  form_edit_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input FormEditDeleteAtPathInput {
  addedDiff: [String!]
  newVersion: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input FormEditDeleteElemInput {
  addedDiff: Int
  newVersion: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input FormEditDeleteKeyInput {
  addedDiff: String
  newVersion: String
}

"""
input type for incrementing numeric columns in table "form_edit"
"""
input FormEditIncInput {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "form_edit"
"""
input FormEditInsertInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  form: FormObjRelInsertInput
  formId: bigint
  formSubmissions: FormSubmissionArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  newVersion: jsonb
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type FormEditMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "form_edit"
"""
input FormEditMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type FormEditMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "form_edit"
"""
input FormEditMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "form_edit"
"""
type FormEditMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [FormEdit!]!
}

"""
input type for inserting object relation for remote table "form_edit"
"""
input FormEditObjRelInsertInput {
  data: FormEditInsertInput!

  """upsert condition"""
  onConflict: FormEditOnConflict
}

"""
on_conflict condition type for table "form_edit"
"""
input FormEditOnConflict {
  constraint: FormEditConstraint!
  updateColumns: [FormEditUpdateColumn!]! = []
  where: FormEditBoolExp
}

"""Ordering options when selecting data from "form_edit"."""
input FormEditOrderBy {
  addedDiff: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  form: FormOrderBy
  formId: OrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  newVersion: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: form_edit"""
input FormEditPkColumnsInput {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input FormEditPrependInput {
  addedDiff: jsonb
  newVersion: jsonb
}

"""
select columns of table "form_edit"
"""
enum FormEditSelectColumn {
  """column name"""
  addedDiff

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersion

  """column name"""
  tenantId
}

"""
input type for updating data in table "form_edit"
"""
input FormEditSetInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

"""aggregate stddev on columns"""
type FormEditStddevFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "form_edit"
"""
input FormEditStddevOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type FormEditStddevPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "form_edit"
"""
input FormEditStddevPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type FormEditStddevSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "form_edit"
"""
input FormEditStddevSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "form_edit"
"""
input FormEditStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: FormEditStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input FormEditStreamCursorValueInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

"""aggregate sum on columns"""
type FormEditSumFields {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "form_edit"
"""
input FormEditSumOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "form_edit"
"""
enum FormEditUpdateColumn {
  """column name"""
  addedDiff

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersion

  """column name"""
  tenantId
}

input FormEditUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: FormEditAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: FormEditDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _deleteElem: FormEditDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: FormEditDeleteKeyInput

  """increments the numeric columns with given value of the filtered values"""
  _inc: FormEditIncInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: FormEditPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: FormEditSetInput

  """filter the rows which have to be updated"""
  where: FormEditBoolExp!
}

"""aggregate variance on columns"""
type FormEditVarianceFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "form_edit"
"""
input FormEditVarianceOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type FormEditVarPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "form_edit"
"""
input FormEditVarPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type FormEditVarSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "form_edit"
"""
input FormEditVarSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
input type for incrementing numeric columns in table "form"
"""
input FormIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "form"
"""
input FormInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  formEdits: FormEditArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  isTemplate: Boolean
  name: String
  schema: jsonb
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type FormMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "form"
"""
input FormMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type FormMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "form"
"""
input FormMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "form"
"""
type FormMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Form!]!
}

"""
input type for inserting object relation for remote table "form"
"""
input FormObjRelInsertInput {
  data: FormInsertInput!

  """upsert condition"""
  onConflict: FormOnConflict
}

"""
on_conflict condition type for table "form"
"""
input FormOnConflict {
  constraint: FormConstraint!
  updateColumns: [FormUpdateColumn!]! = []
  where: FormBoolExp
}

"""Ordering options when selecting data from "form"."""
input FormOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  formEditsAggregate: FormEditAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isAllowingEditingAnswers: OrderBy
  isAllowingMultipleAnswers: OrderBy
  isEnabled: OrderBy
  isRequired: OrderBy
  isTemplate: OrderBy
  name: OrderBy
  schema: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantById: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: form"""
input FormPkColumnsInput {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input FormPrependInput {
  schema: jsonb
}

"""
select columns of table "form"
"""
enum FormSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  isAllowingEditingAnswers

  """column name"""
  isAllowingMultipleAnswers

  """column name"""
  isEnabled

  """column name"""
  isRequired

  """column name"""
  isTemplate

  """column name"""
  name

  """column name"""
  schema

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  type
}

"""
select "formAggregateBoolExpBool_andArgumentsColumns" columns of table "form"
"""
enum FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  isAllowingEditingAnswers

  """column name"""
  isAllowingMultipleAnswers

  """column name"""
  isEnabled

  """column name"""
  isRequired

  """column name"""
  isTemplate
}

"""
select "formAggregateBoolExpBool_orArgumentsColumns" columns of table "form"
"""
enum FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  isAllowingEditingAnswers

  """column name"""
  isAllowingMultipleAnswers

  """column name"""
  isEnabled

  """column name"""
  isRequired

  """column name"""
  isTemplate
}

"""
input type for updating data in table "form"
"""
input FormSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  isTemplate: Boolean
  name: String
  schema: jsonb
  teamId: bigint
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type FormStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "form"
"""
input FormStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type FormStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "form"
"""
input FormStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type FormStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "form"
"""
input FormStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "form"
"""
input FormStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: FormStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input FormStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  isTemplate: Boolean
  name: String
  schema: jsonb
  teamId: bigint
  tenantId: bigint
  type: String
}

"""
columns and relationships of "form_submission"
"""
type FormSubmission {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  event: Event

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """An object relationship"""
  formEdit: FormEdit!
  formEditId: bigint!

  """An array relationship"""
  formSubmissionEdits(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): [FormSubmissionEdit!]!

  """An aggregate relationship"""
  formSubmissionEditsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): FormSubmissionEditAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  submission(
    """JSON select path"""
    path: String
  ): jsonb!

  """An array relationship"""
  teamJoins(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """An aggregate relationship"""
  teamJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "form_submission"
"""
type FormSubmissionAggregate {
  aggregate: FormSubmissionAggregateFields
  nodes: [FormSubmission!]!
}

input FormSubmissionAggregateBoolExp {
  count: formSubmissionAggregateBoolExpCount
}

input formSubmissionAggregateBoolExpCount {
  arguments: [FormSubmissionSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "form_submission"
"""
type FormSubmissionAggregateFields {
  avg: FormSubmissionAvgFields
  count(columns: [FormSubmissionSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionMaxFields
  min: FormSubmissionMinFields
  stddev: FormSubmissionStddevFields
  stddevPop: FormSubmissionStddevPopFields
  stddevSamp: FormSubmissionStddevSampFields
  sum: FormSubmissionSumFields
  varPop: FormSubmissionVarPopFields
  varSamp: FormSubmissionVarSampFields
  variance: FormSubmissionVarianceFields
}

"""
order by aggregate values of table "form_submission"
"""
input FormSubmissionAggregateOrderBy {
  avg: FormSubmissionAvgOrderBy
  count: OrderBy
  max: FormSubmissionMaxOrderBy
  min: FormSubmissionMinOrderBy
  stddev: FormSubmissionStddevOrderBy
  stddevPop: FormSubmissionStddevPopOrderBy
  stddevSamp: FormSubmissionStddevSampOrderBy
  sum: FormSubmissionSumOrderBy
  varPop: FormSubmissionVarPopOrderBy
  varSamp: FormSubmissionVarSampOrderBy
  variance: FormSubmissionVarianceOrderBy
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input FormSubmissionAppendInput {
  submission: jsonb
}

"""
input type for inserting array relation for remote table "form_submission"
"""
input FormSubmissionArrRelInsertInput {
  data: [FormSubmissionInsertInput!]!

  """upsert condition"""
  onConflict: FormSubmissionOnConflict
}

"""aggregate avg on columns"""
type FormSubmissionAvgFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "form_submission"
"""
input FormSubmissionAvgOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "form_submission". All fields are combined with a logical 'AND'.
"""
input FormSubmissionBoolExp {
  _and: [FormSubmissionBoolExp!]
  _not: FormSubmissionBoolExp
  _or: [FormSubmissionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  formEdit: FormEditBoolExp
  formEditId: BigintComparisonExp
  formSubmissionEdits: FormSubmissionEditBoolExp
  formSubmissionEditsAggregate: FormSubmissionEditAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  submission: JsonbComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "form_submission"
"""
enum FormSubmissionConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  form_submission_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input FormSubmissionDeleteAtPathInput {
  submission: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input FormSubmissionDeleteElemInput {
  submission: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input FormSubmissionDeleteKeyInput {
  submission: String
}

"""
columns and relationships of "form_submission_edit"
"""
type FormSubmissionEdit {
  addedDiff(
    """JSON select path"""
    path: String
  ): jsonb
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  formSubmission: FormSubmission!
  formSubmissionId: bigint!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  newVersion(
    """JSON select path"""
    path: String
  ): jsonb!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "form_submission_edit"
"""
type FormSubmissionEditAggregate {
  aggregate: FormSubmissionEditAggregateFields
  nodes: [FormSubmissionEdit!]!
}

input FormSubmissionEditAggregateBoolExp {
  count: formSubmissionEditAggregateBoolExpCount
}

input formSubmissionEditAggregateBoolExpCount {
  arguments: [FormSubmissionEditSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionEditBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "form_submission_edit"
"""
type FormSubmissionEditAggregateFields {
  avg: FormSubmissionEditAvgFields
  count(columns: [FormSubmissionEditSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionEditMaxFields
  min: FormSubmissionEditMinFields
  stddev: FormSubmissionEditStddevFields
  stddevPop: FormSubmissionEditStddevPopFields
  stddevSamp: FormSubmissionEditStddevSampFields
  sum: FormSubmissionEditSumFields
  varPop: FormSubmissionEditVarPopFields
  varSamp: FormSubmissionEditVarSampFields
  variance: FormSubmissionEditVarianceFields
}

"""
order by aggregate values of table "form_submission_edit"
"""
input FormSubmissionEditAggregateOrderBy {
  avg: FormSubmissionEditAvgOrderBy
  count: OrderBy
  max: FormSubmissionEditMaxOrderBy
  min: FormSubmissionEditMinOrderBy
  stddev: FormSubmissionEditStddevOrderBy
  stddevPop: FormSubmissionEditStddevPopOrderBy
  stddevSamp: FormSubmissionEditStddevSampOrderBy
  sum: FormSubmissionEditSumOrderBy
  varPop: FormSubmissionEditVarPopOrderBy
  varSamp: FormSubmissionEditVarSampOrderBy
  variance: FormSubmissionEditVarianceOrderBy
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input FormSubmissionEditAppendInput {
  addedDiff: jsonb
  newVersion: jsonb
}

"""
input type for inserting array relation for remote table "form_submission_edit"
"""
input FormSubmissionEditArrRelInsertInput {
  data: [FormSubmissionEditInsertInput!]!

  """upsert condition"""
  onConflict: FormSubmissionEditOnConflict
}

"""aggregate avg on columns"""
type FormSubmissionEditAvgFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "form_submission_edit"
"""
input FormSubmissionEditAvgOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "form_submission_edit". All fields are combined with a logical 'AND'.
"""
input FormSubmissionEditBoolExp {
  _and: [FormSubmissionEditBoolExp!]
  _not: FormSubmissionEditBoolExp
  _or: [FormSubmissionEditBoolExp!]
  addedDiff: JsonbComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  newVersion: JsonbComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "form_submission_edit"
"""
enum FormSubmissionEditConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  form_submission_edit_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input FormSubmissionEditDeleteAtPathInput {
  addedDiff: [String!]
  newVersion: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input FormSubmissionEditDeleteElemInput {
  addedDiff: Int
  newVersion: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input FormSubmissionEditDeleteKeyInput {
  addedDiff: String
  newVersion: String
}

"""
input type for incrementing numeric columns in table "form_submission_edit"
"""
input FormSubmissionEditIncInput {
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "form_submission_edit"
"""
input FormSubmissionEditInsertInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  newVersion: jsonb
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type FormSubmissionEditMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "form_submission_edit"
"""
input FormSubmissionEditMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type FormSubmissionEditMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "form_submission_edit"
"""
input FormSubmissionEditMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "form_submission_edit"
"""
type FormSubmissionEditMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [FormSubmissionEdit!]!
}

"""
on_conflict condition type for table "form_submission_edit"
"""
input FormSubmissionEditOnConflict {
  constraint: FormSubmissionEditConstraint!
  updateColumns: [FormSubmissionEditUpdateColumn!]! = []
  where: FormSubmissionEditBoolExp
}

"""Ordering options when selecting data from "form_submission_edit"."""
input FormSubmissionEditOrderBy {
  addedDiff: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  newVersion: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: form_submission_edit"""
input FormSubmissionEditPkColumnsInput {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input FormSubmissionEditPrependInput {
  addedDiff: jsonb
  newVersion: jsonb
}

"""
select columns of table "form_submission_edit"
"""
enum FormSubmissionEditSelectColumn {
  """column name"""
  addedDiff

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formSubmissionId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersion

  """column name"""
  tenantId
}

"""
input type for updating data in table "form_submission_edit"
"""
input FormSubmissionEditSetInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

"""aggregate stddev on columns"""
type FormSubmissionEditStddevFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "form_submission_edit"
"""
input FormSubmissionEditStddevOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type FormSubmissionEditStddevPopFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "form_submission_edit"
"""
input FormSubmissionEditStddevPopOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type FormSubmissionEditStddevSampFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "form_submission_edit"
"""
input FormSubmissionEditStddevSampOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "form_submission_edit"
"""
input FormSubmissionEditStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: FormSubmissionEditStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input FormSubmissionEditStreamCursorValueInput {
  addedDiff: jsonb
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  newVersion: jsonb
  tenantId: bigint
}

"""aggregate sum on columns"""
type FormSubmissionEditSumFields {
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "form_submission_edit"
"""
input FormSubmissionEditSumOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "form_submission_edit"
"""
enum FormSubmissionEditUpdateColumn {
  """column name"""
  addedDiff

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formSubmissionId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  newVersion

  """column name"""
  tenantId
}

input FormSubmissionEditUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: FormSubmissionEditAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: FormSubmissionEditDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _deleteElem: FormSubmissionEditDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: FormSubmissionEditDeleteKeyInput

  """increments the numeric columns with given value of the filtered values"""
  _inc: FormSubmissionEditIncInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: FormSubmissionEditPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: FormSubmissionEditSetInput

  """filter the rows which have to be updated"""
  where: FormSubmissionEditBoolExp!
}

"""aggregate variance on columns"""
type FormSubmissionEditVarianceFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "form_submission_edit"
"""
input FormSubmissionEditVarianceOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type FormSubmissionEditVarPopFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "form_submission_edit"
"""
input FormSubmissionEditVarPopOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type FormSubmissionEditVarSampFields {
  createdById: Float
  formSubmissionId: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "form_submission_edit"
"""
input FormSubmissionEditVarSampOrderBy {
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
input type for incrementing numeric columns in table "form_submission"
"""
input FormSubmissionIncInput {
  createdById: bigint
  formEditId: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "form_submission"
"""
input FormSubmissionInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  formEdit: FormEditObjRelInsertInput
  formEditId: bigint
  formSubmissionEdits: FormSubmissionEditArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  submission: jsonb
  teamJoins: TeamJoinArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type FormSubmissionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "form_submission"
"""
input FormSubmissionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formEditId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type FormSubmissionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "form_submission"
"""
input FormSubmissionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formEditId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "form_submission"
"""
type FormSubmissionMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [FormSubmission!]!
}

"""
input type for inserting object relation for remote table "form_submission"
"""
input FormSubmissionObjRelInsertInput {
  data: FormSubmissionInsertInput!

  """upsert condition"""
  onConflict: FormSubmissionOnConflict
}

"""
on_conflict condition type for table "form_submission"
"""
input FormSubmissionOnConflict {
  constraint: FormSubmissionConstraint!
  updateColumns: [FormSubmissionUpdateColumn!]! = []
  where: FormSubmissionBoolExp
}

"""Ordering options when selecting data from "form_submission"."""
input FormSubmissionOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  formEdit: FormEditOrderBy
  formEditId: OrderBy
  formSubmissionEditsAggregate: FormSubmissionEditAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  submission: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: form_submission"""
input FormSubmissionPkColumnsInput {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input FormSubmissionPrependInput {
  submission: jsonb
}

"""
select columns of table "form_submission"
"""
enum FormSubmissionSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formEditId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  submission

  """column name"""
  tenantId
}

"""
input type for updating data in table "form_submission"
"""
input FormSubmissionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

"""aggregate stddev on columns"""
type FormSubmissionStddevFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "form_submission"
"""
input FormSubmissionStddevOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type FormSubmissionStddevPopFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "form_submission"
"""
input FormSubmissionStddevPopOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type FormSubmissionStddevSampFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "form_submission"
"""
input FormSubmissionStddevSampOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "form_submission"
"""
input FormSubmissionStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: FormSubmissionStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input FormSubmissionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formEditId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

"""aggregate sum on columns"""
type FormSubmissionSumFields {
  createdById: bigint
  formEditId: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "form_submission"
"""
input FormSubmissionSumOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "form_submission"
"""
enum FormSubmissionUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formEditId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  submission

  """column name"""
  tenantId
}

input FormSubmissionUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: FormSubmissionAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: FormSubmissionDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _deleteElem: FormSubmissionDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: FormSubmissionDeleteKeyInput

  """increments the numeric columns with given value of the filtered values"""
  _inc: FormSubmissionIncInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: FormSubmissionPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: FormSubmissionSetInput

  """filter the rows which have to be updated"""
  where: FormSubmissionBoolExp!
}

"""aggregate variance on columns"""
type FormSubmissionVarianceFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "form_submission"
"""
input FormSubmissionVarianceOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type FormSubmissionVarPopFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "form_submission"
"""
input FormSubmissionVarPopOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type FormSubmissionVarSampFields {
  createdById: Float
  formEditId: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "form_submission"
"""
input FormSubmissionVarSampOrderBy {
  createdById: OrderBy
  formEditId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate sum on columns"""
type FormSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "form"
"""
input FormSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "form"
"""
enum FormUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  isAllowingEditingAnswers

  """column name"""
  isAllowingMultipleAnswers

  """column name"""
  isEnabled

  """column name"""
  isRequired

  """column name"""
  isTemplate

  """column name"""
  name

  """column name"""
  schema

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  type
}

input FormUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: FormAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: FormDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _deleteElem: FormDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: FormDeleteKeyInput

  """increments the numeric columns with given value of the filtered values"""
  _inc: FormIncInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: FormPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: FormSetInput

  """filter the rows which have to be updated"""
  where: FormBoolExp!
}

"""aggregate variance on columns"""
type FormVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "form"
"""
input FormVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type FormVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "form"
"""
input FormVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type FormVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "form"
"""
input FormVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "individual"
"""
type Individual {
  """An array relationship"""
  actions(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """An array relationship"""
  actionsByValidatedById(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsByValidatedByIdAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """An object relationship"""
  actor: Actor

  """An array relationship"""
  actorAddresses(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  """An aggregate relationship"""
  actorAddressesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  """An array relationship"""
  actorBankInfos(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  """An aggregate relationship"""
  actorBankInfosAggregate(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  """An array relationship"""
  actorFinances(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """An aggregate relationship"""
  actorFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!

  """An array relationship"""
  actorImages(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): [ActorImage!]!

  """An aggregate relationship"""
  actorImagesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  """An array relationship"""
  actors(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): [Actor!]!

  """An aggregate relationship"""
  actorsAggregate(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): ActorAggregate!
  botId: bigint

  """An object relationship"""
  botInfo: BotInfo

  """An array relationship"""
  botInfos(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): [BotInfo!]!

  """An aggregate relationship"""
  botInfosAggregate(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  """An array relationship"""
  campuses(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): [Campus!]!

  """An aggregate relationship"""
  campusesAggregate(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): CampusAggregate!

  """An array relationship"""
  canteenFoods(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  """An aggregate relationship"""
  canteenFoodsAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  """An array relationship"""
  canteenMenus(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  """An aggregate relationship"""
  canteenMenusAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  """An array relationship"""
  canteens(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): [Canteen!]!

  """An aggregate relationship"""
  canteensAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): CanteenAggregate!

  """An array relationship"""
  changeRoles(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """An aggregate relationship"""
  changeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!

  """An array relationship"""
  classGroupTeachers(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  """An aggregate relationship"""
  classGroupTeachersAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  """An array relationship"""
  classGroups(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  """An aggregate relationship"""
  classGroupsAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  """An array relationship"""
  cohorts(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): [Cohort!]!

  """An aggregate relationship"""
  cohortsAggregate(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): CohortAggregate!

  """An array relationship"""
  contentEdits(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): [ContentEdit!]!

  """An aggregate relationship"""
  contentEditsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): ContentEditAggregate!

  """An array relationship"""
  contentMasterContributors(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): [ContentMasterContributors!]!

  """An aggregate relationship"""
  contentMasterContributorsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): ContentMasterContributorsAggregate!

  """An array relationship"""
  contentMasters(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): [ContentMaster!]!

  """An aggregate relationship"""
  contentMastersAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): ContentMasterAggregate!

  """An array relationship"""
  contents(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): [Content!]!

  """An aggregate relationship"""
  contentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An array relationship"""
  documentEdits(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): [DocumentEdit!]!

  """An aggregate relationship"""
  documentEditsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): DocumentEditAggregate!

  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): [Document!]!

  """An aggregate relationship"""
  documentsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): DocumentAggregate!

  """An array relationship"""
  eventApprovalStepNotifiees(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  """An aggregate relationship"""
  eventApprovalStepNotifieesAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  """An array relationship"""
  eventApprovalStepValidators(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  """An aggregate relationship"""
  eventApprovalStepValidatorsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  """An array relationship"""
  eventApprovalSteps(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  """An aggregate relationship"""
  eventApprovalStepsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  """An array relationship"""
  eventApprovals(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  """An aggregate relationship"""
  eventApprovalsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  """An array relationship"""
  eventAttendances(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): [EventAttendance!]!

  """An aggregate relationship"""
  eventAttendancesAggregate(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): EventAttendanceAggregate!

  """An array relationship"""
  eventChangeRoles(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): [EventChangeRole!]!

  """An aggregate relationship"""
  eventChangeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): EventChangeRoleAggregate!

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """An array relationship"""
  eventRoles(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """An aggregate relationship"""
  eventRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): EventRoleAggregate!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """An array relationship"""
  expenses(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """An aggregate relationship"""
  expensesAggregate(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  """An array relationship"""
  favorites(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): [Favorite!]!

  """An aggregate relationship"""
  favoritesAggregate(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  """An array relationship"""
  fileUploads(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): [FileUpload!]!

  """An aggregate relationship"""
  fileUploadsAggregate(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  """An array relationship"""
  follows(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): [Follow!]!

  """An aggregate relationship"""
  followsAggregate(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): FollowAggregate!

  """An array relationship"""
  formEdits(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): [FormEdit!]!

  """An aggregate relationship"""
  formEditsAggregate(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): FormEditAggregate!

  """An array relationship"""
  formSubmissionEdits(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): [FormSubmissionEdit!]!

  """An aggregate relationship"""
  formSubmissionEditsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): FormSubmissionEditAggregate!

  """An array relationship"""
  formSubmissions(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  """An aggregate relationship"""
  formSubmissionsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  """An array relationship"""
  forms(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): [Form!]!

  """An aggregate relationship"""
  formsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): FormAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An array relationship"""
  individuals(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): [Individual!]!

  """An aggregate relationship"""
  individualsAggregate(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): IndividualAggregate!

  """An array relationship"""
  issues(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): [Issue!]!

  """An aggregate relationship"""
  issuesAggregate(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): IssueAggregate!
  passwordHash: String

  """An array relationship"""
  poles(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): [Pole!]!

  """An aggregate relationship"""
  polesAggregate(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): PoleAggregate!

  """An array relationship"""
  projectRoles(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): [ProjectRole!]!

  """An aggregate relationship"""
  projectRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): ProjectRoleAggregate!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): [Project!]!

  """An aggregate relationship"""
  projectsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): ProjectAggregate!

  """An array relationship"""
  reactions(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): [Reaction!]!

  """An aggregate relationship"""
  reactionsAggregate(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): ReactionAggregate!

  """An array relationship"""
  reports(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): [Report!]!

  """An aggregate relationship"""
  reportsAggregate(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): ReportAggregate!

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """An aggregate relationship"""
  rolesAggregate(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): RoleAggregate!
  scopeRole: String!

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): [Session!]!

  """An aggregate relationship"""
  sessionsAggregate(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): SessionAggregate!

  """An array relationship"""
  shortcuts(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): [Shortcut!]!

  """An aggregate relationship"""
  shortcutsAggregate(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  """An array relationship"""
  socials(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): [Social!]!

  """An aggregate relationship"""
  socialsAggregate(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): SocialAggregate!
  status: String!

  """An array relationship"""
  subjects(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): [Subject!]!

  """An aggregate relationship"""
  subjectsAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): SubjectAggregate!

  """An array relationship"""
  tags(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): [Tag!]!

  """An aggregate relationship"""
  tagsAggregate(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): TagAggregate!

  """An array relationship"""
  teamFinanceEdits(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """An aggregate relationship"""
  teamFinanceEditsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!

  """An array relationship"""
  teamJoins(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """An aggregate relationship"""
  teamJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """An array relationship"""
  teamMembers(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  """An aggregate relationship"""
  teamMembersAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  """An array relationship"""
  teamMetrics(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  """An aggregate relationship"""
  teamMetricsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  """An array relationship"""
  teams(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): [Team!]!

  """An aggregate relationship"""
  teamsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): TeamAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!

  """An array relationship"""
  tenants(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): [Tenant!]!

  """An aggregate relationship"""
  tenantsAggregate(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): TenantAggregate!
  userId: bigint

  """An object relationship"""
  userInfo: UserInfo

  """An array relationship"""
  userInfos(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): [UserInfo!]!

  """An aggregate relationship"""
  userInfosAggregate(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  """An array relationship"""
  validations(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): [Validation!]!

  """An aggregate relationship"""
  validationsAggregate(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): ValidationAggregate!

  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): [Vote!]!

  """An aggregate relationship"""
  votesAggregate(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): VoteAggregate!
}

"""
aggregated selection of "individual"
"""
type IndividualAggregate {
  aggregate: IndividualAggregateFields
  nodes: [Individual!]!
}

input IndividualAggregateBoolExp {
  count: individualAggregateBoolExpCount
}

input individualAggregateBoolExpCount {
  arguments: [IndividualSelectColumn!]
  distinct: Boolean
  filter: IndividualBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "individual"
"""
type IndividualAggregateFields {
  avg: IndividualAvgFields
  count(columns: [IndividualSelectColumn!], distinct: Boolean): Int!
  max: IndividualMaxFields
  min: IndividualMinFields
  stddev: IndividualStddevFields
  stddevPop: IndividualStddevPopFields
  stddevSamp: IndividualStddevSampFields
  sum: IndividualSumFields
  varPop: IndividualVarPopFields
  varSamp: IndividualVarSampFields
  variance: IndividualVarianceFields
}

"""
order by aggregate values of table "individual"
"""
input IndividualAggregateOrderBy {
  avg: IndividualAvgOrderBy
  count: OrderBy
  max: IndividualMaxOrderBy
  min: IndividualMinOrderBy
  stddev: IndividualStddevOrderBy
  stddevPop: IndividualStddevPopOrderBy
  stddevSamp: IndividualStddevSampOrderBy
  sum: IndividualSumOrderBy
  varPop: IndividualVarPopOrderBy
  varSamp: IndividualVarSampOrderBy
  variance: IndividualVarianceOrderBy
}

"""
input type for inserting array relation for remote table "individual"
"""
input IndividualArrRelInsertInput {
  data: [IndividualInsertInput!]!

  """upsert condition"""
  onConflict: IndividualOnConflict
}

"""aggregate avg on columns"""
type IndividualAvgFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by avg() on columns of table "individual"
"""
input IndividualAvgOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to filter rows from the table "individual". All fields are combined with a logical 'AND'.
"""
input IndividualBoolExp {
  _and: [IndividualBoolExp!]
  _not: IndividualBoolExp
  _or: [IndividualBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actionsByValidatedById: ActionBoolExp
  actionsByValidatedByIdAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  botId: BigintComparisonExp
  botInfo: BotInfoBoolExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  canteens: CanteenBoolExp
  canteensAggregate: CanteenAggregateBoolExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  classGroups: ClassGroupBoolExp
  classGroupsAggregate: ClassGroupAggregateBoolExp
  cohorts: CohortBoolExp
  cohortsAggregate: CohortAggregateBoolExp
  contentEdits: ContentEditBoolExp
  contentEditsAggregate: ContentEditAggregateBoolExp
  contentMasterContributors: ContentMasterContributorsBoolExp
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateBoolExp
  contentMasters: ContentMasterBoolExp
  contentMastersAggregate: ContentMasterAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  eventApprovalStepNotifiees: EventApprovalStepNotifieesBoolExp
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateBoolExp
  eventApprovalStepValidators: EventApprovalStepValidatorsBoolExp
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateBoolExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventAttendances: EventAttendanceBoolExp
  eventAttendancesAggregate: EventAttendanceAggregateBoolExp
  eventChangeRoles: EventChangeRoleBoolExp
  eventChangeRolesAggregate: EventChangeRoleAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  formEdits: FormEditBoolExp
  formEditsAggregate: FormEditAggregateBoolExp
  formSubmissionEdits: FormSubmissionEditBoolExp
  formSubmissionEditsAggregate: FormSubmissionEditAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individuals: IndividualBoolExp
  individualsAggregate: IndividualAggregateBoolExp
  issues: IssueBoolExp
  issuesAggregate: IssueAggregateBoolExp
  passwordHash: StringComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projectRoles: ProjectRoleBoolExp
  projectRolesAggregate: ProjectRoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  scopeRole: StringComparisonExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  status: StringComparisonExp
  subjects: SubjectBoolExp
  subjectsAggregate: SubjectAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamFinanceEdits: TeamFinanceEditBoolExp
  teamFinanceEditsAggregate: TeamFinanceEditAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamMetrics: TeamMetricBoolExp
  teamMetricsAggregate: TeamMetricAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tenants: TenantBoolExp
  tenantsAggregate: TenantAggregateBoolExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
  userInfos: UserInfoBoolExp
  userInfosAggregate: UserInfoAggregateBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

"""
unique or primary key constraints on table "individual"
"""
enum IndividualConstraint {
  """
  unique or primary key constraint on columns "bot_id"
  """
  individual_bot_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  individual_pkey

  """
  unique or primary key constraint on columns "user_id"
  """
  individual_user_id_unique
}

"""
input type for incrementing numeric columns in table "individual"
"""
input IndividualIncInput {
  botId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

"""
input type for inserting data into table "individual"
"""
input IndividualInsertInput {
  actions: ActionArrRelInsertInput
  actionsByValidatedById: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actors: ActorArrRelInsertInput
  botId: bigint
  botInfo: BotInfoObjRelInsertInput
  botInfos: BotInfoArrRelInsertInput
  campuses: CampusArrRelInsertInput
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  canteens: CanteenArrRelInsertInput
  changeRoles: ChangeRoleArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  classGroups: ClassGroupArrRelInsertInput
  cohorts: CohortArrRelInsertInput
  contentEdits: ContentEditArrRelInsertInput
  contentMasterContributors: ContentMasterContributorsArrRelInsertInput
  contentMasters: ContentMasterArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentEdits: DocumentEditArrRelInsertInput
  documents: DocumentArrRelInsertInput
  eventApprovalStepNotifiees: EventApprovalStepNotifieesArrRelInsertInput
  eventApprovalStepValidators: EventApprovalStepValidatorsArrRelInsertInput
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventAttendances: EventAttendanceArrRelInsertInput
  eventChangeRoles: EventChangeRoleArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  events: EventArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  favorites: FavoriteArrRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  follows: FollowArrRelInsertInput
  formEdits: FormEditArrRelInsertInput
  formSubmissionEdits: FormSubmissionEditArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individuals: IndividualArrRelInsertInput
  issues: IssueArrRelInsertInput
  passwordHash: String
  poles: PoleArrRelInsertInput
  projectRoles: ProjectRoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  roles: RoleArrRelInsertInput
  scopeRole: String
  sessions: SessionArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  socials: SocialArrRelInsertInput
  status: String
  subjects: SubjectArrRelInsertInput
  tags: TagArrRelInsertInput
  teamFinanceEdits: TeamFinanceEditArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamMetrics: TeamMetricArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tenants: TenantArrRelInsertInput
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
  userInfos: UserInfoArrRelInsertInput
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

"""aggregate max on columns"""
type IndividualMaxFields {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  status: String
  tenantId: bigint
  userId: bigint
}

"""
order by max() on columns of table "individual"
"""
input IndividualMaxOrderBy {
  botId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  scopeRole: OrderBy
  status: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate min on columns"""
type IndividualMinFields {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  status: String
  tenantId: bigint
  userId: bigint
}

"""
order by min() on columns of table "individual"
"""
input IndividualMinOrderBy {
  botId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  scopeRole: OrderBy
  status: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
response of any mutation on the table "individual"
"""
type IndividualMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Individual!]!
}

"""
input type for inserting object relation for remote table "individual"
"""
input IndividualObjRelInsertInput {
  data: IndividualInsertInput!

  """upsert condition"""
  onConflict: IndividualOnConflict
}

"""
on_conflict condition type for table "individual"
"""
input IndividualOnConflict {
  constraint: IndividualConstraint!
  updateColumns: [IndividualUpdateColumn!]! = []
  where: IndividualBoolExp
}

"""Ordering options when selecting data from "individual"."""
input IndividualOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actionsByValidatedByIdAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  botId: OrderBy
  botInfo: BotInfoOrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  canteensAggregate: CanteenAggregateOrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  classGroupsAggregate: ClassGroupAggregateOrderBy
  cohortsAggregate: CohortAggregateOrderBy
  contentEditsAggregate: ContentEditAggregateOrderBy
  contentMasterContributorsAggregate: ContentMasterContributorsAggregateOrderBy
  contentMastersAggregate: ContentMasterAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  documentsAggregate: DocumentAggregateOrderBy
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateOrderBy
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateOrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventAttendancesAggregate: EventAttendanceAggregateOrderBy
  eventChangeRolesAggregate: EventChangeRoleAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  formEditsAggregate: FormEditAggregateOrderBy
  formSubmissionEditsAggregate: FormSubmissionEditAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualsAggregate: IndividualAggregateOrderBy
  issuesAggregate: IssueAggregateOrderBy
  passwordHash: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectRolesAggregate: ProjectRoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  scopeRole: OrderBy
  sessionsAggregate: SessionAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  status: OrderBy
  subjectsAggregate: SubjectAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  teamFinanceEditsAggregate: TeamFinanceEditAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamMetricsAggregate: TeamMetricAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tenantsAggregate: TenantAggregateOrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
  userInfosAggregate: UserInfoAggregateOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

"""primary key columns input for table: individual"""
input IndividualPkColumnsInput {
  id: bigint!
}

"""
select columns of table "individual"
"""
enum IndividualSelectColumn {
  """column name"""
  botId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  passwordHash

  """column name"""
  scopeRole

  """column name"""
  status

  """column name"""
  tenantId

  """column name"""
  userId
}

"""
input type for updating data in table "individual"
"""
input IndividualSetInput {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  status: String
  tenantId: bigint
  userId: bigint
}

"""aggregate stddev on columns"""
type IndividualStddevFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddev() on columns of table "individual"
"""
input IndividualStddevOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevPop on columns"""
type IndividualStddevPopFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevPop() on columns of table "individual"
"""
input IndividualStddevPopOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevSamp on columns"""
type IndividualStddevSampFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevSamp() on columns of table "individual"
"""
input IndividualStddevSampOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "individual"
"""
input IndividualStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: IndividualStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input IndividualStreamCursorValueInput {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  status: String
  tenantId: bigint
  userId: bigint
}

"""aggregate sum on columns"""
type IndividualSumFields {
  botId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by sum() on columns of table "individual"
"""
input IndividualSumOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "individual"
"""
enum IndividualUpdateColumn {
  """column name"""
  botId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  passwordHash

  """column name"""
  scopeRole

  """column name"""
  status

  """column name"""
  tenantId

  """column name"""
  userId
}

input IndividualUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: IndividualIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: IndividualSetInput

  """filter the rows which have to be updated"""
  where: IndividualBoolExp!
}

"""aggregate variance on columns"""
type IndividualVarianceFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by variance() on columns of table "individual"
"""
input IndividualVarianceOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varPop on columns"""
type IndividualVarPopFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by varPop() on columns of table "individual"
"""
input IndividualVarPopOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varSamp on columns"""
type IndividualVarSampFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by varSamp() on columns of table "individual"
"""
input IndividualVarSampOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "issue"
"""
type Issue {
  """An object relationship"""
  contentMaster: ContentMaster!
  contentMasterId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An array relationship"""
  expenses(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """An aggregate relationship"""
  expensesAggregate(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): ExpenseAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "issue"
"""
type IssueAggregate {
  aggregate: IssueAggregateFields
  nodes: [Issue!]!
}

input IssueAggregateBoolExp {
  count: issueAggregateBoolExpCount
}

input issueAggregateBoolExpCount {
  arguments: [IssueSelectColumn!]
  distinct: Boolean
  filter: IssueBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "issue"
"""
type IssueAggregateFields {
  avg: IssueAvgFields
  count(columns: [IssueSelectColumn!], distinct: Boolean): Int!
  max: IssueMaxFields
  min: IssueMinFields
  stddev: IssueStddevFields
  stddevPop: IssueStddevPopFields
  stddevSamp: IssueStddevSampFields
  sum: IssueSumFields
  varPop: IssueVarPopFields
  varSamp: IssueVarSampFields
  variance: IssueVarianceFields
}

"""
order by aggregate values of table "issue"
"""
input IssueAggregateOrderBy {
  avg: IssueAvgOrderBy
  count: OrderBy
  max: IssueMaxOrderBy
  min: IssueMinOrderBy
  stddev: IssueStddevOrderBy
  stddevPop: IssueStddevPopOrderBy
  stddevSamp: IssueStddevSampOrderBy
  sum: IssueSumOrderBy
  varPop: IssueVarPopOrderBy
  varSamp: IssueVarSampOrderBy
  variance: IssueVarianceOrderBy
}

"""
input type for inserting array relation for remote table "issue"
"""
input IssueArrRelInsertInput {
  data: [IssueInsertInput!]!

  """upsert condition"""
  onConflict: IssueOnConflict
}

"""aggregate avg on columns"""
type IssueAvgFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "issue"
"""
input IssueAvgOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "issue". All fields are combined with a logical 'AND'.
"""
input IssueBoolExp {
  _and: [IssueBoolExp!]
  _not: IssueBoolExp
  _or: [IssueBoolExp!]
  contentMaster: ContentMasterBoolExp
  contentMasterId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "issue"
"""
enum IssueConstraint {
  """
  unique or primary key constraint on columns "content_master_id"
  """
  issue_content_master_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  issue_pkey
}

"""
input type for incrementing numeric columns in table "issue"
"""
input IssueIncInput {
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "issue"
"""
input IssueInsertInput {
  contentMaster: ContentMasterObjRelInsertInput
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expenses: ExpenseArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type IssueMaxFields {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "issue"
"""
input IssueMaxOrderBy {
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type IssueMinFields {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "issue"
"""
input IssueMinOrderBy {
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "issue"
"""
type IssueMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Issue!]!
}

"""
input type for inserting object relation for remote table "issue"
"""
input IssueObjRelInsertInput {
  data: IssueInsertInput!

  """upsert condition"""
  onConflict: IssueOnConflict
}

"""
on_conflict condition type for table "issue"
"""
input IssueOnConflict {
  constraint: IssueConstraint!
  updateColumns: [IssueUpdateColumn!]! = []
  where: IssueBoolExp
}

"""Ordering options when selecting data from "issue"."""
input IssueOrderBy {
  contentMaster: ContentMasterOrderBy
  contentMasterId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: issue"""
input IssuePkColumnsInput {
  id: bigint!
}

"""
select columns of table "issue"
"""
enum IssueSelectColumn {
  """column name"""
  contentMasterId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

"""
input type for updating data in table "issue"
"""
input IssueSetInput {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type IssueStddevFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "issue"
"""
input IssueStddevOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type IssueStddevPopFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "issue"
"""
input IssueStddevPopOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type IssueStddevSampFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "issue"
"""
input IssueStddevSampOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "issue"
"""
input IssueStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: IssueStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input IssueStreamCursorValueInput {
  contentMasterId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type IssueSumFields {
  contentMasterId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "issue"
"""
input IssueSumOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "issue"
"""
enum IssueUpdateColumn {
  """column name"""
  contentMasterId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId
}

input IssueUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: IssueIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: IssueSetInput

  """filter the rows which have to be updated"""
  where: IssueBoolExp!
}

"""aggregate variance on columns"""
type IssueVarianceFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "issue"
"""
input IssueVarianceOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type IssueVarPopFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "issue"
"""
input IssueVarPopOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type IssueVarSampFields {
  contentMasterId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "issue"
"""
input IssueVarSampOrderBy {
  contentMasterId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

scalar jsonb

input JsonbCastExp {
  String: StringComparisonExp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
  _cast: JsonbCastExp

  """is the column contained in the given json value"""
  _containedIn: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _hasKey: String

  """do all of these strings exist as top-level keys in the column"""
  _hasKeysAll: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type Mutation {
  """
  delete data from the table: "action"
  """
  deleteAction(
    """filter the rows which have to be deleted"""
    where: ActionBoolExp!
  ): ActionMutationResponse

  """
  delete single row from the table: "action"
  """
  deleteActionByPk(id: bigint!): Action

  """
  delete data from the table: "actor"
  """
  deleteActor(
    """filter the rows which have to be deleted"""
    where: ActorBoolExp!
  ): ActorMutationResponse

  """
  delete data from the table: "actor_address"
  """
  deleteActorAddress(
    """filter the rows which have to be deleted"""
    where: ActorAddressBoolExp!
  ): ActorAddressMutationResponse

  """
  delete single row from the table: "actor_address"
  """
  deleteActorAddressByPk(id: bigint!): ActorAddress

  """
  delete data from the table: "actor_bank_info"
  """
  deleteActorBankInfo(
    """filter the rows which have to be deleted"""
    where: ActorBankInfoBoolExp!
  ): ActorBankInfoMutationResponse

  """
  delete single row from the table: "actor_bank_info"
  """
  deleteActorBankInfoByPk(id: bigint!): ActorBankInfo

  """
  delete single row from the table: "actor"
  """
  deleteActorByPk(id: bigint!): Actor

  """
  delete data from the table: "actor_finance"
  """
  deleteActorFinance(
    """filter the rows which have to be deleted"""
    where: ActorFinanceBoolExp!
  ): ActorFinanceMutationResponse

  """
  delete single row from the table: "actor_finance"
  """
  deleteActorFinanceByPk(id: bigint!): ActorFinance

  """
  delete data from the table: "actor_image"
  """
  deleteActorImage(
    """filter the rows which have to be deleted"""
    where: ActorImageBoolExp!
  ): ActorImageMutationResponse

  """
  delete single row from the table: "actor_image"
  """
  deleteActorImageByPk(id: bigint!): ActorImage

  """
  delete data from the table: "actor_tags"
  """
  deleteActorTags(
    """filter the rows which have to be deleted"""
    where: ActorTagsBoolExp!
  ): ActorTagsMutationResponse

  """
  delete single row from the table: "actor_tags"
  """
  deleteActorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags

  """
  delete data from the table: "bot_info"
  """
  deleteBotInfo(
    """filter the rows which have to be deleted"""
    where: BotInfoBoolExp!
  ): BotInfoMutationResponse

  """
  delete single row from the table: "bot_info"
  """
  deleteBotInfoByPk(id: bigint!): BotInfo

  """
  delete data from the table: "campus"
  """
  deleteCampus(
    """filter the rows which have to be deleted"""
    where: CampusBoolExp!
  ): CampusMutationResponse

  """
  delete single row from the table: "campus"
  """
  deleteCampusByPk(id: bigint!): Campus

  """
  delete data from the table: "canteen"
  """
  deleteCanteen(
    """filter the rows which have to be deleted"""
    where: CanteenBoolExp!
  ): CanteenMutationResponse

  """
  delete single row from the table: "canteen"
  """
  deleteCanteenByPk(id: bigint!): Canteen

  """
  delete data from the table: "canteen_food"
  """
  deleteCanteenFood(
    """filter the rows which have to be deleted"""
    where: CanteenFoodBoolExp!
  ): CanteenFoodMutationResponse

  """
  delete single row from the table: "canteen_food"
  """
  deleteCanteenFoodByPk(id: bigint!): CanteenFood

  """
  delete data from the table: "canteen_menu"
  """
  deleteCanteenMenu(
    """filter the rows which have to be deleted"""
    where: CanteenMenuBoolExp!
  ): CanteenMenuMutationResponse

  """
  delete single row from the table: "canteen_menu"
  """
  deleteCanteenMenuByPk(id: bigint!): CanteenMenu

  """
  delete data from the table: "change_role"
  """
  deleteChangeRole(
    """filter the rows which have to be deleted"""
    where: ChangeRoleBoolExp!
  ): ChangeRoleMutationResponse

  """
  delete single row from the table: "change_role"
  """
  deleteChangeRoleByPk(id: bigint!): ChangeRole

  """
  delete data from the table: "class_group"
  """
  deleteClassGroup(
    """filter the rows which have to be deleted"""
    where: ClassGroupBoolExp!
  ): ClassGroupMutationResponse

  """
  delete single row from the table: "class_group"
  """
  deleteClassGroupByPk(id: bigint!): ClassGroup

  """
  delete data from the table: "class_group_teacher"
  """
  deleteClassGroupTeacher(
    """filter the rows which have to be deleted"""
    where: ClassGroupTeacherBoolExp!
  ): ClassGroupTeacherMutationResponse

  """
  delete single row from the table: "class_group_teacher"
  """
  deleteClassGroupTeacherByPk(id: bigint!): ClassGroupTeacher

  """
  delete data from the table: "class_group_teacher_subjects"
  """
  deleteClassGroupTeacherSubjects(
    """filter the rows which have to be deleted"""
    where: ClassGroupTeacherSubjectsBoolExp!
  ): ClassGroupTeacherSubjectsMutationResponse

  """
  delete single row from the table: "class_group_teacher_subjects"
  """
  deleteClassGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects

  """
  delete data from the table: "cohort"
  """
  deleteCohort(
    """filter the rows which have to be deleted"""
    where: CohortBoolExp!
  ): CohortMutationResponse

  """
  delete single row from the table: "cohort"
  """
  deleteCohortByPk(id: bigint!): Cohort

  """
  delete data from the table: "content"
  """
  deleteContent(
    """filter the rows which have to be deleted"""
    where: ContentBoolExp!
  ): ContentMutationResponse

  """
  delete data from the table: "content_attachments"
  """
  deleteContentAttachments(
    """filter the rows which have to be deleted"""
    where: ContentAttachmentsBoolExp!
  ): ContentAttachmentsMutationResponse

  """
  delete single row from the table: "content_attachments"
  """
  deleteContentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments

  """
  delete single row from the table: "content"
  """
  deleteContentByPk(id: bigint!): Content

  """
  delete data from the table: "content_edit"
  """
  deleteContentEdit(
    """filter the rows which have to be deleted"""
    where: ContentEditBoolExp!
  ): ContentEditMutationResponse

  """
  delete single row from the table: "content_edit"
  """
  deleteContentEditByPk(id: bigint!): ContentEdit

  """
  delete data from the table: "content_master"
  """
  deleteContentMaster(
    """filter the rows which have to be deleted"""
    where: ContentMasterBoolExp!
  ): ContentMasterMutationResponse

  """
  delete single row from the table: "content_master"
  """
  deleteContentMasterByPk(id: bigint!): ContentMaster

  """
  delete data from the table: "content_master_contributors"
  """
  deleteContentMasterContributors(
    """filter the rows which have to be deleted"""
    where: ContentMasterContributorsBoolExp!
  ): ContentMasterContributorsMutationResponse

  """
  delete single row from the table: "content_master_contributors"
  """
  deleteContentMasterContributorsByPk(contentMasterId: bigint!, individualId: bigint!): ContentMasterContributors

  """
  delete data from the table: "content_master_tags"
  """
  deleteContentMasterTags(
    """filter the rows which have to be deleted"""
    where: ContentMasterTagsBoolExp!
  ): ContentMasterTagsMutationResponse

  """
  delete single row from the table: "content_master_tags"
  """
  deleteContentMasterTagsByPk(contentMasterId: bigint!, tagId: bigint!): ContentMasterTags

  """
  delete data from the table: "content_teams"
  """
  deleteContentTeams(
    """filter the rows which have to be deleted"""
    where: ContentTeamsBoolExp!
  ): ContentTeamsMutationResponse

  """
  delete single row from the table: "content_teams"
  """
  deleteContentTeamsByPk(contentId: bigint!, teamId: bigint!): ContentTeams

  """
  delete data from the table: "document"
  """
  deleteDocument(
    """filter the rows which have to be deleted"""
    where: DocumentBoolExp!
  ): DocumentMutationResponse

  """
  delete single row from the table: "document"
  """
  deleteDocumentByPk(id: bigint!): Document

  """
  delete data from the table: "document_edit"
  """
  deleteDocumentEdit(
    """filter the rows which have to be deleted"""
    where: DocumentEditBoolExp!
  ): DocumentEditMutationResponse

  """
  delete single row from the table: "document_edit"
  """
  deleteDocumentEditByPk(id: bigint!): DocumentEdit

  """
  delete data from the table: "event"
  """
  deleteEvent(
    """filter the rows which have to be deleted"""
    where: EventBoolExp!
  ): EventMutationResponse

  """
  delete data from the table: "event_approval"
  """
  deleteEventApproval(
    """filter the rows which have to be deleted"""
    where: EventApprovalBoolExp!
  ): EventApprovalMutationResponse

  """
  delete single row from the table: "event_approval"
  """
  deleteEventApprovalByPk(id: bigint!): EventApproval

  """
  delete data from the table: "event_approval_step"
  """
  deleteEventApprovalStep(
    """filter the rows which have to be deleted"""
    where: EventApprovalStepBoolExp!
  ): EventApprovalStepMutationResponse

  """
  delete single row from the table: "event_approval_step"
  """
  deleteEventApprovalStepByPk(id: bigint!): EventApprovalStep

  """
  delete data from the table: "event_approval_step_notifiees"
  """
  deleteEventApprovalStepNotifiees(
    """filter the rows which have to be deleted"""
    where: EventApprovalStepNotifieesBoolExp!
  ): EventApprovalStepNotifieesMutationResponse

  """
  delete single row from the table: "event_approval_step_notifiees"
  """
  deleteEventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees

  """
  delete data from the table: "event_approval_step_validators"
  """
  deleteEventApprovalStepValidators(
    """filter the rows which have to be deleted"""
    where: EventApprovalStepValidatorsBoolExp!
  ): EventApprovalStepValidatorsMutationResponse

  """
  delete single row from the table: "event_approval_step_validators"
  """
  deleteEventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators

  """
  delete data from the table: "event_attendance"
  """
  deleteEventAttendance(
    """filter the rows which have to be deleted"""
    where: EventAttendanceBoolExp!
  ): EventAttendanceMutationResponse

  """
  delete single row from the table: "event_attendance"
  """
  deleteEventAttendanceByPk(id: bigint!): EventAttendance

  """
  delete single row from the table: "event"
  """
  deleteEventByPk(id: bigint!): Event

  """
  delete data from the table: "event_change_role"
  """
  deleteEventChangeRole(
    """filter the rows which have to be deleted"""
    where: EventChangeRoleBoolExp!
  ): EventChangeRoleMutationResponse

  """
  delete single row from the table: "event_change_role"
  """
  deleteEventChangeRoleByPk(id: bigint!): EventChangeRole

  """
  delete data from the table: "event_join"
  """
  deleteEventJoin(
    """filter the rows which have to be deleted"""
    where: EventJoinBoolExp!
  ): EventJoinMutationResponse

  """
  delete single row from the table: "event_join"
  """
  deleteEventJoinByPk(id: bigint!): EventJoin

  """
  delete data from the table: "event_role"
  """
  deleteEventRole(
    """filter the rows which have to be deleted"""
    where: EventRoleBoolExp!
  ): EventRoleMutationResponse

  """
  delete single row from the table: "event_role"
  """
  deleteEventRoleByPk(id: bigint!): EventRole

  """
  delete data from the table: "event_tags"
  """
  deleteEventTags(
    """filter the rows which have to be deleted"""
    where: EventTagsBoolExp!
  ): EventTagsMutationResponse

  """
  delete single row from the table: "event_tags"
  """
  deleteEventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags

  """
  delete data from the table: "expense"
  """
  deleteExpense(
    """filter the rows which have to be deleted"""
    where: ExpenseBoolExp!
  ): ExpenseMutationResponse

  """
  delete single row from the table: "expense"
  """
  deleteExpenseByPk(id: bigint!): Expense

  """
  delete data from the table: "favorite"
  """
  deleteFavorite(
    """filter the rows which have to be deleted"""
    where: FavoriteBoolExp!
  ): FavoriteMutationResponse

  """
  delete single row from the table: "favorite"
  """
  deleteFavoriteByPk(id: bigint!): Favorite

  """
  delete data from the table: "file_upload"
  """
  deleteFileUpload(
    """filter the rows which have to be deleted"""
    where: FileUploadBoolExp!
  ): FileUploadMutationResponse

  """
  delete single row from the table: "file_upload"
  """
  deleteFileUploadByPk(id: bigint!): FileUpload

  """
  delete data from the table: "follow"
  """
  deleteFollow(
    """filter the rows which have to be deleted"""
    where: FollowBoolExp!
  ): FollowMutationResponse

  """
  delete single row from the table: "follow"
  """
  deleteFollowByPk(id: bigint!): Follow

  """
  delete data from the table: "form"
  """
  deleteForm(
    """filter the rows which have to be deleted"""
    where: FormBoolExp!
  ): FormMutationResponse

  """
  delete single row from the table: "form"
  """
  deleteFormByPk(id: bigint!): Form

  """
  delete data from the table: "form_edit"
  """
  deleteFormEdit(
    """filter the rows which have to be deleted"""
    where: FormEditBoolExp!
  ): FormEditMutationResponse

  """
  delete single row from the table: "form_edit"
  """
  deleteFormEditByPk(id: bigint!): FormEdit

  """
  delete data from the table: "form_submission"
  """
  deleteFormSubmission(
    """filter the rows which have to be deleted"""
    where: FormSubmissionBoolExp!
  ): FormSubmissionMutationResponse

  """
  delete single row from the table: "form_submission"
  """
  deleteFormSubmissionByPk(id: bigint!): FormSubmission

  """
  delete data from the table: "form_submission_edit"
  """
  deleteFormSubmissionEdit(
    """filter the rows which have to be deleted"""
    where: FormSubmissionEditBoolExp!
  ): FormSubmissionEditMutationResponse

  """
  delete single row from the table: "form_submission_edit"
  """
  deleteFormSubmissionEditByPk(id: bigint!): FormSubmissionEdit

  """
  delete data from the table: "individual"
  """
  deleteIndividual(
    """filter the rows which have to be deleted"""
    where: IndividualBoolExp!
  ): IndividualMutationResponse

  """
  delete single row from the table: "individual"
  """
  deleteIndividualByPk(id: bigint!): Individual

  """
  delete data from the table: "issue"
  """
  deleteIssue(
    """filter the rows which have to be deleted"""
    where: IssueBoolExp!
  ): IssueMutationResponse

  """
  delete single row from the table: "issue"
  """
  deleteIssueByPk(id: bigint!): Issue

  """
  delete data from the table: "pole"
  """
  deletePole(
    """filter the rows which have to be deleted"""
    where: PoleBoolExp!
  ): PoleMutationResponse

  """
  delete single row from the table: "pole"
  """
  deletePoleByPk(id: bigint!): Pole

  """
  delete data from the table: "project"
  """
  deleteProject(
    """filter the rows which have to be deleted"""
    where: ProjectBoolExp!
  ): ProjectMutationResponse

  """
  delete single row from the table: "project"
  """
  deleteProjectByPk(id: bigint!): Project

  """
  delete data from the table: "project_role"
  """
  deleteProjectRole(
    """filter the rows which have to be deleted"""
    where: ProjectRoleBoolExp!
  ): ProjectRoleMutationResponse

  """
  delete single row from the table: "project_role"
  """
  deleteProjectRoleByPk(id: bigint!): ProjectRole

  """
  delete data from the table: "project_supervisors"
  """
  deleteProjectSupervisors(
    """filter the rows which have to be deleted"""
    where: ProjectSupervisorsBoolExp!
  ): ProjectSupervisorsMutationResponse

  """
  delete single row from the table: "project_supervisors"
  """
  deleteProjectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors

  """
  delete data from the table: "project_tags"
  """
  deleteProjectTags(
    """filter the rows which have to be deleted"""
    where: ProjectTagsBoolExp!
  ): ProjectTagsMutationResponse

  """
  delete single row from the table: "project_tags"
  """
  deleteProjectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags

  """
  delete data from the table: "reaction"
  """
  deleteReaction(
    """filter the rows which have to be deleted"""
    where: ReactionBoolExp!
  ): ReactionMutationResponse

  """
  delete single row from the table: "reaction"
  """
  deleteReactionByPk(id: bigint!): Reaction

  """
  delete data from the table: "report"
  """
  deleteReport(
    """filter the rows which have to be deleted"""
    where: ReportBoolExp!
  ): ReportMutationResponse

  """
  delete single row from the table: "report"
  """
  deleteReportByPk(id: bigint!): Report

  """
  delete data from the table: "role"
  """
  deleteRole(
    """filter the rows which have to be deleted"""
    where: RoleBoolExp!
  ): RoleMutationResponse

  """
  delete single row from the table: "role"
  """
  deleteRoleByPk(id: bigint!): Role

  """
  delete data from the table: "session"
  """
  deleteSession(
    """filter the rows which have to be deleted"""
    where: SessionBoolExp!
  ): SessionMutationResponse

  """
  delete single row from the table: "session"
  """
  deleteSessionByPk(id: bigint!): Session

  """
  delete data from the table: "shortcut"
  """
  deleteShortcut(
    """filter the rows which have to be deleted"""
    where: ShortcutBoolExp!
  ): ShortcutMutationResponse

  """
  delete single row from the table: "shortcut"
  """
  deleteShortcutByPk(id: bigint!): Shortcut

  """
  delete data from the table: "social"
  """
  deleteSocial(
    """filter the rows which have to be deleted"""
    where: SocialBoolExp!
  ): SocialMutationResponse

  """
  delete single row from the table: "social"
  """
  deleteSocialByPk(id: bigint!): Social

  """
  delete data from the table: "subject"
  """
  deleteSubject(
    """filter the rows which have to be deleted"""
    where: SubjectBoolExp!
  ): SubjectMutationResponse

  """
  delete single row from the table: "subject"
  """
  deleteSubjectByPk(id: bigint!): Subject

  """
  delete data from the table: "subject_class_groups"
  """
  deleteSubjectClassGroups(
    """filter the rows which have to be deleted"""
    where: SubjectClassGroupsBoolExp!
  ): SubjectClassGroupsMutationResponse

  """
  delete single row from the table: "subject_class_groups"
  """
  deleteSubjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups

  """
  delete data from the table: "tag"
  """
  deleteTag(
    """filter the rows which have to be deleted"""
    where: TagBoolExp!
  ): TagMutationResponse

  """
  delete single row from the table: "tag"
  """
  deleteTagByPk(id: bigint!): Tag

  """
  delete data from the table: "team"
  """
  deleteTeam(
    """filter the rows which have to be deleted"""
    where: TeamBoolExp!
  ): TeamMutationResponse

  """
  delete single row from the table: "team"
  """
  deleteTeamByPk(id: bigint!): Team

  """
  delete data from the table: "team_events"
  """
  deleteTeamEvents(
    """filter the rows which have to be deleted"""
    where: TeamEventsBoolExp!
  ): TeamEventsMutationResponse

  """
  delete single row from the table: "team_events"
  """
  deleteTeamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents

  """
  delete data from the table: "team_finance"
  """
  deleteTeamFinance(
    """filter the rows which have to be deleted"""
    where: TeamFinanceBoolExp!
  ): TeamFinanceMutationResponse

  """
  delete single row from the table: "team_finance"
  """
  deleteTeamFinanceByPk(id: bigint!): TeamFinance

  """
  delete data from the table: "team_finance_edit"
  """
  deleteTeamFinanceEdit(
    """filter the rows which have to be deleted"""
    where: TeamFinanceEditBoolExp!
  ): TeamFinanceEditMutationResponse

  """
  delete single row from the table: "team_finance_edit"
  """
  deleteTeamFinanceEditByPk(id: bigint!): TeamFinanceEdit

  """
  delete data from the table: "team_join"
  """
  deleteTeamJoin(
    """filter the rows which have to be deleted"""
    where: TeamJoinBoolExp!
  ): TeamJoinMutationResponse

  """
  delete single row from the table: "team_join"
  """
  deleteTeamJoinByPk(id: bigint!): TeamJoin

  """
  delete data from the table: "team_member"
  """
  deleteTeamMember(
    """filter the rows which have to be deleted"""
    where: TeamMemberBoolExp!
  ): TeamMemberMutationResponse

  """
  delete single row from the table: "team_member"
  """
  deleteTeamMemberByPk(id: bigint!): TeamMember

  """
  delete data from the table: "team_member_roles"
  """
  deleteTeamMemberRoles(
    """filter the rows which have to be deleted"""
    where: TeamMemberRolesBoolExp!
  ): TeamMemberRolesMutationResponse

  """
  delete single row from the table: "team_member_roles"
  """
  deleteTeamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles

  """
  delete data from the table: "team_metric"
  """
  deleteTeamMetric(
    """filter the rows which have to be deleted"""
    where: TeamMetricBoolExp!
  ): TeamMetricMutationResponse

  """
  delete single row from the table: "team_metric"
  """
  deleteTeamMetricByPk(id: bigint!): TeamMetric

  """
  delete data from the table: "tenant"
  """
  deleteTenant(
    """filter the rows which have to be deleted"""
    where: TenantBoolExp!
  ): TenantMutationResponse

  """
  delete single row from the table: "tenant"
  """
  deleteTenantByPk(id: bigint!): Tenant

  """
  delete data from the table: "user_info"
  """
  deleteUserInfo(
    """filter the rows which have to be deleted"""
    where: UserInfoBoolExp!
  ): UserInfoMutationResponse

  """
  delete single row from the table: "user_info"
  """
  deleteUserInfoByPk(id: bigint!): UserInfo

  """
  delete data from the table: "validation"
  """
  deleteValidation(
    """filter the rows which have to be deleted"""
    where: ValidationBoolExp!
  ): ValidationMutationResponse

  """
  delete single row from the table: "validation"
  """
  deleteValidationByPk(id: bigint!): Validation

  """
  delete data from the table: "vote"
  """
  deleteVote(
    """filter the rows which have to be deleted"""
    where: VoteBoolExp!
  ): VoteMutationResponse

  """
  delete single row from the table: "vote"
  """
  deleteVoteByPk(id: bigint!): Vote

  """
  insert data into the table: "action"
  """
  insertAction(
    """the rows to be inserted"""
    objects: [ActionInsertInput!]!

    """upsert condition"""
    onConflict: ActionOnConflict
  ): ActionMutationResponse

  """
  insert a single row into the table: "action"
  """
  insertActionOne(
    """the row to be inserted"""
    object: ActionInsertInput!

    """upsert condition"""
    onConflict: ActionOnConflict
  ): Action

  """
  insert data into the table: "actor"
  """
  insertActor(
    """the rows to be inserted"""
    objects: [ActorInsertInput!]!

    """upsert condition"""
    onConflict: ActorOnConflict
  ): ActorMutationResponse

  """
  insert data into the table: "actor_address"
  """
  insertActorAddress(
    """the rows to be inserted"""
    objects: [ActorAddressInsertInput!]!

    """upsert condition"""
    onConflict: ActorAddressOnConflict
  ): ActorAddressMutationResponse

  """
  insert a single row into the table: "actor_address"
  """
  insertActorAddressOne(
    """the row to be inserted"""
    object: ActorAddressInsertInput!

    """upsert condition"""
    onConflict: ActorAddressOnConflict
  ): ActorAddress

  """
  insert data into the table: "actor_bank_info"
  """
  insertActorBankInfo(
    """the rows to be inserted"""
    objects: [ActorBankInfoInsertInput!]!

    """upsert condition"""
    onConflict: ActorBankInfoOnConflict
  ): ActorBankInfoMutationResponse

  """
  insert a single row into the table: "actor_bank_info"
  """
  insertActorBankInfoOne(
    """the row to be inserted"""
    object: ActorBankInfoInsertInput!

    """upsert condition"""
    onConflict: ActorBankInfoOnConflict
  ): ActorBankInfo

  """
  insert data into the table: "actor_finance"
  """
  insertActorFinance(
    """the rows to be inserted"""
    objects: [ActorFinanceInsertInput!]!

    """upsert condition"""
    onConflict: ActorFinanceOnConflict
  ): ActorFinanceMutationResponse

  """
  insert a single row into the table: "actor_finance"
  """
  insertActorFinanceOne(
    """the row to be inserted"""
    object: ActorFinanceInsertInput!

    """upsert condition"""
    onConflict: ActorFinanceOnConflict
  ): ActorFinance

  """
  insert data into the table: "actor_image"
  """
  insertActorImage(
    """the rows to be inserted"""
    objects: [ActorImageInsertInput!]!

    """upsert condition"""
    onConflict: ActorImageOnConflict
  ): ActorImageMutationResponse

  """
  insert a single row into the table: "actor_image"
  """
  insertActorImageOne(
    """the row to be inserted"""
    object: ActorImageInsertInput!

    """upsert condition"""
    onConflict: ActorImageOnConflict
  ): ActorImage

  """
  insert a single row into the table: "actor"
  """
  insertActorOne(
    """the row to be inserted"""
    object: ActorInsertInput!

    """upsert condition"""
    onConflict: ActorOnConflict
  ): Actor

  """
  insert data into the table: "actor_tags"
  """
  insertActorTags(
    """the rows to be inserted"""
    objects: [ActorTagsInsertInput!]!

    """upsert condition"""
    onConflict: ActorTagsOnConflict
  ): ActorTagsMutationResponse

  """
  insert a single row into the table: "actor_tags"
  """
  insertActorTagsOne(
    """the row to be inserted"""
    object: ActorTagsInsertInput!

    """upsert condition"""
    onConflict: ActorTagsOnConflict
  ): ActorTags

  """
  insert data into the table: "bot_info"
  """
  insertBotInfo(
    """the rows to be inserted"""
    objects: [BotInfoInsertInput!]!

    """upsert condition"""
    onConflict: BotInfoOnConflict
  ): BotInfoMutationResponse

  """
  insert a single row into the table: "bot_info"
  """
  insertBotInfoOne(
    """the row to be inserted"""
    object: BotInfoInsertInput!

    """upsert condition"""
    onConflict: BotInfoOnConflict
  ): BotInfo

  """
  insert data into the table: "campus"
  """
  insertCampus(
    """the rows to be inserted"""
    objects: [CampusInsertInput!]!

    """upsert condition"""
    onConflict: CampusOnConflict
  ): CampusMutationResponse

  """
  insert a single row into the table: "campus"
  """
  insertCampusOne(
    """the row to be inserted"""
    object: CampusInsertInput!

    """upsert condition"""
    onConflict: CampusOnConflict
  ): Campus

  """
  insert data into the table: "canteen"
  """
  insertCanteen(
    """the rows to be inserted"""
    objects: [CanteenInsertInput!]!

    """upsert condition"""
    onConflict: CanteenOnConflict
  ): CanteenMutationResponse

  """
  insert data into the table: "canteen_food"
  """
  insertCanteenFood(
    """the rows to be inserted"""
    objects: [CanteenFoodInsertInput!]!

    """upsert condition"""
    onConflict: CanteenFoodOnConflict
  ): CanteenFoodMutationResponse

  """
  insert a single row into the table: "canteen_food"
  """
  insertCanteenFoodOne(
    """the row to be inserted"""
    object: CanteenFoodInsertInput!

    """upsert condition"""
    onConflict: CanteenFoodOnConflict
  ): CanteenFood

  """
  insert data into the table: "canteen_menu"
  """
  insertCanteenMenu(
    """the rows to be inserted"""
    objects: [CanteenMenuInsertInput!]!

    """upsert condition"""
    onConflict: CanteenMenuOnConflict
  ): CanteenMenuMutationResponse

  """
  insert a single row into the table: "canteen_menu"
  """
  insertCanteenMenuOne(
    """the row to be inserted"""
    object: CanteenMenuInsertInput!

    """upsert condition"""
    onConflict: CanteenMenuOnConflict
  ): CanteenMenu

  """
  insert a single row into the table: "canteen"
  """
  insertCanteenOne(
    """the row to be inserted"""
    object: CanteenInsertInput!

    """upsert condition"""
    onConflict: CanteenOnConflict
  ): Canteen

  """
  insert data into the table: "change_role"
  """
  insertChangeRole(
    """the rows to be inserted"""
    objects: [ChangeRoleInsertInput!]!

    """upsert condition"""
    onConflict: ChangeRoleOnConflict
  ): ChangeRoleMutationResponse

  """
  insert a single row into the table: "change_role"
  """
  insertChangeRoleOne(
    """the row to be inserted"""
    object: ChangeRoleInsertInput!

    """upsert condition"""
    onConflict: ChangeRoleOnConflict
  ): ChangeRole

  """
  insert data into the table: "class_group"
  """
  insertClassGroup(
    """the rows to be inserted"""
    objects: [ClassGroupInsertInput!]!

    """upsert condition"""
    onConflict: ClassGroupOnConflict
  ): ClassGroupMutationResponse

  """
  insert a single row into the table: "class_group"
  """
  insertClassGroupOne(
    """the row to be inserted"""
    object: ClassGroupInsertInput!

    """upsert condition"""
    onConflict: ClassGroupOnConflict
  ): ClassGroup

  """
  insert data into the table: "class_group_teacher"
  """
  insertClassGroupTeacher(
    """the rows to be inserted"""
    objects: [ClassGroupTeacherInsertInput!]!

    """upsert condition"""
    onConflict: ClassGroupTeacherOnConflict
  ): ClassGroupTeacherMutationResponse

  """
  insert a single row into the table: "class_group_teacher"
  """
  insertClassGroupTeacherOne(
    """the row to be inserted"""
    object: ClassGroupTeacherInsertInput!

    """upsert condition"""
    onConflict: ClassGroupTeacherOnConflict
  ): ClassGroupTeacher

  """
  insert data into the table: "class_group_teacher_subjects"
  """
  insertClassGroupTeacherSubjects(
    """the rows to be inserted"""
    objects: [ClassGroupTeacherSubjectsInsertInput!]!

    """upsert condition"""
    onConflict: ClassGroupTeacherSubjectsOnConflict
  ): ClassGroupTeacherSubjectsMutationResponse

  """
  insert a single row into the table: "class_group_teacher_subjects"
  """
  insertClassGroupTeacherSubjectsOne(
    """the row to be inserted"""
    object: ClassGroupTeacherSubjectsInsertInput!

    """upsert condition"""
    onConflict: ClassGroupTeacherSubjectsOnConflict
  ): ClassGroupTeacherSubjects

  """
  insert data into the table: "cohort"
  """
  insertCohort(
    """the rows to be inserted"""
    objects: [CohortInsertInput!]!

    """upsert condition"""
    onConflict: CohortOnConflict
  ): CohortMutationResponse

  """
  insert a single row into the table: "cohort"
  """
  insertCohortOne(
    """the row to be inserted"""
    object: CohortInsertInput!

    """upsert condition"""
    onConflict: CohortOnConflict
  ): Cohort

  """
  insert data into the table: "content"
  """
  insertContent(
    """the rows to be inserted"""
    objects: [ContentInsertInput!]!

    """upsert condition"""
    onConflict: ContentOnConflict
  ): ContentMutationResponse

  """
  insert data into the table: "content_attachments"
  """
  insertContentAttachments(
    """the rows to be inserted"""
    objects: [ContentAttachmentsInsertInput!]!

    """upsert condition"""
    onConflict: ContentAttachmentsOnConflict
  ): ContentAttachmentsMutationResponse

  """
  insert a single row into the table: "content_attachments"
  """
  insertContentAttachmentsOne(
    """the row to be inserted"""
    object: ContentAttachmentsInsertInput!

    """upsert condition"""
    onConflict: ContentAttachmentsOnConflict
  ): ContentAttachments

  """
  insert data into the table: "content_edit"
  """
  insertContentEdit(
    """the rows to be inserted"""
    objects: [ContentEditInsertInput!]!

    """upsert condition"""
    onConflict: ContentEditOnConflict
  ): ContentEditMutationResponse

  """
  insert a single row into the table: "content_edit"
  """
  insertContentEditOne(
    """the row to be inserted"""
    object: ContentEditInsertInput!

    """upsert condition"""
    onConflict: ContentEditOnConflict
  ): ContentEdit

  """
  insert data into the table: "content_master"
  """
  insertContentMaster(
    """the rows to be inserted"""
    objects: [ContentMasterInsertInput!]!

    """upsert condition"""
    onConflict: ContentMasterOnConflict
  ): ContentMasterMutationResponse

  """
  insert data into the table: "content_master_contributors"
  """
  insertContentMasterContributors(
    """the rows to be inserted"""
    objects: [ContentMasterContributorsInsertInput!]!

    """upsert condition"""
    onConflict: ContentMasterContributorsOnConflict
  ): ContentMasterContributorsMutationResponse

  """
  insert a single row into the table: "content_master_contributors"
  """
  insertContentMasterContributorsOne(
    """the row to be inserted"""
    object: ContentMasterContributorsInsertInput!

    """upsert condition"""
    onConflict: ContentMasterContributorsOnConflict
  ): ContentMasterContributors

  """
  insert a single row into the table: "content_master"
  """
  insertContentMasterOne(
    """the row to be inserted"""
    object: ContentMasterInsertInput!

    """upsert condition"""
    onConflict: ContentMasterOnConflict
  ): ContentMaster

  """
  insert data into the table: "content_master_tags"
  """
  insertContentMasterTags(
    """the rows to be inserted"""
    objects: [ContentMasterTagsInsertInput!]!

    """upsert condition"""
    onConflict: ContentMasterTagsOnConflict
  ): ContentMasterTagsMutationResponse

  """
  insert a single row into the table: "content_master_tags"
  """
  insertContentMasterTagsOne(
    """the row to be inserted"""
    object: ContentMasterTagsInsertInput!

    """upsert condition"""
    onConflict: ContentMasterTagsOnConflict
  ): ContentMasterTags

  """
  insert a single row into the table: "content"
  """
  insertContentOne(
    """the row to be inserted"""
    object: ContentInsertInput!

    """upsert condition"""
    onConflict: ContentOnConflict
  ): Content

  """
  insert data into the table: "content_teams"
  """
  insertContentTeams(
    """the rows to be inserted"""
    objects: [ContentTeamsInsertInput!]!

    """upsert condition"""
    onConflict: ContentTeamsOnConflict
  ): ContentTeamsMutationResponse

  """
  insert a single row into the table: "content_teams"
  """
  insertContentTeamsOne(
    """the row to be inserted"""
    object: ContentTeamsInsertInput!

    """upsert condition"""
    onConflict: ContentTeamsOnConflict
  ): ContentTeams

  """
  insert data into the table: "document"
  """
  insertDocument(
    """the rows to be inserted"""
    objects: [DocumentInsertInput!]!

    """upsert condition"""
    onConflict: DocumentOnConflict
  ): DocumentMutationResponse

  """
  insert data into the table: "document_edit"
  """
  insertDocumentEdit(
    """the rows to be inserted"""
    objects: [DocumentEditInsertInput!]!

    """upsert condition"""
    onConflict: DocumentEditOnConflict
  ): DocumentEditMutationResponse

  """
  insert a single row into the table: "document_edit"
  """
  insertDocumentEditOne(
    """the row to be inserted"""
    object: DocumentEditInsertInput!

    """upsert condition"""
    onConflict: DocumentEditOnConflict
  ): DocumentEdit

  """
  insert a single row into the table: "document"
  """
  insertDocumentOne(
    """the row to be inserted"""
    object: DocumentInsertInput!

    """upsert condition"""
    onConflict: DocumentOnConflict
  ): Document

  """
  insert data into the table: "event"
  """
  insertEvent(
    """the rows to be inserted"""
    objects: [EventInsertInput!]!

    """upsert condition"""
    onConflict: EventOnConflict
  ): EventMutationResponse

  """
  insert data into the table: "event_approval"
  """
  insertEventApproval(
    """the rows to be inserted"""
    objects: [EventApprovalInsertInput!]!

    """upsert condition"""
    onConflict: EventApprovalOnConflict
  ): EventApprovalMutationResponse

  """
  insert a single row into the table: "event_approval"
  """
  insertEventApprovalOne(
    """the row to be inserted"""
    object: EventApprovalInsertInput!

    """upsert condition"""
    onConflict: EventApprovalOnConflict
  ): EventApproval

  """
  insert data into the table: "event_approval_step"
  """
  insertEventApprovalStep(
    """the rows to be inserted"""
    objects: [EventApprovalStepInsertInput!]!

    """upsert condition"""
    onConflict: EventApprovalStepOnConflict
  ): EventApprovalStepMutationResponse

  """
  insert data into the table: "event_approval_step_notifiees"
  """
  insertEventApprovalStepNotifiees(
    """the rows to be inserted"""
    objects: [EventApprovalStepNotifieesInsertInput!]!

    """upsert condition"""
    onConflict: EventApprovalStepNotifieesOnConflict
  ): EventApprovalStepNotifieesMutationResponse

  """
  insert a single row into the table: "event_approval_step_notifiees"
  """
  insertEventApprovalStepNotifieesOne(
    """the row to be inserted"""
    object: EventApprovalStepNotifieesInsertInput!

    """upsert condition"""
    onConflict: EventApprovalStepNotifieesOnConflict
  ): EventApprovalStepNotifiees

  """
  insert a single row into the table: "event_approval_step"
  """
  insertEventApprovalStepOne(
    """the row to be inserted"""
    object: EventApprovalStepInsertInput!

    """upsert condition"""
    onConflict: EventApprovalStepOnConflict
  ): EventApprovalStep

  """
  insert data into the table: "event_approval_step_validators"
  """
  insertEventApprovalStepValidators(
    """the rows to be inserted"""
    objects: [EventApprovalStepValidatorsInsertInput!]!

    """upsert condition"""
    onConflict: EventApprovalStepValidatorsOnConflict
  ): EventApprovalStepValidatorsMutationResponse

  """
  insert a single row into the table: "event_approval_step_validators"
  """
  insertEventApprovalStepValidatorsOne(
    """the row to be inserted"""
    object: EventApprovalStepValidatorsInsertInput!

    """upsert condition"""
    onConflict: EventApprovalStepValidatorsOnConflict
  ): EventApprovalStepValidators

  """
  insert data into the table: "event_attendance"
  """
  insertEventAttendance(
    """the rows to be inserted"""
    objects: [EventAttendanceInsertInput!]!

    """upsert condition"""
    onConflict: EventAttendanceOnConflict
  ): EventAttendanceMutationResponse

  """
  insert a single row into the table: "event_attendance"
  """
  insertEventAttendanceOne(
    """the row to be inserted"""
    object: EventAttendanceInsertInput!

    """upsert condition"""
    onConflict: EventAttendanceOnConflict
  ): EventAttendance

  """
  insert data into the table: "event_change_role"
  """
  insertEventChangeRole(
    """the rows to be inserted"""
    objects: [EventChangeRoleInsertInput!]!

    """upsert condition"""
    onConflict: EventChangeRoleOnConflict
  ): EventChangeRoleMutationResponse

  """
  insert a single row into the table: "event_change_role"
  """
  insertEventChangeRoleOne(
    """the row to be inserted"""
    object: EventChangeRoleInsertInput!

    """upsert condition"""
    onConflict: EventChangeRoleOnConflict
  ): EventChangeRole

  """
  insert data into the table: "event_join"
  """
  insertEventJoin(
    """the rows to be inserted"""
    objects: [EventJoinInsertInput!]!

    """upsert condition"""
    onConflict: EventJoinOnConflict
  ): EventJoinMutationResponse

  """
  insert a single row into the table: "event_join"
  """
  insertEventJoinOne(
    """the row to be inserted"""
    object: EventJoinInsertInput!

    """upsert condition"""
    onConflict: EventJoinOnConflict
  ): EventJoin

  """
  insert a single row into the table: "event"
  """
  insertEventOne(
    """the row to be inserted"""
    object: EventInsertInput!

    """upsert condition"""
    onConflict: EventOnConflict
  ): Event

  """
  insert data into the table: "event_role"
  """
  insertEventRole(
    """the rows to be inserted"""
    objects: [EventRoleInsertInput!]!

    """upsert condition"""
    onConflict: EventRoleOnConflict
  ): EventRoleMutationResponse

  """
  insert a single row into the table: "event_role"
  """
  insertEventRoleOne(
    """the row to be inserted"""
    object: EventRoleInsertInput!

    """upsert condition"""
    onConflict: EventRoleOnConflict
  ): EventRole

  """
  insert data into the table: "event_tags"
  """
  insertEventTags(
    """the rows to be inserted"""
    objects: [EventTagsInsertInput!]!

    """upsert condition"""
    onConflict: EventTagsOnConflict
  ): EventTagsMutationResponse

  """
  insert a single row into the table: "event_tags"
  """
  insertEventTagsOne(
    """the row to be inserted"""
    object: EventTagsInsertInput!

    """upsert condition"""
    onConflict: EventTagsOnConflict
  ): EventTags

  """
  insert data into the table: "expense"
  """
  insertExpense(
    """the rows to be inserted"""
    objects: [ExpenseInsertInput!]!

    """upsert condition"""
    onConflict: ExpenseOnConflict
  ): ExpenseMutationResponse

  """
  insert a single row into the table: "expense"
  """
  insertExpenseOne(
    """the row to be inserted"""
    object: ExpenseInsertInput!

    """upsert condition"""
    onConflict: ExpenseOnConflict
  ): Expense

  """
  insert data into the table: "favorite"
  """
  insertFavorite(
    """the rows to be inserted"""
    objects: [FavoriteInsertInput!]!

    """upsert condition"""
    onConflict: FavoriteOnConflict
  ): FavoriteMutationResponse

  """
  insert a single row into the table: "favorite"
  """
  insertFavoriteOne(
    """the row to be inserted"""
    object: FavoriteInsertInput!

    """upsert condition"""
    onConflict: FavoriteOnConflict
  ): Favorite

  """
  insert data into the table: "file_upload"
  """
  insertFileUpload(
    """the rows to be inserted"""
    objects: [FileUploadInsertInput!]!

    """upsert condition"""
    onConflict: FileUploadOnConflict
  ): FileUploadMutationResponse

  """
  insert a single row into the table: "file_upload"
  """
  insertFileUploadOne(
    """the row to be inserted"""
    object: FileUploadInsertInput!

    """upsert condition"""
    onConflict: FileUploadOnConflict
  ): FileUpload

  """
  insert data into the table: "follow"
  """
  insertFollow(
    """the rows to be inserted"""
    objects: [FollowInsertInput!]!

    """upsert condition"""
    onConflict: FollowOnConflict
  ): FollowMutationResponse

  """
  insert a single row into the table: "follow"
  """
  insertFollowOne(
    """the row to be inserted"""
    object: FollowInsertInput!

    """upsert condition"""
    onConflict: FollowOnConflict
  ): Follow

  """
  insert data into the table: "form"
  """
  insertForm(
    """the rows to be inserted"""
    objects: [FormInsertInput!]!

    """upsert condition"""
    onConflict: FormOnConflict
  ): FormMutationResponse

  """
  insert data into the table: "form_edit"
  """
  insertFormEdit(
    """the rows to be inserted"""
    objects: [FormEditInsertInput!]!

    """upsert condition"""
    onConflict: FormEditOnConflict
  ): FormEditMutationResponse

  """
  insert a single row into the table: "form_edit"
  """
  insertFormEditOne(
    """the row to be inserted"""
    object: FormEditInsertInput!

    """upsert condition"""
    onConflict: FormEditOnConflict
  ): FormEdit

  """
  insert a single row into the table: "form"
  """
  insertFormOne(
    """the row to be inserted"""
    object: FormInsertInput!

    """upsert condition"""
    onConflict: FormOnConflict
  ): Form

  """
  insert data into the table: "form_submission"
  """
  insertFormSubmission(
    """the rows to be inserted"""
    objects: [FormSubmissionInsertInput!]!

    """upsert condition"""
    onConflict: FormSubmissionOnConflict
  ): FormSubmissionMutationResponse

  """
  insert data into the table: "form_submission_edit"
  """
  insertFormSubmissionEdit(
    """the rows to be inserted"""
    objects: [FormSubmissionEditInsertInput!]!

    """upsert condition"""
    onConflict: FormSubmissionEditOnConflict
  ): FormSubmissionEditMutationResponse

  """
  insert a single row into the table: "form_submission_edit"
  """
  insertFormSubmissionEditOne(
    """the row to be inserted"""
    object: FormSubmissionEditInsertInput!

    """upsert condition"""
    onConflict: FormSubmissionEditOnConflict
  ): FormSubmissionEdit

  """
  insert a single row into the table: "form_submission"
  """
  insertFormSubmissionOne(
    """the row to be inserted"""
    object: FormSubmissionInsertInput!

    """upsert condition"""
    onConflict: FormSubmissionOnConflict
  ): FormSubmission

  """
  insert data into the table: "individual"
  """
  insertIndividual(
    """the rows to be inserted"""
    objects: [IndividualInsertInput!]!

    """upsert condition"""
    onConflict: IndividualOnConflict
  ): IndividualMutationResponse

  """
  insert a single row into the table: "individual"
  """
  insertIndividualOne(
    """the row to be inserted"""
    object: IndividualInsertInput!

    """upsert condition"""
    onConflict: IndividualOnConflict
  ): Individual

  """
  insert data into the table: "issue"
  """
  insertIssue(
    """the rows to be inserted"""
    objects: [IssueInsertInput!]!

    """upsert condition"""
    onConflict: IssueOnConflict
  ): IssueMutationResponse

  """
  insert a single row into the table: "issue"
  """
  insertIssueOne(
    """the row to be inserted"""
    object: IssueInsertInput!

    """upsert condition"""
    onConflict: IssueOnConflict
  ): Issue

  """
  insert data into the table: "pole"
  """
  insertPole(
    """the rows to be inserted"""
    objects: [PoleInsertInput!]!

    """upsert condition"""
    onConflict: PoleOnConflict
  ): PoleMutationResponse

  """
  insert a single row into the table: "pole"
  """
  insertPoleOne(
    """the row to be inserted"""
    object: PoleInsertInput!

    """upsert condition"""
    onConflict: PoleOnConflict
  ): Pole

  """
  insert data into the table: "project"
  """
  insertProject(
    """the rows to be inserted"""
    objects: [ProjectInsertInput!]!

    """upsert condition"""
    onConflict: ProjectOnConflict
  ): ProjectMutationResponse

  """
  insert a single row into the table: "project"
  """
  insertProjectOne(
    """the row to be inserted"""
    object: ProjectInsertInput!

    """upsert condition"""
    onConflict: ProjectOnConflict
  ): Project

  """
  insert data into the table: "project_role"
  """
  insertProjectRole(
    """the rows to be inserted"""
    objects: [ProjectRoleInsertInput!]!

    """upsert condition"""
    onConflict: ProjectRoleOnConflict
  ): ProjectRoleMutationResponse

  """
  insert a single row into the table: "project_role"
  """
  insertProjectRoleOne(
    """the row to be inserted"""
    object: ProjectRoleInsertInput!

    """upsert condition"""
    onConflict: ProjectRoleOnConflict
  ): ProjectRole

  """
  insert data into the table: "project_supervisors"
  """
  insertProjectSupervisors(
    """the rows to be inserted"""
    objects: [ProjectSupervisorsInsertInput!]!

    """upsert condition"""
    onConflict: ProjectSupervisorsOnConflict
  ): ProjectSupervisorsMutationResponse

  """
  insert a single row into the table: "project_supervisors"
  """
  insertProjectSupervisorsOne(
    """the row to be inserted"""
    object: ProjectSupervisorsInsertInput!

    """upsert condition"""
    onConflict: ProjectSupervisorsOnConflict
  ): ProjectSupervisors

  """
  insert data into the table: "project_tags"
  """
  insertProjectTags(
    """the rows to be inserted"""
    objects: [ProjectTagsInsertInput!]!

    """upsert condition"""
    onConflict: ProjectTagsOnConflict
  ): ProjectTagsMutationResponse

  """
  insert a single row into the table: "project_tags"
  """
  insertProjectTagsOne(
    """the row to be inserted"""
    object: ProjectTagsInsertInput!

    """upsert condition"""
    onConflict: ProjectTagsOnConflict
  ): ProjectTags

  """
  insert data into the table: "reaction"
  """
  insertReaction(
    """the rows to be inserted"""
    objects: [ReactionInsertInput!]!

    """upsert condition"""
    onConflict: ReactionOnConflict
  ): ReactionMutationResponse

  """
  insert a single row into the table: "reaction"
  """
  insertReactionOne(
    """the row to be inserted"""
    object: ReactionInsertInput!

    """upsert condition"""
    onConflict: ReactionOnConflict
  ): Reaction

  """
  insert data into the table: "report"
  """
  insertReport(
    """the rows to be inserted"""
    objects: [ReportInsertInput!]!

    """upsert condition"""
    onConflict: ReportOnConflict
  ): ReportMutationResponse

  """
  insert a single row into the table: "report"
  """
  insertReportOne(
    """the row to be inserted"""
    object: ReportInsertInput!

    """upsert condition"""
    onConflict: ReportOnConflict
  ): Report

  """
  insert data into the table: "role"
  """
  insertRole(
    """the rows to be inserted"""
    objects: [RoleInsertInput!]!

    """upsert condition"""
    onConflict: RoleOnConflict
  ): RoleMutationResponse

  """
  insert a single row into the table: "role"
  """
  insertRoleOne(
    """the row to be inserted"""
    object: RoleInsertInput!

    """upsert condition"""
    onConflict: RoleOnConflict
  ): Role

  """
  insert data into the table: "session"
  """
  insertSession(
    """the rows to be inserted"""
    objects: [SessionInsertInput!]!

    """upsert condition"""
    onConflict: SessionOnConflict
  ): SessionMutationResponse

  """
  insert a single row into the table: "session"
  """
  insertSessionOne(
    """the row to be inserted"""
    object: SessionInsertInput!

    """upsert condition"""
    onConflict: SessionOnConflict
  ): Session

  """
  insert data into the table: "shortcut"
  """
  insertShortcut(
    """the rows to be inserted"""
    objects: [ShortcutInsertInput!]!

    """upsert condition"""
    onConflict: ShortcutOnConflict
  ): ShortcutMutationResponse

  """
  insert a single row into the table: "shortcut"
  """
  insertShortcutOne(
    """the row to be inserted"""
    object: ShortcutInsertInput!

    """upsert condition"""
    onConflict: ShortcutOnConflict
  ): Shortcut

  """
  insert data into the table: "social"
  """
  insertSocial(
    """the rows to be inserted"""
    objects: [SocialInsertInput!]!

    """upsert condition"""
    onConflict: SocialOnConflict
  ): SocialMutationResponse

  """
  insert a single row into the table: "social"
  """
  insertSocialOne(
    """the row to be inserted"""
    object: SocialInsertInput!

    """upsert condition"""
    onConflict: SocialOnConflict
  ): Social

  """
  insert data into the table: "subject"
  """
  insertSubject(
    """the rows to be inserted"""
    objects: [SubjectInsertInput!]!

    """upsert condition"""
    onConflict: SubjectOnConflict
  ): SubjectMutationResponse

  """
  insert data into the table: "subject_class_groups"
  """
  insertSubjectClassGroups(
    """the rows to be inserted"""
    objects: [SubjectClassGroupsInsertInput!]!

    """upsert condition"""
    onConflict: SubjectClassGroupsOnConflict
  ): SubjectClassGroupsMutationResponse

  """
  insert a single row into the table: "subject_class_groups"
  """
  insertSubjectClassGroupsOne(
    """the row to be inserted"""
    object: SubjectClassGroupsInsertInput!

    """upsert condition"""
    onConflict: SubjectClassGroupsOnConflict
  ): SubjectClassGroups

  """
  insert a single row into the table: "subject"
  """
  insertSubjectOne(
    """the row to be inserted"""
    object: SubjectInsertInput!

    """upsert condition"""
    onConflict: SubjectOnConflict
  ): Subject

  """
  insert data into the table: "tag"
  """
  insertTag(
    """the rows to be inserted"""
    objects: [TagInsertInput!]!

    """upsert condition"""
    onConflict: TagOnConflict
  ): TagMutationResponse

  """
  insert a single row into the table: "tag"
  """
  insertTagOne(
    """the row to be inserted"""
    object: TagInsertInput!

    """upsert condition"""
    onConflict: TagOnConflict
  ): Tag

  """
  insert data into the table: "team"
  """
  insertTeam(
    """the rows to be inserted"""
    objects: [TeamInsertInput!]!

    """upsert condition"""
    onConflict: TeamOnConflict
  ): TeamMutationResponse

  """
  insert data into the table: "team_events"
  """
  insertTeamEvents(
    """the rows to be inserted"""
    objects: [TeamEventsInsertInput!]!

    """upsert condition"""
    onConflict: TeamEventsOnConflict
  ): TeamEventsMutationResponse

  """
  insert a single row into the table: "team_events"
  """
  insertTeamEventsOne(
    """the row to be inserted"""
    object: TeamEventsInsertInput!

    """upsert condition"""
    onConflict: TeamEventsOnConflict
  ): TeamEvents

  """
  insert data into the table: "team_finance"
  """
  insertTeamFinance(
    """the rows to be inserted"""
    objects: [TeamFinanceInsertInput!]!

    """upsert condition"""
    onConflict: TeamFinanceOnConflict
  ): TeamFinanceMutationResponse

  """
  insert data into the table: "team_finance_edit"
  """
  insertTeamFinanceEdit(
    """the rows to be inserted"""
    objects: [TeamFinanceEditInsertInput!]!

    """upsert condition"""
    onConflict: TeamFinanceEditOnConflict
  ): TeamFinanceEditMutationResponse

  """
  insert a single row into the table: "team_finance_edit"
  """
  insertTeamFinanceEditOne(
    """the row to be inserted"""
    object: TeamFinanceEditInsertInput!

    """upsert condition"""
    onConflict: TeamFinanceEditOnConflict
  ): TeamFinanceEdit

  """
  insert a single row into the table: "team_finance"
  """
  insertTeamFinanceOne(
    """the row to be inserted"""
    object: TeamFinanceInsertInput!

    """upsert condition"""
    onConflict: TeamFinanceOnConflict
  ): TeamFinance

  """
  insert data into the table: "team_join"
  """
  insertTeamJoin(
    """the rows to be inserted"""
    objects: [TeamJoinInsertInput!]!

    """upsert condition"""
    onConflict: TeamJoinOnConflict
  ): TeamJoinMutationResponse

  """
  insert a single row into the table: "team_join"
  """
  insertTeamJoinOne(
    """the row to be inserted"""
    object: TeamJoinInsertInput!

    """upsert condition"""
    onConflict: TeamJoinOnConflict
  ): TeamJoin

  """
  insert data into the table: "team_member"
  """
  insertTeamMember(
    """the rows to be inserted"""
    objects: [TeamMemberInsertInput!]!

    """upsert condition"""
    onConflict: TeamMemberOnConflict
  ): TeamMemberMutationResponse

  """
  insert a single row into the table: "team_member"
  """
  insertTeamMemberOne(
    """the row to be inserted"""
    object: TeamMemberInsertInput!

    """upsert condition"""
    onConflict: TeamMemberOnConflict
  ): TeamMember

  """
  insert data into the table: "team_member_roles"
  """
  insertTeamMemberRoles(
    """the rows to be inserted"""
    objects: [TeamMemberRolesInsertInput!]!

    """upsert condition"""
    onConflict: TeamMemberRolesOnConflict
  ): TeamMemberRolesMutationResponse

  """
  insert a single row into the table: "team_member_roles"
  """
  insertTeamMemberRolesOne(
    """the row to be inserted"""
    object: TeamMemberRolesInsertInput!

    """upsert condition"""
    onConflict: TeamMemberRolesOnConflict
  ): TeamMemberRoles

  """
  insert data into the table: "team_metric"
  """
  insertTeamMetric(
    """the rows to be inserted"""
    objects: [TeamMetricInsertInput!]!

    """upsert condition"""
    onConflict: TeamMetricOnConflict
  ): TeamMetricMutationResponse

  """
  insert a single row into the table: "team_metric"
  """
  insertTeamMetricOne(
    """the row to be inserted"""
    object: TeamMetricInsertInput!

    """upsert condition"""
    onConflict: TeamMetricOnConflict
  ): TeamMetric

  """
  insert a single row into the table: "team"
  """
  insertTeamOne(
    """the row to be inserted"""
    object: TeamInsertInput!

    """upsert condition"""
    onConflict: TeamOnConflict
  ): Team

  """
  insert data into the table: "tenant"
  """
  insertTenant(
    """the rows to be inserted"""
    objects: [TenantInsertInput!]!

    """upsert condition"""
    onConflict: TenantOnConflict
  ): TenantMutationResponse

  """
  insert a single row into the table: "tenant"
  """
  insertTenantOne(
    """the row to be inserted"""
    object: TenantInsertInput!

    """upsert condition"""
    onConflict: TenantOnConflict
  ): Tenant

  """
  insert data into the table: "user_info"
  """
  insertUserInfo(
    """the rows to be inserted"""
    objects: [UserInfoInsertInput!]!

    """upsert condition"""
    onConflict: UserInfoOnConflict
  ): UserInfoMutationResponse

  """
  insert a single row into the table: "user_info"
  """
  insertUserInfoOne(
    """the row to be inserted"""
    object: UserInfoInsertInput!

    """upsert condition"""
    onConflict: UserInfoOnConflict
  ): UserInfo

  """
  insert data into the table: "validation"
  """
  insertValidation(
    """the rows to be inserted"""
    objects: [ValidationInsertInput!]!

    """upsert condition"""
    onConflict: ValidationOnConflict
  ): ValidationMutationResponse

  """
  insert a single row into the table: "validation"
  """
  insertValidationOne(
    """the row to be inserted"""
    object: ValidationInsertInput!

    """upsert condition"""
    onConflict: ValidationOnConflict
  ): Validation

  """
  insert data into the table: "vote"
  """
  insertVote(
    """the rows to be inserted"""
    objects: [VoteInsertInput!]!

    """upsert condition"""
    onConflict: VoteOnConflict
  ): VoteMutationResponse

  """
  insert a single row into the table: "vote"
  """
  insertVoteOne(
    """the row to be inserted"""
    object: VoteInsertInput!

    """upsert condition"""
    onConflict: VoteOnConflict
  ): Vote

  """
  update data of the table: "action"
  """
  updateAction(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActionSetInput

    """filter the rows which have to be updated"""
    where: ActionBoolExp!
  ): ActionMutationResponse

  """
  update single row of the table: "action"
  """
  updateActionByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActionSetInput
    pkColumns: ActionPkColumnsInput!
  ): Action

  """
  update multiples rows of table: "action"
  """
  updateActionMany(
    """updates to execute, in order"""
    updates: [ActionUpdates!]!
  ): [ActionMutationResponse]

  """
  update data of the table: "actor"
  """
  updateActor(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorSetInput

    """filter the rows which have to be updated"""
    where: ActorBoolExp!
  ): ActorMutationResponse

  """
  update data of the table: "actor_address"
  """
  updateActorAddress(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorAddressIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorAddressSetInput

    """filter the rows which have to be updated"""
    where: ActorAddressBoolExp!
  ): ActorAddressMutationResponse

  """
  update single row of the table: "actor_address"
  """
  updateActorAddressByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorAddressIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorAddressSetInput
    pkColumns: ActorAddressPkColumnsInput!
  ): ActorAddress

  """
  update multiples rows of table: "actor_address"
  """
  updateActorAddressMany(
    """updates to execute, in order"""
    updates: [ActorAddressUpdates!]!
  ): [ActorAddressMutationResponse]

  """
  update data of the table: "actor_bank_info"
  """
  updateActorBankInfo(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorBankInfoIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorBankInfoSetInput

    """filter the rows which have to be updated"""
    where: ActorBankInfoBoolExp!
  ): ActorBankInfoMutationResponse

  """
  update single row of the table: "actor_bank_info"
  """
  updateActorBankInfoByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorBankInfoIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorBankInfoSetInput
    pkColumns: ActorBankInfoPkColumnsInput!
  ): ActorBankInfo

  """
  update multiples rows of table: "actor_bank_info"
  """
  updateActorBankInfoMany(
    """updates to execute, in order"""
    updates: [ActorBankInfoUpdates!]!
  ): [ActorBankInfoMutationResponse]

  """
  update single row of the table: "actor"
  """
  updateActorByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorSetInput
    pkColumns: ActorPkColumnsInput!
  ): Actor

  """
  update data of the table: "actor_finance"
  """
  updateActorFinance(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorFinanceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorFinanceSetInput

    """filter the rows which have to be updated"""
    where: ActorFinanceBoolExp!
  ): ActorFinanceMutationResponse

  """
  update single row of the table: "actor_finance"
  """
  updateActorFinanceByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorFinanceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorFinanceSetInput
    pkColumns: ActorFinancePkColumnsInput!
  ): ActorFinance

  """
  update multiples rows of table: "actor_finance"
  """
  updateActorFinanceMany(
    """updates to execute, in order"""
    updates: [ActorFinanceUpdates!]!
  ): [ActorFinanceMutationResponse]

  """
  update data of the table: "actor_image"
  """
  updateActorImage(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorImageIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorImageSetInput

    """filter the rows which have to be updated"""
    where: ActorImageBoolExp!
  ): ActorImageMutationResponse

  """
  update single row of the table: "actor_image"
  """
  updateActorImageByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorImageIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorImageSetInput
    pkColumns: ActorImagePkColumnsInput!
  ): ActorImage

  """
  update multiples rows of table: "actor_image"
  """
  updateActorImageMany(
    """updates to execute, in order"""
    updates: [ActorImageUpdates!]!
  ): [ActorImageMutationResponse]

  """
  update multiples rows of table: "actor"
  """
  updateActorMany(
    """updates to execute, in order"""
    updates: [ActorUpdates!]!
  ): [ActorMutationResponse]

  """
  update data of the table: "actor_tags"
  """
  updateActorTags(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorTagsSetInput

    """filter the rows which have to be updated"""
    where: ActorTagsBoolExp!
  ): ActorTagsMutationResponse

  """
  update single row of the table: "actor_tags"
  """
  updateActorTagsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ActorTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ActorTagsSetInput
    pkColumns: ActorTagsPkColumnsInput!
  ): ActorTags

  """
  update multiples rows of table: "actor_tags"
  """
  updateActorTagsMany(
    """updates to execute, in order"""
    updates: [ActorTagsUpdates!]!
  ): [ActorTagsMutationResponse]

  """
  update data of the table: "bot_info"
  """
  updateBotInfo(
    """increments the numeric columns with given value of the filtered values"""
    _inc: BotInfoIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: BotInfoSetInput

    """filter the rows which have to be updated"""
    where: BotInfoBoolExp!
  ): BotInfoMutationResponse

  """
  update single row of the table: "bot_info"
  """
  updateBotInfoByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: BotInfoIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: BotInfoSetInput
    pkColumns: BotInfoPkColumnsInput!
  ): BotInfo

  """
  update multiples rows of table: "bot_info"
  """
  updateBotInfoMany(
    """updates to execute, in order"""
    updates: [BotInfoUpdates!]!
  ): [BotInfoMutationResponse]

  """
  update data of the table: "campus"
  """
  updateCampus(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CampusIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CampusSetInput

    """filter the rows which have to be updated"""
    where: CampusBoolExp!
  ): CampusMutationResponse

  """
  update single row of the table: "campus"
  """
  updateCampusByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CampusIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CampusSetInput
    pkColumns: CampusPkColumnsInput!
  ): Campus

  """
  update multiples rows of table: "campus"
  """
  updateCampusMany(
    """updates to execute, in order"""
    updates: [CampusUpdates!]!
  ): [CampusMutationResponse]

  """
  update data of the table: "canteen"
  """
  updateCanteen(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CanteenIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CanteenSetInput

    """filter the rows which have to be updated"""
    where: CanteenBoolExp!
  ): CanteenMutationResponse

  """
  update single row of the table: "canteen"
  """
  updateCanteenByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CanteenIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CanteenSetInput
    pkColumns: CanteenPkColumnsInput!
  ): Canteen

  """
  update data of the table: "canteen_food"
  """
  updateCanteenFood(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CanteenFoodIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CanteenFoodSetInput

    """filter the rows which have to be updated"""
    where: CanteenFoodBoolExp!
  ): CanteenFoodMutationResponse

  """
  update single row of the table: "canteen_food"
  """
  updateCanteenFoodByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CanteenFoodIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CanteenFoodSetInput
    pkColumns: CanteenFoodPkColumnsInput!
  ): CanteenFood

  """
  update multiples rows of table: "canteen_food"
  """
  updateCanteenFoodMany(
    """updates to execute, in order"""
    updates: [CanteenFoodUpdates!]!
  ): [CanteenFoodMutationResponse]

  """
  update multiples rows of table: "canteen"
  """
  updateCanteenMany(
    """updates to execute, in order"""
    updates: [CanteenUpdates!]!
  ): [CanteenMutationResponse]

  """
  update data of the table: "canteen_menu"
  """
  updateCanteenMenu(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CanteenMenuIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CanteenMenuSetInput

    """filter the rows which have to be updated"""
    where: CanteenMenuBoolExp!
  ): CanteenMenuMutationResponse

  """
  update single row of the table: "canteen_menu"
  """
  updateCanteenMenuByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CanteenMenuIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CanteenMenuSetInput
    pkColumns: CanteenMenuPkColumnsInput!
  ): CanteenMenu

  """
  update multiples rows of table: "canteen_menu"
  """
  updateCanteenMenuMany(
    """updates to execute, in order"""
    updates: [CanteenMenuUpdates!]!
  ): [CanteenMenuMutationResponse]

  """
  update data of the table: "change_role"
  """
  updateChangeRole(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ChangeRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ChangeRoleSetInput

    """filter the rows which have to be updated"""
    where: ChangeRoleBoolExp!
  ): ChangeRoleMutationResponse

  """
  update single row of the table: "change_role"
  """
  updateChangeRoleByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ChangeRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ChangeRoleSetInput
    pkColumns: ChangeRolePkColumnsInput!
  ): ChangeRole

  """
  update multiples rows of table: "change_role"
  """
  updateChangeRoleMany(
    """updates to execute, in order"""
    updates: [ChangeRoleUpdates!]!
  ): [ChangeRoleMutationResponse]

  """
  update data of the table: "class_group"
  """
  updateClassGroup(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ClassGroupIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ClassGroupSetInput

    """filter the rows which have to be updated"""
    where: ClassGroupBoolExp!
  ): ClassGroupMutationResponse

  """
  update single row of the table: "class_group"
  """
  updateClassGroupByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ClassGroupIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ClassGroupSetInput
    pkColumns: ClassGroupPkColumnsInput!
  ): ClassGroup

  """
  update multiples rows of table: "class_group"
  """
  updateClassGroupMany(
    """updates to execute, in order"""
    updates: [ClassGroupUpdates!]!
  ): [ClassGroupMutationResponse]

  """
  update data of the table: "class_group_teacher"
  """
  updateClassGroupTeacher(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ClassGroupTeacherIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ClassGroupTeacherSetInput

    """filter the rows which have to be updated"""
    where: ClassGroupTeacherBoolExp!
  ): ClassGroupTeacherMutationResponse

  """
  update single row of the table: "class_group_teacher"
  """
  updateClassGroupTeacherByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ClassGroupTeacherIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ClassGroupTeacherSetInput
    pkColumns: ClassGroupTeacherPkColumnsInput!
  ): ClassGroupTeacher

  """
  update multiples rows of table: "class_group_teacher"
  """
  updateClassGroupTeacherMany(
    """updates to execute, in order"""
    updates: [ClassGroupTeacherUpdates!]!
  ): [ClassGroupTeacherMutationResponse]

  """
  update data of the table: "class_group_teacher_subjects"
  """
  updateClassGroupTeacherSubjects(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ClassGroupTeacherSubjectsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ClassGroupTeacherSubjectsSetInput

    """filter the rows which have to be updated"""
    where: ClassGroupTeacherSubjectsBoolExp!
  ): ClassGroupTeacherSubjectsMutationResponse

  """
  update single row of the table: "class_group_teacher_subjects"
  """
  updateClassGroupTeacherSubjectsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ClassGroupTeacherSubjectsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ClassGroupTeacherSubjectsSetInput
    pkColumns: ClassGroupTeacherSubjectsPkColumnsInput!
  ): ClassGroupTeacherSubjects

  """
  update multiples rows of table: "class_group_teacher_subjects"
  """
  updateClassGroupTeacherSubjectsMany(
    """updates to execute, in order"""
    updates: [ClassGroupTeacherSubjectsUpdates!]!
  ): [ClassGroupTeacherSubjectsMutationResponse]

  """
  update data of the table: "cohort"
  """
  updateCohort(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CohortIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CohortSetInput

    """filter the rows which have to be updated"""
    where: CohortBoolExp!
  ): CohortMutationResponse

  """
  update single row of the table: "cohort"
  """
  updateCohortByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CohortIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CohortSetInput
    pkColumns: CohortPkColumnsInput!
  ): Cohort

  """
  update multiples rows of table: "cohort"
  """
  updateCohortMany(
    """updates to execute, in order"""
    updates: [CohortUpdates!]!
  ): [CohortMutationResponse]

  """
  update data of the table: "content"
  """
  updateContent(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentSetInput

    """filter the rows which have to be updated"""
    where: ContentBoolExp!
  ): ContentMutationResponse

  """
  update data of the table: "content_attachments"
  """
  updateContentAttachments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentAttachmentsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentAttachmentsSetInput

    """filter the rows which have to be updated"""
    where: ContentAttachmentsBoolExp!
  ): ContentAttachmentsMutationResponse

  """
  update single row of the table: "content_attachments"
  """
  updateContentAttachmentsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentAttachmentsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentAttachmentsSetInput
    pkColumns: ContentAttachmentsPkColumnsInput!
  ): ContentAttachments

  """
  update multiples rows of table: "content_attachments"
  """
  updateContentAttachmentsMany(
    """updates to execute, in order"""
    updates: [ContentAttachmentsUpdates!]!
  ): [ContentAttachmentsMutationResponse]

  """
  update single row of the table: "content"
  """
  updateContentByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentSetInput
    pkColumns: ContentPkColumnsInput!
  ): Content

  """
  update data of the table: "content_edit"
  """
  updateContentEdit(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: ContentEditAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: ContentEditDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: ContentEditDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: ContentEditDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentEditIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: ContentEditPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentEditSetInput

    """filter the rows which have to be updated"""
    where: ContentEditBoolExp!
  ): ContentEditMutationResponse

  """
  update single row of the table: "content_edit"
  """
  updateContentEditByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: ContentEditAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: ContentEditDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: ContentEditDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: ContentEditDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentEditIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: ContentEditPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentEditSetInput
    pkColumns: ContentEditPkColumnsInput!
  ): ContentEdit

  """
  update multiples rows of table: "content_edit"
  """
  updateContentEditMany(
    """updates to execute, in order"""
    updates: [ContentEditUpdates!]!
  ): [ContentEditMutationResponse]

  """
  update multiples rows of table: "content"
  """
  updateContentMany(
    """updates to execute, in order"""
    updates: [ContentUpdates!]!
  ): [ContentMutationResponse]

  """
  update data of the table: "content_master"
  """
  updateContentMaster(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentMasterIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentMasterSetInput

    """filter the rows which have to be updated"""
    where: ContentMasterBoolExp!
  ): ContentMasterMutationResponse

  """
  update single row of the table: "content_master"
  """
  updateContentMasterByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentMasterIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentMasterSetInput
    pkColumns: ContentMasterPkColumnsInput!
  ): ContentMaster

  """
  update data of the table: "content_master_contributors"
  """
  updateContentMasterContributors(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentMasterContributorsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentMasterContributorsSetInput

    """filter the rows which have to be updated"""
    where: ContentMasterContributorsBoolExp!
  ): ContentMasterContributorsMutationResponse

  """
  update single row of the table: "content_master_contributors"
  """
  updateContentMasterContributorsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentMasterContributorsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentMasterContributorsSetInput
    pkColumns: ContentMasterContributorsPkColumnsInput!
  ): ContentMasterContributors

  """
  update multiples rows of table: "content_master_contributors"
  """
  updateContentMasterContributorsMany(
    """updates to execute, in order"""
    updates: [ContentMasterContributorsUpdates!]!
  ): [ContentMasterContributorsMutationResponse]

  """
  update multiples rows of table: "content_master"
  """
  updateContentMasterMany(
    """updates to execute, in order"""
    updates: [ContentMasterUpdates!]!
  ): [ContentMasterMutationResponse]

  """
  update data of the table: "content_master_tags"
  """
  updateContentMasterTags(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentMasterTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentMasterTagsSetInput

    """filter the rows which have to be updated"""
    where: ContentMasterTagsBoolExp!
  ): ContentMasterTagsMutationResponse

  """
  update single row of the table: "content_master_tags"
  """
  updateContentMasterTagsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentMasterTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentMasterTagsSetInput
    pkColumns: ContentMasterTagsPkColumnsInput!
  ): ContentMasterTags

  """
  update multiples rows of table: "content_master_tags"
  """
  updateContentMasterTagsMany(
    """updates to execute, in order"""
    updates: [ContentMasterTagsUpdates!]!
  ): [ContentMasterTagsMutationResponse]

  """
  update data of the table: "content_teams"
  """
  updateContentTeams(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentTeamsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentTeamsSetInput

    """filter the rows which have to be updated"""
    where: ContentTeamsBoolExp!
  ): ContentTeamsMutationResponse

  """
  update single row of the table: "content_teams"
  """
  updateContentTeamsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ContentTeamsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ContentTeamsSetInput
    pkColumns: ContentTeamsPkColumnsInput!
  ): ContentTeams

  """
  update multiples rows of table: "content_teams"
  """
  updateContentTeamsMany(
    """updates to execute, in order"""
    updates: [ContentTeamsUpdates!]!
  ): [ContentTeamsMutationResponse]

  """
  update data of the table: "document"
  """
  updateDocument(
    """increments the numeric columns with given value of the filtered values"""
    _inc: DocumentIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: DocumentSetInput

    """filter the rows which have to be updated"""
    where: DocumentBoolExp!
  ): DocumentMutationResponse

  """
  update single row of the table: "document"
  """
  updateDocumentByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: DocumentIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: DocumentSetInput
    pkColumns: DocumentPkColumnsInput!
  ): Document

  """
  update data of the table: "document_edit"
  """
  updateDocumentEdit(
    """increments the numeric columns with given value of the filtered values"""
    _inc: DocumentEditIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: DocumentEditSetInput

    """filter the rows which have to be updated"""
    where: DocumentEditBoolExp!
  ): DocumentEditMutationResponse

  """
  update single row of the table: "document_edit"
  """
  updateDocumentEditByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: DocumentEditIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: DocumentEditSetInput
    pkColumns: DocumentEditPkColumnsInput!
  ): DocumentEdit

  """
  update multiples rows of table: "document_edit"
  """
  updateDocumentEditMany(
    """updates to execute, in order"""
    updates: [DocumentEditUpdates!]!
  ): [DocumentEditMutationResponse]

  """
  update multiples rows of table: "document"
  """
  updateDocumentMany(
    """updates to execute, in order"""
    updates: [DocumentUpdates!]!
  ): [DocumentMutationResponse]

  """
  update data of the table: "event"
  """
  updateEvent(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: EventAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: EventDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: EventDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: EventDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: EventIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: EventPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventSetInput

    """filter the rows which have to be updated"""
    where: EventBoolExp!
  ): EventMutationResponse

  """
  update data of the table: "event_approval"
  """
  updateEventApproval(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalSetInput

    """filter the rows which have to be updated"""
    where: EventApprovalBoolExp!
  ): EventApprovalMutationResponse

  """
  update single row of the table: "event_approval"
  """
  updateEventApprovalByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalSetInput
    pkColumns: EventApprovalPkColumnsInput!
  ): EventApproval

  """
  update multiples rows of table: "event_approval"
  """
  updateEventApprovalMany(
    """updates to execute, in order"""
    updates: [EventApprovalUpdates!]!
  ): [EventApprovalMutationResponse]

  """
  update data of the table: "event_approval_step"
  """
  updateEventApprovalStep(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalStepIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalStepSetInput

    """filter the rows which have to be updated"""
    where: EventApprovalStepBoolExp!
  ): EventApprovalStepMutationResponse

  """
  update single row of the table: "event_approval_step"
  """
  updateEventApprovalStepByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalStepIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalStepSetInput
    pkColumns: EventApprovalStepPkColumnsInput!
  ): EventApprovalStep

  """
  update multiples rows of table: "event_approval_step"
  """
  updateEventApprovalStepMany(
    """updates to execute, in order"""
    updates: [EventApprovalStepUpdates!]!
  ): [EventApprovalStepMutationResponse]

  """
  update data of the table: "event_approval_step_notifiees"
  """
  updateEventApprovalStepNotifiees(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalStepNotifieesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalStepNotifieesSetInput

    """filter the rows which have to be updated"""
    where: EventApprovalStepNotifieesBoolExp!
  ): EventApprovalStepNotifieesMutationResponse

  """
  update single row of the table: "event_approval_step_notifiees"
  """
  updateEventApprovalStepNotifieesByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalStepNotifieesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalStepNotifieesSetInput
    pkColumns: EventApprovalStepNotifieesPkColumnsInput!
  ): EventApprovalStepNotifiees

  """
  update multiples rows of table: "event_approval_step_notifiees"
  """
  updateEventApprovalStepNotifieesMany(
    """updates to execute, in order"""
    updates: [EventApprovalStepNotifieesUpdates!]!
  ): [EventApprovalStepNotifieesMutationResponse]

  """
  update data of the table: "event_approval_step_validators"
  """
  updateEventApprovalStepValidators(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalStepValidatorsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalStepValidatorsSetInput

    """filter the rows which have to be updated"""
    where: EventApprovalStepValidatorsBoolExp!
  ): EventApprovalStepValidatorsMutationResponse

  """
  update single row of the table: "event_approval_step_validators"
  """
  updateEventApprovalStepValidatorsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventApprovalStepValidatorsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventApprovalStepValidatorsSetInput
    pkColumns: EventApprovalStepValidatorsPkColumnsInput!
  ): EventApprovalStepValidators

  """
  update multiples rows of table: "event_approval_step_validators"
  """
  updateEventApprovalStepValidatorsMany(
    """updates to execute, in order"""
    updates: [EventApprovalStepValidatorsUpdates!]!
  ): [EventApprovalStepValidatorsMutationResponse]

  """
  update data of the table: "event_attendance"
  """
  updateEventAttendance(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventAttendanceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventAttendanceSetInput

    """filter the rows which have to be updated"""
    where: EventAttendanceBoolExp!
  ): EventAttendanceMutationResponse

  """
  update single row of the table: "event_attendance"
  """
  updateEventAttendanceByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventAttendanceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventAttendanceSetInput
    pkColumns: EventAttendancePkColumnsInput!
  ): EventAttendance

  """
  update multiples rows of table: "event_attendance"
  """
  updateEventAttendanceMany(
    """updates to execute, in order"""
    updates: [EventAttendanceUpdates!]!
  ): [EventAttendanceMutationResponse]

  """
  update single row of the table: "event"
  """
  updateEventByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: EventAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: EventDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: EventDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: EventDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: EventIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: EventPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventSetInput
    pkColumns: EventPkColumnsInput!
  ): Event

  """
  update data of the table: "event_change_role"
  """
  updateEventChangeRole(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventChangeRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventChangeRoleSetInput

    """filter the rows which have to be updated"""
    where: EventChangeRoleBoolExp!
  ): EventChangeRoleMutationResponse

  """
  update single row of the table: "event_change_role"
  """
  updateEventChangeRoleByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventChangeRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventChangeRoleSetInput
    pkColumns: EventChangeRolePkColumnsInput!
  ): EventChangeRole

  """
  update multiples rows of table: "event_change_role"
  """
  updateEventChangeRoleMany(
    """updates to execute, in order"""
    updates: [EventChangeRoleUpdates!]!
  ): [EventChangeRoleMutationResponse]

  """
  update data of the table: "event_join"
  """
  updateEventJoin(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventJoinIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventJoinSetInput

    """filter the rows which have to be updated"""
    where: EventJoinBoolExp!
  ): EventJoinMutationResponse

  """
  update single row of the table: "event_join"
  """
  updateEventJoinByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventJoinIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventJoinSetInput
    pkColumns: EventJoinPkColumnsInput!
  ): EventJoin

  """
  update multiples rows of table: "event_join"
  """
  updateEventJoinMany(
    """updates to execute, in order"""
    updates: [EventJoinUpdates!]!
  ): [EventJoinMutationResponse]

  """
  update multiples rows of table: "event"
  """
  updateEventMany(
    """updates to execute, in order"""
    updates: [EventUpdates!]!
  ): [EventMutationResponse]

  """
  update data of the table: "event_role"
  """
  updateEventRole(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventRoleSetInput

    """filter the rows which have to be updated"""
    where: EventRoleBoolExp!
  ): EventRoleMutationResponse

  """
  update single row of the table: "event_role"
  """
  updateEventRoleByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventRoleSetInput
    pkColumns: EventRolePkColumnsInput!
  ): EventRole

  """
  update multiples rows of table: "event_role"
  """
  updateEventRoleMany(
    """updates to execute, in order"""
    updates: [EventRoleUpdates!]!
  ): [EventRoleMutationResponse]

  """
  update data of the table: "event_tags"
  """
  updateEventTags(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventTagsSetInput

    """filter the rows which have to be updated"""
    where: EventTagsBoolExp!
  ): EventTagsMutationResponse

  """
  update single row of the table: "event_tags"
  """
  updateEventTagsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: EventTagsSetInput
    pkColumns: EventTagsPkColumnsInput!
  ): EventTags

  """
  update multiples rows of table: "event_tags"
  """
  updateEventTagsMany(
    """updates to execute, in order"""
    updates: [EventTagsUpdates!]!
  ): [EventTagsMutationResponse]

  """
  update data of the table: "expense"
  """
  updateExpense(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ExpenseIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ExpenseSetInput

    """filter the rows which have to be updated"""
    where: ExpenseBoolExp!
  ): ExpenseMutationResponse

  """
  update single row of the table: "expense"
  """
  updateExpenseByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ExpenseIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ExpenseSetInput
    pkColumns: ExpensePkColumnsInput!
  ): Expense

  """
  update multiples rows of table: "expense"
  """
  updateExpenseMany(
    """updates to execute, in order"""
    updates: [ExpenseUpdates!]!
  ): [ExpenseMutationResponse]

  """
  update data of the table: "favorite"
  """
  updateFavorite(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FavoriteIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FavoriteSetInput

    """filter the rows which have to be updated"""
    where: FavoriteBoolExp!
  ): FavoriteMutationResponse

  """
  update single row of the table: "favorite"
  """
  updateFavoriteByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FavoriteIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FavoriteSetInput
    pkColumns: FavoritePkColumnsInput!
  ): Favorite

  """
  update multiples rows of table: "favorite"
  """
  updateFavoriteMany(
    """updates to execute, in order"""
    updates: [FavoriteUpdates!]!
  ): [FavoriteMutationResponse]

  """
  update data of the table: "file_upload"
  """
  updateFileUpload(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FileUploadIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FileUploadSetInput

    """filter the rows which have to be updated"""
    where: FileUploadBoolExp!
  ): FileUploadMutationResponse

  """
  update single row of the table: "file_upload"
  """
  updateFileUploadByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FileUploadIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FileUploadSetInput
    pkColumns: FileUploadPkColumnsInput!
  ): FileUpload

  """
  update multiples rows of table: "file_upload"
  """
  updateFileUploadMany(
    """updates to execute, in order"""
    updates: [FileUploadUpdates!]!
  ): [FileUploadMutationResponse]

  """
  update data of the table: "follow"
  """
  updateFollow(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FollowIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FollowSetInput

    """filter the rows which have to be updated"""
    where: FollowBoolExp!
  ): FollowMutationResponse

  """
  update single row of the table: "follow"
  """
  updateFollowByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: FollowIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: FollowSetInput
    pkColumns: FollowPkColumnsInput!
  ): Follow

  """
  update multiples rows of table: "follow"
  """
  updateFollowMany(
    """updates to execute, in order"""
    updates: [FollowUpdates!]!
  ): [FollowMutationResponse]

  """
  update data of the table: "form"
  """
  updateForm(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormSetInput

    """filter the rows which have to be updated"""
    where: FormBoolExp!
  ): FormMutationResponse

  """
  update single row of the table: "form"
  """
  updateFormByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormSetInput
    pkColumns: FormPkColumnsInput!
  ): Form

  """
  update data of the table: "form_edit"
  """
  updateFormEdit(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormEditAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormEditDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormEditDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormEditDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormEditIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormEditPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormEditSetInput

    """filter the rows which have to be updated"""
    where: FormEditBoolExp!
  ): FormEditMutationResponse

  """
  update single row of the table: "form_edit"
  """
  updateFormEditByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormEditAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormEditDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormEditDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormEditDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormEditIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormEditPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormEditSetInput
    pkColumns: FormEditPkColumnsInput!
  ): FormEdit

  """
  update multiples rows of table: "form_edit"
  """
  updateFormEditMany(
    """updates to execute, in order"""
    updates: [FormEditUpdates!]!
  ): [FormEditMutationResponse]

  """
  update multiples rows of table: "form"
  """
  updateFormMany(
    """updates to execute, in order"""
    updates: [FormUpdates!]!
  ): [FormMutationResponse]

  """
  update data of the table: "form_submission"
  """
  updateFormSubmission(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormSubmissionAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormSubmissionDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormSubmissionDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormSubmissionDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormSubmissionIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormSubmissionPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormSubmissionSetInput

    """filter the rows which have to be updated"""
    where: FormSubmissionBoolExp!
  ): FormSubmissionMutationResponse

  """
  update single row of the table: "form_submission"
  """
  updateFormSubmissionByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormSubmissionAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormSubmissionDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormSubmissionDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormSubmissionDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormSubmissionIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormSubmissionPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormSubmissionSetInput
    pkColumns: FormSubmissionPkColumnsInput!
  ): FormSubmission

  """
  update data of the table: "form_submission_edit"
  """
  updateFormSubmissionEdit(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormSubmissionEditAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormSubmissionEditDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormSubmissionEditDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormSubmissionEditDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormSubmissionEditIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormSubmissionEditPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormSubmissionEditSetInput

    """filter the rows which have to be updated"""
    where: FormSubmissionEditBoolExp!
  ): FormSubmissionEditMutationResponse

  """
  update single row of the table: "form_submission_edit"
  """
  updateFormSubmissionEditByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: FormSubmissionEditAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: FormSubmissionEditDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: FormSubmissionEditDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: FormSubmissionEditDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: FormSubmissionEditIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: FormSubmissionEditPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: FormSubmissionEditSetInput
    pkColumns: FormSubmissionEditPkColumnsInput!
  ): FormSubmissionEdit

  """
  update multiples rows of table: "form_submission_edit"
  """
  updateFormSubmissionEditMany(
    """updates to execute, in order"""
    updates: [FormSubmissionEditUpdates!]!
  ): [FormSubmissionEditMutationResponse]

  """
  update multiples rows of table: "form_submission"
  """
  updateFormSubmissionMany(
    """updates to execute, in order"""
    updates: [FormSubmissionUpdates!]!
  ): [FormSubmissionMutationResponse]

  """
  update data of the table: "individual"
  """
  updateIndividual(
    """increments the numeric columns with given value of the filtered values"""
    _inc: IndividualIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: IndividualSetInput

    """filter the rows which have to be updated"""
    where: IndividualBoolExp!
  ): IndividualMutationResponse

  """
  update single row of the table: "individual"
  """
  updateIndividualByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: IndividualIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: IndividualSetInput
    pkColumns: IndividualPkColumnsInput!
  ): Individual

  """
  update multiples rows of table: "individual"
  """
  updateIndividualMany(
    """updates to execute, in order"""
    updates: [IndividualUpdates!]!
  ): [IndividualMutationResponse]

  """
  update data of the table: "issue"
  """
  updateIssue(
    """increments the numeric columns with given value of the filtered values"""
    _inc: IssueIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: IssueSetInput

    """filter the rows which have to be updated"""
    where: IssueBoolExp!
  ): IssueMutationResponse

  """
  update single row of the table: "issue"
  """
  updateIssueByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: IssueIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: IssueSetInput
    pkColumns: IssuePkColumnsInput!
  ): Issue

  """
  update multiples rows of table: "issue"
  """
  updateIssueMany(
    """updates to execute, in order"""
    updates: [IssueUpdates!]!
  ): [IssueMutationResponse]

  """
  update data of the table: "pole"
  """
  updatePole(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: PoleSetInput

    """filter the rows which have to be updated"""
    where: PoleBoolExp!
  ): PoleMutationResponse

  """
  update single row of the table: "pole"
  """
  updatePoleByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: PoleSetInput
    pkColumns: PolePkColumnsInput!
  ): Pole

  """
  update multiples rows of table: "pole"
  """
  updatePoleMany(
    """updates to execute, in order"""
    updates: [PoleUpdates!]!
  ): [PoleMutationResponse]

  """
  update data of the table: "project"
  """
  updateProject(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectSetInput

    """filter the rows which have to be updated"""
    where: ProjectBoolExp!
  ): ProjectMutationResponse

  """
  update single row of the table: "project"
  """
  updateProjectByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectSetInput
    pkColumns: ProjectPkColumnsInput!
  ): Project

  """
  update multiples rows of table: "project"
  """
  updateProjectMany(
    """updates to execute, in order"""
    updates: [ProjectUpdates!]!
  ): [ProjectMutationResponse]

  """
  update data of the table: "project_role"
  """
  updateProjectRole(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectRoleSetInput

    """filter the rows which have to be updated"""
    where: ProjectRoleBoolExp!
  ): ProjectRoleMutationResponse

  """
  update single row of the table: "project_role"
  """
  updateProjectRoleByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectRoleSetInput
    pkColumns: ProjectRolePkColumnsInput!
  ): ProjectRole

  """
  update multiples rows of table: "project_role"
  """
  updateProjectRoleMany(
    """updates to execute, in order"""
    updates: [ProjectRoleUpdates!]!
  ): [ProjectRoleMutationResponse]

  """
  update data of the table: "project_supervisors"
  """
  updateProjectSupervisors(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectSupervisorsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectSupervisorsSetInput

    """filter the rows which have to be updated"""
    where: ProjectSupervisorsBoolExp!
  ): ProjectSupervisorsMutationResponse

  """
  update single row of the table: "project_supervisors"
  """
  updateProjectSupervisorsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectSupervisorsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectSupervisorsSetInput
    pkColumns: ProjectSupervisorsPkColumnsInput!
  ): ProjectSupervisors

  """
  update multiples rows of table: "project_supervisors"
  """
  updateProjectSupervisorsMany(
    """updates to execute, in order"""
    updates: [ProjectSupervisorsUpdates!]!
  ): [ProjectSupervisorsMutationResponse]

  """
  update data of the table: "project_tags"
  """
  updateProjectTags(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectTagsSetInput

    """filter the rows which have to be updated"""
    where: ProjectTagsBoolExp!
  ): ProjectTagsMutationResponse

  """
  update single row of the table: "project_tags"
  """
  updateProjectTagsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProjectTagsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProjectTagsSetInput
    pkColumns: ProjectTagsPkColumnsInput!
  ): ProjectTags

  """
  update multiples rows of table: "project_tags"
  """
  updateProjectTagsMany(
    """updates to execute, in order"""
    updates: [ProjectTagsUpdates!]!
  ): [ProjectTagsMutationResponse]

  """
  update data of the table: "reaction"
  """
  updateReaction(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ReactionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ReactionSetInput

    """filter the rows which have to be updated"""
    where: ReactionBoolExp!
  ): ReactionMutationResponse

  """
  update single row of the table: "reaction"
  """
  updateReactionByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ReactionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ReactionSetInput
    pkColumns: ReactionPkColumnsInput!
  ): Reaction

  """
  update multiples rows of table: "reaction"
  """
  updateReactionMany(
    """updates to execute, in order"""
    updates: [ReactionUpdates!]!
  ): [ReactionMutationResponse]

  """
  update data of the table: "report"
  """
  updateReport(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ReportIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ReportSetInput

    """filter the rows which have to be updated"""
    where: ReportBoolExp!
  ): ReportMutationResponse

  """
  update single row of the table: "report"
  """
  updateReportByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ReportIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ReportSetInput
    pkColumns: ReportPkColumnsInput!
  ): Report

  """
  update multiples rows of table: "report"
  """
  updateReportMany(
    """updates to execute, in order"""
    updates: [ReportUpdates!]!
  ): [ReportMutationResponse]

  """
  update data of the table: "role"
  """
  updateRole(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RoleSetInput

    """filter the rows which have to be updated"""
    where: RoleBoolExp!
  ): RoleMutationResponse

  """
  update single row of the table: "role"
  """
  updateRoleByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RoleSetInput
    pkColumns: RolePkColumnsInput!
  ): Role

  """
  update multiples rows of table: "role"
  """
  updateRoleMany(
    """updates to execute, in order"""
    updates: [RoleUpdates!]!
  ): [RoleMutationResponse]

  """
  update data of the table: "session"
  """
  updateSession(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: SessionAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: SessionDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: SessionDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: SessionDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: SessionIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: SessionPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: SessionSetInput

    """filter the rows which have to be updated"""
    where: SessionBoolExp!
  ): SessionMutationResponse

  """
  update single row of the table: "session"
  """
  updateSessionByPk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: SessionAppendInput

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _deleteAtPath: SessionDeleteAtPathInput

    """
    delete the array element with specified index (negative integers count from
    the end). throws an error if top level container is not an array
    """
    _deleteElem: SessionDeleteElemInput

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _deleteKey: SessionDeleteKeyInput

    """increments the numeric columns with given value of the filtered values"""
    _inc: SessionIncInput

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: SessionPrependInput

    """sets the columns of the filtered rows to the given values"""
    _set: SessionSetInput
    pkColumns: SessionPkColumnsInput!
  ): Session

  """
  update multiples rows of table: "session"
  """
  updateSessionMany(
    """updates to execute, in order"""
    updates: [SessionUpdates!]!
  ): [SessionMutationResponse]

  """
  update data of the table: "shortcut"
  """
  updateShortcut(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ShortcutIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ShortcutSetInput

    """filter the rows which have to be updated"""
    where: ShortcutBoolExp!
  ): ShortcutMutationResponse

  """
  update single row of the table: "shortcut"
  """
  updateShortcutByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ShortcutIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ShortcutSetInput
    pkColumns: ShortcutPkColumnsInput!
  ): Shortcut

  """
  update multiples rows of table: "shortcut"
  """
  updateShortcutMany(
    """updates to execute, in order"""
    updates: [ShortcutUpdates!]!
  ): [ShortcutMutationResponse]

  """
  update data of the table: "social"
  """
  updateSocial(
    """increments the numeric columns with given value of the filtered values"""
    _inc: SocialIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: SocialSetInput

    """filter the rows which have to be updated"""
    where: SocialBoolExp!
  ): SocialMutationResponse

  """
  update single row of the table: "social"
  """
  updateSocialByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: SocialIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: SocialSetInput
    pkColumns: SocialPkColumnsInput!
  ): Social

  """
  update multiples rows of table: "social"
  """
  updateSocialMany(
    """updates to execute, in order"""
    updates: [SocialUpdates!]!
  ): [SocialMutationResponse]

  """
  update data of the table: "subject"
  """
  updateSubject(
    """increments the numeric columns with given value of the filtered values"""
    _inc: SubjectIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: SubjectSetInput

    """filter the rows which have to be updated"""
    where: SubjectBoolExp!
  ): SubjectMutationResponse

  """
  update single row of the table: "subject"
  """
  updateSubjectByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: SubjectIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: SubjectSetInput
    pkColumns: SubjectPkColumnsInput!
  ): Subject

  """
  update data of the table: "subject_class_groups"
  """
  updateSubjectClassGroups(
    """increments the numeric columns with given value of the filtered values"""
    _inc: SubjectClassGroupsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: SubjectClassGroupsSetInput

    """filter the rows which have to be updated"""
    where: SubjectClassGroupsBoolExp!
  ): SubjectClassGroupsMutationResponse

  """
  update single row of the table: "subject_class_groups"
  """
  updateSubjectClassGroupsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: SubjectClassGroupsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: SubjectClassGroupsSetInput
    pkColumns: SubjectClassGroupsPkColumnsInput!
  ): SubjectClassGroups

  """
  update multiples rows of table: "subject_class_groups"
  """
  updateSubjectClassGroupsMany(
    """updates to execute, in order"""
    updates: [SubjectClassGroupsUpdates!]!
  ): [SubjectClassGroupsMutationResponse]

  """
  update multiples rows of table: "subject"
  """
  updateSubjectMany(
    """updates to execute, in order"""
    updates: [SubjectUpdates!]!
  ): [SubjectMutationResponse]

  """
  update data of the table: "tag"
  """
  updateTag(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TagIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TagSetInput

    """filter the rows which have to be updated"""
    where: TagBoolExp!
  ): TagMutationResponse

  """
  update single row of the table: "tag"
  """
  updateTagByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TagIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TagSetInput
    pkColumns: TagPkColumnsInput!
  ): Tag

  """
  update multiples rows of table: "tag"
  """
  updateTagMany(
    """updates to execute, in order"""
    updates: [TagUpdates!]!
  ): [TagMutationResponse]

  """
  update data of the table: "team"
  """
  updateTeam(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamSetInput

    """filter the rows which have to be updated"""
    where: TeamBoolExp!
  ): TeamMutationResponse

  """
  update single row of the table: "team"
  """
  updateTeamByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamSetInput
    pkColumns: TeamPkColumnsInput!
  ): Team

  """
  update data of the table: "team_events"
  """
  updateTeamEvents(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamEventsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamEventsSetInput

    """filter the rows which have to be updated"""
    where: TeamEventsBoolExp!
  ): TeamEventsMutationResponse

  """
  update single row of the table: "team_events"
  """
  updateTeamEventsByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamEventsIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamEventsSetInput
    pkColumns: TeamEventsPkColumnsInput!
  ): TeamEvents

  """
  update multiples rows of table: "team_events"
  """
  updateTeamEventsMany(
    """updates to execute, in order"""
    updates: [TeamEventsUpdates!]!
  ): [TeamEventsMutationResponse]

  """
  update data of the table: "team_finance"
  """
  updateTeamFinance(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamFinanceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamFinanceSetInput

    """filter the rows which have to be updated"""
    where: TeamFinanceBoolExp!
  ): TeamFinanceMutationResponse

  """
  update single row of the table: "team_finance"
  """
  updateTeamFinanceByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamFinanceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamFinanceSetInput
    pkColumns: TeamFinancePkColumnsInput!
  ): TeamFinance

  """
  update data of the table: "team_finance_edit"
  """
  updateTeamFinanceEdit(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamFinanceEditIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamFinanceEditSetInput

    """filter the rows which have to be updated"""
    where: TeamFinanceEditBoolExp!
  ): TeamFinanceEditMutationResponse

  """
  update single row of the table: "team_finance_edit"
  """
  updateTeamFinanceEditByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamFinanceEditIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamFinanceEditSetInput
    pkColumns: TeamFinanceEditPkColumnsInput!
  ): TeamFinanceEdit

  """
  update multiples rows of table: "team_finance_edit"
  """
  updateTeamFinanceEditMany(
    """updates to execute, in order"""
    updates: [TeamFinanceEditUpdates!]!
  ): [TeamFinanceEditMutationResponse]

  """
  update multiples rows of table: "team_finance"
  """
  updateTeamFinanceMany(
    """updates to execute, in order"""
    updates: [TeamFinanceUpdates!]!
  ): [TeamFinanceMutationResponse]

  """
  update data of the table: "team_join"
  """
  updateTeamJoin(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamJoinIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamJoinSetInput

    """filter the rows which have to be updated"""
    where: TeamJoinBoolExp!
  ): TeamJoinMutationResponse

  """
  update single row of the table: "team_join"
  """
  updateTeamJoinByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamJoinIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamJoinSetInput
    pkColumns: TeamJoinPkColumnsInput!
  ): TeamJoin

  """
  update multiples rows of table: "team_join"
  """
  updateTeamJoinMany(
    """updates to execute, in order"""
    updates: [TeamJoinUpdates!]!
  ): [TeamJoinMutationResponse]

  """
  update multiples rows of table: "team"
  """
  updateTeamMany(
    """updates to execute, in order"""
    updates: [TeamUpdates!]!
  ): [TeamMutationResponse]

  """
  update data of the table: "team_member"
  """
  updateTeamMember(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamMemberIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamMemberSetInput

    """filter the rows which have to be updated"""
    where: TeamMemberBoolExp!
  ): TeamMemberMutationResponse

  """
  update single row of the table: "team_member"
  """
  updateTeamMemberByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamMemberIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamMemberSetInput
    pkColumns: TeamMemberPkColumnsInput!
  ): TeamMember

  """
  update multiples rows of table: "team_member"
  """
  updateTeamMemberMany(
    """updates to execute, in order"""
    updates: [TeamMemberUpdates!]!
  ): [TeamMemberMutationResponse]

  """
  update data of the table: "team_member_roles"
  """
  updateTeamMemberRoles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamMemberRolesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamMemberRolesSetInput

    """filter the rows which have to be updated"""
    where: TeamMemberRolesBoolExp!
  ): TeamMemberRolesMutationResponse

  """
  update single row of the table: "team_member_roles"
  """
  updateTeamMemberRolesByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamMemberRolesIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamMemberRolesSetInput
    pkColumns: TeamMemberRolesPkColumnsInput!
  ): TeamMemberRoles

  """
  update multiples rows of table: "team_member_roles"
  """
  updateTeamMemberRolesMany(
    """updates to execute, in order"""
    updates: [TeamMemberRolesUpdates!]!
  ): [TeamMemberRolesMutationResponse]

  """
  update data of the table: "team_metric"
  """
  updateTeamMetric(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamMetricIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamMetricSetInput

    """filter the rows which have to be updated"""
    where: TeamMetricBoolExp!
  ): TeamMetricMutationResponse

  """
  update single row of the table: "team_metric"
  """
  updateTeamMetricByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeamMetricIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeamMetricSetInput
    pkColumns: TeamMetricPkColumnsInput!
  ): TeamMetric

  """
  update multiples rows of table: "team_metric"
  """
  updateTeamMetricMany(
    """updates to execute, in order"""
    updates: [TeamMetricUpdates!]!
  ): [TeamMetricMutationResponse]

  """
  update data of the table: "tenant"
  """
  updateTenant(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TenantIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TenantSetInput

    """filter the rows which have to be updated"""
    where: TenantBoolExp!
  ): TenantMutationResponse

  """
  update single row of the table: "tenant"
  """
  updateTenantByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TenantIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TenantSetInput
    pkColumns: TenantPkColumnsInput!
  ): Tenant

  """
  update multiples rows of table: "tenant"
  """
  updateTenantMany(
    """updates to execute, in order"""
    updates: [TenantUpdates!]!
  ): [TenantMutationResponse]

  """
  update data of the table: "user_info"
  """
  updateUserInfo(
    """increments the numeric columns with given value of the filtered values"""
    _inc: UserInfoIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: UserInfoSetInput

    """filter the rows which have to be updated"""
    where: UserInfoBoolExp!
  ): UserInfoMutationResponse

  """
  update single row of the table: "user_info"
  """
  updateUserInfoByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: UserInfoIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: UserInfoSetInput
    pkColumns: UserInfoPkColumnsInput!
  ): UserInfo

  """
  update multiples rows of table: "user_info"
  """
  updateUserInfoMany(
    """updates to execute, in order"""
    updates: [UserInfoUpdates!]!
  ): [UserInfoMutationResponse]

  """
  update data of the table: "validation"
  """
  updateValidation(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ValidationIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ValidationSetInput

    """filter the rows which have to be updated"""
    where: ValidationBoolExp!
  ): ValidationMutationResponse

  """
  update single row of the table: "validation"
  """
  updateValidationByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ValidationIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ValidationSetInput
    pkColumns: ValidationPkColumnsInput!
  ): Validation

  """
  update multiples rows of table: "validation"
  """
  updateValidationMany(
    """updates to execute, in order"""
    updates: [ValidationUpdates!]!
  ): [ValidationMutationResponse]

  """
  update data of the table: "vote"
  """
  updateVote(
    """increments the numeric columns with given value of the filtered values"""
    _inc: VoteIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: VoteSetInput

    """filter the rows which have to be updated"""
    where: VoteBoolExp!
  ): VoteMutationResponse

  """
  update single row of the table: "vote"
  """
  updateVoteByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: VoteIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: VoteSetInput
    pkColumns: VotePkColumnsInput!
  ): Vote

  """
  update multiples rows of table: "vote"
  """
  updateVoteMany(
    """updates to execute, in order"""
    updates: [VoteUpdates!]!
  ): [VoteMutationResponse]
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

"""
columns and relationships of "pole"
"""
type Pole {
  category: String!

  """An array relationship"""
  changeRoles(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """An aggregate relationship"""
  changeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  name: String!
  required: Boolean!

  """An object relationship"""
  team: Team!
  teamId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "pole"
"""
type PoleAggregate {
  aggregate: PoleAggregateFields
  nodes: [Pole!]!
}

input PoleAggregateBoolExp {
  bool_and: poleAggregateBoolExpBool_and
  bool_or: poleAggregateBoolExpBool_or
  count: poleAggregateBoolExpCount
}

input poleAggregateBoolExpBool_and {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpBool_or {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpCount {
  arguments: [PoleSelectColumn!]
  distinct: Boolean
  filter: PoleBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "pole"
"""
type PoleAggregateFields {
  avg: PoleAvgFields
  count(columns: [PoleSelectColumn!], distinct: Boolean): Int!
  max: PoleMaxFields
  min: PoleMinFields
  stddev: PoleStddevFields
  stddevPop: PoleStddevPopFields
  stddevSamp: PoleStddevSampFields
  sum: PoleSumFields
  varPop: PoleVarPopFields
  varSamp: PoleVarSampFields
  variance: PoleVarianceFields
}

"""
order by aggregate values of table "pole"
"""
input PoleAggregateOrderBy {
  avg: PoleAvgOrderBy
  count: OrderBy
  max: PoleMaxOrderBy
  min: PoleMinOrderBy
  stddev: PoleStddevOrderBy
  stddevPop: PoleStddevPopOrderBy
  stddevSamp: PoleStddevSampOrderBy
  sum: PoleSumOrderBy
  varPop: PoleVarPopOrderBy
  varSamp: PoleVarSampOrderBy
  variance: PoleVarianceOrderBy
}

"""
input type for inserting array relation for remote table "pole"
"""
input PoleArrRelInsertInput {
  data: [PoleInsertInput!]!

  """upsert condition"""
  onConflict: PoleOnConflict
}

"""aggregate avg on columns"""
type PoleAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "pole"
"""
input PoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "pole". All fields are combined with a logical 'AND'.
"""
input PoleBoolExp {
  _and: [PoleBoolExp!]
  _not: PoleBoolExp
  _or: [PoleBoolExp!]
  category: StringComparisonExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  required: BooleanComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "pole"
"""
enum PoleConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  pole_pkey
}

"""
input type for incrementing numeric columns in table "pole"
"""
input PoleIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "pole"
"""
input PoleInsertInput {
  category: String
  changeRoles: ChangeRoleArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  required: Boolean
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type PoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "pole"
"""
input PoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type PoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "pole"
"""
input PoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "pole"
"""
type PoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Pole!]!
}

"""
input type for inserting object relation for remote table "pole"
"""
input PoleObjRelInsertInput {
  data: PoleInsertInput!

  """upsert condition"""
  onConflict: PoleOnConflict
}

"""
on_conflict condition type for table "pole"
"""
input PoleOnConflict {
  constraint: PoleConstraint!
  updateColumns: [PoleUpdateColumn!]! = []
  where: PoleBoolExp
}

"""Ordering options when selecting data from "pole"."""
input PoleOrderBy {
  category: OrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  required: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: pole"""
input PolePkColumnsInput {
  id: bigint!
}

"""
select columns of table "pole"
"""
enum PoleSelectColumn {
  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  required

  """column name"""
  teamId

  """column name"""
  tenantId
}

"""
select "poleAggregateBoolExpBool_andArgumentsColumns" columns of table "pole"
"""
enum PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  required
}

"""
select "poleAggregateBoolExpBool_orArgumentsColumns" columns of table "pole"
"""
enum PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  required
}

"""
input type for updating data in table "pole"
"""
input PoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  required: Boolean
  teamId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type PoleStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "pole"
"""
input PoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type PoleStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "pole"
"""
input PoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type PoleStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "pole"
"""
input PoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "pole"
"""
input PoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: PoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  required: Boolean
  teamId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type PoleSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "pole"
"""
input PoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "pole"
"""
enum PoleUpdateColumn {
  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  required

  """column name"""
  teamId

  """column name"""
  tenantId
}

input PoleUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: PoleIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: PoleSetInput

  """filter the rows which have to be updated"""
  where: PoleBoolExp!
}

"""aggregate variance on columns"""
type PoleVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "pole"
"""
input PoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type PoleVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "pole"
"""
input PoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type PoleVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "pole"
"""
input PoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "project"
"""
type Project {
  """An array relationship"""
  actions(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!
  actualBudget: Float!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!
  expectedBudget: Float!

  """An object relationship"""
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint

  """An object relationship"""
  individual: Individual
  isPrivate: Boolean!
  name: String!

  """An array relationship"""
  projectRoles(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): [ProjectRole!]!

  """An aggregate relationship"""
  projectRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): ProjectRoleAggregate!

  """An array relationship"""
  projectSupervisors(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  """An aggregate relationship"""
  projectSupervisorsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!

  """An array relationship"""
  projectTags(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  """An aggregate relationship"""
  projectTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!
  slug: String!

  """An object relationship"""
  team: Team!

  """An array relationship"""
  teamFinanceEdits(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """An aggregate relationship"""
  teamFinanceEditsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!
  teamId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "project"
"""
type ProjectAggregate {
  aggregate: ProjectAggregateFields
  nodes: [Project!]!
}

input ProjectAggregateBoolExp {
  bool_and: projectAggregateBoolExpBool_and
  bool_or: projectAggregateBoolExpBool_or
  count: projectAggregateBoolExpCount
}

input projectAggregateBoolExpBool_and {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpBool_or {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpCount {
  arguments: [ProjectSelectColumn!]
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "project"
"""
type ProjectAggregateFields {
  avg: ProjectAvgFields
  count(columns: [ProjectSelectColumn!], distinct: Boolean): Int!
  max: ProjectMaxFields
  min: ProjectMinFields
  stddev: ProjectStddevFields
  stddevPop: ProjectStddevPopFields
  stddevSamp: ProjectStddevSampFields
  sum: ProjectSumFields
  varPop: ProjectVarPopFields
  varSamp: ProjectVarSampFields
  variance: ProjectVarianceFields
}

"""
order by aggregate values of table "project"
"""
input ProjectAggregateOrderBy {
  avg: ProjectAvgOrderBy
  count: OrderBy
  max: ProjectMaxOrderBy
  min: ProjectMinOrderBy
  stddev: ProjectStddevOrderBy
  stddevPop: ProjectStddevPopOrderBy
  stddevSamp: ProjectStddevSampOrderBy
  sum: ProjectSumOrderBy
  varPop: ProjectVarPopOrderBy
  varSamp: ProjectVarSampOrderBy
  variance: ProjectVarianceOrderBy
}

"""
input type for inserting array relation for remote table "project"
"""
input ProjectArrRelInsertInput {
  data: [ProjectInsertInput!]!

  """upsert condition"""
  onConflict: ProjectOnConflict
}

"""aggregate avg on columns"""
type ProjectAvgFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "project"
"""
input ProjectAvgOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "project". All fields are combined with a logical 'AND'.
"""
input ProjectBoolExp {
  _and: [ProjectBoolExp!]
  _not: ProjectBoolExp
  _or: [ProjectBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actualBudget: FloatComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expectedBudget: FloatComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  isPrivate: BooleanComparisonExp
  name: StringComparisonExp
  projectRoles: ProjectRoleBoolExp
  projectRolesAggregate: ProjectRoleAggregateBoolExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  slug: StringComparisonExp
  team: TeamBoolExp
  teamFinanceEdits: TeamFinanceEditBoolExp
  teamFinanceEditsAggregate: TeamFinanceEditAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "project"
"""
enum ProjectConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  project_pkey
}

"""
input type for incrementing numeric columns in table "project"
"""
input ProjectIncInput {
  actualBudget: Float
  createdById: bigint
  expectedBudget: Float
  id: bigint
  imageId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "project"
"""
input ProjectInsertInput {
  actions: ActionArrRelInsertInput
  actualBudget: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  events: EventArrRelInsertInput
  expectedBudget: Float
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  isPrivate: Boolean
  name: String
  projectRoles: ProjectRoleArrRelInsertInput
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  projectTags: ProjectTagsArrRelInsertInput
  slug: String
  team: TeamObjRelInsertInput
  teamFinanceEdits: TeamFinanceEditArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ProjectMaxFields {
  actualBudget: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "project"
"""
input ProjectMaxOrderBy {
  actualBudget: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expectedBudget: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ProjectMinFields {
  actualBudget: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "project"
"""
input ProjectMinOrderBy {
  actualBudget: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expectedBudget: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "project"
"""
type ProjectMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Project!]!
}

"""
input type for inserting object relation for remote table "project"
"""
input ProjectObjRelInsertInput {
  data: ProjectInsertInput!

  """upsert condition"""
  onConflict: ProjectOnConflict
}

"""
on_conflict condition type for table "project"
"""
input ProjectOnConflict {
  constraint: ProjectConstraint!
  updateColumns: [ProjectUpdateColumn!]! = []
  where: ProjectBoolExp
}

"""Ordering options when selecting data from "project"."""
input ProjectOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actualBudget: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expectedBudget: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  isPrivate: OrderBy
  name: OrderBy
  projectRolesAggregate: ProjectRoleAggregateOrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  slug: OrderBy
  team: TeamOrderBy
  teamFinanceEditsAggregate: TeamFinanceEditAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: project"""
input ProjectPkColumnsInput {
  id: bigint!
}

"""
columns and relationships of "project_role"
"""
type ProjectRole {
  autoAccept: Boolean!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  """An array relationship"""
  eventRoles(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """An aggregate relationship"""
  eventRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): EventRoleAggregate!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  name: String!

  """An object relationship"""
  project: Project!
  projectId: bigint!
  required: Boolean!
  rewardMaximum: smallint!
  rewardMinimum: smallint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "project_role"
"""
type ProjectRoleAggregate {
  aggregate: ProjectRoleAggregateFields
  nodes: [ProjectRole!]!
}

input ProjectRoleAggregateBoolExp {
  bool_and: projectRoleAggregateBoolExpBool_and
  bool_or: projectRoleAggregateBoolExpBool_or
  count: projectRoleAggregateBoolExpCount
}

input projectRoleAggregateBoolExpBool_and {
  arguments: ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProjectRoleBoolExp
  predicate: BooleanComparisonExp!
}

input projectRoleAggregateBoolExpBool_or {
  arguments: ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProjectRoleBoolExp
  predicate: BooleanComparisonExp!
}

input projectRoleAggregateBoolExpCount {
  arguments: [ProjectRoleSelectColumn!]
  distinct: Boolean
  filter: ProjectRoleBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "project_role"
"""
type ProjectRoleAggregateFields {
  avg: ProjectRoleAvgFields
  count(columns: [ProjectRoleSelectColumn!], distinct: Boolean): Int!
  max: ProjectRoleMaxFields
  min: ProjectRoleMinFields
  stddev: ProjectRoleStddevFields
  stddevPop: ProjectRoleStddevPopFields
  stddevSamp: ProjectRoleStddevSampFields
  sum: ProjectRoleSumFields
  varPop: ProjectRoleVarPopFields
  varSamp: ProjectRoleVarSampFields
  variance: ProjectRoleVarianceFields
}

"""
order by aggregate values of table "project_role"
"""
input ProjectRoleAggregateOrderBy {
  avg: ProjectRoleAvgOrderBy
  count: OrderBy
  max: ProjectRoleMaxOrderBy
  min: ProjectRoleMinOrderBy
  stddev: ProjectRoleStddevOrderBy
  stddevPop: ProjectRoleStddevPopOrderBy
  stddevSamp: ProjectRoleStddevSampOrderBy
  sum: ProjectRoleSumOrderBy
  varPop: ProjectRoleVarPopOrderBy
  varSamp: ProjectRoleVarSampOrderBy
  variance: ProjectRoleVarianceOrderBy
}

"""
input type for inserting array relation for remote table "project_role"
"""
input ProjectRoleArrRelInsertInput {
  data: [ProjectRoleInsertInput!]!

  """upsert condition"""
  onConflict: ProjectRoleOnConflict
}

"""aggregate avg on columns"""
type ProjectRoleAvgFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

"""
order by avg() on columns of table "project_role"
"""
input ProjectRoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "project_role". All fields are combined with a logical 'AND'.
"""
input ProjectRoleBoolExp {
  _and: [ProjectRoleBoolExp!]
  _not: ProjectRoleBoolExp
  _or: [ProjectRoleBoolExp!]
  autoAccept: BooleanComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  required: BooleanComparisonExp
  rewardMaximum: SmallintComparisonExp
  rewardMinimum: SmallintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "project_role"
"""
enum ProjectRoleConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  project_role_pkey
}

"""
input type for incrementing numeric columns in table "project_role"
"""
input ProjectRoleIncInput {
  createdById: bigint
  id: bigint
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

"""
input type for inserting data into table "project_role"
"""
input ProjectRoleInsertInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventRoles: EventRoleArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ProjectRoleMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

"""
order by max() on columns of table "project_role"
"""
input ProjectRoleMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ProjectRoleMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

"""
order by min() on columns of table "project_role"
"""
input ProjectRoleMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "project_role"
"""
type ProjectRoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ProjectRole!]!
}

"""
input type for inserting object relation for remote table "project_role"
"""
input ProjectRoleObjRelInsertInput {
  data: ProjectRoleInsertInput!

  """upsert condition"""
  onConflict: ProjectRoleOnConflict
}

"""
on_conflict condition type for table "project_role"
"""
input ProjectRoleOnConflict {
  constraint: ProjectRoleConstraint!
  updateColumns: [ProjectRoleUpdateColumn!]! = []
  where: ProjectRoleBoolExp
}

"""Ordering options when selecting data from "project_role"."""
input ProjectRoleOrderBy {
  autoAccept: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  required: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: project_role"""
input ProjectRolePkColumnsInput {
  id: bigint!
}

"""
select columns of table "project_role"
"""
enum ProjectRoleSelectColumn {
  """column name"""
  autoAccept

  """column name"""
  color

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  projectId

  """column name"""
  required

  """column name"""
  rewardMaximum

  """column name"""
  rewardMinimum

  """column name"""
  tenantId
}

"""
select "projectRoleAggregateBoolExpBool_andArgumentsColumns" columns of table "project_role"
"""
enum ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  autoAccept

  """column name"""
  required
}

"""
select "projectRoleAggregateBoolExpBool_orArgumentsColumns" columns of table "project_role"
"""
enum ProjectRoleSelectColumnProjectRoleAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  autoAccept

  """column name"""
  required
}

"""
input type for updating data in table "project_role"
"""
input ProjectRoleSetInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ProjectRoleStddevFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "project_role"
"""
input ProjectRoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ProjectRoleStddevPopFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "project_role"
"""
input ProjectRoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ProjectRoleStddevSampFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "project_role"
"""
input ProjectRoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "project_role"
"""
input ProjectRoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ProjectRoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ProjectRoleStreamCursorValueInput {
  autoAccept: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  projectId: bigint
  required: Boolean
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

"""aggregate sum on columns"""
type ProjectRoleSumFields {
  createdById: bigint
  id: bigint
  projectId: bigint
  rewardMaximum: smallint
  rewardMinimum: smallint
  tenantId: bigint
}

"""
order by sum() on columns of table "project_role"
"""
input ProjectRoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "project_role"
"""
enum ProjectRoleUpdateColumn {
  """column name"""
  autoAccept

  """column name"""
  color

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  projectId

  """column name"""
  required

  """column name"""
  rewardMaximum

  """column name"""
  rewardMinimum

  """column name"""
  tenantId
}

input ProjectRoleUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ProjectRoleIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ProjectRoleSetInput

  """filter the rows which have to be updated"""
  where: ProjectRoleBoolExp!
}

"""aggregate variance on columns"""
type ProjectRoleVarianceFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

"""
order by variance() on columns of table "project_role"
"""
input ProjectRoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ProjectRoleVarPopFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "project_role"
"""
input ProjectRoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ProjectRoleVarSampFields {
  createdById: Float
  id: Float
  projectId: Float
  rewardMaximum: Float
  rewardMinimum: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "project_role"
"""
input ProjectRoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  projectId: OrderBy
  rewardMaximum: OrderBy
  rewardMinimum: OrderBy
  tenantId: OrderBy
}

"""
select columns of table "project"
"""
enum ProjectSelectColumn {
  """column name"""
  actualBudget

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  expectedBudget

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  isPrivate

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  teamId

  """column name"""
  tenantId
}

"""
select "projectAggregateBoolExpBool_andArgumentsColumns" columns of table "project"
"""
enum ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  isPrivate
}

"""
select "projectAggregateBoolExpBool_orArgumentsColumns" columns of table "project"
"""
enum ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  isPrivate
}

"""
input type for updating data in table "project"
"""
input ProjectSetInput {
  actualBudget: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  name: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ProjectStddevFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "project"
"""
input ProjectStddevOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ProjectStddevPopFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "project"
"""
input ProjectStddevPopOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ProjectStddevSampFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "project"
"""
input ProjectStddevSampOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "project"
"""
input ProjectStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ProjectStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ProjectStreamCursorValueInput {
  actualBudget: Float
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expectedBudget: Float
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  name: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type ProjectSumFields {
  actualBudget: Float
  createdById: bigint
  expectedBudget: Float
  id: bigint
  imageId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "project"
"""
input ProjectSumOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "project_supervisors"
"""
type ProjectSupervisors {
  """An object relationship"""
  project: Project!
  projectId: bigint!

  """An object relationship"""
  teamMember: TeamMember!
  teamMemberId: bigint!
}

"""
aggregated selection of "project_supervisors"
"""
type ProjectSupervisorsAggregate {
  aggregate: ProjectSupervisorsAggregateFields
  nodes: [ProjectSupervisors!]!
}

input ProjectSupervisorsAggregateBoolExp {
  count: projectSupervisorsAggregateBoolExpCount
}

input projectSupervisorsAggregateBoolExpCount {
  arguments: [ProjectSupervisorsSelectColumn!]
  distinct: Boolean
  filter: ProjectSupervisorsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "project_supervisors"
"""
type ProjectSupervisorsAggregateFields {
  avg: ProjectSupervisorsAvgFields
  count(columns: [ProjectSupervisorsSelectColumn!], distinct: Boolean): Int!
  max: ProjectSupervisorsMaxFields
  min: ProjectSupervisorsMinFields
  stddev: ProjectSupervisorsStddevFields
  stddevPop: ProjectSupervisorsStddevPopFields
  stddevSamp: ProjectSupervisorsStddevSampFields
  sum: ProjectSupervisorsSumFields
  varPop: ProjectSupervisorsVarPopFields
  varSamp: ProjectSupervisorsVarSampFields
  variance: ProjectSupervisorsVarianceFields
}

"""
order by aggregate values of table "project_supervisors"
"""
input ProjectSupervisorsAggregateOrderBy {
  avg: ProjectSupervisorsAvgOrderBy
  count: OrderBy
  max: ProjectSupervisorsMaxOrderBy
  min: ProjectSupervisorsMinOrderBy
  stddev: ProjectSupervisorsStddevOrderBy
  stddevPop: ProjectSupervisorsStddevPopOrderBy
  stddevSamp: ProjectSupervisorsStddevSampOrderBy
  sum: ProjectSupervisorsSumOrderBy
  varPop: ProjectSupervisorsVarPopOrderBy
  varSamp: ProjectSupervisorsVarSampOrderBy
  variance: ProjectSupervisorsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "project_supervisors"
"""
input ProjectSupervisorsArrRelInsertInput {
  data: [ProjectSupervisorsInsertInput!]!

  """upsert condition"""
  onConflict: ProjectSupervisorsOnConflict
}

"""aggregate avg on columns"""
type ProjectSupervisorsAvgFields {
  projectId: Float
  teamMemberId: Float
}

"""
order by avg() on columns of table "project_supervisors"
"""
input ProjectSupervisorsAvgOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""
Boolean expression to filter rows from the table "project_supervisors". All fields are combined with a logical 'AND'.
"""
input ProjectSupervisorsBoolExp {
  _and: [ProjectSupervisorsBoolExp!]
  _not: ProjectSupervisorsBoolExp
  _or: [ProjectSupervisorsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

"""
unique or primary key constraints on table "project_supervisors"
"""
enum ProjectSupervisorsConstraint {
  """
  unique or primary key constraint on columns "project_id", "team_member_id"
  """
  project_supervisors_pkey
}

"""
input type for incrementing numeric columns in table "project_supervisors"
"""
input ProjectSupervisorsIncInput {
  projectId: bigint
  teamMemberId: bigint
}

"""
input type for inserting data into table "project_supervisors"
"""
input ProjectSupervisorsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

"""aggregate max on columns"""
type ProjectSupervisorsMaxFields {
  projectId: bigint
  teamMemberId: bigint
}

"""
order by max() on columns of table "project_supervisors"
"""
input ProjectSupervisorsMaxOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate min on columns"""
type ProjectSupervisorsMinFields {
  projectId: bigint
  teamMemberId: bigint
}

"""
order by min() on columns of table "project_supervisors"
"""
input ProjectSupervisorsMinOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""
response of any mutation on the table "project_supervisors"
"""
type ProjectSupervisorsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ProjectSupervisors!]!
}

"""
on_conflict condition type for table "project_supervisors"
"""
input ProjectSupervisorsOnConflict {
  constraint: ProjectSupervisorsConstraint!
  updateColumns: [ProjectSupervisorsUpdateColumn!]! = []
  where: ProjectSupervisorsBoolExp
}

"""Ordering options when selecting data from "project_supervisors"."""
input ProjectSupervisorsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

"""primary key columns input for table: project_supervisors"""
input ProjectSupervisorsPkColumnsInput {
  projectId: bigint!
  teamMemberId: bigint!
}

"""
select columns of table "project_supervisors"
"""
enum ProjectSupervisorsSelectColumn {
  """column name"""
  projectId

  """column name"""
  teamMemberId
}

"""
input type for updating data in table "project_supervisors"
"""
input ProjectSupervisorsSetInput {
  projectId: bigint
  teamMemberId: bigint
}

"""aggregate stddev on columns"""
type ProjectSupervisorsStddevFields {
  projectId: Float
  teamMemberId: Float
}

"""
order by stddev() on columns of table "project_supervisors"
"""
input ProjectSupervisorsStddevOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate stddevPop on columns"""
type ProjectSupervisorsStddevPopFields {
  projectId: Float
  teamMemberId: Float
}

"""
order by stddevPop() on columns of table "project_supervisors"
"""
input ProjectSupervisorsStddevPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ProjectSupervisorsStddevSampFields {
  projectId: Float
  teamMemberId: Float
}

"""
order by stddevSamp() on columns of table "project_supervisors"
"""
input ProjectSupervisorsStddevSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""
Streaming cursor of the table "project_supervisors"
"""
input ProjectSupervisorsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ProjectSupervisorsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ProjectSupervisorsStreamCursorValueInput {
  projectId: bigint
  teamMemberId: bigint
}

"""aggregate sum on columns"""
type ProjectSupervisorsSumFields {
  projectId: bigint
  teamMemberId: bigint
}

"""
order by sum() on columns of table "project_supervisors"
"""
input ProjectSupervisorsSumOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""
update columns of table "project_supervisors"
"""
enum ProjectSupervisorsUpdateColumn {
  """column name"""
  projectId

  """column name"""
  teamMemberId
}

input ProjectSupervisorsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ProjectSupervisorsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ProjectSupervisorsSetInput

  """filter the rows which have to be updated"""
  where: ProjectSupervisorsBoolExp!
}

"""aggregate variance on columns"""
type ProjectSupervisorsVarianceFields {
  projectId: Float
  teamMemberId: Float
}

"""
order by variance() on columns of table "project_supervisors"
"""
input ProjectSupervisorsVarianceOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate varPop on columns"""
type ProjectSupervisorsVarPopFields {
  projectId: Float
  teamMemberId: Float
}

"""
order by varPop() on columns of table "project_supervisors"
"""
input ProjectSupervisorsVarPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate varSamp on columns"""
type ProjectSupervisorsVarSampFields {
  projectId: Float
  teamMemberId: Float
}

"""
order by varSamp() on columns of table "project_supervisors"
"""
input ProjectSupervisorsVarSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

"""
columns and relationships of "project_tags"
"""
type ProjectTags {
  """An object relationship"""
  project: Project!
  projectId: bigint!

  """An object relationship"""
  tag: Tag!
  tagId: bigint!
}

"""
aggregated selection of "project_tags"
"""
type ProjectTagsAggregate {
  aggregate: ProjectTagsAggregateFields
  nodes: [ProjectTags!]!
}

input ProjectTagsAggregateBoolExp {
  count: projectTagsAggregateBoolExpCount
}

input projectTagsAggregateBoolExpCount {
  arguments: [ProjectTagsSelectColumn!]
  distinct: Boolean
  filter: ProjectTagsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "project_tags"
"""
type ProjectTagsAggregateFields {
  avg: ProjectTagsAvgFields
  count(columns: [ProjectTagsSelectColumn!], distinct: Boolean): Int!
  max: ProjectTagsMaxFields
  min: ProjectTagsMinFields
  stddev: ProjectTagsStddevFields
  stddevPop: ProjectTagsStddevPopFields
  stddevSamp: ProjectTagsStddevSampFields
  sum: ProjectTagsSumFields
  varPop: ProjectTagsVarPopFields
  varSamp: ProjectTagsVarSampFields
  variance: ProjectTagsVarianceFields
}

"""
order by aggregate values of table "project_tags"
"""
input ProjectTagsAggregateOrderBy {
  avg: ProjectTagsAvgOrderBy
  count: OrderBy
  max: ProjectTagsMaxOrderBy
  min: ProjectTagsMinOrderBy
  stddev: ProjectTagsStddevOrderBy
  stddevPop: ProjectTagsStddevPopOrderBy
  stddevSamp: ProjectTagsStddevSampOrderBy
  sum: ProjectTagsSumOrderBy
  varPop: ProjectTagsVarPopOrderBy
  varSamp: ProjectTagsVarSampOrderBy
  variance: ProjectTagsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "project_tags"
"""
input ProjectTagsArrRelInsertInput {
  data: [ProjectTagsInsertInput!]!

  """upsert condition"""
  onConflict: ProjectTagsOnConflict
}

"""aggregate avg on columns"""
type ProjectTagsAvgFields {
  projectId: Float
  tagId: Float
}

"""
order by avg() on columns of table "project_tags"
"""
input ProjectTagsAvgOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""
Boolean expression to filter rows from the table "project_tags". All fields are combined with a logical 'AND'.
"""
input ProjectTagsBoolExp {
  _and: [ProjectTagsBoolExp!]
  _not: ProjectTagsBoolExp
  _or: [ProjectTagsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

"""
unique or primary key constraints on table "project_tags"
"""
enum ProjectTagsConstraint {
  """
  unique or primary key constraint on columns "project_id", "tag_id"
  """
  project_tags_pkey
}

"""
input type for incrementing numeric columns in table "project_tags"
"""
input ProjectTagsIncInput {
  projectId: bigint
  tagId: bigint
}

"""
input type for inserting data into table "project_tags"
"""
input ProjectTagsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

"""aggregate max on columns"""
type ProjectTagsMaxFields {
  projectId: bigint
  tagId: bigint
}

"""
order by max() on columns of table "project_tags"
"""
input ProjectTagsMaxOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""aggregate min on columns"""
type ProjectTagsMinFields {
  projectId: bigint
  tagId: bigint
}

"""
order by min() on columns of table "project_tags"
"""
input ProjectTagsMinOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""
response of any mutation on the table "project_tags"
"""
type ProjectTagsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ProjectTags!]!
}

"""
on_conflict condition type for table "project_tags"
"""
input ProjectTagsOnConflict {
  constraint: ProjectTagsConstraint!
  updateColumns: [ProjectTagsUpdateColumn!]! = []
  where: ProjectTagsBoolExp
}

"""Ordering options when selecting data from "project_tags"."""
input ProjectTagsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

"""primary key columns input for table: project_tags"""
input ProjectTagsPkColumnsInput {
  projectId: bigint!
  tagId: bigint!
}

"""
select columns of table "project_tags"
"""
enum ProjectTagsSelectColumn {
  """column name"""
  projectId

  """column name"""
  tagId
}

"""
input type for updating data in table "project_tags"
"""
input ProjectTagsSetInput {
  projectId: bigint
  tagId: bigint
}

"""aggregate stddev on columns"""
type ProjectTagsStddevFields {
  projectId: Float
  tagId: Float
}

"""
order by stddev() on columns of table "project_tags"
"""
input ProjectTagsStddevOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevPop on columns"""
type ProjectTagsStddevPopFields {
  projectId: Float
  tagId: Float
}

"""
order by stddevPop() on columns of table "project_tags"
"""
input ProjectTagsStddevPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ProjectTagsStddevSampFields {
  projectId: Float
  tagId: Float
}

"""
order by stddevSamp() on columns of table "project_tags"
"""
input ProjectTagsStddevSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""
Streaming cursor of the table "project_tags"
"""
input ProjectTagsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ProjectTagsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ProjectTagsStreamCursorValueInput {
  projectId: bigint
  tagId: bigint
}

"""aggregate sum on columns"""
type ProjectTagsSumFields {
  projectId: bigint
  tagId: bigint
}

"""
order by sum() on columns of table "project_tags"
"""
input ProjectTagsSumOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "project_tags"
"""
enum ProjectTagsUpdateColumn {
  """column name"""
  projectId

  """column name"""
  tagId
}

input ProjectTagsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ProjectTagsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ProjectTagsSetInput

  """filter the rows which have to be updated"""
  where: ProjectTagsBoolExp!
}

"""aggregate variance on columns"""
type ProjectTagsVarianceFields {
  projectId: Float
  tagId: Float
}

"""
order by variance() on columns of table "project_tags"
"""
input ProjectTagsVarianceOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""aggregate varPop on columns"""
type ProjectTagsVarPopFields {
  projectId: Float
  tagId: Float
}

"""
order by varPop() on columns of table "project_tags"
"""
input ProjectTagsVarPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""aggregate varSamp on columns"""
type ProjectTagsVarSampFields {
  projectId: Float
  tagId: Float
}

"""
order by varSamp() on columns of table "project_tags"
"""
input ProjectTagsVarSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

"""
update columns of table "project"
"""
enum ProjectUpdateColumn {
  """column name"""
  actualBudget

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  expectedBudget

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  isPrivate

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  teamId

  """column name"""
  tenantId
}

input ProjectUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ProjectIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ProjectSetInput

  """filter the rows which have to be updated"""
  where: ProjectBoolExp!
}

"""aggregate variance on columns"""
type ProjectVarianceFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "project"
"""
input ProjectVarianceOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ProjectVarPopFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "project"
"""
input ProjectVarPopOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ProjectVarSampFields {
  actualBudget: Float
  createdById: Float
  expectedBudget: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "project"
"""
input ProjectVarSampOrderBy {
  actualBudget: OrderBy
  createdById: OrderBy
  expectedBudget: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Query {
  """
  fetch data from the table: "action"
  """
  action(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """
  fetch aggregated fields from the table: "action"
  """
  actionAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """fetch data from the table: "action" using primary key columns"""
  actionByPk(id: bigint!): Action

  """
  fetch data from the table: "actor"
  """
  actor(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): [Actor!]!

  """
  fetch data from the table: "actor_address"
  """
  actorAddress(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  """
  fetch aggregated fields from the table: "actor_address"
  """
  actorAddressAggregate(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  """fetch data from the table: "actor_address" using primary key columns"""
  actorAddressByPk(id: bigint!): ActorAddress

  """
  fetch aggregated fields from the table: "actor"
  """
  actorAggregate(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): ActorAggregate!

  """
  fetch data from the table: "actor_bank_info"
  """
  actorBankInfo(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  """
  fetch aggregated fields from the table: "actor_bank_info"
  """
  actorBankInfoAggregate(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  """fetch data from the table: "actor_bank_info" using primary key columns"""
  actorBankInfoByPk(id: bigint!): ActorBankInfo

  """fetch data from the table: "actor" using primary key columns"""
  actorByPk(id: bigint!): Actor

  """
  fetch data from the table: "actor_finance"
  """
  actorFinance(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """
  fetch aggregated fields from the table: "actor_finance"
  """
  actorFinanceAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!

  """fetch data from the table: "actor_finance" using primary key columns"""
  actorFinanceByPk(id: bigint!): ActorFinance

  """
  fetch data from the table: "actor_image"
  """
  actorImage(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): [ActorImage!]!

  """
  fetch aggregated fields from the table: "actor_image"
  """
  actorImageAggregate(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  """fetch data from the table: "actor_image" using primary key columns"""
  actorImageByPk(id: bigint!): ActorImage

  """An array relationship"""
  actorTags(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  """An aggregate relationship"""
  actorTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!

  """fetch data from the table: "actor_tags" using primary key columns"""
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags

  """
  fetch data from the table: "bot_info"
  """
  botInfo(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): [BotInfo!]!

  """
  fetch aggregated fields from the table: "bot_info"
  """
  botInfoAggregate(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  """fetch data from the table: "bot_info" using primary key columns"""
  botInfoByPk(id: bigint!): BotInfo

  """
  fetch data from the table: "campus"
  """
  campus(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): [Campus!]!

  """
  fetch aggregated fields from the table: "campus"
  """
  campusAggregate(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): CampusAggregate!

  """fetch data from the table: "campus" using primary key columns"""
  campusByPk(id: bigint!): Campus

  """
  fetch data from the table: "canteen"
  """
  canteen(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): [Canteen!]!

  """
  fetch aggregated fields from the table: "canteen"
  """
  canteenAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): CanteenAggregate!

  """fetch data from the table: "canteen" using primary key columns"""
  canteenByPk(id: bigint!): Canteen

  """
  fetch data from the table: "canteen_food"
  """
  canteenFood(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  """
  fetch aggregated fields from the table: "canteen_food"
  """
  canteenFoodAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  """fetch data from the table: "canteen_food" using primary key columns"""
  canteenFoodByPk(id: bigint!): CanteenFood

  """
  fetch data from the table: "canteen_menu"
  """
  canteenMenu(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  """
  fetch aggregated fields from the table: "canteen_menu"
  """
  canteenMenuAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  """fetch data from the table: "canteen_menu" using primary key columns"""
  canteenMenuByPk(id: bigint!): CanteenMenu

  """
  fetch data from the table: "change_role"
  """
  changeRole(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """
  fetch aggregated fields from the table: "change_role"
  """
  changeRoleAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!

  """fetch data from the table: "change_role" using primary key columns"""
  changeRoleByPk(id: bigint!): ChangeRole

  """
  fetch data from the table: "class_group"
  """
  classGroup(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  """
  fetch aggregated fields from the table: "class_group"
  """
  classGroupAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  """fetch data from the table: "class_group" using primary key columns"""
  classGroupByPk(id: bigint!): ClassGroup

  """
  fetch data from the table: "class_group_teacher"
  """
  classGroupTeacher(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  """
  fetch aggregated fields from the table: "class_group_teacher"
  """
  classGroupTeacherAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  """
  fetch data from the table: "class_group_teacher" using primary key columns
  """
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher

  """An array relationship"""
  classGroupTeacherSubjects(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  """An aggregate relationship"""
  classGroupTeacherSubjectsAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!

  """
  fetch data from the table: "class_group_teacher_subjects" using primary key columns
  """
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects

  """
  fetch data from the table: "cohort"
  """
  cohort(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): [Cohort!]!

  """
  fetch aggregated fields from the table: "cohort"
  """
  cohortAggregate(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): CohortAggregate!

  """fetch data from the table: "cohort" using primary key columns"""
  cohortByPk(id: bigint!): Cohort

  """
  fetch data from the table: "content"
  """
  content(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): [Content!]!

  """
  fetch aggregated fields from the table: "content"
  """
  contentAggregate(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): ContentAggregate!

  """An array relationship"""
  contentAttachments(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  """An aggregate relationship"""
  contentAttachmentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!

  """
  fetch data from the table: "content_attachments" using primary key columns
  """
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments

  """fetch data from the table: "content" using primary key columns"""
  contentByPk(id: bigint!): Content

  """
  fetch data from the table: "content_edit"
  """
  contentEdit(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): [ContentEdit!]!

  """
  fetch aggregated fields from the table: "content_edit"
  """
  contentEditAggregate(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): ContentEditAggregate!

  """fetch data from the table: "content_edit" using primary key columns"""
  contentEditByPk(id: bigint!): ContentEdit

  """
  fetch data from the table: "content_master"
  """
  contentMaster(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): [ContentMaster!]!

  """
  fetch aggregated fields from the table: "content_master"
  """
  contentMasterAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): ContentMasterAggregate!

  """fetch data from the table: "content_master" using primary key columns"""
  contentMasterByPk(id: bigint!): ContentMaster

  """An array relationship"""
  contentMasterContributors(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): [ContentMasterContributors!]!

  """An aggregate relationship"""
  contentMasterContributorsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): ContentMasterContributorsAggregate!

  """
  fetch data from the table: "content_master_contributors" using primary key columns
  """
  contentMasterContributorsByPk(contentMasterId: bigint!, individualId: bigint!): ContentMasterContributors

  """An array relationship"""
  contentMasterTags(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): [ContentMasterTags!]!

  """An aggregate relationship"""
  contentMasterTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): ContentMasterTagsAggregate!

  """
  fetch data from the table: "content_master_tags" using primary key columns
  """
  contentMasterTagsByPk(contentMasterId: bigint!, tagId: bigint!): ContentMasterTags

  """An array relationship"""
  contentTeams(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): [ContentTeams!]!

  """An aggregate relationship"""
  contentTeamsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): ContentTeamsAggregate!

  """fetch data from the table: "content_teams" using primary key columns"""
  contentTeamsByPk(contentId: bigint!, teamId: bigint!): ContentTeams

  """
  fetch data from the table: "document"
  """
  document(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): [Document!]!

  """
  fetch aggregated fields from the table: "document"
  """
  documentAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): DocumentAggregate!

  """fetch data from the table: "document" using primary key columns"""
  documentByPk(id: bigint!): Document

  """
  fetch data from the table: "document_edit"
  """
  documentEdit(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): [DocumentEdit!]!

  """
  fetch aggregated fields from the table: "document_edit"
  """
  documentEditAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): DocumentEditAggregate!

  """fetch data from the table: "document_edit" using primary key columns"""
  documentEditByPk(id: bigint!): DocumentEdit

  """
  fetch data from the table: "event"
  """
  event(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """
  fetch aggregated fields from the table: "event"
  """
  eventAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """
  fetch data from the table: "event_approval"
  """
  eventApproval(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  """
  fetch aggregated fields from the table: "event_approval"
  """
  eventApprovalAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  """fetch data from the table: "event_approval" using primary key columns"""
  eventApprovalByPk(id: bigint!): EventApproval

  """
  fetch data from the table: "event_approval_step"
  """
  eventApprovalStep(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  """
  fetch aggregated fields from the table: "event_approval_step"
  """
  eventApprovalStepAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  """
  fetch data from the table: "event_approval_step" using primary key columns
  """
  eventApprovalStepByPk(id: bigint!): EventApprovalStep

  """An array relationship"""
  eventApprovalStepNotifiees(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  """An aggregate relationship"""
  eventApprovalStepNotifieesAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  """
  fetch data from the table: "event_approval_step_notifiees" using primary key columns
  """
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees

  """An array relationship"""
  eventApprovalStepValidators(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  """An aggregate relationship"""
  eventApprovalStepValidatorsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  """
  fetch data from the table: "event_approval_step_validators" using primary key columns
  """
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators

  """
  fetch data from the table: "event_attendance"
  """
  eventAttendance(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): [EventAttendance!]!

  """
  fetch aggregated fields from the table: "event_attendance"
  """
  eventAttendanceAggregate(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): EventAttendanceAggregate!

  """
  fetch data from the table: "event_attendance" using primary key columns
  """
  eventAttendanceByPk(id: bigint!): EventAttendance

  """fetch data from the table: "event" using primary key columns"""
  eventByPk(id: bigint!): Event

  """
  fetch data from the table: "event_change_role"
  """
  eventChangeRole(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): [EventChangeRole!]!

  """
  fetch aggregated fields from the table: "event_change_role"
  """
  eventChangeRoleAggregate(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): EventChangeRoleAggregate!

  """
  fetch data from the table: "event_change_role" using primary key columns
  """
  eventChangeRoleByPk(id: bigint!): EventChangeRole

  """
  fetch data from the table: "event_join"
  """
  eventJoin(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """
  fetch aggregated fields from the table: "event_join"
  """
  eventJoinAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """fetch data from the table: "event_join" using primary key columns"""
  eventJoinByPk(id: bigint!): EventJoin

  """
  fetch data from the table: "event_role"
  """
  eventRole(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """
  fetch aggregated fields from the table: "event_role"
  """
  eventRoleAggregate(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): EventRoleAggregate!

  """fetch data from the table: "event_role" using primary key columns"""
  eventRoleByPk(id: bigint!): EventRole

  """An array relationship"""
  eventTags(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): [EventTags!]!

  """An aggregate relationship"""
  eventTagsAggregate(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  """fetch data from the table: "event_tags" using primary key columns"""
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags

  """
  fetch data from the table: "expense"
  """
  expense(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """
  fetch aggregated fields from the table: "expense"
  """
  expenseAggregate(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  """fetch data from the table: "expense" using primary key columns"""
  expenseByPk(id: bigint!): Expense

  """
  fetch data from the table: "favorite"
  """
  favorite(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): [Favorite!]!

  """
  fetch aggregated fields from the table: "favorite"
  """
  favoriteAggregate(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  """fetch data from the table: "favorite" using primary key columns"""
  favoriteByPk(id: bigint!): Favorite

  """
  fetch data from the table: "file_upload"
  """
  fileUpload(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): [FileUpload!]!

  """
  fetch aggregated fields from the table: "file_upload"
  """
  fileUploadAggregate(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  """fetch data from the table: "file_upload" using primary key columns"""
  fileUploadByPk(id: bigint!): FileUpload

  """
  fetch data from the table: "follow"
  """
  follow(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): [Follow!]!

  """
  fetch aggregated fields from the table: "follow"
  """
  followAggregate(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): FollowAggregate!

  """fetch data from the table: "follow" using primary key columns"""
  followByPk(id: bigint!): Follow

  """
  fetch data from the table: "form"
  """
  form(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): [Form!]!

  """
  fetch aggregated fields from the table: "form"
  """
  formAggregate(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): FormAggregate!

  """fetch data from the table: "form" using primary key columns"""
  formByPk(id: bigint!): Form

  """
  fetch data from the table: "form_edit"
  """
  formEdit(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): [FormEdit!]!

  """
  fetch aggregated fields from the table: "form_edit"
  """
  formEditAggregate(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): FormEditAggregate!

  """fetch data from the table: "form_edit" using primary key columns"""
  formEditByPk(id: bigint!): FormEdit

  """
  fetch data from the table: "form_submission"
  """
  formSubmission(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  """
  fetch aggregated fields from the table: "form_submission"
  """
  formSubmissionAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  """fetch data from the table: "form_submission" using primary key columns"""
  formSubmissionByPk(id: bigint!): FormSubmission

  """
  fetch data from the table: "form_submission_edit"
  """
  formSubmissionEdit(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): [FormSubmissionEdit!]!

  """
  fetch aggregated fields from the table: "form_submission_edit"
  """
  formSubmissionEditAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): FormSubmissionEditAggregate!

  """
  fetch data from the table: "form_submission_edit" using primary key columns
  """
  formSubmissionEditByPk(id: bigint!): FormSubmissionEdit

  """
  fetch data from the table: "individual"
  """
  individual(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): [Individual!]!

  """
  fetch aggregated fields from the table: "individual"
  """
  individualAggregate(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): IndividualAggregate!

  """fetch data from the table: "individual" using primary key columns"""
  individualByPk(id: bigint!): Individual

  """
  fetch data from the table: "issue"
  """
  issue(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): [Issue!]!

  """
  fetch aggregated fields from the table: "issue"
  """
  issueAggregate(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): IssueAggregate!

  """fetch data from the table: "issue" using primary key columns"""
  issueByPk(id: bigint!): Issue

  """
  fetch data from the table: "pole"
  """
  pole(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): [Pole!]!

  """
  fetch aggregated fields from the table: "pole"
  """
  poleAggregate(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): PoleAggregate!

  """fetch data from the table: "pole" using primary key columns"""
  poleByPk(id: bigint!): Pole

  """
  fetch data from the table: "project"
  """
  project(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): [Project!]!

  """
  fetch aggregated fields from the table: "project"
  """
  projectAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): ProjectAggregate!

  """fetch data from the table: "project" using primary key columns"""
  projectByPk(id: bigint!): Project

  """
  fetch data from the table: "project_role"
  """
  projectRole(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): [ProjectRole!]!

  """
  fetch aggregated fields from the table: "project_role"
  """
  projectRoleAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): ProjectRoleAggregate!

  """fetch data from the table: "project_role" using primary key columns"""
  projectRoleByPk(id: bigint!): ProjectRole

  """An array relationship"""
  projectSupervisors(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  """An aggregate relationship"""
  projectSupervisorsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!

  """
  fetch data from the table: "project_supervisors" using primary key columns
  """
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors

  """An array relationship"""
  projectTags(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  """An aggregate relationship"""
  projectTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!

  """fetch data from the table: "project_tags" using primary key columns"""
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags

  """
  fetch data from the table: "reaction"
  """
  reaction(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): [Reaction!]!

  """
  fetch aggregated fields from the table: "reaction"
  """
  reactionAggregate(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): ReactionAggregate!

  """fetch data from the table: "reaction" using primary key columns"""
  reactionByPk(id: bigint!): Reaction

  """
  fetch data from the table: "report"
  """
  report(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): [Report!]!

  """
  fetch aggregated fields from the table: "report"
  """
  reportAggregate(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): ReportAggregate!

  """fetch data from the table: "report" using primary key columns"""
  reportByPk(id: bigint!): Report

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  roleAggregate(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): RoleAggregate!

  """fetch data from the table: "role" using primary key columns"""
  roleByPk(id: bigint!): Role

  """
  fetch data from the table: "session"
  """
  session(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): [Session!]!

  """
  fetch aggregated fields from the table: "session"
  """
  sessionAggregate(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): SessionAggregate!

  """fetch data from the table: "session" using primary key columns"""
  sessionByPk(id: bigint!): Session

  """
  fetch data from the table: "shortcut"
  """
  shortcut(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): [Shortcut!]!

  """
  fetch aggregated fields from the table: "shortcut"
  """
  shortcutAggregate(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  """fetch data from the table: "shortcut" using primary key columns"""
  shortcutByPk(id: bigint!): Shortcut

  """
  fetch data from the table: "social"
  """
  social(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): [Social!]!

  """
  fetch aggregated fields from the table: "social"
  """
  socialAggregate(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): SocialAggregate!

  """fetch data from the table: "social" using primary key columns"""
  socialByPk(id: bigint!): Social

  """
  fetch data from the table: "subject"
  """
  subject(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): [Subject!]!

  """
  fetch aggregated fields from the table: "subject"
  """
  subjectAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): SubjectAggregate!

  """fetch data from the table: "subject" using primary key columns"""
  subjectByPk(id: bigint!): Subject

  """An array relationship"""
  subjectClassGroups(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  """An aggregate relationship"""
  subjectClassGroupsAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  """
  fetch data from the table: "subject_class_groups" using primary key columns
  """
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): [Tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tagAggregate(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): TagAggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tagByPk(id: bigint!): Tag

  """
  fetch data from the table: "team"
  """
  team(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): [Team!]!

  """
  fetch aggregated fields from the table: "team"
  """
  teamAggregate(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): TeamAggregate!

  """fetch data from the table: "team" using primary key columns"""
  teamByPk(id: bigint!): Team

  """An array relationship"""
  teamEvents(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  """An aggregate relationship"""
  teamEventsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  """fetch data from the table: "team_events" using primary key columns"""
  teamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents

  """
  fetch data from the table: "team_finance"
  """
  teamFinance(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """
  fetch aggregated fields from the table: "team_finance"
  """
  teamFinanceAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!

  """fetch data from the table: "team_finance" using primary key columns"""
  teamFinanceByPk(id: bigint!): TeamFinance

  """
  fetch data from the table: "team_finance_edit"
  """
  teamFinanceEdit(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """
  fetch aggregated fields from the table: "team_finance_edit"
  """
  teamFinanceEditAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """
  fetch data from the table: "team_finance_edit" using primary key columns
  """
  teamFinanceEditByPk(id: bigint!): TeamFinanceEdit

  """
  fetch data from the table: "team_join"
  """
  teamJoin(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """
  fetch aggregated fields from the table: "team_join"
  """
  teamJoinAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """fetch data from the table: "team_join" using primary key columns"""
  teamJoinByPk(id: bigint!): TeamJoin

  """
  fetch data from the table: "team_member"
  """
  teamMember(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  """
  fetch aggregated fields from the table: "team_member"
  """
  teamMemberAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  """fetch data from the table: "team_member" using primary key columns"""
  teamMemberByPk(id: bigint!): TeamMember

  """An array relationship"""
  teamMemberRoles(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  """An aggregate relationship"""
  teamMemberRolesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  """
  fetch data from the table: "team_member_roles" using primary key columns
  """
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles

  """
  fetch data from the table: "team_metric"
  """
  teamMetric(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  """
  fetch aggregated fields from the table: "team_metric"
  """
  teamMetricAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  """fetch data from the table: "team_metric" using primary key columns"""
  teamMetricByPk(id: bigint!): TeamMetric

  """
  fetch data from the table: "tenant"
  """
  tenant(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): [Tenant!]!

  """
  fetch aggregated fields from the table: "tenant"
  """
  tenantAggregate(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): TenantAggregate!

  """fetch data from the table: "tenant" using primary key columns"""
  tenantByPk(id: bigint!): Tenant

  """
  fetch data from the table: "user_info"
  """
  userInfo(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): [UserInfo!]!

  """
  fetch aggregated fields from the table: "user_info"
  """
  userInfoAggregate(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  """fetch data from the table: "user_info" using primary key columns"""
  userInfoByPk(id: bigint!): UserInfo

  """
  fetch data from the table: "validation"
  """
  validation(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): [Validation!]!

  """
  fetch aggregated fields from the table: "validation"
  """
  validationAggregate(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): ValidationAggregate!

  """fetch data from the table: "validation" using primary key columns"""
  validationByPk(id: bigint!): Validation

  """
  fetch data from the table: "vote"
  """
  vote(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): [Vote!]!

  """
  fetch aggregated fields from the table: "vote"
  """
  voteAggregate(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): VoteAggregate!

  """fetch data from the table: "vote" using primary key columns"""
  voteByPk(id: bigint!): Vote
}

"""
columns and relationships of "reaction"
"""
type Reaction {
  """An object relationship"""
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  lastActiveDate: timestamptz
  reactionType: String!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "reaction"
"""
type ReactionAggregate {
  aggregate: ReactionAggregateFields
  nodes: [Reaction!]!
}

input ReactionAggregateBoolExp {
  count: reactionAggregateBoolExpCount
}

input reactionAggregateBoolExpCount {
  arguments: [ReactionSelectColumn!]
  distinct: Boolean
  filter: ReactionBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "reaction"
"""
type ReactionAggregateFields {
  avg: ReactionAvgFields
  count(columns: [ReactionSelectColumn!], distinct: Boolean): Int!
  max: ReactionMaxFields
  min: ReactionMinFields
  stddev: ReactionStddevFields
  stddevPop: ReactionStddevPopFields
  stddevSamp: ReactionStddevSampFields
  sum: ReactionSumFields
  varPop: ReactionVarPopFields
  varSamp: ReactionVarSampFields
  variance: ReactionVarianceFields
}

"""
order by aggregate values of table "reaction"
"""
input ReactionAggregateOrderBy {
  avg: ReactionAvgOrderBy
  count: OrderBy
  max: ReactionMaxOrderBy
  min: ReactionMinOrderBy
  stddev: ReactionStddevOrderBy
  stddevPop: ReactionStddevPopOrderBy
  stddevSamp: ReactionStddevSampOrderBy
  sum: ReactionSumOrderBy
  varPop: ReactionVarPopOrderBy
  varSamp: ReactionVarSampOrderBy
  variance: ReactionVarianceOrderBy
}

"""
input type for inserting array relation for remote table "reaction"
"""
input ReactionArrRelInsertInput {
  data: [ReactionInsertInput!]!

  """upsert condition"""
  onConflict: ReactionOnConflict
}

"""aggregate avg on columns"""
type ReactionAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "reaction"
"""
input ReactionAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "reaction". All fields are combined with a logical 'AND'.
"""
input ReactionBoolExp {
  _and: [ReactionBoolExp!]
  _not: ReactionBoolExp
  _or: [ReactionBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  reactionType: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "reaction"
"""
enum ReactionConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  reaction_pkey
}

"""
input type for incrementing numeric columns in table "reaction"
"""
input ReactionIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "reaction"
"""
input ReactionInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  reactionType: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type ReactionMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

"""
order by max() on columns of table "reaction"
"""
input ReactionMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type ReactionMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

"""
order by min() on columns of table "reaction"
"""
input ReactionMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "reaction"
"""
type ReactionMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Reaction!]!
}

"""
on_conflict condition type for table "reaction"
"""
input ReactionOnConflict {
  constraint: ReactionConstraint!
  updateColumns: [ReactionUpdateColumn!]! = []
  where: ReactionBoolExp
}

"""Ordering options when selecting data from "reaction"."""
input ReactionOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: reaction"""
input ReactionPkColumnsInput {
  id: bigint!
}

"""
select columns of table "reaction"
"""
enum ReactionSelectColumn {
  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  reactionType

  """column name"""
  tenantId
}

"""
input type for updating data in table "reaction"
"""
input ReactionSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

"""aggregate stddev on columns"""
type ReactionStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "reaction"
"""
input ReactionStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ReactionStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "reaction"
"""
input ReactionStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ReactionStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "reaction"
"""
input ReactionStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "reaction"
"""
input ReactionStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ReactionStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ReactionStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

"""aggregate sum on columns"""
type ReactionSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "reaction"
"""
input ReactionSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "reaction"
"""
enum ReactionUpdateColumn {
  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  reactionType

  """column name"""
  tenantId
}

input ReactionUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ReactionIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ReactionSetInput

  """filter the rows which have to be updated"""
  where: ReactionBoolExp!
}

"""aggregate variance on columns"""
type ReactionVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "reaction"
"""
input ReactionVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ReactionVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "reaction"
"""
input ReactionVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ReactionVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "reaction"
"""
input ReactionVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "report"
"""
type Report {
  """An object relationship"""
  actor: Actor
  actorId: bigint

  """An object relationship"""
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  lastActiveDate: timestamptz
  reason: String

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "report"
"""
type ReportAggregate {
  aggregate: ReportAggregateFields
  nodes: [Report!]!
}

input ReportAggregateBoolExp {
  count: reportAggregateBoolExpCount
}

input reportAggregateBoolExpCount {
  arguments: [ReportSelectColumn!]
  distinct: Boolean
  filter: ReportBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "report"
"""
type ReportAggregateFields {
  avg: ReportAvgFields
  count(columns: [ReportSelectColumn!], distinct: Boolean): Int!
  max: ReportMaxFields
  min: ReportMinFields
  stddev: ReportStddevFields
  stddevPop: ReportStddevPopFields
  stddevSamp: ReportStddevSampFields
  sum: ReportSumFields
  varPop: ReportVarPopFields
  varSamp: ReportVarSampFields
  variance: ReportVarianceFields
}

"""
order by aggregate values of table "report"
"""
input ReportAggregateOrderBy {
  avg: ReportAvgOrderBy
  count: OrderBy
  max: ReportMaxOrderBy
  min: ReportMinOrderBy
  stddev: ReportStddevOrderBy
  stddevPop: ReportStddevPopOrderBy
  stddevSamp: ReportStddevSampOrderBy
  sum: ReportSumOrderBy
  varPop: ReportVarPopOrderBy
  varSamp: ReportVarSampOrderBy
  variance: ReportVarianceOrderBy
}

"""
input type for inserting array relation for remote table "report"
"""
input ReportArrRelInsertInput {
  data: [ReportInsertInput!]!

  """upsert condition"""
  onConflict: ReportOnConflict
}

"""aggregate avg on columns"""
type ReportAvgFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "report"
"""
input ReportAvgOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "report". All fields are combined with a logical 'AND'.
"""
input ReportBoolExp {
  _and: [ReportBoolExp!]
  _not: ReportBoolExp
  _or: [ReportBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  reason: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "report"
"""
enum ReportConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  report_pkey
}

"""
input type for incrementing numeric columns in table "report"
"""
input ReportIncInput {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "report"
"""
input ReportInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  reason: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type ReportMaxFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "report"
"""
input ReportMaxOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type ReportMinFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "report"
"""
input ReportMinOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "report"
"""
type ReportMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Report!]!
}

"""
on_conflict condition type for table "report"
"""
input ReportOnConflict {
  constraint: ReportConstraint!
  updateColumns: [ReportUpdateColumn!]! = []
  where: ReportBoolExp
}

"""Ordering options when selecting data from "report"."""
input ReportOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: report"""
input ReportPkColumnsInput {
  id: bigint!
}

"""
select columns of table "report"
"""
enum ReportSelectColumn {
  """column name"""
  actorId

  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  reason

  """column name"""
  tenantId

  """column name"""
  type
}

"""
input type for updating data in table "report"
"""
input ReportSetInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type ReportStddevFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "report"
"""
input ReportStddevOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ReportStddevPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "report"
"""
input ReportStddevPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ReportStddevSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "report"
"""
input ReportStddevSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "report"
"""
input ReportStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ReportStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ReportStreamCursorValueInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type ReportSumFields {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "report"
"""
input ReportSumOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "report"
"""
enum ReportUpdateColumn {
  """column name"""
  actorId

  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  reason

  """column name"""
  tenantId

  """column name"""
  type
}

input ReportUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ReportIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ReportSetInput

  """filter the rows which have to be updated"""
  where: ReportBoolExp!
}

"""aggregate variance on columns"""
type ReportVarianceFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "report"
"""
input ReportVarianceOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ReportVarPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "report"
"""
input ReportVarPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ReportVarSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "report"
"""
input ReportVarSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "role"
"""
type Role {
  category: String!

  """An array relationship"""
  changeRoles(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """An aggregate relationship"""
  changeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  isRequired: Boolean!
  name: String!
  permissions: Int!

  """An object relationship"""
  team: Team!
  teamId: bigint!

  """An array relationship"""
  teamJoins(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """An aggregate relationship"""
  teamJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """An array relationship"""
  teamMemberRoles(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  """An aggregate relationship"""
  teamMemberRolesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "role"
"""
type RoleAggregate {
  aggregate: RoleAggregateFields
  nodes: [Role!]!
}

input RoleAggregateBoolExp {
  bool_and: roleAggregateBoolExpBool_and
  bool_or: roleAggregateBoolExpBool_or
  count: roleAggregateBoolExpCount
}

input roleAggregateBoolExpBool_and {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpBool_or {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpCount {
  arguments: [RoleSelectColumn!]
  distinct: Boolean
  filter: RoleBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "role"
"""
type RoleAggregateFields {
  avg: RoleAvgFields
  count(columns: [RoleSelectColumn!], distinct: Boolean): Int!
  max: RoleMaxFields
  min: RoleMinFields
  stddev: RoleStddevFields
  stddevPop: RoleStddevPopFields
  stddevSamp: RoleStddevSampFields
  sum: RoleSumFields
  varPop: RoleVarPopFields
  varSamp: RoleVarSampFields
  variance: RoleVarianceFields
}

"""
order by aggregate values of table "role"
"""
input RoleAggregateOrderBy {
  avg: RoleAvgOrderBy
  count: OrderBy
  max: RoleMaxOrderBy
  min: RoleMinOrderBy
  stddev: RoleStddevOrderBy
  stddevPop: RoleStddevPopOrderBy
  stddevSamp: RoleStddevSampOrderBy
  sum: RoleSumOrderBy
  varPop: RoleVarPopOrderBy
  varSamp: RoleVarSampOrderBy
  variance: RoleVarianceOrderBy
}

"""
input type for inserting array relation for remote table "role"
"""
input RoleArrRelInsertInput {
  data: [RoleInsertInput!]!

  """upsert condition"""
  onConflict: RoleOnConflict
}

"""aggregate avg on columns"""
type RoleAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "role"
"""
input RoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "role". All fields are combined with a logical 'AND'.
"""
input RoleBoolExp {
  _and: [RoleBoolExp!]
  _not: RoleBoolExp
  _or: [RoleBoolExp!]
  category: StringComparisonExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isRequired: BooleanComparisonExp
  name: StringComparisonExp
  permissions: IntComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "role"
"""
enum RoleConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  role_pkey
}

"""
input type for incrementing numeric columns in table "role"
"""
input RoleIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "role"
"""
input RoleInsertInput {
  category: String
  changeRoles: ChangeRoleArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isRequired: Boolean
  name: String
  permissions: Int
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type RoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "role"
"""
input RoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type RoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "role"
"""
input RoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "role"
"""
type RoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Role!]!
}

"""
input type for inserting object relation for remote table "role"
"""
input RoleObjRelInsertInput {
  data: RoleInsertInput!

  """upsert condition"""
  onConflict: RoleOnConflict
}

"""
on_conflict condition type for table "role"
"""
input RoleOnConflict {
  constraint: RoleConstraint!
  updateColumns: [RoleUpdateColumn!]! = []
  where: RoleBoolExp
}

"""Ordering options when selecting data from "role"."""
input RoleOrderBy {
  category: OrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isRequired: OrderBy
  name: OrderBy
  permissions: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: role"""
input RolePkColumnsInput {
  id: bigint!
}

"""
select columns of table "role"
"""
enum RoleSelectColumn {
  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  isRequired

  """column name"""
  name

  """column name"""
  permissions

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  type
}

"""
select "roleAggregateBoolExpBool_andArgumentsColumns" columns of table "role"
"""
enum RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  isRequired
}

"""
select "roleAggregateBoolExpBool_orArgumentsColumns" columns of table "role"
"""
enum RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  isRequired
}

"""
input type for updating data in table "role"
"""
input RoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isRequired: Boolean
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type RoleStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "role"
"""
input RoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type RoleStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "role"
"""
input RoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type RoleStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "role"
"""
input RoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "role"
"""
input RoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: RoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input RoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isRequired: Boolean
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type RoleSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "role"
"""
input RoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "role"
"""
enum RoleUpdateColumn {
  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  isRequired

  """column name"""
  name

  """column name"""
  permissions

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  type
}

input RoleUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: RoleIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: RoleSetInput

  """filter the rows which have to be updated"""
  where: RoleBoolExp!
}

"""aggregate variance on columns"""
type RoleVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "role"
"""
input RoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type RoleVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "role"
"""
input RoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type RoleVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "role"
"""
input RoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "session"
"""
type Session {
  clientType: String!
  country: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  ip: String!
  lastActivityAt: timestamptz!
  lastIssuedAt: timestamptz!
  refreshTokenHash: String!
  revokedAt: timestamptz

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  tokenFamily: String!
  userAgent(
    """JSON select path"""
    path: String
  ): jsonb!
  userId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "session"
"""
type SessionAggregate {
  aggregate: SessionAggregateFields
  nodes: [Session!]!
}

input SessionAggregateBoolExp {
  count: sessionAggregateBoolExpCount
}

input sessionAggregateBoolExpCount {
  arguments: [SessionSelectColumn!]
  distinct: Boolean
  filter: SessionBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "session"
"""
type SessionAggregateFields {
  avg: SessionAvgFields
  count(columns: [SessionSelectColumn!], distinct: Boolean): Int!
  max: SessionMaxFields
  min: SessionMinFields
  stddev: SessionStddevFields
  stddevPop: SessionStddevPopFields
  stddevSamp: SessionStddevSampFields
  sum: SessionSumFields
  varPop: SessionVarPopFields
  varSamp: SessionVarSampFields
  variance: SessionVarianceFields
}

"""
order by aggregate values of table "session"
"""
input SessionAggregateOrderBy {
  avg: SessionAvgOrderBy
  count: OrderBy
  max: SessionMaxOrderBy
  min: SessionMinOrderBy
  stddev: SessionStddevOrderBy
  stddevPop: SessionStddevPopOrderBy
  stddevSamp: SessionStddevSampOrderBy
  sum: SessionSumOrderBy
  varPop: SessionVarPopOrderBy
  varSamp: SessionVarSampOrderBy
  variance: SessionVarianceOrderBy
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input SessionAppendInput {
  userAgent: jsonb
}

"""
input type for inserting array relation for remote table "session"
"""
input SessionArrRelInsertInput {
  data: [SessionInsertInput!]!

  """upsert condition"""
  onConflict: SessionOnConflict
}

"""aggregate avg on columns"""
type SessionAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by avg() on columns of table "session"
"""
input SessionAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to filter rows from the table "session". All fields are combined with a logical 'AND'.
"""
input SessionBoolExp {
  _and: [SessionBoolExp!]
  _not: SessionBoolExp
  _or: [SessionBoolExp!]
  clientType: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expiredAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  ip: StringComparisonExp
  lastActivityAt: TimestamptzComparisonExp
  lastIssuedAt: TimestamptzComparisonExp
  refreshTokenHash: StringComparisonExp
  revokedAt: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tokenFamily: StringComparisonExp
  userAgent: JsonbComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "session"
"""
enum SessionConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  session_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input SessionDeleteAtPathInput {
  userAgent: [String!]
}

"""
delete the array element with specified index (negative integers count from the
end). throws an error if top level container is not an array
"""
input SessionDeleteElemInput {
  userAgent: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input SessionDeleteKeyInput {
  userAgent: String
}

"""
input type for incrementing numeric columns in table "session"
"""
input SessionIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

"""
input type for inserting data into table "session"
"""
input SessionInsertInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type SessionMaxFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

"""
order by max() on columns of table "session"
"""
input SessionMaxOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

"""aggregate min on columns"""
type SessionMinFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

"""
order by min() on columns of table "session"
"""
input SessionMinOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

"""
response of any mutation on the table "session"
"""
type SessionMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Session!]!
}

"""
on_conflict condition type for table "session"
"""
input SessionOnConflict {
  constraint: SessionConstraint!
  updateColumns: [SessionUpdateColumn!]! = []
  where: SessionBoolExp
}

"""Ordering options when selecting data from "session"."""
input SessionOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userAgent: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: session"""
input SessionPkColumnsInput {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input SessionPrependInput {
  userAgent: jsonb
}

"""
select columns of table "session"
"""
enum SessionSelectColumn {
  """column name"""
  clientType

  """column name"""
  country

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  expiredAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  ip

  """column name"""
  lastActivityAt

  """column name"""
  lastIssuedAt

  """column name"""
  refreshTokenHash

  """column name"""
  revokedAt

  """column name"""
  tenantId

  """column name"""
  tokenFamily

  """column name"""
  userAgent

  """column name"""
  userId
}

"""
input type for updating data in table "session"
"""
input SessionSetInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

"""aggregate stddev on columns"""
type SessionStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddev() on columns of table "session"
"""
input SessionStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevPop on columns"""
type SessionStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevPop() on columns of table "session"
"""
input SessionStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevSamp on columns"""
type SessionStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevSamp() on columns of table "session"
"""
input SessionStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "session"
"""
input SessionStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: SessionStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input SessionStreamCursorValueInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

"""aggregate sum on columns"""
type SessionSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by sum() on columns of table "session"
"""
input SessionSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "session"
"""
enum SessionUpdateColumn {
  """column name"""
  clientType

  """column name"""
  country

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  expiredAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  ip

  """column name"""
  lastActivityAt

  """column name"""
  lastIssuedAt

  """column name"""
  refreshTokenHash

  """column name"""
  revokedAt

  """column name"""
  tenantId

  """column name"""
  tokenFamily

  """column name"""
  userAgent

  """column name"""
  userId
}

input SessionUpdates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: SessionAppendInput

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _deleteAtPath: SessionDeleteAtPathInput

  """
  delete the array element with specified index (negative integers count from
  the end). throws an error if top level container is not an array
  """
  _deleteElem: SessionDeleteElemInput

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _deleteKey: SessionDeleteKeyInput

  """increments the numeric columns with given value of the filtered values"""
  _inc: SessionIncInput

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: SessionPrependInput

  """sets the columns of the filtered rows to the given values"""
  _set: SessionSetInput

  """filter the rows which have to be updated"""
  where: SessionBoolExp!
}

"""aggregate variance on columns"""
type SessionVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by variance() on columns of table "session"
"""
input SessionVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varPop on columns"""
type SessionVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by varPop() on columns of table "session"
"""
input SessionVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varSamp on columns"""
type SessionVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

"""
order by varSamp() on columns of table "session"
"""
input SessionVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
columns and relationships of "shortcut"
"""
type Shortcut {
  """An object relationship"""
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  targetActorId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  userId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "shortcut"
"""
type ShortcutAggregate {
  aggregate: ShortcutAggregateFields
  nodes: [Shortcut!]!
}

input ShortcutAggregateBoolExp {
  count: shortcutAggregateBoolExpCount
}

input shortcutAggregateBoolExpCount {
  arguments: [ShortcutSelectColumn!]
  distinct: Boolean
  filter: ShortcutBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "shortcut"
"""
type ShortcutAggregateFields {
  avg: ShortcutAvgFields
  count(columns: [ShortcutSelectColumn!], distinct: Boolean): Int!
  max: ShortcutMaxFields
  min: ShortcutMinFields
  stddev: ShortcutStddevFields
  stddevPop: ShortcutStddevPopFields
  stddevSamp: ShortcutStddevSampFields
  sum: ShortcutSumFields
  varPop: ShortcutVarPopFields
  varSamp: ShortcutVarSampFields
  variance: ShortcutVarianceFields
}

"""
order by aggregate values of table "shortcut"
"""
input ShortcutAggregateOrderBy {
  avg: ShortcutAvgOrderBy
  count: OrderBy
  max: ShortcutMaxOrderBy
  min: ShortcutMinOrderBy
  stddev: ShortcutStddevOrderBy
  stddevPop: ShortcutStddevPopOrderBy
  stddevSamp: ShortcutStddevSampOrderBy
  sum: ShortcutSumOrderBy
  varPop: ShortcutVarPopOrderBy
  varSamp: ShortcutVarSampOrderBy
  variance: ShortcutVarianceOrderBy
}

"""
input type for inserting array relation for remote table "shortcut"
"""
input ShortcutArrRelInsertInput {
  data: [ShortcutInsertInput!]!

  """upsert condition"""
  onConflict: ShortcutOnConflict
}

"""aggregate avg on columns"""
type ShortcutAvgFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

"""
order by avg() on columns of table "shortcut"
"""
input ShortcutAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to filter rows from the table "shortcut". All fields are combined with a logical 'AND'.
"""
input ShortcutBoolExp {
  _and: [ShortcutBoolExp!]
  _not: ShortcutBoolExp
  _or: [ShortcutBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  targetActorId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "shortcut"
"""
enum ShortcutConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  shortcut_pkey
}

"""
input type for incrementing numeric columns in table "shortcut"
"""
input ShortcutIncInput {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

"""
input type for inserting data into table "shortcut"
"""
input ShortcutInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  targetActorId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type ShortcutMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

"""
order by max() on columns of table "shortcut"
"""
input ShortcutMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

"""aggregate min on columns"""
type ShortcutMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

"""
order by min() on columns of table "shortcut"
"""
input ShortcutMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

"""
response of any mutation on the table "shortcut"
"""
type ShortcutMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Shortcut!]!
}

"""
on_conflict condition type for table "shortcut"
"""
input ShortcutOnConflict {
  constraint: ShortcutConstraint!
  updateColumns: [ShortcutUpdateColumn!]! = []
  where: ShortcutBoolExp
}

"""Ordering options when selecting data from "shortcut"."""
input ShortcutOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  targetActorId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: shortcut"""
input ShortcutPkColumnsInput {
  id: bigint!
}

"""
select columns of table "shortcut"
"""
enum ShortcutSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  targetActorId

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  userId
}

"""
input type for updating data in table "shortcut"
"""
input ShortcutSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

"""aggregate stddev on columns"""
type ShortcutStddevFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddev() on columns of table "shortcut"
"""
input ShortcutStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevPop on columns"""
type ShortcutStddevPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevPop() on columns of table "shortcut"
"""
input ShortcutStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ShortcutStddevSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevSamp() on columns of table "shortcut"
"""
input ShortcutStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "shortcut"
"""
input ShortcutStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ShortcutStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ShortcutStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

"""aggregate sum on columns"""
type ShortcutSumFields {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by sum() on columns of table "shortcut"
"""
input ShortcutSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "shortcut"
"""
enum ShortcutUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  targetActorId

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  userId
}

input ShortcutUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ShortcutIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ShortcutSetInput

  """filter the rows which have to be updated"""
  where: ShortcutBoolExp!
}

"""aggregate variance on columns"""
type ShortcutVarianceFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

"""
order by variance() on columns of table "shortcut"
"""
input ShortcutVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varPop on columns"""
type ShortcutVarPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

"""
order by varPop() on columns of table "shortcut"
"""
input ShortcutVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varSamp on columns"""
type ShortcutVarSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

"""
order by varSamp() on columns of table "shortcut"
"""
input ShortcutVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input SmallintComparisonExp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _isNull: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

"""
columns and relationships of "social"
"""
type Social {
  """An object relationship"""
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  pseudo: String!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  url: String!
}

"""
aggregated selection of "social"
"""
type SocialAggregate {
  aggregate: SocialAggregateFields
  nodes: [Social!]!
}

input SocialAggregateBoolExp {
  count: socialAggregateBoolExpCount
}

input socialAggregateBoolExpCount {
  arguments: [SocialSelectColumn!]
  distinct: Boolean
  filter: SocialBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "social"
"""
type SocialAggregateFields {
  avg: SocialAvgFields
  count(columns: [SocialSelectColumn!], distinct: Boolean): Int!
  max: SocialMaxFields
  min: SocialMinFields
  stddev: SocialStddevFields
  stddevPop: SocialStddevPopFields
  stddevSamp: SocialStddevSampFields
  sum: SocialSumFields
  varPop: SocialVarPopFields
  varSamp: SocialVarSampFields
  variance: SocialVarianceFields
}

"""
order by aggregate values of table "social"
"""
input SocialAggregateOrderBy {
  avg: SocialAvgOrderBy
  count: OrderBy
  max: SocialMaxOrderBy
  min: SocialMinOrderBy
  stddev: SocialStddevOrderBy
  stddevPop: SocialStddevPopOrderBy
  stddevSamp: SocialStddevSampOrderBy
  sum: SocialSumOrderBy
  varPop: SocialVarPopOrderBy
  varSamp: SocialVarSampOrderBy
  variance: SocialVarianceOrderBy
}

"""
input type for inserting array relation for remote table "social"
"""
input SocialArrRelInsertInput {
  data: [SocialInsertInput!]!

  """upsert condition"""
  onConflict: SocialOnConflict
}

"""aggregate avg on columns"""
type SocialAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "social"
"""
input SocialAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "social". All fields are combined with a logical 'AND'.
"""
input SocialBoolExp {
  _and: [SocialBoolExp!]
  _not: SocialBoolExp
  _or: [SocialBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  pseudo: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

"""
unique or primary key constraints on table "social"
"""
enum SocialConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  social_pkey
}

"""
input type for incrementing numeric columns in table "social"
"""
input SocialIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "social"
"""
input SocialInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  pseudo: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  url: String
}

"""aggregate max on columns"""
type SocialMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

"""
order by max() on columns of table "social"
"""
input SocialMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

"""aggregate min on columns"""
type SocialMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

"""
order by min() on columns of table "social"
"""
input SocialMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

"""
response of any mutation on the table "social"
"""
type SocialMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Social!]!
}

"""
on_conflict condition type for table "social"
"""
input SocialOnConflict {
  constraint: SocialConstraint!
  updateColumns: [SocialUpdateColumn!]! = []
  where: SocialBoolExp
}

"""Ordering options when selecting data from "social"."""
input SocialOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  pseudo: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

"""primary key columns input for table: social"""
input SocialPkColumnsInput {
  id: bigint!
}

"""
select columns of table "social"
"""
enum SocialSelectColumn {
  """column name"""
  actorId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  pseudo

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  url
}

"""
input type for updating data in table "social"
"""
input SocialSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

"""aggregate stddev on columns"""
type SocialStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "social"
"""
input SocialStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type SocialStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "social"
"""
input SocialStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type SocialStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "social"
"""
input SocialStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "social"
"""
input SocialStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: SocialStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input SocialStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

"""aggregate sum on columns"""
type SocialSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "social"
"""
input SocialSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "social"
"""
enum SocialUpdateColumn {
  """column name"""
  actorId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  pseudo

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  url
}

input SocialUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: SocialIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: SocialSetInput

  """filter the rows which have to be updated"""
  where: SocialBoolExp!
}

"""aggregate variance on columns"""
type SocialVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "social"
"""
input SocialVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type SocialVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "social"
"""
input SocialVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type SocialVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "social"
"""
input SocialVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "subject"
"""
type Subject {
  """An array relationship"""
  classGroupTeacherSubjects(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  """An aggregate relationship"""
  classGroupTeacherSubjectsAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!
  code: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String

  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): [Document!]!

  """An aggregate relationship"""
  documentsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): DocumentAggregate!
  englishName: String
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  lastActiveDate: timestamptz
  name: String!

  """An array relationship"""
  subjectClassGroups(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  """An aggregate relationship"""
  subjectClassGroupsAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "subject"
"""
type SubjectAggregate {
  aggregate: SubjectAggregateFields
  nodes: [Subject!]!
}

input SubjectAggregateBoolExp {
  count: subjectAggregateBoolExpCount
}

input subjectAggregateBoolExpCount {
  arguments: [SubjectSelectColumn!]
  distinct: Boolean
  filter: SubjectBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "subject"
"""
type SubjectAggregateFields {
  avg: SubjectAvgFields
  count(columns: [SubjectSelectColumn!], distinct: Boolean): Int!
  max: SubjectMaxFields
  min: SubjectMinFields
  stddev: SubjectStddevFields
  stddevPop: SubjectStddevPopFields
  stddevSamp: SubjectStddevSampFields
  sum: SubjectSumFields
  varPop: SubjectVarPopFields
  varSamp: SubjectVarSampFields
  variance: SubjectVarianceFields
}

"""
order by aggregate values of table "subject"
"""
input SubjectAggregateOrderBy {
  avg: SubjectAvgOrderBy
  count: OrderBy
  max: SubjectMaxOrderBy
  min: SubjectMinOrderBy
  stddev: SubjectStddevOrderBy
  stddevPop: SubjectStddevPopOrderBy
  stddevSamp: SubjectStddevSampOrderBy
  sum: SubjectSumOrderBy
  varPop: SubjectVarPopOrderBy
  varSamp: SubjectVarSampOrderBy
  variance: SubjectVarianceOrderBy
}

"""
input type for inserting array relation for remote table "subject"
"""
input SubjectArrRelInsertInput {
  data: [SubjectInsertInput!]!

  """upsert condition"""
  onConflict: SubjectOnConflict
}

"""aggregate avg on columns"""
type SubjectAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "subject"
"""
input SubjectAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "subject". All fields are combined with a logical 'AND'.
"""
input SubjectBoolExp {
  _and: [SubjectBoolExp!]
  _not: SubjectBoolExp
  _or: [SubjectBoolExp!]
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  code: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  englishName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  name: StringComparisonExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
columns and relationships of "subject_class_groups"
"""
type SubjectClassGroups {
  """An object relationship"""
  classGroup: ClassGroup!
  classGroupId: bigint!

  """An object relationship"""
  subject: Subject!
  subjectId: bigint!
}

"""
aggregated selection of "subject_class_groups"
"""
type SubjectClassGroupsAggregate {
  aggregate: SubjectClassGroupsAggregateFields
  nodes: [SubjectClassGroups!]!
}

input SubjectClassGroupsAggregateBoolExp {
  count: subjectClassGroupsAggregateBoolExpCount
}

input subjectClassGroupsAggregateBoolExpCount {
  arguments: [SubjectClassGroupsSelectColumn!]
  distinct: Boolean
  filter: SubjectClassGroupsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "subject_class_groups"
"""
type SubjectClassGroupsAggregateFields {
  avg: SubjectClassGroupsAvgFields
  count(columns: [SubjectClassGroupsSelectColumn!], distinct: Boolean): Int!
  max: SubjectClassGroupsMaxFields
  min: SubjectClassGroupsMinFields
  stddev: SubjectClassGroupsStddevFields
  stddevPop: SubjectClassGroupsStddevPopFields
  stddevSamp: SubjectClassGroupsStddevSampFields
  sum: SubjectClassGroupsSumFields
  varPop: SubjectClassGroupsVarPopFields
  varSamp: SubjectClassGroupsVarSampFields
  variance: SubjectClassGroupsVarianceFields
}

"""
order by aggregate values of table "subject_class_groups"
"""
input SubjectClassGroupsAggregateOrderBy {
  avg: SubjectClassGroupsAvgOrderBy
  count: OrderBy
  max: SubjectClassGroupsMaxOrderBy
  min: SubjectClassGroupsMinOrderBy
  stddev: SubjectClassGroupsStddevOrderBy
  stddevPop: SubjectClassGroupsStddevPopOrderBy
  stddevSamp: SubjectClassGroupsStddevSampOrderBy
  sum: SubjectClassGroupsSumOrderBy
  varPop: SubjectClassGroupsVarPopOrderBy
  varSamp: SubjectClassGroupsVarSampOrderBy
  variance: SubjectClassGroupsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "subject_class_groups"
"""
input SubjectClassGroupsArrRelInsertInput {
  data: [SubjectClassGroupsInsertInput!]!

  """upsert condition"""
  onConflict: SubjectClassGroupsOnConflict
}

"""aggregate avg on columns"""
type SubjectClassGroupsAvgFields {
  classGroupId: Float
  subjectId: Float
}

"""
order by avg() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsAvgOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""
Boolean expression to filter rows from the table "subject_class_groups". All fields are combined with a logical 'AND'.
"""
input SubjectClassGroupsBoolExp {
  _and: [SubjectClassGroupsBoolExp!]
  _not: SubjectClassGroupsBoolExp
  _or: [SubjectClassGroupsBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

"""
unique or primary key constraints on table "subject_class_groups"
"""
enum SubjectClassGroupsConstraint {
  """
  unique or primary key constraint on columns "class_group_id", "subject_id"
  """
  subject_class_groups_pkey
}

"""
input type for incrementing numeric columns in table "subject_class_groups"
"""
input SubjectClassGroupsIncInput {
  classGroupId: bigint
  subjectId: bigint
}

"""
input type for inserting data into table "subject_class_groups"
"""
input SubjectClassGroupsInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

"""aggregate max on columns"""
type SubjectClassGroupsMaxFields {
  classGroupId: bigint
  subjectId: bigint
}

"""
order by max() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsMaxOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""aggregate min on columns"""
type SubjectClassGroupsMinFields {
  classGroupId: bigint
  subjectId: bigint
}

"""
order by min() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsMinOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""
response of any mutation on the table "subject_class_groups"
"""
type SubjectClassGroupsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [SubjectClassGroups!]!
}

"""
on_conflict condition type for table "subject_class_groups"
"""
input SubjectClassGroupsOnConflict {
  constraint: SubjectClassGroupsConstraint!
  updateColumns: [SubjectClassGroupsUpdateColumn!]! = []
  where: SubjectClassGroupsBoolExp
}

"""Ordering options when selecting data from "subject_class_groups"."""
input SubjectClassGroupsOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

"""primary key columns input for table: subject_class_groups"""
input SubjectClassGroupsPkColumnsInput {
  classGroupId: bigint!
  subjectId: bigint!
}

"""
select columns of table "subject_class_groups"
"""
enum SubjectClassGroupsSelectColumn {
  """column name"""
  classGroupId

  """column name"""
  subjectId
}

"""
input type for updating data in table "subject_class_groups"
"""
input SubjectClassGroupsSetInput {
  classGroupId: bigint
  subjectId: bigint
}

"""aggregate stddev on columns"""
type SubjectClassGroupsStddevFields {
  classGroupId: Float
  subjectId: Float
}

"""
order by stddev() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsStddevOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""aggregate stddevPop on columns"""
type SubjectClassGroupsStddevPopFields {
  classGroupId: Float
  subjectId: Float
}

"""
order by stddevPop() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsStddevPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""aggregate stddevSamp on columns"""
type SubjectClassGroupsStddevSampFields {
  classGroupId: Float
  subjectId: Float
}

"""
order by stddevSamp() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsStddevSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""
Streaming cursor of the table "subject_class_groups"
"""
input SubjectClassGroupsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: SubjectClassGroupsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input SubjectClassGroupsStreamCursorValueInput {
  classGroupId: bigint
  subjectId: bigint
}

"""aggregate sum on columns"""
type SubjectClassGroupsSumFields {
  classGroupId: bigint
  subjectId: bigint
}

"""
order by sum() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsSumOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""
update columns of table "subject_class_groups"
"""
enum SubjectClassGroupsUpdateColumn {
  """column name"""
  classGroupId

  """column name"""
  subjectId
}

input SubjectClassGroupsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: SubjectClassGroupsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: SubjectClassGroupsSetInput

  """filter the rows which have to be updated"""
  where: SubjectClassGroupsBoolExp!
}

"""aggregate variance on columns"""
type SubjectClassGroupsVarianceFields {
  classGroupId: Float
  subjectId: Float
}

"""
order by variance() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsVarianceOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""aggregate varPop on columns"""
type SubjectClassGroupsVarPopFields {
  classGroupId: Float
  subjectId: Float
}

"""
order by varPop() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsVarPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""aggregate varSamp on columns"""
type SubjectClassGroupsVarSampFields {
  classGroupId: Float
  subjectId: Float
}

"""
order by varSamp() on columns of table "subject_class_groups"
"""
input SubjectClassGroupsVarSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

"""
unique or primary key constraints on table "subject"
"""
enum SubjectConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  subject_pkey
}

"""
input type for incrementing numeric columns in table "subject"
"""
input SubjectIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "subject"
"""
input SubjectInsertInput {
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  documents: DocumentArrRelInsertInput
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  name: String
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type SubjectMaxFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "subject"
"""
input SubjectMaxOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type SubjectMinFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "subject"
"""
input SubjectMinOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "subject"
"""
type SubjectMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Subject!]!
}

"""
input type for inserting object relation for remote table "subject"
"""
input SubjectObjRelInsertInput {
  data: SubjectInsertInput!

  """upsert condition"""
  onConflict: SubjectOnConflict
}

"""
on_conflict condition type for table "subject"
"""
input SubjectOnConflict {
  constraint: SubjectConstraint!
  updateColumns: [SubjectUpdateColumn!]! = []
  where: SubjectBoolExp
}

"""Ordering options when selecting data from "subject"."""
input SubjectOrderBy {
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: subject"""
input SubjectPkColumnsInput {
  id: bigint!
}

"""
select columns of table "subject"
"""
enum SubjectSelectColumn {
  """column name"""
  code

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  englishName

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  name

  """column name"""
  tenantId

  """column name"""
  type
}

"""
input type for updating data in table "subject"
"""
input SubjectSetInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type SubjectStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "subject"
"""
input SubjectStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type SubjectStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "subject"
"""
input SubjectStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type SubjectStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "subject"
"""
input SubjectStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "subject"
"""
input SubjectStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: SubjectStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input SubjectStreamCursorValueInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type SubjectSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "subject"
"""
input SubjectSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "subject"
"""
enum SubjectUpdateColumn {
  """column name"""
  code

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  englishName

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  name

  """column name"""
  tenantId

  """column name"""
  type
}

input SubjectUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: SubjectIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: SubjectSetInput

  """filter the rows which have to be updated"""
  where: SubjectBoolExp!
}

"""aggregate variance on columns"""
type SubjectVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "subject"
"""
input SubjectVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type SubjectVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "subject"
"""
input SubjectVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type SubjectVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "subject"
"""
input SubjectVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Subscription {
  """
  fetch data from the table: "action"
  """
  action(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """
  fetch aggregated fields from the table: "action"
  """
  actionAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """fetch data from the table: "action" using primary key columns"""
  actionByPk(id: bigint!): Action

  """
  fetch data from the table in a streaming manner: "action"
  """
  actionStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActionStreamCursorInput]!

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """
  fetch data from the table: "actor"
  """
  actor(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): [Actor!]!

  """
  fetch data from the table: "actor_address"
  """
  actorAddress(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  """
  fetch aggregated fields from the table: "actor_address"
  """
  actorAddressAggregate(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  """fetch data from the table: "actor_address" using primary key columns"""
  actorAddressByPk(id: bigint!): ActorAddress

  """
  fetch data from the table in a streaming manner: "actor_address"
  """
  actorAddressStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActorAddressStreamCursorInput]!

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  """
  fetch aggregated fields from the table: "actor"
  """
  actorAggregate(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): ActorAggregate!

  """
  fetch data from the table: "actor_bank_info"
  """
  actorBankInfo(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  """
  fetch aggregated fields from the table: "actor_bank_info"
  """
  actorBankInfoAggregate(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  """fetch data from the table: "actor_bank_info" using primary key columns"""
  actorBankInfoByPk(id: bigint!): ActorBankInfo

  """
  fetch data from the table in a streaming manner: "actor_bank_info"
  """
  actorBankInfoStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActorBankInfoStreamCursorInput]!

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  """fetch data from the table: "actor" using primary key columns"""
  actorByPk(id: bigint!): Actor

  """
  fetch data from the table: "actor_finance"
  """
  actorFinance(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """
  fetch aggregated fields from the table: "actor_finance"
  """
  actorFinanceAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!

  """fetch data from the table: "actor_finance" using primary key columns"""
  actorFinanceByPk(id: bigint!): ActorFinance

  """
  fetch data from the table in a streaming manner: "actor_finance"
  """
  actorFinanceStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActorFinanceStreamCursorInput]!

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """
  fetch data from the table: "actor_image"
  """
  actorImage(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): [ActorImage!]!

  """
  fetch aggregated fields from the table: "actor_image"
  """
  actorImageAggregate(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  """fetch data from the table: "actor_image" using primary key columns"""
  actorImageByPk(id: bigint!): ActorImage

  """
  fetch data from the table in a streaming manner: "actor_image"
  """
  actorImageStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActorImageStreamCursorInput]!

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): [ActorImage!]!

  """
  fetch data from the table in a streaming manner: "actor"
  """
  actorStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActorStreamCursorInput]!

    """filter the rows returned"""
    where: ActorBoolExp
  ): [Actor!]!

  """An array relationship"""
  actorTags(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  """An aggregate relationship"""
  actorTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!

  """fetch data from the table: "actor_tags" using primary key columns"""
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags

  """
  fetch data from the table in a streaming manner: "actor_tags"
  """
  actorTagsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActorTagsStreamCursorInput]!

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  """
  fetch data from the table: "bot_info"
  """
  botInfo(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): [BotInfo!]!

  """
  fetch aggregated fields from the table: "bot_info"
  """
  botInfoAggregate(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  """fetch data from the table: "bot_info" using primary key columns"""
  botInfoByPk(id: bigint!): BotInfo

  """
  fetch data from the table in a streaming manner: "bot_info"
  """
  botInfoStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [BotInfoStreamCursorInput]!

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): [BotInfo!]!

  """
  fetch data from the table: "campus"
  """
  campus(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): [Campus!]!

  """
  fetch aggregated fields from the table: "campus"
  """
  campusAggregate(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): CampusAggregate!

  """fetch data from the table: "campus" using primary key columns"""
  campusByPk(id: bigint!): Campus

  """
  fetch data from the table in a streaming manner: "campus"
  """
  campusStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CampusStreamCursorInput]!

    """filter the rows returned"""
    where: CampusBoolExp
  ): [Campus!]!

  """
  fetch data from the table: "canteen"
  """
  canteen(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): [Canteen!]!

  """
  fetch aggregated fields from the table: "canteen"
  """
  canteenAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): CanteenAggregate!

  """fetch data from the table: "canteen" using primary key columns"""
  canteenByPk(id: bigint!): Canteen

  """
  fetch data from the table: "canteen_food"
  """
  canteenFood(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  """
  fetch aggregated fields from the table: "canteen_food"
  """
  canteenFoodAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  """fetch data from the table: "canteen_food" using primary key columns"""
  canteenFoodByPk(id: bigint!): CanteenFood

  """
  fetch data from the table in a streaming manner: "canteen_food"
  """
  canteenFoodStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CanteenFoodStreamCursorInput]!

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  """
  fetch data from the table: "canteen_menu"
  """
  canteenMenu(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  """
  fetch aggregated fields from the table: "canteen_menu"
  """
  canteenMenuAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  """fetch data from the table: "canteen_menu" using primary key columns"""
  canteenMenuByPk(id: bigint!): CanteenMenu

  """
  fetch data from the table in a streaming manner: "canteen_menu"
  """
  canteenMenuStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CanteenMenuStreamCursorInput]!

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  """
  fetch data from the table in a streaming manner: "canteen"
  """
  canteenStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CanteenStreamCursorInput]!

    """filter the rows returned"""
    where: CanteenBoolExp
  ): [Canteen!]!

  """
  fetch data from the table: "change_role"
  """
  changeRole(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """
  fetch aggregated fields from the table: "change_role"
  """
  changeRoleAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!

  """fetch data from the table: "change_role" using primary key columns"""
  changeRoleByPk(id: bigint!): ChangeRole

  """
  fetch data from the table in a streaming manner: "change_role"
  """
  changeRoleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ChangeRoleStreamCursorInput]!

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """
  fetch data from the table: "class_group"
  """
  classGroup(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  """
  fetch aggregated fields from the table: "class_group"
  """
  classGroupAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  """fetch data from the table: "class_group" using primary key columns"""
  classGroupByPk(id: bigint!): ClassGroup

  """
  fetch data from the table in a streaming manner: "class_group"
  """
  classGroupStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ClassGroupStreamCursorInput]!

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  """
  fetch data from the table: "class_group_teacher"
  """
  classGroupTeacher(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  """
  fetch aggregated fields from the table: "class_group_teacher"
  """
  classGroupTeacherAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  """
  fetch data from the table: "class_group_teacher" using primary key columns
  """
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher

  """
  fetch data from the table in a streaming manner: "class_group_teacher"
  """
  classGroupTeacherStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ClassGroupTeacherStreamCursorInput]!

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  """An array relationship"""
  classGroupTeacherSubjects(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  """An aggregate relationship"""
  classGroupTeacherSubjectsAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!

  """
  fetch data from the table: "class_group_teacher_subjects" using primary key columns
  """
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects

  """
  fetch data from the table in a streaming manner: "class_group_teacher_subjects"
  """
  classGroupTeacherSubjectsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ClassGroupTeacherSubjectsStreamCursorInput]!

    """filter the rows returned"""
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  """
  fetch data from the table: "cohort"
  """
  cohort(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): [Cohort!]!

  """
  fetch aggregated fields from the table: "cohort"
  """
  cohortAggregate(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): CohortAggregate!

  """fetch data from the table: "cohort" using primary key columns"""
  cohortByPk(id: bigint!): Cohort

  """
  fetch data from the table in a streaming manner: "cohort"
  """
  cohortStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CohortStreamCursorInput]!

    """filter the rows returned"""
    where: CohortBoolExp
  ): [Cohort!]!

  """
  fetch data from the table: "content"
  """
  content(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): [Content!]!

  """
  fetch aggregated fields from the table: "content"
  """
  contentAggregate(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): ContentAggregate!

  """An array relationship"""
  contentAttachments(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  """An aggregate relationship"""
  contentAttachmentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentAttachmentsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentAttachmentsOrderBy!]

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!

  """
  fetch data from the table: "content_attachments" using primary key columns
  """
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments

  """
  fetch data from the table in a streaming manner: "content_attachments"
  """
  contentAttachmentsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ContentAttachmentsStreamCursorInput]!

    """filter the rows returned"""
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  """fetch data from the table: "content" using primary key columns"""
  contentByPk(id: bigint!): Content

  """
  fetch data from the table: "content_edit"
  """
  contentEdit(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): [ContentEdit!]!

  """
  fetch aggregated fields from the table: "content_edit"
  """
  contentEditAggregate(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): ContentEditAggregate!

  """fetch data from the table: "content_edit" using primary key columns"""
  contentEditByPk(id: bigint!): ContentEdit

  """
  fetch data from the table in a streaming manner: "content_edit"
  """
  contentEditStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ContentEditStreamCursorInput]!

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): [ContentEdit!]!

  """
  fetch data from the table: "content_master"
  """
  contentMaster(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): [ContentMaster!]!

  """
  fetch aggregated fields from the table: "content_master"
  """
  contentMasterAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): ContentMasterAggregate!

  """fetch data from the table: "content_master" using primary key columns"""
  contentMasterByPk(id: bigint!): ContentMaster

  """An array relationship"""
  contentMasterContributors(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): [ContentMasterContributors!]!

  """An aggregate relationship"""
  contentMasterContributorsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterContributorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterContributorsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): ContentMasterContributorsAggregate!

  """
  fetch data from the table: "content_master_contributors" using primary key columns
  """
  contentMasterContributorsByPk(contentMasterId: bigint!, individualId: bigint!): ContentMasterContributors

  """
  fetch data from the table in a streaming manner: "content_master_contributors"
  """
  contentMasterContributorsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ContentMasterContributorsStreamCursorInput]!

    """filter the rows returned"""
    where: ContentMasterContributorsBoolExp
  ): [ContentMasterContributors!]!

  """
  fetch data from the table in a streaming manner: "content_master"
  """
  contentMasterStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ContentMasterStreamCursorInput]!

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): [ContentMaster!]!

  """An array relationship"""
  contentMasterTags(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): [ContentMasterTags!]!

  """An aggregate relationship"""
  contentMasterTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): ContentMasterTagsAggregate!

  """
  fetch data from the table: "content_master_tags" using primary key columns
  """
  contentMasterTagsByPk(contentMasterId: bigint!, tagId: bigint!): ContentMasterTags

  """
  fetch data from the table in a streaming manner: "content_master_tags"
  """
  contentMasterTagsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ContentMasterTagsStreamCursorInput]!

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): [ContentMasterTags!]!

  """
  fetch data from the table in a streaming manner: "content"
  """
  contentStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ContentStreamCursorInput]!

    """filter the rows returned"""
    where: ContentBoolExp
  ): [Content!]!

  """An array relationship"""
  contentTeams(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): [ContentTeams!]!

  """An aggregate relationship"""
  contentTeamsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): ContentTeamsAggregate!

  """fetch data from the table: "content_teams" using primary key columns"""
  contentTeamsByPk(contentId: bigint!, teamId: bigint!): ContentTeams

  """
  fetch data from the table in a streaming manner: "content_teams"
  """
  contentTeamsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ContentTeamsStreamCursorInput]!

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): [ContentTeams!]!

  """
  fetch data from the table: "document"
  """
  document(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): [Document!]!

  """
  fetch aggregated fields from the table: "document"
  """
  documentAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): DocumentAggregate!

  """fetch data from the table: "document" using primary key columns"""
  documentByPk(id: bigint!): Document

  """
  fetch data from the table: "document_edit"
  """
  documentEdit(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): [DocumentEdit!]!

  """
  fetch aggregated fields from the table: "document_edit"
  """
  documentEditAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): DocumentEditAggregate!

  """fetch data from the table: "document_edit" using primary key columns"""
  documentEditByPk(id: bigint!): DocumentEdit

  """
  fetch data from the table in a streaming manner: "document_edit"
  """
  documentEditStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [DocumentEditStreamCursorInput]!

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): [DocumentEdit!]!

  """
  fetch data from the table in a streaming manner: "document"
  """
  documentStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [DocumentStreamCursorInput]!

    """filter the rows returned"""
    where: DocumentBoolExp
  ): [Document!]!

  """
  fetch data from the table: "event"
  """
  event(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """
  fetch aggregated fields from the table: "event"
  """
  eventAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """
  fetch data from the table: "event_approval"
  """
  eventApproval(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  """
  fetch aggregated fields from the table: "event_approval"
  """
  eventApprovalAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  """fetch data from the table: "event_approval" using primary key columns"""
  eventApprovalByPk(id: bigint!): EventApproval

  """
  fetch data from the table: "event_approval_step"
  """
  eventApprovalStep(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  """
  fetch aggregated fields from the table: "event_approval_step"
  """
  eventApprovalStepAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  """
  fetch data from the table: "event_approval_step" using primary key columns
  """
  eventApprovalStepByPk(id: bigint!): EventApprovalStep

  """An array relationship"""
  eventApprovalStepNotifiees(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  """An aggregate relationship"""
  eventApprovalStepNotifieesAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  """
  fetch data from the table: "event_approval_step_notifiees" using primary key columns
  """
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees

  """
  fetch data from the table in a streaming manner: "event_approval_step_notifiees"
  """
  eventApprovalStepNotifieesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventApprovalStepNotifieesStreamCursorInput]!

    """filter the rows returned"""
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  """
  fetch data from the table in a streaming manner: "event_approval_step"
  """
  eventApprovalStepStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventApprovalStepStreamCursorInput]!

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  """An array relationship"""
  eventApprovalStepValidators(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  """An aggregate relationship"""
  eventApprovalStepValidatorsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  """
  fetch data from the table: "event_approval_step_validators" using primary key columns
  """
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators

  """
  fetch data from the table in a streaming manner: "event_approval_step_validators"
  """
  eventApprovalStepValidatorsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventApprovalStepValidatorsStreamCursorInput]!

    """filter the rows returned"""
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  """
  fetch data from the table in a streaming manner: "event_approval"
  """
  eventApprovalStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventApprovalStreamCursorInput]!

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  """
  fetch data from the table: "event_attendance"
  """
  eventAttendance(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): [EventAttendance!]!

  """
  fetch aggregated fields from the table: "event_attendance"
  """
  eventAttendanceAggregate(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): EventAttendanceAggregate!

  """
  fetch data from the table: "event_attendance" using primary key columns
  """
  eventAttendanceByPk(id: bigint!): EventAttendance

  """
  fetch data from the table in a streaming manner: "event_attendance"
  """
  eventAttendanceStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventAttendanceStreamCursorInput]!

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): [EventAttendance!]!

  """fetch data from the table: "event" using primary key columns"""
  eventByPk(id: bigint!): Event

  """
  fetch data from the table: "event_change_role"
  """
  eventChangeRole(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): [EventChangeRole!]!

  """
  fetch aggregated fields from the table: "event_change_role"
  """
  eventChangeRoleAggregate(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): EventChangeRoleAggregate!

  """
  fetch data from the table: "event_change_role" using primary key columns
  """
  eventChangeRoleByPk(id: bigint!): EventChangeRole

  """
  fetch data from the table in a streaming manner: "event_change_role"
  """
  eventChangeRoleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventChangeRoleStreamCursorInput]!

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): [EventChangeRole!]!

  """
  fetch data from the table: "event_join"
  """
  eventJoin(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """
  fetch aggregated fields from the table: "event_join"
  """
  eventJoinAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """fetch data from the table: "event_join" using primary key columns"""
  eventJoinByPk(id: bigint!): EventJoin

  """
  fetch data from the table in a streaming manner: "event_join"
  """
  eventJoinStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventJoinStreamCursorInput]!

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """
  fetch data from the table: "event_role"
  """
  eventRole(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """
  fetch aggregated fields from the table: "event_role"
  """
  eventRoleAggregate(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): EventRoleAggregate!

  """fetch data from the table: "event_role" using primary key columns"""
  eventRoleByPk(id: bigint!): EventRole

  """
  fetch data from the table in a streaming manner: "event_role"
  """
  eventRoleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventRoleStreamCursorInput]!

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """
  fetch data from the table in a streaming manner: "event"
  """
  eventStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventStreamCursorInput]!

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An array relationship"""
  eventTags(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): [EventTags!]!

  """An aggregate relationship"""
  eventTagsAggregate(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  """fetch data from the table: "event_tags" using primary key columns"""
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags

  """
  fetch data from the table in a streaming manner: "event_tags"
  """
  eventTagsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventTagsStreamCursorInput]!

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): [EventTags!]!

  """
  fetch data from the table: "expense"
  """
  expense(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """
  fetch aggregated fields from the table: "expense"
  """
  expenseAggregate(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  """fetch data from the table: "expense" using primary key columns"""
  expenseByPk(id: bigint!): Expense

  """
  fetch data from the table in a streaming manner: "expense"
  """
  expenseStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ExpenseStreamCursorInput]!

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """
  fetch data from the table: "favorite"
  """
  favorite(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): [Favorite!]!

  """
  fetch aggregated fields from the table: "favorite"
  """
  favoriteAggregate(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  """fetch data from the table: "favorite" using primary key columns"""
  favoriteByPk(id: bigint!): Favorite

  """
  fetch data from the table in a streaming manner: "favorite"
  """
  favoriteStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [FavoriteStreamCursorInput]!

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): [Favorite!]!

  """
  fetch data from the table: "file_upload"
  """
  fileUpload(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): [FileUpload!]!

  """
  fetch aggregated fields from the table: "file_upload"
  """
  fileUploadAggregate(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  """fetch data from the table: "file_upload" using primary key columns"""
  fileUploadByPk(id: bigint!): FileUpload

  """
  fetch data from the table in a streaming manner: "file_upload"
  """
  fileUploadStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [FileUploadStreamCursorInput]!

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): [FileUpload!]!

  """
  fetch data from the table: "follow"
  """
  follow(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): [Follow!]!

  """
  fetch aggregated fields from the table: "follow"
  """
  followAggregate(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): FollowAggregate!

  """fetch data from the table: "follow" using primary key columns"""
  followByPk(id: bigint!): Follow

  """
  fetch data from the table in a streaming manner: "follow"
  """
  followStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [FollowStreamCursorInput]!

    """filter the rows returned"""
    where: FollowBoolExp
  ): [Follow!]!

  """
  fetch data from the table: "form"
  """
  form(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): [Form!]!

  """
  fetch aggregated fields from the table: "form"
  """
  formAggregate(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): FormAggregate!

  """fetch data from the table: "form" using primary key columns"""
  formByPk(id: bigint!): Form

  """
  fetch data from the table: "form_edit"
  """
  formEdit(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): [FormEdit!]!

  """
  fetch aggregated fields from the table: "form_edit"
  """
  formEditAggregate(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): FormEditAggregate!

  """fetch data from the table: "form_edit" using primary key columns"""
  formEditByPk(id: bigint!): FormEdit

  """
  fetch data from the table in a streaming manner: "form_edit"
  """
  formEditStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [FormEditStreamCursorInput]!

    """filter the rows returned"""
    where: FormEditBoolExp
  ): [FormEdit!]!

  """
  fetch data from the table in a streaming manner: "form"
  """
  formStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [FormStreamCursorInput]!

    """filter the rows returned"""
    where: FormBoolExp
  ): [Form!]!

  """
  fetch data from the table: "form_submission"
  """
  formSubmission(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  """
  fetch aggregated fields from the table: "form_submission"
  """
  formSubmissionAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  """fetch data from the table: "form_submission" using primary key columns"""
  formSubmissionByPk(id: bigint!): FormSubmission

  """
  fetch data from the table: "form_submission_edit"
  """
  formSubmissionEdit(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): [FormSubmissionEdit!]!

  """
  fetch aggregated fields from the table: "form_submission_edit"
  """
  formSubmissionEditAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): FormSubmissionEditAggregate!

  """
  fetch data from the table: "form_submission_edit" using primary key columns
  """
  formSubmissionEditByPk(id: bigint!): FormSubmissionEdit

  """
  fetch data from the table in a streaming manner: "form_submission_edit"
  """
  formSubmissionEditStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [FormSubmissionEditStreamCursorInput]!

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): [FormSubmissionEdit!]!

  """
  fetch data from the table in a streaming manner: "form_submission"
  """
  formSubmissionStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [FormSubmissionStreamCursorInput]!

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  """
  fetch data from the table: "individual"
  """
  individual(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): [Individual!]!

  """
  fetch aggregated fields from the table: "individual"
  """
  individualAggregate(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): IndividualAggregate!

  """fetch data from the table: "individual" using primary key columns"""
  individualByPk(id: bigint!): Individual

  """
  fetch data from the table in a streaming manner: "individual"
  """
  individualStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [IndividualStreamCursorInput]!

    """filter the rows returned"""
    where: IndividualBoolExp
  ): [Individual!]!

  """
  fetch data from the table: "issue"
  """
  issue(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): [Issue!]!

  """
  fetch aggregated fields from the table: "issue"
  """
  issueAggregate(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): IssueAggregate!

  """fetch data from the table: "issue" using primary key columns"""
  issueByPk(id: bigint!): Issue

  """
  fetch data from the table in a streaming manner: "issue"
  """
  issueStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [IssueStreamCursorInput]!

    """filter the rows returned"""
    where: IssueBoolExp
  ): [Issue!]!

  """
  fetch data from the table: "pole"
  """
  pole(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): [Pole!]!

  """
  fetch aggregated fields from the table: "pole"
  """
  poleAggregate(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): PoleAggregate!

  """fetch data from the table: "pole" using primary key columns"""
  poleByPk(id: bigint!): Pole

  """
  fetch data from the table in a streaming manner: "pole"
  """
  poleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PoleStreamCursorInput]!

    """filter the rows returned"""
    where: PoleBoolExp
  ): [Pole!]!

  """
  fetch data from the table: "project"
  """
  project(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): [Project!]!

  """
  fetch aggregated fields from the table: "project"
  """
  projectAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): ProjectAggregate!

  """fetch data from the table: "project" using primary key columns"""
  projectByPk(id: bigint!): Project

  """
  fetch data from the table: "project_role"
  """
  projectRole(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): [ProjectRole!]!

  """
  fetch aggregated fields from the table: "project_role"
  """
  projectRoleAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): ProjectRoleAggregate!

  """fetch data from the table: "project_role" using primary key columns"""
  projectRoleByPk(id: bigint!): ProjectRole

  """
  fetch data from the table in a streaming manner: "project_role"
  """
  projectRoleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ProjectRoleStreamCursorInput]!

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): [ProjectRole!]!

  """
  fetch data from the table in a streaming manner: "project"
  """
  projectStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ProjectStreamCursorInput]!

    """filter the rows returned"""
    where: ProjectBoolExp
  ): [Project!]!

  """An array relationship"""
  projectSupervisors(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  """An aggregate relationship"""
  projectSupervisorsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!

  """
  fetch data from the table: "project_supervisors" using primary key columns
  """
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors

  """
  fetch data from the table in a streaming manner: "project_supervisors"
  """
  projectSupervisorsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ProjectSupervisorsStreamCursorInput]!

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  """An array relationship"""
  projectTags(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  """An aggregate relationship"""
  projectTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!

  """fetch data from the table: "project_tags" using primary key columns"""
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags

  """
  fetch data from the table in a streaming manner: "project_tags"
  """
  projectTagsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ProjectTagsStreamCursorInput]!

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  """
  fetch data from the table: "reaction"
  """
  reaction(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): [Reaction!]!

  """
  fetch aggregated fields from the table: "reaction"
  """
  reactionAggregate(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): ReactionAggregate!

  """fetch data from the table: "reaction" using primary key columns"""
  reactionByPk(id: bigint!): Reaction

  """
  fetch data from the table in a streaming manner: "reaction"
  """
  reactionStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ReactionStreamCursorInput]!

    """filter the rows returned"""
    where: ReactionBoolExp
  ): [Reaction!]!

  """
  fetch data from the table: "report"
  """
  report(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): [Report!]!

  """
  fetch aggregated fields from the table: "report"
  """
  reportAggregate(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): ReportAggregate!

  """fetch data from the table: "report" using primary key columns"""
  reportByPk(id: bigint!): Report

  """
  fetch data from the table in a streaming manner: "report"
  """
  reportStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ReportStreamCursorInput]!

    """filter the rows returned"""
    where: ReportBoolExp
  ): [Report!]!

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  roleAggregate(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): RoleAggregate!

  """fetch data from the table: "role" using primary key columns"""
  roleByPk(id: bigint!): Role

  """
  fetch data from the table in a streaming manner: "role"
  """
  roleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [RoleStreamCursorInput]!

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """
  fetch data from the table: "session"
  """
  session(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): [Session!]!

  """
  fetch aggregated fields from the table: "session"
  """
  sessionAggregate(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): SessionAggregate!

  """fetch data from the table: "session" using primary key columns"""
  sessionByPk(id: bigint!): Session

  """
  fetch data from the table in a streaming manner: "session"
  """
  sessionStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [SessionStreamCursorInput]!

    """filter the rows returned"""
    where: SessionBoolExp
  ): [Session!]!

  """
  fetch data from the table: "shortcut"
  """
  shortcut(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): [Shortcut!]!

  """
  fetch aggregated fields from the table: "shortcut"
  """
  shortcutAggregate(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  """fetch data from the table: "shortcut" using primary key columns"""
  shortcutByPk(id: bigint!): Shortcut

  """
  fetch data from the table in a streaming manner: "shortcut"
  """
  shortcutStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ShortcutStreamCursorInput]!

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): [Shortcut!]!

  """
  fetch data from the table: "social"
  """
  social(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): [Social!]!

  """
  fetch aggregated fields from the table: "social"
  """
  socialAggregate(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): SocialAggregate!

  """fetch data from the table: "social" using primary key columns"""
  socialByPk(id: bigint!): Social

  """
  fetch data from the table in a streaming manner: "social"
  """
  socialStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [SocialStreamCursorInput]!

    """filter the rows returned"""
    where: SocialBoolExp
  ): [Social!]!

  """
  fetch data from the table: "subject"
  """
  subject(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): [Subject!]!

  """
  fetch aggregated fields from the table: "subject"
  """
  subjectAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): SubjectAggregate!

  """fetch data from the table: "subject" using primary key columns"""
  subjectByPk(id: bigint!): Subject

  """An array relationship"""
  subjectClassGroups(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  """An aggregate relationship"""
  subjectClassGroupsAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectClassGroupsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectClassGroupsOrderBy!]

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  """
  fetch data from the table: "subject_class_groups" using primary key columns
  """
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups

  """
  fetch data from the table in a streaming manner: "subject_class_groups"
  """
  subjectClassGroupsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [SubjectClassGroupsStreamCursorInput]!

    """filter the rows returned"""
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  """
  fetch data from the table in a streaming manner: "subject"
  """
  subjectStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [SubjectStreamCursorInput]!

    """filter the rows returned"""
    where: SubjectBoolExp
  ): [Subject!]!

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): [Tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tagAggregate(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): TagAggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tagByPk(id: bigint!): Tag

  """
  fetch data from the table in a streaming manner: "tag"
  """
  tagStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TagStreamCursorInput]!

    """filter the rows returned"""
    where: TagBoolExp
  ): [Tag!]!

  """
  fetch data from the table: "team"
  """
  team(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): [Team!]!

  """
  fetch aggregated fields from the table: "team"
  """
  teamAggregate(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): TeamAggregate!

  """fetch data from the table: "team" using primary key columns"""
  teamByPk(id: bigint!): Team

  """An array relationship"""
  teamEvents(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  """An aggregate relationship"""
  teamEventsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  """fetch data from the table: "team_events" using primary key columns"""
  teamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents

  """
  fetch data from the table in a streaming manner: "team_events"
  """
  teamEventsStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamEventsStreamCursorInput]!

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  """
  fetch data from the table: "team_finance"
  """
  teamFinance(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """
  fetch aggregated fields from the table: "team_finance"
  """
  teamFinanceAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!

  """fetch data from the table: "team_finance" using primary key columns"""
  teamFinanceByPk(id: bigint!): TeamFinance

  """
  fetch data from the table: "team_finance_edit"
  """
  teamFinanceEdit(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """
  fetch aggregated fields from the table: "team_finance_edit"
  """
  teamFinanceEditAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """
  fetch data from the table: "team_finance_edit" using primary key columns
  """
  teamFinanceEditByPk(id: bigint!): TeamFinanceEdit

  """
  fetch data from the table in a streaming manner: "team_finance_edit"
  """
  teamFinanceEditStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamFinanceEditStreamCursorInput]!

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """
  fetch data from the table in a streaming manner: "team_finance"
  """
  teamFinanceStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamFinanceStreamCursorInput]!

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """
  fetch data from the table: "team_join"
  """
  teamJoin(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """
  fetch aggregated fields from the table: "team_join"
  """
  teamJoinAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """fetch data from the table: "team_join" using primary key columns"""
  teamJoinByPk(id: bigint!): TeamJoin

  """
  fetch data from the table in a streaming manner: "team_join"
  """
  teamJoinStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamJoinStreamCursorInput]!

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """
  fetch data from the table: "team_member"
  """
  teamMember(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  """
  fetch aggregated fields from the table: "team_member"
  """
  teamMemberAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  """fetch data from the table: "team_member" using primary key columns"""
  teamMemberByPk(id: bigint!): TeamMember

  """An array relationship"""
  teamMemberRoles(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  """An aggregate relationship"""
  teamMemberRolesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  """
  fetch data from the table: "team_member_roles" using primary key columns
  """
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles

  """
  fetch data from the table in a streaming manner: "team_member_roles"
  """
  teamMemberRolesStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamMemberRolesStreamCursorInput]!

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  """
  fetch data from the table in a streaming manner: "team_member"
  """
  teamMemberStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamMemberStreamCursorInput]!

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  """
  fetch data from the table: "team_metric"
  """
  teamMetric(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  """
  fetch aggregated fields from the table: "team_metric"
  """
  teamMetricAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  """fetch data from the table: "team_metric" using primary key columns"""
  teamMetricByPk(id: bigint!): TeamMetric

  """
  fetch data from the table in a streaming manner: "team_metric"
  """
  teamMetricStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamMetricStreamCursorInput]!

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  """
  fetch data from the table in a streaming manner: "team"
  """
  teamStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeamStreamCursorInput]!

    """filter the rows returned"""
    where: TeamBoolExp
  ): [Team!]!

  """
  fetch data from the table: "tenant"
  """
  tenant(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): [Tenant!]!

  """
  fetch aggregated fields from the table: "tenant"
  """
  tenantAggregate(
    """distinct select on columns"""
    distinctOn: [TenantSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TenantOrderBy!]

    """filter the rows returned"""
    where: TenantBoolExp
  ): TenantAggregate!

  """fetch data from the table: "tenant" using primary key columns"""
  tenantByPk(id: bigint!): Tenant

  """
  fetch data from the table in a streaming manner: "tenant"
  """
  tenantStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TenantStreamCursorInput]!

    """filter the rows returned"""
    where: TenantBoolExp
  ): [Tenant!]!

  """
  fetch data from the table: "user_info"
  """
  userInfo(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): [UserInfo!]!

  """
  fetch aggregated fields from the table: "user_info"
  """
  userInfoAggregate(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  """fetch data from the table: "user_info" using primary key columns"""
  userInfoByPk(id: bigint!): UserInfo

  """
  fetch data from the table in a streaming manner: "user_info"
  """
  userInfoStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [UserInfoStreamCursorInput]!

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): [UserInfo!]!

  """
  fetch data from the table: "validation"
  """
  validation(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): [Validation!]!

  """
  fetch aggregated fields from the table: "validation"
  """
  validationAggregate(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): ValidationAggregate!

  """fetch data from the table: "validation" using primary key columns"""
  validationByPk(id: bigint!): Validation

  """
  fetch data from the table in a streaming manner: "validation"
  """
  validationStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ValidationStreamCursorInput]!

    """filter the rows returned"""
    where: ValidationBoolExp
  ): [Validation!]!

  """
  fetch data from the table: "vote"
  """
  vote(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): [Vote!]!

  """
  fetch aggregated fields from the table: "vote"
  """
  voteAggregate(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): VoteAggregate!

  """fetch data from the table: "vote" using primary key columns"""
  voteByPk(id: bigint!): Vote

  """
  fetch data from the table in a streaming manner: "vote"
  """
  voteStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [VoteStreamCursorInput]!

    """filter the rows returned"""
    where: VoteBoolExp
  ): [Vote!]!
}

"""
columns and relationships of "tag"
"""
type Tag {
  """An array relationship"""
  actorTags(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  """An aggregate relationship"""
  actorTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ActorTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorTagsOrderBy!]

    """filter the rows returned"""
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!
  color: String!

  """An array relationship"""
  contentMasterTags(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): [ContentMasterTags!]!

  """An aggregate relationship"""
  contentMasterTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterTagsOrderBy!]

    """filter the rows returned"""
    where: ContentMasterTagsBoolExp
  ): ContentMasterTagsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String

  """An array relationship"""
  eventTags(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): [EventTags!]!

  """An aggregate relationship"""
  eventTagsAggregate(
    """distinct select on columns"""
    distinctOn: [EventTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventTagsOrderBy!]

    """filter the rows returned"""
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  """An object relationship"""
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint

  """An object relationship"""
  individual: Individual
  name: String!

  """An array relationship"""
  projectTags(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  """An aggregate relationship"""
  projectTagsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectTagsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectTagsOrderBy!]

    """filter the rows returned"""
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!
  slug: String!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "tag"
"""
type TagAggregate {
  aggregate: TagAggregateFields
  nodes: [Tag!]!
}

input TagAggregateBoolExp {
  count: tagAggregateBoolExpCount
}

input tagAggregateBoolExpCount {
  arguments: [TagSelectColumn!]
  distinct: Boolean
  filter: TagBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "tag"
"""
type TagAggregateFields {
  avg: TagAvgFields
  count(columns: [TagSelectColumn!], distinct: Boolean): Int!
  max: TagMaxFields
  min: TagMinFields
  stddev: TagStddevFields
  stddevPop: TagStddevPopFields
  stddevSamp: TagStddevSampFields
  sum: TagSumFields
  varPop: TagVarPopFields
  varSamp: TagVarSampFields
  variance: TagVarianceFields
}

"""
order by aggregate values of table "tag"
"""
input TagAggregateOrderBy {
  avg: TagAvgOrderBy
  count: OrderBy
  max: TagMaxOrderBy
  min: TagMinOrderBy
  stddev: TagStddevOrderBy
  stddevPop: TagStddevPopOrderBy
  stddevSamp: TagStddevSampOrderBy
  sum: TagSumOrderBy
  varPop: TagVarPopOrderBy
  varSamp: TagVarSampOrderBy
  variance: TagVarianceOrderBy
}

"""
input type for inserting array relation for remote table "tag"
"""
input TagArrRelInsertInput {
  data: [TagInsertInput!]!

  """upsert condition"""
  onConflict: TagOnConflict
}

"""aggregate avg on columns"""
type TagAvgFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "tag"
"""
input TagAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'.
"""
input TagBoolExp {
  _and: [TagBoolExp!]
  _not: TagBoolExp
  _or: [TagBoolExp!]
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  color: StringComparisonExp
  contentMasterTags: ContentMasterTagsBoolExp
  contentMasterTagsAggregate: ContentMasterTagsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "tag"
"""
enum TagConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  tag_pkey
}

"""
input type for incrementing numeric columns in table "tag"
"""
input TagIncInput {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "tag"
"""
input TagInsertInput {
  actorTags: ActorTagsArrRelInsertInput
  color: String
  contentMasterTags: ContentMasterTagsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventTags: EventTagsArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  name: String
  projectTags: ProjectTagsArrRelInsertInput
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type TagMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "tag"
"""
input TagMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type TagMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "tag"
"""
input TagMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "tag"
"""
type TagMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Tag!]!
}

"""
input type for inserting object relation for remote table "tag"
"""
input TagObjRelInsertInput {
  data: TagInsertInput!

  """upsert condition"""
  onConflict: TagOnConflict
}

"""
on_conflict condition type for table "tag"
"""
input TagOnConflict {
  constraint: TagConstraint!
  updateColumns: [TagUpdateColumn!]! = []
  where: TagBoolExp
}

"""Ordering options when selecting data from "tag"."""
input TagOrderBy {
  actorTagsAggregate: ActorTagsAggregateOrderBy
  color: OrderBy
  contentMasterTagsAggregate: ContentMasterTagsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: tag"""
input TagPkColumnsInput {
  id: bigint!
}

"""
select columns of table "tag"
"""
enum TagSelectColumn {
  """column name"""
  color

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  tenantId

  """column name"""
  type
}

"""
input type for updating data in table "tag"
"""
input TagSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type TagStddevFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "tag"
"""
input TagStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type TagStddevPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "tag"
"""
input TagStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TagStddevSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "tag"
"""
input TagStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "tag"
"""
input TagStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TagStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TagStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type TagSumFields {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "tag"
"""
input TagSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "tag"
"""
enum TagUpdateColumn {
  """column name"""
  color

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  imageId

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  tenantId

  """column name"""
  type
}

input TagUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TagIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TagSetInput

  """filter the rows which have to be updated"""
  where: TagBoolExp!
}

"""aggregate variance on columns"""
type TagVarianceFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "tag"
"""
input TagVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type TagVarPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "tag"
"""
input TagVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type TagVarSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "tag"
"""
input TagVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "team"
"""
type Team {
  """An array relationship"""
  actions(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """An object relationship"""
  actor: Actor

  """An object relationship"""
  canteen: Canteen
  canteenId: bigint

  """An array relationship"""
  changeRoles(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """An aggregate relationship"""
  changeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!

  """An object relationship"""
  classGroup: ClassGroup
  classGroupId: bigint

  """An object relationship"""
  cohort: Cohort
  cohortId: bigint

  """An array relationship"""
  contentTeams(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): [ContentTeams!]!

  """An aggregate relationship"""
  contentTeamsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentTeamsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentTeamsOrderBy!]

    """filter the rows returned"""
    where: ContentTeamsBoolExp
  ): ContentTeamsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  currentFinance: Float!
  deletedAt: timestamptz
  directorsCategoryName: String!

  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): [Document!]!

  """An aggregate relationship"""
  documentsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): DocumentAggregate!

  """An object relationship"""
  fileUpload: FileUpload

  """An object relationship"""
  form: Form
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  managersCategoryName: String!
  membersCategoryName: String!
  membershipFees: Int!
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint

  """An array relationship"""
  poles(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): [Pole!]!

  """An aggregate relationship"""
  polesAggregate(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): PoleAggregate!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): [Project!]!

  """An aggregate relationship"""
  projectsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): ProjectAggregate!

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """An aggregate relationship"""
  rolesAggregate(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): RoleAggregate!
  tagline: String

  """An object relationship"""
  team: Team

  """An array relationship"""
  teamEvents(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  """An aggregate relationship"""
  teamEventsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamEventsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamEventsOrderBy!]

    """filter the rows returned"""
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!

  """An array relationship"""
  teamJoins(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """An aggregate relationship"""
  teamJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """An array relationship"""
  teamMembers(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  """An aggregate relationship"""
  teamMembersAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  """An array relationship"""
  teams(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): [Team!]!

  """An aggregate relationship"""
  teamsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): TeamAggregate!

  """An object relationship"""
  tenant: Tenant!

  """An object relationship"""
  tenantById: Tenant
  tenantId: bigint!
  type: String!
  videoId: bigint
}

"""
aggregated selection of "team"
"""
type TeamAggregate {
  aggregate: TeamAggregateFields
  nodes: [Team!]!
}

input TeamAggregateBoolExp {
  count: teamAggregateBoolExpCount
}

input teamAggregateBoolExpCount {
  arguments: [TeamSelectColumn!]
  distinct: Boolean
  filter: TeamBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team"
"""
type TeamAggregateFields {
  avg: TeamAvgFields
  count(columns: [TeamSelectColumn!], distinct: Boolean): Int!
  max: TeamMaxFields
  min: TeamMinFields
  stddev: TeamStddevFields
  stddevPop: TeamStddevPopFields
  stddevSamp: TeamStddevSampFields
  sum: TeamSumFields
  varPop: TeamVarPopFields
  varSamp: TeamVarSampFields
  variance: TeamVarianceFields
}

"""
order by aggregate values of table "team"
"""
input TeamAggregateOrderBy {
  avg: TeamAvgOrderBy
  count: OrderBy
  max: TeamMaxOrderBy
  min: TeamMinOrderBy
  stddev: TeamStddevOrderBy
  stddevPop: TeamStddevPopOrderBy
  stddevSamp: TeamStddevSampOrderBy
  sum: TeamSumOrderBy
  varPop: TeamVarPopOrderBy
  varSamp: TeamVarSampOrderBy
  variance: TeamVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team"
"""
input TeamArrRelInsertInput {
  data: [TeamInsertInput!]!

  """upsert condition"""
  onConflict: TeamOnConflict
}

"""aggregate avg on columns"""
type TeamAvgFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

"""
order by avg() on columns of table "team"
"""
input TeamAvgOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""
Boolean expression to filter rows from the table "team". All fields are combined with a logical 'AND'.
"""
input TeamBoolExp {
  _and: [TeamBoolExp!]
  _not: TeamBoolExp
  _or: [TeamBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  cohort: CohortBoolExp
  cohortId: BigintComparisonExp
  contentTeams: ContentTeamsBoolExp
  contentTeamsAggregate: ContentTeamsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  currentFinance: FloatComparisonExp
  deletedAt: TimestamptzComparisonExp
  directorsCategoryName: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  fileUpload: FileUploadBoolExp
  form: FormBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  managersCategoryName: StringComparisonExp
  membersCategoryName: StringComparisonExp
  membershipFees: IntComparisonExp
  originalCreationDay: SmallintComparisonExp
  originalCreationMonth: SmallintComparisonExp
  originalCreationYear: SmallintComparisonExp
  parentId: BigintComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  tagline: StringComparisonExp
  team: TeamBoolExp
  teamEvents: TeamEventsBoolExp
  teamEventsAggregate: TeamEventsAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantById: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  videoId: BigintComparisonExp
}

"""
unique or primary key constraints on table "team"
"""
enum TeamConstraint {
  """
  unique or primary key constraint on columns "canteen_id"
  """
  team_canteen_id_unique

  """
  unique or primary key constraint on columns "class_group_id"
  """
  team_class_group_id_unique

  """
  unique or primary key constraint on columns "cohort_id"
  """
  team_cohort_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  team_pkey
}

"""
columns and relationships of "team_events"
"""
type TeamEvents {
  """An object relationship"""
  event: Event!
  eventId: bigint!

  """An object relationship"""
  team: Team!
  teamId: bigint!
}

"""
aggregated selection of "team_events"
"""
type TeamEventsAggregate {
  aggregate: TeamEventsAggregateFields
  nodes: [TeamEvents!]!
}

input TeamEventsAggregateBoolExp {
  count: teamEventsAggregateBoolExpCount
}

input teamEventsAggregateBoolExpCount {
  arguments: [TeamEventsSelectColumn!]
  distinct: Boolean
  filter: TeamEventsBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team_events"
"""
type TeamEventsAggregateFields {
  avg: TeamEventsAvgFields
  count(columns: [TeamEventsSelectColumn!], distinct: Boolean): Int!
  max: TeamEventsMaxFields
  min: TeamEventsMinFields
  stddev: TeamEventsStddevFields
  stddevPop: TeamEventsStddevPopFields
  stddevSamp: TeamEventsStddevSampFields
  sum: TeamEventsSumFields
  varPop: TeamEventsVarPopFields
  varSamp: TeamEventsVarSampFields
  variance: TeamEventsVarianceFields
}

"""
order by aggregate values of table "team_events"
"""
input TeamEventsAggregateOrderBy {
  avg: TeamEventsAvgOrderBy
  count: OrderBy
  max: TeamEventsMaxOrderBy
  min: TeamEventsMinOrderBy
  stddev: TeamEventsStddevOrderBy
  stddevPop: TeamEventsStddevPopOrderBy
  stddevSamp: TeamEventsStddevSampOrderBy
  sum: TeamEventsSumOrderBy
  varPop: TeamEventsVarPopOrderBy
  varSamp: TeamEventsVarSampOrderBy
  variance: TeamEventsVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team_events"
"""
input TeamEventsArrRelInsertInput {
  data: [TeamEventsInsertInput!]!

  """upsert condition"""
  onConflict: TeamEventsOnConflict
}

"""aggregate avg on columns"""
type TeamEventsAvgFields {
  eventId: Float
  teamId: Float
}

"""
order by avg() on columns of table "team_events"
"""
input TeamEventsAvgOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""
Boolean expression to filter rows from the table "team_events". All fields are combined with a logical 'AND'.
"""
input TeamEventsBoolExp {
  _and: [TeamEventsBoolExp!]
  _not: TeamEventsBoolExp
  _or: [TeamEventsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
}

"""
unique or primary key constraints on table "team_events"
"""
enum TeamEventsConstraint {
  """
  unique or primary key constraint on columns "event_id", "team_id"
  """
  team_events_pkey
}

"""
input type for incrementing numeric columns in table "team_events"
"""
input TeamEventsIncInput {
  eventId: bigint
  teamId: bigint
}

"""
input type for inserting data into table "team_events"
"""
input TeamEventsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
}

"""aggregate max on columns"""
type TeamEventsMaxFields {
  eventId: bigint
  teamId: bigint
}

"""
order by max() on columns of table "team_events"
"""
input TeamEventsMaxOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""aggregate min on columns"""
type TeamEventsMinFields {
  eventId: bigint
  teamId: bigint
}

"""
order by min() on columns of table "team_events"
"""
input TeamEventsMinOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""
response of any mutation on the table "team_events"
"""
type TeamEventsMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeamEvents!]!
}

"""
on_conflict condition type for table "team_events"
"""
input TeamEventsOnConflict {
  constraint: TeamEventsConstraint!
  updateColumns: [TeamEventsUpdateColumn!]! = []
  where: TeamEventsBoolExp
}

"""Ordering options when selecting data from "team_events"."""
input TeamEventsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
}

"""primary key columns input for table: team_events"""
input TeamEventsPkColumnsInput {
  eventId: bigint!
  teamId: bigint!
}

"""
select columns of table "team_events"
"""
enum TeamEventsSelectColumn {
  """column name"""
  eventId

  """column name"""
  teamId
}

"""
input type for updating data in table "team_events"
"""
input TeamEventsSetInput {
  eventId: bigint
  teamId: bigint
}

"""aggregate stddev on columns"""
type TeamEventsStddevFields {
  eventId: Float
  teamId: Float
}

"""
order by stddev() on columns of table "team_events"
"""
input TeamEventsStddevOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamEventsStddevPopFields {
  eventId: Float
  teamId: Float
}

"""
order by stddevPop() on columns of table "team_events"
"""
input TeamEventsStddevPopOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamEventsStddevSampFields {
  eventId: Float
  teamId: Float
}

"""
order by stddevSamp() on columns of table "team_events"
"""
input TeamEventsStddevSampOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""
Streaming cursor of the table "team_events"
"""
input TeamEventsStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamEventsStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamEventsStreamCursorValueInput {
  eventId: bigint
  teamId: bigint
}

"""aggregate sum on columns"""
type TeamEventsSumFields {
  eventId: bigint
  teamId: bigint
}

"""
order by sum() on columns of table "team_events"
"""
input TeamEventsSumOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""
update columns of table "team_events"
"""
enum TeamEventsUpdateColumn {
  """column name"""
  eventId

  """column name"""
  teamId
}

input TeamEventsUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamEventsIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamEventsSetInput

  """filter the rows which have to be updated"""
  where: TeamEventsBoolExp!
}

"""aggregate variance on columns"""
type TeamEventsVarianceFields {
  eventId: Float
  teamId: Float
}

"""
order by variance() on columns of table "team_events"
"""
input TeamEventsVarianceOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""aggregate varPop on columns"""
type TeamEventsVarPopFields {
  eventId: Float
  teamId: Float
}

"""
order by varPop() on columns of table "team_events"
"""
input TeamEventsVarPopOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamEventsVarSampFields {
  eventId: Float
  teamId: Float
}

"""
order by varSamp() on columns of table "team_events"
"""
input TeamEventsVarSampOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

"""
columns and relationships of "team_finance"
"""
type TeamFinance {
  """An object relationship"""
  actor: Actor

  """An object relationship"""
  actorAddress: ActorAddress
  addressId: bigint
  addressType: String!
  amount: Float!
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  """An object relationship"""
  event: Event
  eventId: bigint

  """An object relationship"""
  expense: Expense
  expenseId: bigint

  """An object relationship"""
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  method: String!
  name: String!
  payedAt: timestamptz!
  payedById: bigint
  payedByType: String!

  """An object relationship"""
  project: Project
  projectId: bigint
  receiptId: bigint
  state: String!

  """An object relationship"""
  team: Team!
  teamId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "team_finance"
"""
type TeamFinanceAggregate {
  aggregate: TeamFinanceAggregateFields
  nodes: [TeamFinance!]!
}

input TeamFinanceAggregateBoolExp {
  count: teamFinanceAggregateBoolExpCount
}

input teamFinanceAggregateBoolExpCount {
  arguments: [TeamFinanceSelectColumn!]
  distinct: Boolean
  filter: TeamFinanceBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team_finance"
"""
type TeamFinanceAggregateFields {
  avg: TeamFinanceAvgFields
  count(columns: [TeamFinanceSelectColumn!], distinct: Boolean): Int!
  max: TeamFinanceMaxFields
  min: TeamFinanceMinFields
  stddev: TeamFinanceStddevFields
  stddevPop: TeamFinanceStddevPopFields
  stddevSamp: TeamFinanceStddevSampFields
  sum: TeamFinanceSumFields
  varPop: TeamFinanceVarPopFields
  varSamp: TeamFinanceVarSampFields
  variance: TeamFinanceVarianceFields
}

"""
order by aggregate values of table "team_finance"
"""
input TeamFinanceAggregateOrderBy {
  avg: TeamFinanceAvgOrderBy
  count: OrderBy
  max: TeamFinanceMaxOrderBy
  min: TeamFinanceMinOrderBy
  stddev: TeamFinanceStddevOrderBy
  stddevPop: TeamFinanceStddevPopOrderBy
  stddevSamp: TeamFinanceStddevSampOrderBy
  sum: TeamFinanceSumOrderBy
  varPop: TeamFinanceVarPopOrderBy
  varSamp: TeamFinanceVarSampOrderBy
  variance: TeamFinanceVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team_finance"
"""
input TeamFinanceArrRelInsertInput {
  data: [TeamFinanceInsertInput!]!

  """upsert condition"""
  onConflict: TeamFinanceOnConflict
}

"""aggregate avg on columns"""
type TeamFinanceAvgFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "team_finance"
"""
input TeamFinanceAvgOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "team_finance". All fields are combined with a logical 'AND'.
"""
input TeamFinanceBoolExp {
  _and: [TeamFinanceBoolExp!]
  _not: TeamFinanceBoolExp
  _or: [TeamFinanceBoolExp!]
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  addressType: StringComparisonExp
  amount: FloatComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  method: StringComparisonExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedById: BigintComparisonExp
  payedByType: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  receiptId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "team_finance"
"""
enum TeamFinanceConstraint {
  """
  unique or primary key constraint on columns "expense_id"
  """
  team_finance_expense_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  team_finance_pkey
}

"""
columns and relationships of "team_finance_edit"
"""
type TeamFinanceEdit {
  """An object relationship"""
  actor: Actor

  """An object relationship"""
  actorAddress: ActorAddress
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  event: Event

  """An object relationship"""
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  method: String
  payedAt: timestamptz
  payedByType: String

  """An object relationship"""
  project: Project
  removedAddress: Boolean!
  removedEvent: Boolean!
  removedPayedBy: Boolean!
  removedProject: Boolean!
  removedReceipt: Boolean!
  state: String
  teamFinanceId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "team_finance_edit"
"""
type TeamFinanceEditAggregate {
  aggregate: TeamFinanceEditAggregateFields
  nodes: [TeamFinanceEdit!]!
}

input TeamFinanceEditAggregateBoolExp {
  bool_and: teamFinanceEditAggregateBoolExpBool_and
  bool_or: teamFinanceEditAggregateBoolExpBool_or
  count: teamFinanceEditAggregateBoolExpCount
}

input teamFinanceEditAggregateBoolExpBool_and {
  arguments: TeamFinanceEditSelectColumnTeamFinanceEditAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TeamFinanceEditBoolExp
  predicate: BooleanComparisonExp!
}

input teamFinanceEditAggregateBoolExpBool_or {
  arguments: TeamFinanceEditSelectColumnTeamFinanceEditAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TeamFinanceEditBoolExp
  predicate: BooleanComparisonExp!
}

input teamFinanceEditAggregateBoolExpCount {
  arguments: [TeamFinanceEditSelectColumn!]
  distinct: Boolean
  filter: TeamFinanceEditBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team_finance_edit"
"""
type TeamFinanceEditAggregateFields {
  avg: TeamFinanceEditAvgFields
  count(columns: [TeamFinanceEditSelectColumn!], distinct: Boolean): Int!
  max: TeamFinanceEditMaxFields
  min: TeamFinanceEditMinFields
  stddev: TeamFinanceEditStddevFields
  stddevPop: TeamFinanceEditStddevPopFields
  stddevSamp: TeamFinanceEditStddevSampFields
  sum: TeamFinanceEditSumFields
  varPop: TeamFinanceEditVarPopFields
  varSamp: TeamFinanceEditVarSampFields
  variance: TeamFinanceEditVarianceFields
}

"""
order by aggregate values of table "team_finance_edit"
"""
input TeamFinanceEditAggregateOrderBy {
  avg: TeamFinanceEditAvgOrderBy
  count: OrderBy
  max: TeamFinanceEditMaxOrderBy
  min: TeamFinanceEditMinOrderBy
  stddev: TeamFinanceEditStddevOrderBy
  stddevPop: TeamFinanceEditStddevPopOrderBy
  stddevSamp: TeamFinanceEditStddevSampOrderBy
  sum: TeamFinanceEditSumOrderBy
  varPop: TeamFinanceEditVarPopOrderBy
  varSamp: TeamFinanceEditVarSampOrderBy
  variance: TeamFinanceEditVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team_finance_edit"
"""
input TeamFinanceEditArrRelInsertInput {
  data: [TeamFinanceEditInsertInput!]!

  """upsert condition"""
  onConflict: TeamFinanceEditOnConflict
}

"""aggregate avg on columns"""
type TeamFinanceEditAvgFields {
  addedAddressId: Float
  addedEventId: Float
  addedPayedById: Float
  addedProjectId: Float
  addedReceiptId: Float
  createdById: Float
  id: Float
  teamFinanceId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "team_finance_edit"
"""
input TeamFinanceEditAvgOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "team_finance_edit". All fields are combined with a logical 'AND'.
"""
input TeamFinanceEditBoolExp {
  _and: [TeamFinanceEditBoolExp!]
  _not: TeamFinanceEditBoolExp
  _or: [TeamFinanceEditBoolExp!]
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  addedAddressId: BigintComparisonExp
  addedEventId: BigintComparisonExp
  addedPayedById: BigintComparisonExp
  addedProjectId: BigintComparisonExp
  addedReceiptId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  method: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedByType: StringComparisonExp
  project: ProjectBoolExp
  removedAddress: BooleanComparisonExp
  removedEvent: BooleanComparisonExp
  removedPayedBy: BooleanComparisonExp
  removedProject: BooleanComparisonExp
  removedReceipt: BooleanComparisonExp
  state: StringComparisonExp
  teamFinanceId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "team_finance_edit"
"""
enum TeamFinanceEditConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  team_finance_edit_pkey
}

"""
input type for incrementing numeric columns in table "team_finance_edit"
"""
input TeamFinanceEditIncInput {
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint
  createdById: bigint
  id: bigint
  teamFinanceId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "team_finance_edit"
"""
input TeamFinanceEditInsertInput {
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  method: String
  payedAt: timestamptz
  payedByType: String
  project: ProjectObjRelInsertInput
  removedAddress: Boolean
  removedEvent: Boolean
  removedPayedBy: Boolean
  removedProject: Boolean
  removedReceipt: Boolean
  state: String
  teamFinanceId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type TeamFinanceEditMaxFields {
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  method: String
  payedAt: timestamptz
  payedByType: String
  state: String
  teamFinanceId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "team_finance_edit"
"""
input TeamFinanceEditMaxOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedByType: OrderBy
  state: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type TeamFinanceEditMinFields {
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  method: String
  payedAt: timestamptz
  payedByType: String
  state: String
  teamFinanceId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "team_finance_edit"
"""
input TeamFinanceEditMinOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  payedAt: OrderBy
  payedByType: OrderBy
  state: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "team_finance_edit"
"""
type TeamFinanceEditMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeamFinanceEdit!]!
}

"""
on_conflict condition type for table "team_finance_edit"
"""
input TeamFinanceEditOnConflict {
  constraint: TeamFinanceEditConstraint!
  updateColumns: [TeamFinanceEditUpdateColumn!]! = []
  where: TeamFinanceEditBoolExp
}

"""Ordering options when selecting data from "team_finance_edit"."""
input TeamFinanceEditOrderBy {
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  method: OrderBy
  payedAt: OrderBy
  payedByType: OrderBy
  project: ProjectOrderBy
  removedAddress: OrderBy
  removedEvent: OrderBy
  removedPayedBy: OrderBy
  removedProject: OrderBy
  removedReceipt: OrderBy
  state: OrderBy
  teamFinanceId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: team_finance_edit"""
input TeamFinanceEditPkColumnsInput {
  id: bigint!
}

"""
select columns of table "team_finance_edit"
"""
enum TeamFinanceEditSelectColumn {
  """column name"""
  addedAddressId

  """column name"""
  addedEventId

  """column name"""
  addedPayedById

  """column name"""
  addedProjectId

  """column name"""
  addedReceiptId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  method

  """column name"""
  payedAt

  """column name"""
  payedByType

  """column name"""
  removedAddress

  """column name"""
  removedEvent

  """column name"""
  removedPayedBy

  """column name"""
  removedProject

  """column name"""
  removedReceipt

  """column name"""
  state

  """column name"""
  teamFinanceId

  """column name"""
  tenantId
}

"""
select "teamFinanceEditAggregateBoolExpBool_andArgumentsColumns" columns of table "team_finance_edit"
"""
enum TeamFinanceEditSelectColumnTeamFinanceEditAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  removedAddress

  """column name"""
  removedEvent

  """column name"""
  removedPayedBy

  """column name"""
  removedProject

  """column name"""
  removedReceipt
}

"""
select "teamFinanceEditAggregateBoolExpBool_orArgumentsColumns" columns of table "team_finance_edit"
"""
enum TeamFinanceEditSelectColumnTeamFinanceEditAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  removedAddress

  """column name"""
  removedEvent

  """column name"""
  removedPayedBy

  """column name"""
  removedProject

  """column name"""
  removedReceipt
}

"""
input type for updating data in table "team_finance_edit"
"""
input TeamFinanceEditSetInput {
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  method: String
  payedAt: timestamptz
  payedByType: String
  removedAddress: Boolean
  removedEvent: Boolean
  removedPayedBy: Boolean
  removedProject: Boolean
  removedReceipt: Boolean
  state: String
  teamFinanceId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type TeamFinanceEditStddevFields {
  addedAddressId: Float
  addedEventId: Float
  addedPayedById: Float
  addedProjectId: Float
  addedReceiptId: Float
  createdById: Float
  id: Float
  teamFinanceId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "team_finance_edit"
"""
input TeamFinanceEditStddevOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamFinanceEditStddevPopFields {
  addedAddressId: Float
  addedEventId: Float
  addedPayedById: Float
  addedProjectId: Float
  addedReceiptId: Float
  createdById: Float
  id: Float
  teamFinanceId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "team_finance_edit"
"""
input TeamFinanceEditStddevPopOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamFinanceEditStddevSampFields {
  addedAddressId: Float
  addedEventId: Float
  addedPayedById: Float
  addedProjectId: Float
  addedReceiptId: Float
  createdById: Float
  id: Float
  teamFinanceId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "team_finance_edit"
"""
input TeamFinanceEditStddevSampOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "team_finance_edit"
"""
input TeamFinanceEditStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamFinanceEditStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamFinanceEditStreamCursorValueInput {
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  method: String
  payedAt: timestamptz
  payedByType: String
  removedAddress: Boolean
  removedEvent: Boolean
  removedPayedBy: Boolean
  removedProject: Boolean
  removedReceipt: Boolean
  state: String
  teamFinanceId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type TeamFinanceEditSumFields {
  addedAddressId: bigint
  addedEventId: bigint
  addedPayedById: bigint
  addedProjectId: bigint
  addedReceiptId: bigint
  createdById: bigint
  id: bigint
  teamFinanceId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "team_finance_edit"
"""
input TeamFinanceEditSumOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "team_finance_edit"
"""
enum TeamFinanceEditUpdateColumn {
  """column name"""
  addedAddressId

  """column name"""
  addedEventId

  """column name"""
  addedPayedById

  """column name"""
  addedProjectId

  """column name"""
  addedReceiptId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  method

  """column name"""
  payedAt

  """column name"""
  payedByType

  """column name"""
  removedAddress

  """column name"""
  removedEvent

  """column name"""
  removedPayedBy

  """column name"""
  removedProject

  """column name"""
  removedReceipt

  """column name"""
  state

  """column name"""
  teamFinanceId

  """column name"""
  tenantId
}

input TeamFinanceEditUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamFinanceEditIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamFinanceEditSetInput

  """filter the rows which have to be updated"""
  where: TeamFinanceEditBoolExp!
}

"""aggregate variance on columns"""
type TeamFinanceEditVarianceFields {
  addedAddressId: Float
  addedEventId: Float
  addedPayedById: Float
  addedProjectId: Float
  addedReceiptId: Float
  createdById: Float
  id: Float
  teamFinanceId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "team_finance_edit"
"""
input TeamFinanceEditVarianceOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type TeamFinanceEditVarPopFields {
  addedAddressId: Float
  addedEventId: Float
  addedPayedById: Float
  addedProjectId: Float
  addedReceiptId: Float
  createdById: Float
  id: Float
  teamFinanceId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "team_finance_edit"
"""
input TeamFinanceEditVarPopOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamFinanceEditVarSampFields {
  addedAddressId: Float
  addedEventId: Float
  addedPayedById: Float
  addedProjectId: Float
  addedReceiptId: Float
  createdById: Float
  id: Float
  teamFinanceId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "team_finance_edit"
"""
input TeamFinanceEditVarSampOrderBy {
  addedAddressId: OrderBy
  addedEventId: OrderBy
  addedPayedById: OrderBy
  addedProjectId: OrderBy
  addedReceiptId: OrderBy
  createdById: OrderBy
  id: OrderBy
  teamFinanceId: OrderBy
  tenantId: OrderBy
}

"""
input type for incrementing numeric columns in table "team_finance"
"""
input TeamFinanceIncInput {
  addressId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  projectId: bigint
  receiptId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "team_finance"
"""
input TeamFinanceInsertInput {
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  receiptId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type TeamFinanceMaxFields {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "team_finance"
"""
input TeamFinanceMaxOrderBy {
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type TeamFinanceMinFields {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "team_finance"
"""
input TeamFinanceMinOrderBy {
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "team_finance"
"""
type TeamFinanceMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeamFinance!]!
}

"""
input type for inserting object relation for remote table "team_finance"
"""
input TeamFinanceObjRelInsertInput {
  data: TeamFinanceInsertInput!

  """upsert condition"""
  onConflict: TeamFinanceOnConflict
}

"""
on_conflict condition type for table "team_finance"
"""
input TeamFinanceOnConflict {
  constraint: TeamFinanceConstraint!
  updateColumns: [TeamFinanceUpdateColumn!]! = []
  where: TeamFinanceBoolExp
}

"""Ordering options when selecting data from "team_finance"."""
input TeamFinanceOrderBy {
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  receiptId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: team_finance"""
input TeamFinancePkColumnsInput {
  id: bigint!
}

"""
select columns of table "team_finance"
"""
enum TeamFinanceSelectColumn {
  """column name"""
  addressId

  """column name"""
  addressType

  """column name"""
  amount

  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  eventId

  """column name"""
  expenseId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  method

  """column name"""
  name

  """column name"""
  payedAt

  """column name"""
  payedById

  """column name"""
  payedByType

  """column name"""
  projectId

  """column name"""
  receiptId

  """column name"""
  state

  """column name"""
  teamId

  """column name"""
  tenantId
}

"""
input type for updating data in table "team_finance"
"""
input TeamFinanceSetInput {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type TeamFinanceStddevFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "team_finance"
"""
input TeamFinanceStddevOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamFinanceStddevPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "team_finance"
"""
input TeamFinanceStddevPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamFinanceStddevSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "team_finance"
"""
input TeamFinanceStddevSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "team_finance"
"""
input TeamFinanceStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamFinanceStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamFinanceStreamCursorValueInput {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  receiptId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type TeamFinanceSumFields {
  addressId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  projectId: bigint
  receiptId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "team_finance"
"""
input TeamFinanceSumOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "team_finance"
"""
enum TeamFinanceUpdateColumn {
  """column name"""
  addressId

  """column name"""
  addressType

  """column name"""
  amount

  """column name"""
  category

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  description

  """column name"""
  eventId

  """column name"""
  expenseId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  method

  """column name"""
  name

  """column name"""
  payedAt

  """column name"""
  payedById

  """column name"""
  payedByType

  """column name"""
  projectId

  """column name"""
  receiptId

  """column name"""
  state

  """column name"""
  teamId

  """column name"""
  tenantId
}

input TeamFinanceUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamFinanceIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamFinanceSetInput

  """filter the rows which have to be updated"""
  where: TeamFinanceBoolExp!
}

"""aggregate variance on columns"""
type TeamFinanceVarianceFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "team_finance"
"""
input TeamFinanceVarianceOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type TeamFinanceVarPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "team_finance"
"""
input TeamFinanceVarPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamFinanceVarSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  receiptId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "team_finance"
"""
input TeamFinanceVarSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  receiptId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
input type for incrementing numeric columns in table "team"
"""
input TeamIncInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  currentFinance: Float
  id: bigint
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  videoId: bigint
}

"""
input type for inserting data into table "team"
"""
input TeamInsertInput {
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  changeRoles: ChangeRoleArrRelInsertInput
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  cohort: CohortObjRelInsertInput
  cohortId: bigint
  contentTeams: ContentTeamsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  documents: DocumentArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  form: FormObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  poles: PoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  roles: RoleArrRelInsertInput
  tagline: String
  team: TeamObjRelInsertInput
  teamEvents: TeamEventsArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  videoId: bigint
}

"""
columns and relationships of "team_join"
"""
type TeamJoin {
  askedRoleId: bigint!

  """An object relationship"""
  changeRole: ChangeRole
  changeRoleId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An object relationship"""
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  joinerId: bigint!

  """An object relationship"""
  role: Role!
  state: String!

  """An object relationship"""
  team: Team!
  teamId: bigint!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "team_join"
"""
type TeamJoinAggregate {
  aggregate: TeamJoinAggregateFields
  nodes: [TeamJoin!]!
}

input TeamJoinAggregateBoolExp {
  count: teamJoinAggregateBoolExpCount
}

input teamJoinAggregateBoolExpCount {
  arguments: [TeamJoinSelectColumn!]
  distinct: Boolean
  filter: TeamJoinBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team_join"
"""
type TeamJoinAggregateFields {
  avg: TeamJoinAvgFields
  count(columns: [TeamJoinSelectColumn!], distinct: Boolean): Int!
  max: TeamJoinMaxFields
  min: TeamJoinMinFields
  stddev: TeamJoinStddevFields
  stddevPop: TeamJoinStddevPopFields
  stddevSamp: TeamJoinStddevSampFields
  sum: TeamJoinSumFields
  varPop: TeamJoinVarPopFields
  varSamp: TeamJoinVarSampFields
  variance: TeamJoinVarianceFields
}

"""
order by aggregate values of table "team_join"
"""
input TeamJoinAggregateOrderBy {
  avg: TeamJoinAvgOrderBy
  count: OrderBy
  max: TeamJoinMaxOrderBy
  min: TeamJoinMinOrderBy
  stddev: TeamJoinStddevOrderBy
  stddevPop: TeamJoinStddevPopOrderBy
  stddevSamp: TeamJoinStddevSampOrderBy
  sum: TeamJoinSumOrderBy
  varPop: TeamJoinVarPopOrderBy
  varSamp: TeamJoinVarSampOrderBy
  variance: TeamJoinVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team_join"
"""
input TeamJoinArrRelInsertInput {
  data: [TeamJoinInsertInput!]!

  """upsert condition"""
  onConflict: TeamJoinOnConflict
}

"""aggregate avg on columns"""
type TeamJoinAvgFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

"""
order by avg() on columns of table "team_join"
"""
input TeamJoinAvgOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "team_join". All fields are combined with a logical 'AND'.
"""
input TeamJoinBoolExp {
  _and: [TeamJoinBoolExp!]
  _not: TeamJoinBoolExp
  _or: [TeamJoinBoolExp!]
  askedRoleId: BigintComparisonExp
  changeRole: ChangeRoleBoolExp
  changeRoleId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  joinerId: BigintComparisonExp
  role: RoleBoolExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "team_join"
"""
enum TeamJoinConstraint {
  """
  unique or primary key constraint on columns "change_role_id"
  """
  team_join_change_role_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  team_join_pkey
}

"""
input type for incrementing numeric columns in table "team_join"
"""
input TeamJoinIncInput {
  askedRoleId: bigint
  changeRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "team_join"
"""
input TeamJoinInsertInput {
  askedRoleId: bigint
  changeRole: ChangeRoleObjRelInsertInput
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  joinerId: bigint
  role: RoleObjRelInsertInput
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type TeamJoinMaxFields {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""
order by max() on columns of table "team_join"
"""
input TeamJoinMaxOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type TeamJoinMinFields {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""
order by min() on columns of table "team_join"
"""
input TeamJoinMinOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "team_join"
"""
type TeamJoinMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeamJoin!]!
}

"""
input type for inserting object relation for remote table "team_join"
"""
input TeamJoinObjRelInsertInput {
  data: TeamJoinInsertInput!

  """upsert condition"""
  onConflict: TeamJoinOnConflict
}

"""
on_conflict condition type for table "team_join"
"""
input TeamJoinOnConflict {
  constraint: TeamJoinConstraint!
  updateColumns: [TeamJoinUpdateColumn!]! = []
  where: TeamJoinBoolExp
}

"""Ordering options when selecting data from "team_join"."""
input TeamJoinOrderBy {
  askedRoleId: OrderBy
  changeRole: ChangeRoleOrderBy
  changeRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  joinerId: OrderBy
  role: RoleOrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: team_join"""
input TeamJoinPkColumnsInput {
  id: bigint!
}

"""
select columns of table "team_join"
"""
enum TeamJoinSelectColumn {
  """column name"""
  askedRoleId

  """column name"""
  changeRoleId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formSubmissionId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  joinerId

  """column name"""
  state

  """column name"""
  teamId

  """column name"""
  tenantId
}

"""
input type for updating data in table "team_join"
"""
input TeamJoinSetInput {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type TeamJoinStddevFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "team_join"
"""
input TeamJoinStddevOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamJoinStddevPopFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "team_join"
"""
input TeamJoinStddevPopOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamJoinStddevSampFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "team_join"
"""
input TeamJoinStddevSampOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "team_join"
"""
input TeamJoinStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamJoinStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamJoinStreamCursorValueInput {
  askedRoleId: bigint
  changeRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

"""aggregate sum on columns"""
type TeamJoinSumFields {
  askedRoleId: bigint
  changeRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  teamId: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "team_join"
"""
input TeamJoinSumOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "team_join"
"""
enum TeamJoinUpdateColumn {
  """column name"""
  askedRoleId

  """column name"""
  changeRoleId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  formSubmissionId

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  joinerId

  """column name"""
  state

  """column name"""
  teamId

  """column name"""
  tenantId
}

input TeamJoinUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamJoinIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamJoinSetInput

  """filter the rows which have to be updated"""
  where: TeamJoinBoolExp!
}

"""aggregate variance on columns"""
type TeamJoinVarianceFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

"""
order by variance() on columns of table "team_join"
"""
input TeamJoinVarianceOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type TeamJoinVarPopFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "team_join"
"""
input TeamJoinVarPopOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamJoinVarSampFields {
  askedRoleId: Float
  changeRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  teamId: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "team_join"
"""
input TeamJoinVarSampOrderBy {
  askedRoleId: OrderBy
  changeRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

"""aggregate max on columns"""
type TeamMaxFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tagline: String
  tenantId: bigint
  type: String
  videoId: bigint
}

"""
order by max() on columns of table "team"
"""
input TeamMaxOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tagline: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

"""
columns and relationships of "team_member"
"""
type TeamMember {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  permissions: Int!

  """An array relationship"""
  projectSupervisors(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  """An aggregate relationship"""
  projectSupervisorsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSupervisorsSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectSupervisorsOrderBy!]

    """filter the rows returned"""
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!
  startDate: timestamptz!

  """An object relationship"""
  team: Team!
  teamId: bigint!

  """An array relationship"""
  teamMemberRoles(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  """An aggregate relationship"""
  teamMemberRolesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberRolesSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberRolesOrderBy!]

    """filter the rows returned"""
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!

  """An object relationship"""
  userInfo: UserInfo!
}

"""
aggregated selection of "team_member"
"""
type TeamMemberAggregate {
  aggregate: TeamMemberAggregateFields
  nodes: [TeamMember!]!
}

input TeamMemberAggregateBoolExp {
  count: teamMemberAggregateBoolExpCount
}

input teamMemberAggregateBoolExpCount {
  arguments: [TeamMemberSelectColumn!]
  distinct: Boolean
  filter: TeamMemberBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team_member"
"""
type TeamMemberAggregateFields {
  avg: TeamMemberAvgFields
  count(columns: [TeamMemberSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberMaxFields
  min: TeamMemberMinFields
  stddev: TeamMemberStddevFields
  stddevPop: TeamMemberStddevPopFields
  stddevSamp: TeamMemberStddevSampFields
  sum: TeamMemberSumFields
  varPop: TeamMemberVarPopFields
  varSamp: TeamMemberVarSampFields
  variance: TeamMemberVarianceFields
}

"""
order by aggregate values of table "team_member"
"""
input TeamMemberAggregateOrderBy {
  avg: TeamMemberAvgOrderBy
  count: OrderBy
  max: TeamMemberMaxOrderBy
  min: TeamMemberMinOrderBy
  stddev: TeamMemberStddevOrderBy
  stddevPop: TeamMemberStddevPopOrderBy
  stddevSamp: TeamMemberStddevSampOrderBy
  sum: TeamMemberSumOrderBy
  varPop: TeamMemberVarPopOrderBy
  varSamp: TeamMemberVarSampOrderBy
  variance: TeamMemberVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team_member"
"""
input TeamMemberArrRelInsertInput {
  data: [TeamMemberInsertInput!]!

  """upsert condition"""
  onConflict: TeamMemberOnConflict
}

"""aggregate avg on columns"""
type TeamMemberAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by avg() on columns of table "team_member"
"""
input TeamMemberAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Boolean expression to filter rows from the table "team_member". All fields are combined with a logical 'AND'.
"""
input TeamMemberBoolExp {
  _and: [TeamMemberBoolExp!]
  _not: TeamMemberBoolExp
  _or: [TeamMemberBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  permissions: IntComparisonExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  startDate: TimestamptzComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

"""
unique or primary key constraints on table "team_member"
"""
enum TeamMemberConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  team_member_pkey
}

"""
input type for incrementing numeric columns in table "team_member"
"""
input TeamMemberIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
input type for inserting data into table "team_member"
"""
input TeamMemberInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  permissions: Int
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  startDate: timestamptz
  team: TeamObjRelInsertInput
  teamId: bigint
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

"""aggregate max on columns"""
type TeamMemberMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by max() on columns of table "team_member"
"""
input TeamMemberMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate min on columns"""
type TeamMemberMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by min() on columns of table "team_member"
"""
input TeamMemberMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
response of any mutation on the table "team_member"
"""
type TeamMemberMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeamMember!]!
}

"""
input type for inserting object relation for remote table "team_member"
"""
input TeamMemberObjRelInsertInput {
  data: TeamMemberInsertInput!

  """upsert condition"""
  onConflict: TeamMemberOnConflict
}

"""
on_conflict condition type for table "team_member"
"""
input TeamMemberOnConflict {
  constraint: TeamMemberConstraint!
  updateColumns: [TeamMemberUpdateColumn!]! = []
  where: TeamMemberBoolExp
}

"""Ordering options when selecting data from "team_member"."""
input TeamMemberOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  permissions: OrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  startDate: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

"""primary key columns input for table: team_member"""
input TeamMemberPkColumnsInput {
  id: bigint!
}

"""
columns and relationships of "team_member_roles"
"""
type TeamMemberRoles {
  """An object relationship"""
  role: Role!
  roleId: bigint!

  """An object relationship"""
  teamMember: TeamMember!
  teamMemberId: bigint!
}

"""
aggregated selection of "team_member_roles"
"""
type TeamMemberRolesAggregate {
  aggregate: TeamMemberRolesAggregateFields
  nodes: [TeamMemberRoles!]!
}

input TeamMemberRolesAggregateBoolExp {
  count: teamMemberRolesAggregateBoolExpCount
}

input teamMemberRolesAggregateBoolExpCount {
  arguments: [TeamMemberRolesSelectColumn!]
  distinct: Boolean
  filter: TeamMemberRolesBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team_member_roles"
"""
type TeamMemberRolesAggregateFields {
  avg: TeamMemberRolesAvgFields
  count(columns: [TeamMemberRolesSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberRolesMaxFields
  min: TeamMemberRolesMinFields
  stddev: TeamMemberRolesStddevFields
  stddevPop: TeamMemberRolesStddevPopFields
  stddevSamp: TeamMemberRolesStddevSampFields
  sum: TeamMemberRolesSumFields
  varPop: TeamMemberRolesVarPopFields
  varSamp: TeamMemberRolesVarSampFields
  variance: TeamMemberRolesVarianceFields
}

"""
order by aggregate values of table "team_member_roles"
"""
input TeamMemberRolesAggregateOrderBy {
  avg: TeamMemberRolesAvgOrderBy
  count: OrderBy
  max: TeamMemberRolesMaxOrderBy
  min: TeamMemberRolesMinOrderBy
  stddev: TeamMemberRolesStddevOrderBy
  stddevPop: TeamMemberRolesStddevPopOrderBy
  stddevSamp: TeamMemberRolesStddevSampOrderBy
  sum: TeamMemberRolesSumOrderBy
  varPop: TeamMemberRolesVarPopOrderBy
  varSamp: TeamMemberRolesVarSampOrderBy
  variance: TeamMemberRolesVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team_member_roles"
"""
input TeamMemberRolesArrRelInsertInput {
  data: [TeamMemberRolesInsertInput!]!

  """upsert condition"""
  onConflict: TeamMemberRolesOnConflict
}

"""aggregate avg on columns"""
type TeamMemberRolesAvgFields {
  roleId: Float
  teamMemberId: Float
}

"""
order by avg() on columns of table "team_member_roles"
"""
input TeamMemberRolesAvgOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""
Boolean expression to filter rows from the table "team_member_roles". All fields are combined with a logical 'AND'.
"""
input TeamMemberRolesBoolExp {
  _and: [TeamMemberRolesBoolExp!]
  _not: TeamMemberRolesBoolExp
  _or: [TeamMemberRolesBoolExp!]
  role: RoleBoolExp
  roleId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

"""
unique or primary key constraints on table "team_member_roles"
"""
enum TeamMemberRolesConstraint {
  """
  unique or primary key constraint on columns "role_id", "team_member_id"
  """
  team_member_roles_pkey
}

"""
input type for incrementing numeric columns in table "team_member_roles"
"""
input TeamMemberRolesIncInput {
  roleId: bigint
  teamMemberId: bigint
}

"""
input type for inserting data into table "team_member_roles"
"""
input TeamMemberRolesInsertInput {
  role: RoleObjRelInsertInput
  roleId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

"""aggregate max on columns"""
type TeamMemberRolesMaxFields {
  roleId: bigint
  teamMemberId: bigint
}

"""
order by max() on columns of table "team_member_roles"
"""
input TeamMemberRolesMaxOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate min on columns"""
type TeamMemberRolesMinFields {
  roleId: bigint
  teamMemberId: bigint
}

"""
order by min() on columns of table "team_member_roles"
"""
input TeamMemberRolesMinOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""
response of any mutation on the table "team_member_roles"
"""
type TeamMemberRolesMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeamMemberRoles!]!
}

"""
on_conflict condition type for table "team_member_roles"
"""
input TeamMemberRolesOnConflict {
  constraint: TeamMemberRolesConstraint!
  updateColumns: [TeamMemberRolesUpdateColumn!]! = []
  where: TeamMemberRolesBoolExp
}

"""Ordering options when selecting data from "team_member_roles"."""
input TeamMemberRolesOrderBy {
  role: RoleOrderBy
  roleId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

"""primary key columns input for table: team_member_roles"""
input TeamMemberRolesPkColumnsInput {
  roleId: bigint!
  teamMemberId: bigint!
}

"""
select columns of table "team_member_roles"
"""
enum TeamMemberRolesSelectColumn {
  """column name"""
  roleId

  """column name"""
  teamMemberId
}

"""
input type for updating data in table "team_member_roles"
"""
input TeamMemberRolesSetInput {
  roleId: bigint
  teamMemberId: bigint
}

"""aggregate stddev on columns"""
type TeamMemberRolesStddevFields {
  roleId: Float
  teamMemberId: Float
}

"""
order by stddev() on columns of table "team_member_roles"
"""
input TeamMemberRolesStddevOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamMemberRolesStddevPopFields {
  roleId: Float
  teamMemberId: Float
}

"""
order by stddevPop() on columns of table "team_member_roles"
"""
input TeamMemberRolesStddevPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamMemberRolesStddevSampFields {
  roleId: Float
  teamMemberId: Float
}

"""
order by stddevSamp() on columns of table "team_member_roles"
"""
input TeamMemberRolesStddevSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""
Streaming cursor of the table "team_member_roles"
"""
input TeamMemberRolesStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamMemberRolesStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamMemberRolesStreamCursorValueInput {
  roleId: bigint
  teamMemberId: bigint
}

"""aggregate sum on columns"""
type TeamMemberRolesSumFields {
  roleId: bigint
  teamMemberId: bigint
}

"""
order by sum() on columns of table "team_member_roles"
"""
input TeamMemberRolesSumOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""
update columns of table "team_member_roles"
"""
enum TeamMemberRolesUpdateColumn {
  """column name"""
  roleId

  """column name"""
  teamMemberId
}

input TeamMemberRolesUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamMemberRolesIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamMemberRolesSetInput

  """filter the rows which have to be updated"""
  where: TeamMemberRolesBoolExp!
}

"""aggregate variance on columns"""
type TeamMemberRolesVarianceFields {
  roleId: Float
  teamMemberId: Float
}

"""
order by variance() on columns of table "team_member_roles"
"""
input TeamMemberRolesVarianceOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate varPop on columns"""
type TeamMemberRolesVarPopFields {
  roleId: Float
  teamMemberId: Float
}

"""
order by varPop() on columns of table "team_member_roles"
"""
input TeamMemberRolesVarPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamMemberRolesVarSampFields {
  roleId: Float
  teamMemberId: Float
}

"""
order by varSamp() on columns of table "team_member_roles"
"""
input TeamMemberRolesVarSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

"""
select columns of table "team_member"
"""
enum TeamMemberSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  endDate

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  permissions

  """column name"""
  startDate

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  userId
}

"""
input type for updating data in table "team_member"
"""
input TeamMemberSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""aggregate stddev on columns"""
type TeamMemberStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddev() on columns of table "team_member"
"""
input TeamMemberStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamMemberStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevPop() on columns of table "team_member"
"""
input TeamMemberStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamMemberStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by stddevSamp() on columns of table "team_member"
"""
input TeamMemberStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
Streaming cursor of the table "team_member"
"""
input TeamMemberStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamMemberStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamMemberStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""aggregate sum on columns"""
type TeamMemberSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

"""
order by sum() on columns of table "team_member"
"""
input TeamMemberSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
update columns of table "team_member"
"""
enum TeamMemberUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  endDate

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  permissions

  """column name"""
  startDate

  """column name"""
  teamId

  """column name"""
  tenantId

  """column name"""
  userId
}

input TeamMemberUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamMemberIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamMemberSetInput

  """filter the rows which have to be updated"""
  where: TeamMemberBoolExp!
}

"""aggregate variance on columns"""
type TeamMemberVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by variance() on columns of table "team_member"
"""
input TeamMemberVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varPop on columns"""
type TeamMemberVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by varPop() on columns of table "team_member"
"""
input TeamMemberVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamMemberVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

"""
order by varSamp() on columns of table "team_member"
"""
input TeamMemberVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

"""
columns and relationships of "team_metric"
"""
type TeamMetric {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  value: String!
}

"""
aggregated selection of "team_metric"
"""
type TeamMetricAggregate {
  aggregate: TeamMetricAggregateFields
  nodes: [TeamMetric!]!
}

input TeamMetricAggregateBoolExp {
  count: teamMetricAggregateBoolExpCount
}

input teamMetricAggregateBoolExpCount {
  arguments: [TeamMetricSelectColumn!]
  distinct: Boolean
  filter: TeamMetricBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "team_metric"
"""
type TeamMetricAggregateFields {
  avg: TeamMetricAvgFields
  count(columns: [TeamMetricSelectColumn!], distinct: Boolean): Int!
  max: TeamMetricMaxFields
  min: TeamMetricMinFields
  stddev: TeamMetricStddevFields
  stddevPop: TeamMetricStddevPopFields
  stddevSamp: TeamMetricStddevSampFields
  sum: TeamMetricSumFields
  varPop: TeamMetricVarPopFields
  varSamp: TeamMetricVarSampFields
  variance: TeamMetricVarianceFields
}

"""
order by aggregate values of table "team_metric"
"""
input TeamMetricAggregateOrderBy {
  avg: TeamMetricAvgOrderBy
  count: OrderBy
  max: TeamMetricMaxOrderBy
  min: TeamMetricMinOrderBy
  stddev: TeamMetricStddevOrderBy
  stddevPop: TeamMetricStddevPopOrderBy
  stddevSamp: TeamMetricStddevSampOrderBy
  sum: TeamMetricSumOrderBy
  varPop: TeamMetricVarPopOrderBy
  varSamp: TeamMetricVarSampOrderBy
  variance: TeamMetricVarianceOrderBy
}

"""
input type for inserting array relation for remote table "team_metric"
"""
input TeamMetricArrRelInsertInput {
  data: [TeamMetricInsertInput!]!

  """upsert condition"""
  onConflict: TeamMetricOnConflict
}

"""aggregate avg on columns"""
type TeamMetricAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "team_metric"
"""
input TeamMetricAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "team_metric". All fields are combined with a logical 'AND'.
"""
input TeamMetricBoolExp {
  _and: [TeamMetricBoolExp!]
  _not: TeamMetricBoolExp
  _or: [TeamMetricBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  value: StringComparisonExp
}

"""
unique or primary key constraints on table "team_metric"
"""
enum TeamMetricConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  team_metric_pkey
}

"""
input type for incrementing numeric columns in table "team_metric"
"""
input TeamMetricIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "team_metric"
"""
input TeamMetricInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  value: String
}

"""aggregate max on columns"""
type TeamMetricMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

"""
order by max() on columns of table "team_metric"
"""
input TeamMetricMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

"""aggregate min on columns"""
type TeamMetricMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

"""
order by min() on columns of table "team_metric"
"""
input TeamMetricMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

"""
response of any mutation on the table "team_metric"
"""
type TeamMetricMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeamMetric!]!
}

"""
on_conflict condition type for table "team_metric"
"""
input TeamMetricOnConflict {
  constraint: TeamMetricConstraint!
  updateColumns: [TeamMetricUpdateColumn!]! = []
  where: TeamMetricBoolExp
}

"""Ordering options when selecting data from "team_metric"."""
input TeamMetricOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

"""primary key columns input for table: team_metric"""
input TeamMetricPkColumnsInput {
  id: bigint!
}

"""
select columns of table "team_metric"
"""
enum TeamMetricSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  value
}

"""
input type for updating data in table "team_metric"
"""
input TeamMetricSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

"""aggregate stddev on columns"""
type TeamMetricStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "team_metric"
"""
input TeamMetricStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamMetricStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "team_metric"
"""
input TeamMetricStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamMetricStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "team_metric"
"""
input TeamMetricStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "team_metric"
"""
input TeamMetricStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamMetricStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamMetricStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

"""aggregate sum on columns"""
type TeamMetricSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "team_metric"
"""
input TeamMetricSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "team_metric"
"""
enum TeamMetricUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  value
}

input TeamMetricUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamMetricIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamMetricSetInput

  """filter the rows which have to be updated"""
  where: TeamMetricBoolExp!
}

"""aggregate variance on columns"""
type TeamMetricVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "team_metric"
"""
input TeamMetricVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type TeamMetricVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "team_metric"
"""
input TeamMetricVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamMetricVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "team_metric"
"""
input TeamMetricVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type TeamMinFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tagline: String
  tenantId: bigint
  type: String
  videoId: bigint
}

"""
order by min() on columns of table "team"
"""
input TeamMinOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tagline: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

"""
response of any mutation on the table "team"
"""
type TeamMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Team!]!
}

"""
input type for inserting object relation for remote table "team"
"""
input TeamObjRelInsertInput {
  data: TeamInsertInput!

  """upsert condition"""
  onConflict: TeamOnConflict
}

"""
on_conflict condition type for table "team"
"""
input TeamOnConflict {
  constraint: TeamConstraint!
  updateColumns: [TeamUpdateColumn!]! = []
  where: TeamBoolExp
}

"""Ordering options when selecting data from "team"."""
input TeamOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  canteen: CanteenOrderBy
  canteenId: OrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  cohort: CohortOrderBy
  cohortId: OrderBy
  contentTeamsAggregate: ContentTeamsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  fileUpload: FileUploadOrderBy
  form: FormOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  tagline: OrderBy
  team: TeamOrderBy
  teamEventsAggregate: TeamEventsAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantById: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

"""primary key columns input for table: team"""
input TeamPkColumnsInput {
  id: bigint!
}

"""
select columns of table "team"
"""
enum TeamSelectColumn {
  """column name"""
  canteenId

  """column name"""
  classGroupId

  """column name"""
  cohortId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  currentFinance

  """column name"""
  deletedAt

  """column name"""
  directorsCategoryName

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  managersCategoryName

  """column name"""
  membersCategoryName

  """column name"""
  membershipFees

  """column name"""
  originalCreationDay

  """column name"""
  originalCreationMonth

  """column name"""
  originalCreationYear

  """column name"""
  parentId

  """column name"""
  tagline

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  videoId
}

"""
input type for updating data in table "team"
"""
input TeamSetInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tagline: String
  tenantId: bigint
  type: String
  videoId: bigint
}

"""aggregate stddev on columns"""
type TeamStddevFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

"""
order by stddev() on columns of table "team"
"""
input TeamStddevOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeamStddevPopFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

"""
order by stddevPop() on columns of table "team"
"""
input TeamStddevPopOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeamStddevSampFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

"""
order by stddevSamp() on columns of table "team"
"""
input TeamStddevSampOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""
Streaming cursor of the table "team"
"""
input TeamStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeamStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeamStreamCursorValueInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tagline: String
  tenantId: bigint
  type: String
  videoId: bigint
}

"""aggregate sum on columns"""
type TeamSumFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  currentFinance: Float
  id: bigint
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  videoId: bigint
}

"""
order by sum() on columns of table "team"
"""
input TeamSumOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""
update columns of table "team"
"""
enum TeamUpdateColumn {
  """column name"""
  canteenId

  """column name"""
  classGroupId

  """column name"""
  cohortId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  currentFinance

  """column name"""
  deletedAt

  """column name"""
  directorsCategoryName

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  managersCategoryName

  """column name"""
  membersCategoryName

  """column name"""
  membershipFees

  """column name"""
  originalCreationDay

  """column name"""
  originalCreationMonth

  """column name"""
  originalCreationYear

  """column name"""
  parentId

  """column name"""
  tagline

  """column name"""
  tenantId

  """column name"""
  type

  """column name"""
  videoId
}

input TeamUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeamIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeamSetInput

  """filter the rows which have to be updated"""
  where: TeamBoolExp!
}

"""aggregate variance on columns"""
type TeamVarianceFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

"""
order by variance() on columns of table "team"
"""
input TeamVarianceOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""aggregate varPop on columns"""
type TeamVarPopFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

"""
order by varPop() on columns of table "team"
"""
input TeamVarPopOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""aggregate varSamp on columns"""
type TeamVarSampFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

"""
order by varSamp() on columns of table "team"
"""
input TeamVarSampOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

"""
columns and relationships of "tenant"
"""
type Tenant {
  """An array relationship"""
  actions(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """An array relationship"""
  actorAddresses(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  """An aggregate relationship"""
  actorAddressesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorAddressSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorAddressOrderBy!]

    """filter the rows returned"""
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  """An array relationship"""
  actorBankInfos(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  """An aggregate relationship"""
  actorBankInfosAggregate(
    """distinct select on columns"""
    distinctOn: [ActorBankInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorBankInfoOrderBy!]

    """filter the rows returned"""
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  """An array relationship"""
  actorFinances(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): [ActorFinance!]!

  """An aggregate relationship"""
  actorFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorFinanceOrderBy!]

    """filter the rows returned"""
    where: ActorFinanceBoolExp
  ): ActorFinanceAggregate!

  """An array relationship"""
  actorImages(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): [ActorImage!]!

  """An aggregate relationship"""
  actorImagesAggregate(
    """distinct select on columns"""
    distinctOn: [ActorImageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorImageOrderBy!]

    """filter the rows returned"""
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  """An array relationship"""
  actors(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): [Actor!]!

  """An aggregate relationship"""
  actorsAggregate(
    """distinct select on columns"""
    distinctOn: [ActorSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActorOrderBy!]

    """filter the rows returned"""
    where: ActorBoolExp
  ): ActorAggregate!

  """An array relationship"""
  botInfos(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): [BotInfo!]!

  """An aggregate relationship"""
  botInfosAggregate(
    """distinct select on columns"""
    distinctOn: [BotInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [BotInfoOrderBy!]

    """filter the rows returned"""
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  """An array relationship"""
  campuses(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): [Campus!]!

  """An aggregate relationship"""
  campusesAggregate(
    """distinct select on columns"""
    distinctOn: [CampusSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CampusOrderBy!]

    """filter the rows returned"""
    where: CampusBoolExp
  ): CampusAggregate!

  """An array relationship"""
  canteenFoods(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  """An aggregate relationship"""
  canteenFoodsAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenFoodSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenFoodOrderBy!]

    """filter the rows returned"""
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  """An array relationship"""
  canteenMenus(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  """An aggregate relationship"""
  canteenMenusAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenMenuSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenMenuOrderBy!]

    """filter the rows returned"""
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  """An array relationship"""
  canteens(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): [Canteen!]!

  """An aggregate relationship"""
  canteensAggregate(
    """distinct select on columns"""
    distinctOn: [CanteenSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CanteenOrderBy!]

    """filter the rows returned"""
    where: CanteenBoolExp
  ): CanteenAggregate!

  """An array relationship"""
  changeRoles(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """An aggregate relationship"""
  changeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!

  """An array relationship"""
  classGroupTeachers(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  """An aggregate relationship"""
  classGroupTeachersAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  """An array relationship"""
  classGroups(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  """An aggregate relationship"""
  classGroupsAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupOrderBy!]

    """filter the rows returned"""
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  """An array relationship"""
  cohorts(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): [Cohort!]!

  """An aggregate relationship"""
  cohortsAggregate(
    """distinct select on columns"""
    distinctOn: [CohortSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CohortOrderBy!]

    """filter the rows returned"""
    where: CohortBoolExp
  ): CohortAggregate!

  """An array relationship"""
  contentEdits(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): [ContentEdit!]!

  """An aggregate relationship"""
  contentEditsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentEditOrderBy!]

    """filter the rows returned"""
    where: ContentEditBoolExp
  ): ContentEditAggregate!

  """An array relationship"""
  contentMasters(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): [ContentMaster!]!

  """An aggregate relationship"""
  contentMastersAggregate(
    """distinct select on columns"""
    distinctOn: [ContentMasterSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentMasterOrderBy!]

    """filter the rows returned"""
    where: ContentMasterBoolExp
  ): ContentMasterAggregate!

  """An array relationship"""
  contents(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): [Content!]!

  """An aggregate relationship"""
  contentsAggregate(
    """distinct select on columns"""
    distinctOn: [ContentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ContentOrderBy!]

    """filter the rows returned"""
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  """An array relationship"""
  documentEdits(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): [DocumentEdit!]!

  """An aggregate relationship"""
  documentEditsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentEditOrderBy!]

    """filter the rows returned"""
    where: DocumentEditBoolExp
  ): DocumentEditAggregate!

  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): [Document!]!

  """An aggregate relationship"""
  documentsAggregate(
    """distinct select on columns"""
    distinctOn: [DocumentSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DocumentOrderBy!]

    """filter the rows returned"""
    where: DocumentBoolExp
  ): DocumentAggregate!
  domain: String!

  """An array relationship"""
  eventApprovalSteps(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  """An aggregate relationship"""
  eventApprovalStepsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalStepSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalStepOrderBy!]

    """filter the rows returned"""
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  """An array relationship"""
  eventApprovals(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  """An aggregate relationship"""
  eventApprovalsAggregate(
    """distinct select on columns"""
    distinctOn: [EventApprovalSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventApprovalOrderBy!]

    """filter the rows returned"""
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  """An array relationship"""
  eventAttendances(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): [EventAttendance!]!

  """An aggregate relationship"""
  eventAttendancesAggregate(
    """distinct select on columns"""
    distinctOn: [EventAttendanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventAttendanceOrderBy!]

    """filter the rows returned"""
    where: EventAttendanceBoolExp
  ): EventAttendanceAggregate!

  """An array relationship"""
  eventChangeRoles(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): [EventChangeRole!]!

  """An aggregate relationship"""
  eventChangeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventChangeRoleOrderBy!]

    """filter the rows returned"""
    where: EventChangeRoleBoolExp
  ): EventChangeRoleAggregate!

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """An array relationship"""
  eventRoles(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """An aggregate relationship"""
  eventRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): EventRoleAggregate!
  eventValidationFormId: bigint

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!

  """An array relationship"""
  expenses(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): [Expense!]!

  """An aggregate relationship"""
  expensesAggregate(
    """distinct select on columns"""
    distinctOn: [ExpenseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ExpenseOrderBy!]

    """filter the rows returned"""
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  """An array relationship"""
  favorites(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): [Favorite!]!

  """An aggregate relationship"""
  favoritesAggregate(
    """distinct select on columns"""
    distinctOn: [FavoriteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FavoriteOrderBy!]

    """filter the rows returned"""
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  """An object relationship"""
  fileUpload: FileUpload

  """An array relationship"""
  fileUploads(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): [FileUpload!]!

  """An aggregate relationship"""
  fileUploadsAggregate(
    """distinct select on columns"""
    distinctOn: [FileUploadSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FileUploadOrderBy!]

    """filter the rows returned"""
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  """An array relationship"""
  follows(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): [Follow!]!

  """An aggregate relationship"""
  followsAggregate(
    """distinct select on columns"""
    distinctOn: [FollowSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FollowOrderBy!]

    """filter the rows returned"""
    where: FollowBoolExp
  ): FollowAggregate!

  """An object relationship"""
  form: Form

  """An array relationship"""
  formEdits(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): [FormEdit!]!

  """An aggregate relationship"""
  formEditsAggregate(
    """distinct select on columns"""
    distinctOn: [FormEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormEditOrderBy!]

    """filter the rows returned"""
    where: FormEditBoolExp
  ): FormEditAggregate!

  """An array relationship"""
  formSubmissionEdits(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): [FormSubmissionEdit!]!

  """An aggregate relationship"""
  formSubmissionEditsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionEditOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionEditBoolExp
  ): FormSubmissionEditAggregate!

  """An array relationship"""
  formSubmissions(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  """An aggregate relationship"""
  formSubmissionsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSubmissionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormSubmissionOrderBy!]

    """filter the rows returned"""
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  """An array relationship"""
  forms(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): [Form!]!

  """An aggregate relationship"""
  formsAggregate(
    """distinct select on columns"""
    distinctOn: [FormSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [FormOrderBy!]

    """filter the rows returned"""
    where: FormBoolExp
  ): FormAggregate!
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An array relationship"""
  individuals(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): [Individual!]!

  """An aggregate relationship"""
  individualsAggregate(
    """distinct select on columns"""
    distinctOn: [IndividualSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IndividualOrderBy!]

    """filter the rows returned"""
    where: IndividualBoolExp
  ): IndividualAggregate!

  """An array relationship"""
  issues(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): [Issue!]!

  """An aggregate relationship"""
  issuesAggregate(
    """distinct select on columns"""
    distinctOn: [IssueSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [IssueOrderBy!]

    """filter the rows returned"""
    where: IssueBoolExp
  ): IssueAggregate!
  logoId: bigint
  name: String!
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean!
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String!

  """An array relationship"""
  poles(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): [Pole!]!

  """An aggregate relationship"""
  polesAggregate(
    """distinct select on columns"""
    distinctOn: [PoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PoleOrderBy!]

    """filter the rows returned"""
    where: PoleBoolExp
  ): PoleAggregate!

  """An array relationship"""
  projectRoles(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): [ProjectRole!]!

  """An aggregate relationship"""
  projectRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectRoleOrderBy!]

    """filter the rows returned"""
    where: ProjectRoleBoolExp
  ): ProjectRoleAggregate!

  """An array relationship"""
  projects(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): [Project!]!

  """An aggregate relationship"""
  projectsAggregate(
    """distinct select on columns"""
    distinctOn: [ProjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProjectOrderBy!]

    """filter the rows returned"""
    where: ProjectBoolExp
  ): ProjectAggregate!

  """An array relationship"""
  reactions(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): [Reaction!]!

  """An aggregate relationship"""
  reactionsAggregate(
    """distinct select on columns"""
    distinctOn: [ReactionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReactionOrderBy!]

    """filter the rows returned"""
    where: ReactionBoolExp
  ): ReactionAggregate!

  """An array relationship"""
  reports(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): [Report!]!

  """An aggregate relationship"""
  reportsAggregate(
    """distinct select on columns"""
    distinctOn: [ReportSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ReportOrderBy!]

    """filter the rows returned"""
    where: ReportBoolExp
  ): ReportAggregate!

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """An aggregate relationship"""
  rolesAggregate(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): RoleAggregate!

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): [Session!]!

  """An aggregate relationship"""
  sessionsAggregate(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): SessionAggregate!

  """An array relationship"""
  shortcuts(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): [Shortcut!]!

  """An aggregate relationship"""
  shortcutsAggregate(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  """An array relationship"""
  socials(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): [Social!]!

  """An aggregate relationship"""
  socialsAggregate(
    """distinct select on columns"""
    distinctOn: [SocialSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SocialOrderBy!]

    """filter the rows returned"""
    where: SocialBoolExp
  ): SocialAggregate!

  """An array relationship"""
  subjects(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): [Subject!]!

  """An aggregate relationship"""
  subjectsAggregate(
    """distinct select on columns"""
    distinctOn: [SubjectSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SubjectOrderBy!]

    """filter the rows returned"""
    where: SubjectBoolExp
  ): SubjectAggregate!

  """An array relationship"""
  tags(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): [Tag!]!

  """An aggregate relationship"""
  tagsAggregate(
    """distinct select on columns"""
    distinctOn: [TagSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TagOrderBy!]

    """filter the rows returned"""
    where: TagBoolExp
  ): TagAggregate!

  """An object relationship"""
  team: Team

  """An array relationship"""
  teamFinanceEdits(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): [TeamFinanceEdit!]!

  """An aggregate relationship"""
  teamFinanceEditsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceEditSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceEditOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceEditBoolExp
  ): TeamFinanceEditAggregate!

  """An array relationship"""
  teamFinances(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): [TeamFinance!]!

  """An aggregate relationship"""
  teamFinancesAggregate(
    """distinct select on columns"""
    distinctOn: [TeamFinanceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamFinanceOrderBy!]

    """filter the rows returned"""
    where: TeamFinanceBoolExp
  ): TeamFinanceAggregate!
  teamId: bigint

  """An array relationship"""
  teamJoins(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """An aggregate relationship"""
  teamJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """An array relationship"""
  teamMembers(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  """An aggregate relationship"""
  teamMembersAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  """An array relationship"""
  teamMetrics(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  """An aggregate relationship"""
  teamMetricsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMetricSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMetricOrderBy!]

    """filter the rows returned"""
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  """An array relationship"""
  teams(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): [Team!]!

  """An aggregate relationship"""
  teamsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamOrderBy!]

    """filter the rows returned"""
    where: TeamBoolExp
  ): TeamAggregate!

  """An array relationship"""
  userInfos(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): [UserInfo!]!

  """An aggregate relationship"""
  userInfosAggregate(
    """distinct select on columns"""
    distinctOn: [UserInfoSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UserInfoOrderBy!]

    """filter the rows returned"""
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  """An array relationship"""
  validations(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): [Validation!]!

  """An aggregate relationship"""
  validationsAggregate(
    """distinct select on columns"""
    distinctOn: [ValidationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ValidationOrderBy!]

    """filter the rows returned"""
    where: ValidationBoolExp
  ): ValidationAggregate!

  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): [Vote!]!

  """An aggregate relationship"""
  votesAggregate(
    """distinct select on columns"""
    distinctOn: [VoteSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [VoteOrderBy!]

    """filter the rows returned"""
    where: VoteBoolExp
  ): VoteAggregate!
}

"""
aggregated selection of "tenant"
"""
type TenantAggregate {
  aggregate: TenantAggregateFields
  nodes: [Tenant!]!
}

input TenantAggregateBoolExp {
  bool_and: tenantAggregateBoolExpBool_and
  bool_or: tenantAggregateBoolExpBool_or
  count: tenantAggregateBoolExpCount
}

input tenantAggregateBoolExpBool_and {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpBool_or {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpCount {
  arguments: [TenantSelectColumn!]
  distinct: Boolean
  filter: TenantBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "tenant"
"""
type TenantAggregateFields {
  avg: TenantAvgFields
  count(columns: [TenantSelectColumn!], distinct: Boolean): Int!
  max: TenantMaxFields
  min: TenantMinFields
  stddev: TenantStddevFields
  stddevPop: TenantStddevPopFields
  stddevSamp: TenantStddevSampFields
  sum: TenantSumFields
  varPop: TenantVarPopFields
  varSamp: TenantVarSampFields
  variance: TenantVarianceFields
}

"""
order by aggregate values of table "tenant"
"""
input TenantAggregateOrderBy {
  avg: TenantAvgOrderBy
  count: OrderBy
  max: TenantMaxOrderBy
  min: TenantMinOrderBy
  stddev: TenantStddevOrderBy
  stddevPop: TenantStddevPopOrderBy
  stddevSamp: TenantStddevSampOrderBy
  sum: TenantSumOrderBy
  varPop: TenantVarPopOrderBy
  varSamp: TenantVarSampOrderBy
  variance: TenantVarianceOrderBy
}

"""
input type for inserting array relation for remote table "tenant"
"""
input TenantArrRelInsertInput {
  data: [TenantInsertInput!]!

  """upsert condition"""
  onConflict: TenantOnConflict
}

"""aggregate avg on columns"""
type TenantAvgFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  logoId: Float
  teamId: Float
}

"""
order by avg() on columns of table "tenant"
"""
input TenantAvgOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

"""
Boolean expression to filter rows from the table "tenant". All fields are combined with a logical 'AND'.
"""
input TenantBoolExp {
  _and: [TenantBoolExp!]
  _not: TenantBoolExp
  _or: [TenantBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorFinances: ActorFinanceBoolExp
  actorFinancesAggregate: ActorFinanceAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  canteens: CanteenBoolExp
  canteensAggregate: CanteenAggregateBoolExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  classGroups: ClassGroupBoolExp
  classGroupsAggregate: ClassGroupAggregateBoolExp
  cohorts: CohortBoolExp
  cohortsAggregate: CohortAggregateBoolExp
  contentEdits: ContentEditBoolExp
  contentEditsAggregate: ContentEditAggregateBoolExp
  contentMasters: ContentMasterBoolExp
  contentMastersAggregate: ContentMasterAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  documentEdits: DocumentEditBoolExp
  documentEditsAggregate: DocumentEditAggregateBoolExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  domain: StringComparisonExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventAttendances: EventAttendanceBoolExp
  eventAttendancesAggregate: EventAttendanceAggregateBoolExp
  eventChangeRoles: EventChangeRoleBoolExp
  eventChangeRolesAggregate: EventChangeRoleAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  eventValidationFormId: BigintComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  fileUpload: FileUploadBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  form: FormBoolExp
  formEdits: FormEditBoolExp
  formEditsAggregate: FormEditAggregateBoolExp
  formSubmissionEdits: FormSubmissionEditBoolExp
  formSubmissionEditsAggregate: FormSubmissionEditAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individuals: IndividualBoolExp
  individualsAggregate: IndividualAggregateBoolExp
  issues: IssueBoolExp
  issuesAggregate: IssueAggregateBoolExp
  logoId: BigintComparisonExp
  name: StringComparisonExp
  oidcInfoOidcCallbackUri: StringComparisonExp
  oidcInfoOidcClientId: StringComparisonExp
  oidcInfoOidcClientSecret: StringComparisonExp
  oidcInfoOidcDiscoveryUrl: StringComparisonExp
  oidcInfoOidcEnabled: BooleanComparisonExp
  oidcInfoOidcName: StringComparisonExp
  oidcInfoOidcScopes: StringComparisonExp
  pointName: StringComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projectRoles: ProjectRoleBoolExp
  projectRolesAggregate: ProjectRoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  subjects: SubjectBoolExp
  subjectsAggregate: SubjectAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  team: TeamBoolExp
  teamFinanceEdits: TeamFinanceEditBoolExp
  teamFinanceEditsAggregate: TeamFinanceEditAggregateBoolExp
  teamFinances: TeamFinanceBoolExp
  teamFinancesAggregate: TeamFinanceAggregateBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamMetrics: TeamMetricBoolExp
  teamMetricsAggregate: TeamMetricAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  userInfos: UserInfoBoolExp
  userInfosAggregate: UserInfoAggregateBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

"""
unique or primary key constraints on table "tenant"
"""
enum TenantConstraint {
  """
  unique or primary key constraint on columns "domain"
  """
  tenant_domain_unique

  """
  unique or primary key constraint on columns "event_validation_form_id"
  """
  tenant_event_validation_form_id_unique

  """
  unique or primary key constraint on columns "id"
  """
  tenant_pkey

  """
  unique or primary key constraint on columns "team_id"
  """
  tenant_team_id_unique
}

"""
input type for incrementing numeric columns in table "tenant"
"""
input TenantIncInput {
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
  logoId: bigint
  teamId: bigint
}

"""
input type for inserting data into table "tenant"
"""
input TenantInsertInput {
  actions: ActionArrRelInsertInput
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorFinances: ActorFinanceArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actors: ActorArrRelInsertInput
  botInfos: BotInfoArrRelInsertInput
  campuses: CampusArrRelInsertInput
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  canteens: CanteenArrRelInsertInput
  changeRoles: ChangeRoleArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  classGroups: ClassGroupArrRelInsertInput
  cohorts: CohortArrRelInsertInput
  contentEdits: ContentEditArrRelInsertInput
  contentMasters: ContentMasterArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documentEdits: DocumentEditArrRelInsertInput
  documents: DocumentArrRelInsertInput
  domain: String
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventAttendances: EventAttendanceArrRelInsertInput
  eventChangeRoles: EventChangeRoleArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  eventValidationFormId: bigint
  events: EventArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  favorites: FavoriteArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  follows: FollowArrRelInsertInput
  form: FormObjRelInsertInput
  formEdits: FormEditArrRelInsertInput
  formSubmissionEdits: FormSubmissionEditArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  id: bigint
  individual: IndividualObjRelInsertInput
  individuals: IndividualArrRelInsertInput
  issues: IssueArrRelInsertInput
  logoId: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  poles: PoleArrRelInsertInput
  projectRoles: ProjectRoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  roles: RoleArrRelInsertInput
  sessions: SessionArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  socials: SocialArrRelInsertInput
  subjects: SubjectArrRelInsertInput
  tags: TagArrRelInsertInput
  team: TeamObjRelInsertInput
  teamFinanceEdits: TeamFinanceEditArrRelInsertInput
  teamFinances: TeamFinanceArrRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamMetrics: TeamMetricArrRelInsertInput
  teams: TeamArrRelInsertInput
  userInfos: UserInfoArrRelInsertInput
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

"""aggregate max on columns"""
type TenantMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  logoId: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

"""
order by max() on columns of table "tenant"
"""
input TenantMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  teamId: OrderBy
}

"""aggregate min on columns"""
type TenantMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  logoId: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

"""
order by min() on columns of table "tenant"
"""
input TenantMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  teamId: OrderBy
}

"""
response of any mutation on the table "tenant"
"""
type TenantMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Tenant!]!
}

"""
input type for inserting object relation for remote table "tenant"
"""
input TenantObjRelInsertInput {
  data: TenantInsertInput!

  """upsert condition"""
  onConflict: TenantOnConflict
}

"""
on_conflict condition type for table "tenant"
"""
input TenantOnConflict {
  constraint: TenantConstraint!
  updateColumns: [TenantUpdateColumn!]! = []
  where: TenantBoolExp
}

"""Ordering options when selecting data from "tenant"."""
input TenantOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorFinancesAggregate: ActorFinanceAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  canteensAggregate: CanteenAggregateOrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  classGroupsAggregate: ClassGroupAggregateOrderBy
  cohortsAggregate: CohortAggregateOrderBy
  contentEditsAggregate: ContentEditAggregateOrderBy
  contentMastersAggregate: ContentMasterAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentEditsAggregate: DocumentEditAggregateOrderBy
  documentsAggregate: DocumentAggregateOrderBy
  domain: OrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventAttendancesAggregate: EventAttendanceAggregateOrderBy
  eventChangeRolesAggregate: EventChangeRoleAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventValidationFormId: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  fileUpload: FileUploadOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  form: FormOrderBy
  formEditsAggregate: FormEditAggregateOrderBy
  formSubmissionEditsAggregate: FormSubmissionEditAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualsAggregate: IndividualAggregateOrderBy
  issuesAggregate: IssueAggregateOrderBy
  logoId: OrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcEnabled: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectRolesAggregate: ProjectRoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  sessionsAggregate: SessionAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  subjectsAggregate: SubjectAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  team: TeamOrderBy
  teamFinanceEditsAggregate: TeamFinanceEditAggregateOrderBy
  teamFinancesAggregate: TeamFinanceAggregateOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamMetricsAggregate: TeamMetricAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  userInfosAggregate: UserInfoAggregateOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

"""primary key columns input for table: tenant"""
input TenantPkColumnsInput {
  id: bigint!
}

"""
select columns of table "tenant"
"""
enum TenantSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  domain

  """column name"""
  eventValidationFormId

  """column name"""
  id

  """column name"""
  logoId

  """column name"""
  name

  """column name"""
  oidcInfoOidcCallbackUri

  """column name"""
  oidcInfoOidcClientId

  """column name"""
  oidcInfoOidcClientSecret

  """column name"""
  oidcInfoOidcDiscoveryUrl

  """column name"""
  oidcInfoOidcEnabled

  """column name"""
  oidcInfoOidcName

  """column name"""
  oidcInfoOidcScopes

  """column name"""
  pointName

  """column name"""
  teamId
}

"""
select "tenantAggregateBoolExpBool_andArgumentsColumns" columns of table "tenant"
"""
enum TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  oidcInfoOidcEnabled
}

"""
select "tenantAggregateBoolExpBool_orArgumentsColumns" columns of table "tenant"
"""
enum TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  oidcInfoOidcEnabled
}

"""
input type for updating data in table "tenant"
"""
input TenantSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  logoId: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

"""aggregate stddev on columns"""
type TenantStddevFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  logoId: Float
  teamId: Float
}

"""
order by stddev() on columns of table "tenant"
"""
input TenantStddevOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

"""aggregate stddevPop on columns"""
type TenantStddevPopFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  logoId: Float
  teamId: Float
}

"""
order by stddevPop() on columns of table "tenant"
"""
input TenantStddevPopOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TenantStddevSampFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  logoId: Float
  teamId: Float
}

"""
order by stddevSamp() on columns of table "tenant"
"""
input TenantStddevSampOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

"""
Streaming cursor of the table "tenant"
"""
input TenantStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TenantStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TenantStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  logoId: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

"""aggregate sum on columns"""
type TenantSumFields {
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
  logoId: bigint
  teamId: bigint
}

"""
order by sum() on columns of table "tenant"
"""
input TenantSumOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

"""
update columns of table "tenant"
"""
enum TenantUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  domain

  """column name"""
  eventValidationFormId

  """column name"""
  id

  """column name"""
  logoId

  """column name"""
  name

  """column name"""
  oidcInfoOidcCallbackUri

  """column name"""
  oidcInfoOidcClientId

  """column name"""
  oidcInfoOidcClientSecret

  """column name"""
  oidcInfoOidcDiscoveryUrl

  """column name"""
  oidcInfoOidcEnabled

  """column name"""
  oidcInfoOidcName

  """column name"""
  oidcInfoOidcScopes

  """column name"""
  pointName

  """column name"""
  teamId
}

input TenantUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TenantIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TenantSetInput

  """filter the rows which have to be updated"""
  where: TenantBoolExp!
}

"""aggregate variance on columns"""
type TenantVarianceFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  logoId: Float
  teamId: Float
}

"""
order by variance() on columns of table "tenant"
"""
input TenantVarianceOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

"""aggregate varPop on columns"""
type TenantVarPopFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  logoId: Float
  teamId: Float
}

"""
order by varPop() on columns of table "tenant"
"""
input TenantVarPopOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

"""aggregate varSamp on columns"""
type TenantVarSampFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  logoId: Float
  teamId: Float
}

"""
order by varSamp() on columns of table "tenant"
"""
input TenantVarSampOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  logoId: OrderBy
  teamId: OrderBy
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user_info"
"""
type UserInfo {
  """An array relationship"""
  actions(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): [Action!]!

  """An aggregate relationship"""
  actionsAggregate(
    """distinct select on columns"""
    distinctOn: [ActionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ActionOrderBy!]

    """filter the rows returned"""
    where: ActionBoolExp
  ): ActionAggregate!

  """An array relationship"""
  changeRoles(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): [ChangeRole!]!

  """An aggregate relationship"""
  changeRolesAggregate(
    """distinct select on columns"""
    distinctOn: [ChangeRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ChangeRoleOrderBy!]

    """filter the rows returned"""
    where: ChangeRoleBoolExp
  ): ChangeRoleAggregate!

  """An array relationship"""
  classGroupTeachers(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  """An aggregate relationship"""
  classGroupTeachersAggregate(
    """distinct select on columns"""
    distinctOn: [ClassGroupTeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ClassGroupTeacherOrderBy!]

    """filter the rows returned"""
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz

  """An array relationship"""
  eventJoins(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): [EventJoin!]!

  """An aggregate relationship"""
  eventJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [EventJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventJoinOrderBy!]

    """filter the rows returned"""
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  """An array relationship"""
  eventRoles(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): [EventRole!]!

  """An aggregate relationship"""
  eventRolesAggregate(
    """distinct select on columns"""
    distinctOn: [EventRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventRoleOrderBy!]

    """filter the rows returned"""
    where: EventRoleBoolExp
  ): EventRoleAggregate!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): [Event!]!

  """An aggregate relationship"""
  eventsAggregate(
    """distinct select on columns"""
    distinctOn: [EventSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [EventOrderBy!]

    """filter the rows returned"""
    where: EventBoolExp
  ): EventAggregate!
  finishedIntroduction: Boolean!
  finishedOnboarding: Boolean!
  firstName: String!
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual

  """An object relationship"""
  individualById: Individual
  lastName: String!
  middleNames: _text!
  notificationSettingsAdminEventValidationApproved: smallint!
  notificationSettingsAdminEventValidationRejected: smallint!
  notificationSettingsAdminEventValidationStarted: smallint!
  notificationSettingsAdminEventValidationStep: smallint!
  notificationSettingsAdminReportCreated: smallint!
  notificationSettingsAdminRoleUpdated: smallint!
  notificationSettingsAdminTeamLegalFileUpdated: smallint!
  notificationSettingsAdminTeamSocialUpdated: smallint!
  notificationSettingsAdminThreadAssigned: smallint!
  notificationSettingsAdminThreadAssignedStale: smallint!
  notificationSettingsAdminThreadAssignedStaleThreshold: Int!
  notificationSettingsAdminThreadStale: smallint!
  notificationSettingsAdminThreadStaleThreshold: Int!
  notificationSettingsBadgeUnlocked: smallint!
  notificationSettingsBlogSubscribedUpdated: smallint!
  notificationSettingsContentRemoved: smallint!
  notificationSettingsEventCreated: smallint!
  notificationSettingsEventManagedApproved: smallint!
  notificationSettingsEventManagedRegistrationCreated: smallint!
  notificationSettingsEventManagedRejected: smallint!
  notificationSettingsEventSubscribedUpdated: smallint!
  notificationSettingsMentionned: smallint!
  notificationSettingsRoleUpdated: smallint!
  notificationSettingsTeamManagedEventUpdated: smallint!
  notificationSettingsTeamManagedFormUpdated: smallint!
  notificationSettingsTeamManagedMemberRoleUpdated: smallint!
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint!
  notificationSettingsTeamSubscribedEventCreated: smallint!
  notificationSettingsThreadSubscribedAnswered: smallint!
  notificationSettingsThreadSubscribedUpdated: smallint!

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): [Session!]!

  """An aggregate relationship"""
  sessionsAggregate(
    """distinct select on columns"""
    distinctOn: [SessionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [SessionOrderBy!]

    """filter the rows returned"""
    where: SessionBoolExp
  ): SessionAggregate!
  settingsDarkModeActivated: Boolean!
  settingsGdprEndOfLifeAnonymize: Boolean!
  settingsGdprEndOfLifeExport: Boolean!

  """An array relationship"""
  shortcuts(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): [Shortcut!]!

  """An aggregate relationship"""
  shortcutsAggregate(
    """distinct select on columns"""
    distinctOn: [ShortcutSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ShortcutOrderBy!]

    """filter the rows returned"""
    where: ShortcutBoolExp
  ): ShortcutAggregate!
  statsActionStreak: smallint!
  statsCommentCount: smallint!
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int!
  statsPostCount: smallint!
  statsPostStreak: smallint!
  statsReplyCount: smallint!
  statsReplyStreak: smallint!
  statsUploadCount: smallint!

  """An array relationship"""
  teamJoins(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  """An aggregate relationship"""
  teamJoinsAggregate(
    """distinct select on columns"""
    distinctOn: [TeamJoinSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamJoinOrderBy!]

    """filter the rows returned"""
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  """An array relationship"""
  teamMembers(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  """An aggregate relationship"""
  teamMembersAggregate(
    """distinct select on columns"""
    distinctOn: [TeamMemberSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeamMemberOrderBy!]

    """filter the rows returned"""
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
}

"""
aggregated selection of "user_info"
"""
type UserInfoAggregate {
  aggregate: UserInfoAggregateFields
  nodes: [UserInfo!]!
}

input UserInfoAggregateBoolExp {
  bool_and: userInfoAggregateBoolExpBool_and
  bool_or: userInfoAggregateBoolExpBool_or
  count: userInfoAggregateBoolExpCount
}

input userInfoAggregateBoolExpBool_and {
  arguments: UserInfoSelectColumnUserInfoAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: BooleanComparisonExp!
}

input userInfoAggregateBoolExpBool_or {
  arguments: UserInfoSelectColumnUserInfoAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: BooleanComparisonExp!
}

input userInfoAggregateBoolExpCount {
  arguments: [UserInfoSelectColumn!]
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "user_info"
"""
type UserInfoAggregateFields {
  avg: UserInfoAvgFields
  count(columns: [UserInfoSelectColumn!], distinct: Boolean): Int!
  max: UserInfoMaxFields
  min: UserInfoMinFields
  stddev: UserInfoStddevFields
  stddevPop: UserInfoStddevPopFields
  stddevSamp: UserInfoStddevSampFields
  sum: UserInfoSumFields
  varPop: UserInfoVarPopFields
  varSamp: UserInfoVarSampFields
  variance: UserInfoVarianceFields
}

"""
order by aggregate values of table "user_info"
"""
input UserInfoAggregateOrderBy {
  avg: UserInfoAvgOrderBy
  count: OrderBy
  max: UserInfoMaxOrderBy
  min: UserInfoMinOrderBy
  stddev: UserInfoStddevOrderBy
  stddevPop: UserInfoStddevPopOrderBy
  stddevSamp: UserInfoStddevSampOrderBy
  sum: UserInfoSumOrderBy
  varPop: UserInfoVarPopOrderBy
  varSamp: UserInfoVarSampOrderBy
  variance: UserInfoVarianceOrderBy
}

"""
input type for inserting array relation for remote table "user_info"
"""
input UserInfoArrRelInsertInput {
  data: [UserInfoInsertInput!]!

  """upsert condition"""
  onConflict: UserInfoOnConflict
}

"""aggregate avg on columns"""
type UserInfoAvgFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

"""
order by avg() on columns of table "user_info"
"""
input UserInfoAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "user_info". All fields are combined with a logical 'AND'.
"""
input UserInfoBoolExp {
  _and: [UserInfoBoolExp!]
  _not: UserInfoBoolExp
  _or: [UserInfoBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  changeRoles: ChangeRoleBoolExp
  changeRolesAggregate: ChangeRoleAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  customizationColor: StringComparisonExp
  customizationSignature: StringComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventRoles: EventRoleBoolExp
  eventRolesAggregate: EventRoleAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  finishedIntroduction: BooleanComparisonExp
  finishedOnboarding: BooleanComparisonExp
  firstName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualById: IndividualBoolExp
  lastName: StringComparisonExp
  middleNames: _textComparisonExp
  notificationSettingsAdminEventValidationApproved: SmallintComparisonExp
  notificationSettingsAdminEventValidationRejected: SmallintComparisonExp
  notificationSettingsAdminEventValidationStarted: SmallintComparisonExp
  notificationSettingsAdminEventValidationStep: SmallintComparisonExp
  notificationSettingsAdminReportCreated: SmallintComparisonExp
  notificationSettingsAdminRoleUpdated: SmallintComparisonExp
  notificationSettingsAdminTeamLegalFileUpdated: SmallintComparisonExp
  notificationSettingsAdminTeamSocialUpdated: SmallintComparisonExp
  notificationSettingsAdminThreadAssigned: SmallintComparisonExp
  notificationSettingsAdminThreadAssignedStale: SmallintComparisonExp
  notificationSettingsAdminThreadAssignedStaleThreshold: IntComparisonExp
  notificationSettingsAdminThreadStale: SmallintComparisonExp
  notificationSettingsAdminThreadStaleThreshold: IntComparisonExp
  notificationSettingsBadgeUnlocked: SmallintComparisonExp
  notificationSettingsBlogSubscribedUpdated: SmallintComparisonExp
  notificationSettingsContentRemoved: SmallintComparisonExp
  notificationSettingsEventCreated: SmallintComparisonExp
  notificationSettingsEventManagedApproved: SmallintComparisonExp
  notificationSettingsEventManagedRegistrationCreated: SmallintComparisonExp
  notificationSettingsEventManagedRejected: SmallintComparisonExp
  notificationSettingsEventSubscribedUpdated: SmallintComparisonExp
  notificationSettingsMentionned: SmallintComparisonExp
  notificationSettingsRoleUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedEventUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedFormUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedMemberRoleUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedMembershipRequestUpdated: SmallintComparisonExp
  notificationSettingsTeamSubscribedEventCreated: SmallintComparisonExp
  notificationSettingsThreadSubscribedAnswered: SmallintComparisonExp
  notificationSettingsThreadSubscribedUpdated: SmallintComparisonExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  settingsDarkModeActivated: BooleanComparisonExp
  settingsGdprEndOfLifeAnonymize: BooleanComparisonExp
  settingsGdprEndOfLifeExport: BooleanComparisonExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  statsActionStreak: SmallintComparisonExp
  statsCommentCount: SmallintComparisonExp
  statsLastActionAt: TimestamptzComparisonExp
  statsLastComment: TimestamptzComparisonExp
  statsLastPostAt: TimestamptzComparisonExp
  statsLastReplyAt: TimestamptzComparisonExp
  statsPoints: IntComparisonExp
  statsPostCount: SmallintComparisonExp
  statsPostStreak: SmallintComparisonExp
  statsReplyCount: SmallintComparisonExp
  statsReplyStreak: SmallintComparisonExp
  statsUploadCount: SmallintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

"""
unique or primary key constraints on table "user_info"
"""
enum UserInfoConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_info_pkey
}

"""
input type for incrementing numeric columns in table "user_info"
"""
input UserInfoIncInput {
  createdById: bigint
  id: bigint
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

"""
input type for inserting data into table "user_info"
"""
input UserInfoInsertInput {
  actions: ActionArrRelInsertInput
  changeRoles: ChangeRoleArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  eventJoins: EventJoinArrRelInsertInput
  eventRoles: EventRoleArrRelInsertInput
  events: EventArrRelInsertInput
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualById: IndividualObjRelInsertInput
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  sessions: SessionArrRelInsertInput
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  shortcuts: ShortcutArrRelInsertInput
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

"""aggregate max on columns"""
type UserInfoMaxFields {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

"""
order by max() on columns of table "user_info"
"""
input UserInfoMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""aggregate min on columns"""
type UserInfoMinFields {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

"""
order by min() on columns of table "user_info"
"""
input UserInfoMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""
response of any mutation on the table "user_info"
"""
type UserInfoMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [UserInfo!]!
}

"""
input type for inserting object relation for remote table "user_info"
"""
input UserInfoObjRelInsertInput {
  data: UserInfoInsertInput!

  """upsert condition"""
  onConflict: UserInfoOnConflict
}

"""
on_conflict condition type for table "user_info"
"""
input UserInfoOnConflict {
  constraint: UserInfoConstraint!
  updateColumns: [UserInfoUpdateColumn!]! = []
  where: UserInfoBoolExp
}

"""Ordering options when selecting data from "user_info"."""
input UserInfoOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  changeRolesAggregate: ChangeRoleAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventRolesAggregate: EventRoleAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  finishedIntroduction: OrderBy
  finishedOnboarding: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualById: IndividualOrderBy
  lastName: OrderBy
  middleNames: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  sessionsAggregate: SessionAggregateOrderBy
  settingsDarkModeActivated: OrderBy
  settingsGdprEndOfLifeAnonymize: OrderBy
  settingsGdprEndOfLifeExport: OrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

"""primary key columns input for table: user_info"""
input UserInfoPkColumnsInput {
  id: bigint!
}

"""
select columns of table "user_info"
"""
enum UserInfoSelectColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  customizationColor

  """column name"""
  customizationSignature

  """column name"""
  deletedAt

  """column name"""
  finishedIntroduction

  """column name"""
  finishedOnboarding

  """column name"""
  firstName

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastName

  """column name"""
  middleNames

  """column name"""
  notificationSettingsAdminEventValidationApproved

  """column name"""
  notificationSettingsAdminEventValidationRejected

  """column name"""
  notificationSettingsAdminEventValidationStarted

  """column name"""
  notificationSettingsAdminEventValidationStep

  """column name"""
  notificationSettingsAdminReportCreated

  """column name"""
  notificationSettingsAdminRoleUpdated

  """column name"""
  notificationSettingsAdminTeamLegalFileUpdated

  """column name"""
  notificationSettingsAdminTeamSocialUpdated

  """column name"""
  notificationSettingsAdminThreadAssigned

  """column name"""
  notificationSettingsAdminThreadAssignedStale

  """column name"""
  notificationSettingsAdminThreadAssignedStaleThreshold

  """column name"""
  notificationSettingsAdminThreadStale

  """column name"""
  notificationSettingsAdminThreadStaleThreshold

  """column name"""
  notificationSettingsBadgeUnlocked

  """column name"""
  notificationSettingsBlogSubscribedUpdated

  """column name"""
  notificationSettingsContentRemoved

  """column name"""
  notificationSettingsEventCreated

  """column name"""
  notificationSettingsEventManagedApproved

  """column name"""
  notificationSettingsEventManagedRegistrationCreated

  """column name"""
  notificationSettingsEventManagedRejected

  """column name"""
  notificationSettingsEventSubscribedUpdated

  """column name"""
  notificationSettingsMentionned

  """column name"""
  notificationSettingsRoleUpdated

  """column name"""
  notificationSettingsTeamManagedEventUpdated

  """column name"""
  notificationSettingsTeamManagedFormUpdated

  """column name"""
  notificationSettingsTeamManagedMemberRoleUpdated

  """column name"""
  notificationSettingsTeamManagedMembershipRequestUpdated

  """column name"""
  notificationSettingsTeamSubscribedEventCreated

  """column name"""
  notificationSettingsThreadSubscribedAnswered

  """column name"""
  notificationSettingsThreadSubscribedUpdated

  """column name"""
  settingsDarkModeActivated

  """column name"""
  settingsGdprEndOfLifeAnonymize

  """column name"""
  settingsGdprEndOfLifeExport

  """column name"""
  statsActionStreak

  """column name"""
  statsCommentCount

  """column name"""
  statsLastActionAt

  """column name"""
  statsLastComment

  """column name"""
  statsLastPostAt

  """column name"""
  statsLastReplyAt

  """column name"""
  statsPoints

  """column name"""
  statsPostCount

  """column name"""
  statsPostStreak

  """column name"""
  statsReplyCount

  """column name"""
  statsReplyStreak

  """column name"""
  statsUploadCount

  """column name"""
  tenantId
}

"""
select "userInfoAggregateBoolExpBool_andArgumentsColumns" columns of table "user_info"
"""
enum UserInfoSelectColumnUserInfoAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  finishedIntroduction

  """column name"""
  finishedOnboarding

  """column name"""
  settingsDarkModeActivated

  """column name"""
  settingsGdprEndOfLifeAnonymize

  """column name"""
  settingsGdprEndOfLifeExport
}

"""
select "userInfoAggregateBoolExpBool_orArgumentsColumns" columns of table "user_info"
"""
enum UserInfoSelectColumnUserInfoAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  finishedIntroduction

  """column name"""
  finishedOnboarding

  """column name"""
  settingsDarkModeActivated

  """column name"""
  settingsGdprEndOfLifeAnonymize

  """column name"""
  settingsGdprEndOfLifeExport
}

"""
input type for updating data in table "user_info"
"""
input UserInfoSetInput {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

"""aggregate stddev on columns"""
type UserInfoStddevFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "user_info"
"""
input UserInfoStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type UserInfoStddevPopFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "user_info"
"""
input UserInfoStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type UserInfoStddevSampFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "user_info"
"""
input UserInfoStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "user_info"
"""
input UserInfoStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: UserInfoStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input UserInfoStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

"""aggregate sum on columns"""
type UserInfoSumFields {
  createdById: bigint
  id: bigint
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

"""
order by sum() on columns of table "user_info"
"""
input UserInfoSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "user_info"
"""
enum UserInfoUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  customizationColor

  """column name"""
  customizationSignature

  """column name"""
  deletedAt

  """column name"""
  finishedIntroduction

  """column name"""
  finishedOnboarding

  """column name"""
  firstName

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastName

  """column name"""
  middleNames

  """column name"""
  notificationSettingsAdminEventValidationApproved

  """column name"""
  notificationSettingsAdminEventValidationRejected

  """column name"""
  notificationSettingsAdminEventValidationStarted

  """column name"""
  notificationSettingsAdminEventValidationStep

  """column name"""
  notificationSettingsAdminReportCreated

  """column name"""
  notificationSettingsAdminRoleUpdated

  """column name"""
  notificationSettingsAdminTeamLegalFileUpdated

  """column name"""
  notificationSettingsAdminTeamSocialUpdated

  """column name"""
  notificationSettingsAdminThreadAssigned

  """column name"""
  notificationSettingsAdminThreadAssignedStale

  """column name"""
  notificationSettingsAdminThreadAssignedStaleThreshold

  """column name"""
  notificationSettingsAdminThreadStale

  """column name"""
  notificationSettingsAdminThreadStaleThreshold

  """column name"""
  notificationSettingsBadgeUnlocked

  """column name"""
  notificationSettingsBlogSubscribedUpdated

  """column name"""
  notificationSettingsContentRemoved

  """column name"""
  notificationSettingsEventCreated

  """column name"""
  notificationSettingsEventManagedApproved

  """column name"""
  notificationSettingsEventManagedRegistrationCreated

  """column name"""
  notificationSettingsEventManagedRejected

  """column name"""
  notificationSettingsEventSubscribedUpdated

  """column name"""
  notificationSettingsMentionned

  """column name"""
  notificationSettingsRoleUpdated

  """column name"""
  notificationSettingsTeamManagedEventUpdated

  """column name"""
  notificationSettingsTeamManagedFormUpdated

  """column name"""
  notificationSettingsTeamManagedMemberRoleUpdated

  """column name"""
  notificationSettingsTeamManagedMembershipRequestUpdated

  """column name"""
  notificationSettingsTeamSubscribedEventCreated

  """column name"""
  notificationSettingsThreadSubscribedAnswered

  """column name"""
  notificationSettingsThreadSubscribedUpdated

  """column name"""
  settingsDarkModeActivated

  """column name"""
  settingsGdprEndOfLifeAnonymize

  """column name"""
  settingsGdprEndOfLifeExport

  """column name"""
  statsActionStreak

  """column name"""
  statsCommentCount

  """column name"""
  statsLastActionAt

  """column name"""
  statsLastComment

  """column name"""
  statsLastPostAt

  """column name"""
  statsLastReplyAt

  """column name"""
  statsPoints

  """column name"""
  statsPostCount

  """column name"""
  statsPostStreak

  """column name"""
  statsReplyCount

  """column name"""
  statsReplyStreak

  """column name"""
  statsUploadCount

  """column name"""
  tenantId
}

input UserInfoUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: UserInfoIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: UserInfoSetInput

  """filter the rows which have to be updated"""
  where: UserInfoBoolExp!
}

"""aggregate variance on columns"""
type UserInfoVarianceFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

"""
order by variance() on columns of table "user_info"
"""
input UserInfoVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type UserInfoVarPopFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "user_info"
"""
input UserInfoVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type UserInfoVarSampFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "user_info"
"""
input UserInfoVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "validation"
"""
type Validation {
  """An object relationship"""
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  lastActiveDate: timestamptz

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

"""
aggregated selection of "validation"
"""
type ValidationAggregate {
  aggregate: ValidationAggregateFields
  nodes: [Validation!]!
}

input ValidationAggregateBoolExp {
  count: validationAggregateBoolExpCount
}

input validationAggregateBoolExpCount {
  arguments: [ValidationSelectColumn!]
  distinct: Boolean
  filter: ValidationBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "validation"
"""
type ValidationAggregateFields {
  avg: ValidationAvgFields
  count(columns: [ValidationSelectColumn!], distinct: Boolean): Int!
  max: ValidationMaxFields
  min: ValidationMinFields
  stddev: ValidationStddevFields
  stddevPop: ValidationStddevPopFields
  stddevSamp: ValidationStddevSampFields
  sum: ValidationSumFields
  varPop: ValidationVarPopFields
  varSamp: ValidationVarSampFields
  variance: ValidationVarianceFields
}

"""
order by aggregate values of table "validation"
"""
input ValidationAggregateOrderBy {
  avg: ValidationAvgOrderBy
  count: OrderBy
  max: ValidationMaxOrderBy
  min: ValidationMinOrderBy
  stddev: ValidationStddevOrderBy
  stddevPop: ValidationStddevPopOrderBy
  stddevSamp: ValidationStddevSampOrderBy
  sum: ValidationSumOrderBy
  varPop: ValidationVarPopOrderBy
  varSamp: ValidationVarSampOrderBy
  variance: ValidationVarianceOrderBy
}

"""
input type for inserting array relation for remote table "validation"
"""
input ValidationArrRelInsertInput {
  data: [ValidationInsertInput!]!

  """upsert condition"""
  onConflict: ValidationOnConflict
}

"""aggregate avg on columns"""
type ValidationAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by avg() on columns of table "validation"
"""
input ValidationAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Boolean expression to filter rows from the table "validation". All fields are combined with a logical 'AND'.
"""
input ValidationBoolExp {
  _and: [ValidationBoolExp!]
  _not: ValidationBoolExp
  _or: [ValidationBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

"""
unique or primary key constraints on table "validation"
"""
enum ValidationConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  validation_pkey
}

"""
input type for incrementing numeric columns in table "validation"
"""
input ValidationIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
input type for inserting data into table "validation"
"""
input ValidationInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

"""aggregate max on columns"""
type ValidationMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""
order by max() on columns of table "validation"
"""
input ValidationMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""aggregate min on columns"""
type ValidationMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""
order by min() on columns of table "validation"
"""
input ValidationMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""
response of any mutation on the table "validation"
"""
type ValidationMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Validation!]!
}

"""
on_conflict condition type for table "validation"
"""
input ValidationOnConflict {
  constraint: ValidationConstraint!
  updateColumns: [ValidationUpdateColumn!]! = []
  where: ValidationBoolExp
}

"""Ordering options when selecting data from "validation"."""
input ValidationOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

"""primary key columns input for table: validation"""
input ValidationPkColumnsInput {
  id: bigint!
}

"""
select columns of table "validation"
"""
enum ValidationSelectColumn {
  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  tenantId

  """column name"""
  type
}

"""
input type for updating data in table "validation"
"""
input ValidationSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""aggregate stddev on columns"""
type ValidationStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddev() on columns of table "validation"
"""
input ValidationStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevPop on columns"""
type ValidationStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevPop() on columns of table "validation"
"""
input ValidationStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ValidationStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by stddevSamp() on columns of table "validation"
"""
input ValidationStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
Streaming cursor of the table "validation"
"""
input ValidationStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ValidationStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ValidationStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

"""aggregate sum on columns"""
type ValidationSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

"""
order by sum() on columns of table "validation"
"""
input ValidationSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
update columns of table "validation"
"""
enum ValidationUpdateColumn {
  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  tenantId

  """column name"""
  type
}

input ValidationUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ValidationIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ValidationSetInput

  """filter the rows which have to be updated"""
  where: ValidationBoolExp!
}

"""aggregate variance on columns"""
type ValidationVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by variance() on columns of table "validation"
"""
input ValidationVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varPop on columns"""
type ValidationVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varPop() on columns of table "validation"
"""
input ValidationVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""aggregate varSamp on columns"""
type ValidationVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

"""
order by varSamp() on columns of table "validation"
"""
input ValidationVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

"""
columns and relationships of "vote"
"""
type Vote {
  """An object relationship"""
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  """An object relationship"""
  individual: Individual
  lastActiveDate: timestamptz

  """An object relationship"""
  tenant: Tenant!
  tenantId: bigint!
  value: smallint!
}

"""
aggregated selection of "vote"
"""
type VoteAggregate {
  aggregate: VoteAggregateFields
  nodes: [Vote!]!
}

input VoteAggregateBoolExp {
  count: voteAggregateBoolExpCount
}

input voteAggregateBoolExpCount {
  arguments: [VoteSelectColumn!]
  distinct: Boolean
  filter: VoteBoolExp
  predicate: IntComparisonExp!
}

"""
aggregate fields of "vote"
"""
type VoteAggregateFields {
  avg: VoteAvgFields
  count(columns: [VoteSelectColumn!], distinct: Boolean): Int!
  max: VoteMaxFields
  min: VoteMinFields
  stddev: VoteStddevFields
  stddevPop: VoteStddevPopFields
  stddevSamp: VoteStddevSampFields
  sum: VoteSumFields
  varPop: VoteVarPopFields
  varSamp: VoteVarSampFields
  variance: VoteVarianceFields
}

"""
order by aggregate values of table "vote"
"""
input VoteAggregateOrderBy {
  avg: VoteAvgOrderBy
  count: OrderBy
  max: VoteMaxOrderBy
  min: VoteMinOrderBy
  stddev: VoteStddevOrderBy
  stddevPop: VoteStddevPopOrderBy
  stddevSamp: VoteStddevSampOrderBy
  sum: VoteSumOrderBy
  varPop: VoteVarPopOrderBy
  varSamp: VoteVarSampOrderBy
  variance: VoteVarianceOrderBy
}

"""
input type for inserting array relation for remote table "vote"
"""
input VoteArrRelInsertInput {
  data: [VoteInsertInput!]!

  """upsert condition"""
  onConflict: VoteOnConflict
}

"""aggregate avg on columns"""
type VoteAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

"""
order by avg() on columns of table "vote"
"""
input VoteAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""
Boolean expression to filter rows from the table "vote". All fields are combined with a logical 'AND'.
"""
input VoteBoolExp {
  _and: [VoteBoolExp!]
  _not: VoteBoolExp
  _or: [VoteBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  value: SmallintComparisonExp
}

"""
unique or primary key constraints on table "vote"
"""
enum VoteConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  vote_pkey
}

"""
input type for incrementing numeric columns in table "vote"
"""
input VoteIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

"""
input type for inserting data into table "vote"
"""
input VoteInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  value: smallint
}

"""aggregate max on columns"""
type VoteMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

"""
order by max() on columns of table "vote"
"""
input VoteMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""aggregate min on columns"""
type VoteMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

"""
order by min() on columns of table "vote"
"""
input VoteMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""
response of any mutation on the table "vote"
"""
type VoteMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Vote!]!
}

"""
on_conflict condition type for table "vote"
"""
input VoteOnConflict {
  constraint: VoteConstraint!
  updateColumns: [VoteUpdateColumn!]! = []
  where: VoteBoolExp
}

"""Ordering options when selecting data from "vote"."""
input VoteOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""primary key columns input for table: vote"""
input VotePkColumnsInput {
  id: bigint!
}

"""
select columns of table "vote"
"""
enum VoteSelectColumn {
  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  tenantId

  """column name"""
  value
}

"""
input type for updating data in table "vote"
"""
input VoteSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

"""aggregate stddev on columns"""
type VoteStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

"""
order by stddev() on columns of table "vote"
"""
input VoteStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""aggregate stddevPop on columns"""
type VoteStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

"""
order by stddevPop() on columns of table "vote"
"""
input VoteStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""aggregate stddevSamp on columns"""
type VoteStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

"""
order by stddevSamp() on columns of table "vote"
"""
input VoteStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""
Streaming cursor of the table "vote"
"""
input VoteStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: VoteStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input VoteStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

"""aggregate sum on columns"""
type VoteSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

"""
order by sum() on columns of table "vote"
"""
input VoteSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""
update columns of table "vote"
"""
enum VoteUpdateColumn {
  """column name"""
  contentId

  """column name"""
  createdAt

  """column name"""
  createdById

  """column name"""
  deletedAt

  """column name"""
  hiddenAt

  """column name"""
  id

  """column name"""
  lastActiveDate

  """column name"""
  tenantId

  """column name"""
  value
}

input VoteUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: VoteIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: VoteSetInput

  """filter the rows which have to be updated"""
  where: VoteBoolExp!
}

"""aggregate variance on columns"""
type VoteVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

"""
order by variance() on columns of table "vote"
"""
input VoteVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""aggregate varPop on columns"""
type VoteVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

"""
order by varPop() on columns of table "vote"
"""
input VoteVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

"""aggregate varSamp on columns"""
type VoteVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

"""
order by varSamp() on columns of table "vote"
"""
input VoteVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

