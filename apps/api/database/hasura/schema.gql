# whether this query should be cached (Hasura Cloud only)
directive @cached(
  # measured in seconds
  ttl: Int! = 60

  # refresh the cache entry
  refresh: Boolean! = false
) on QUERY

scalar _text

# Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
input _textComparisonExp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _isNull: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

# columns and relationships of "action"
type Action {
  createdAt: timestamptz!

  # An object relationship
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  # An object relationship
  eventJoin: EventJoin
  eventJoinId: bigint

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!
  points: smallint

  # An object relationship
  project: Project
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "action"
type ActionAggregate {
  aggregate: ActionAggregateFields
  nodes: [Action!]!
}

input ActionAggregateBoolExp {
  count: actionAggregateBoolExpCount
}

input actionAggregateBoolExpCount {
  arguments: [ActionSelectColumn!]
  distinct: Boolean
  filter: ActionBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "action"
type ActionAggregateFields {
  avg: ActionAvgFields
  count(columns: [ActionSelectColumn!], distinct: Boolean): Int!
  max: ActionMaxFields
  min: ActionMinFields
  stddev: ActionStddevFields
  stddevPop: ActionStddevPopFields
  stddevSamp: ActionStddevSampFields
  sum: ActionSumFields
  varPop: ActionVarPopFields
  varSamp: ActionVarSampFields
  variance: ActionVarianceFields
}

# order by aggregate values of table "action"
input ActionAggregateOrderBy {
  avg: ActionAvgOrderBy
  count: OrderBy
  max: ActionMaxOrderBy
  min: ActionMinOrderBy
  stddev: ActionStddevOrderBy
  stddevPop: ActionStddevPopOrderBy
  stddevSamp: ActionStddevSampOrderBy
  sum: ActionSumOrderBy
  varPop: ActionVarPopOrderBy
  varSamp: ActionVarSampOrderBy
  variance: ActionVarianceOrderBy
}

# input type for inserting array relation for remote table "action"
input ActionArrRelInsertInput {
  data: [ActionInsertInput!]!

  # upsert condition
  onConflict: ActionOnConflict
}

# aggregate avg on columns
type ActionAvgFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  projectId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by avg() on columns of table "action"
input ActionAvgOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Boolean expression to filter rows from the table "action". All fields are combined with a logical 'AND'.
input ActionBoolExp {
  _and: [ActionBoolExp!]
  _not: ActionBoolExp
  _or: [ActionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  points: SmallintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  settledAt: TimestamptzComparisonExp
  settledById: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "action"
enum ActionConstraint {
  # unique or primary key constraint on columns "id"
  action_pkey
}

# input type for incrementing numeric columns in table "action"
input ActionIncInput {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  points: smallint
  projectId: bigint
  settledById: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# input type for inserting data into table "action"
input ActionInsertInput {
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  points: smallint
  project: ProjectObjRelInsertInput
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type ActionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# order by max() on columns of table "action"
input ActionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate min on columns
type ActionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# order by min() on columns of table "action"
input ActionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# response of any mutation on the table "action"
type ActionMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Action!]!
}

# input type for inserting object relation for remote table "action"
input ActionObjRelInsertInput {
  data: ActionInsertInput!

  # upsert condition
  onConflict: ActionOnConflict
}

# on_conflict condition type for table "action"
input ActionOnConflict {
  constraint: ActionConstraint!
  updateColumns: [ActionUpdateColumn!]! = []
  where: ActionBoolExp
}

# Ordering options when selecting data from "action".
input ActionOrderBy {
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  points: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: action
input ActionPkColumnsInput {
  id: bigint!
}

# select columns of table "action"
enum ActionSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  eventJoinId

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  points

  # column name
  projectId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  teamId

  # column name
  tenantId

  # column name
  userId
}

# input type for updating data in table "action"
input ActionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# aggregate stddev on columns
type ActionStddevFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  projectId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by stddev() on columns of table "action"
input ActionStddevOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevPop on columns
type ActionStddevPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  projectId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by stddevPop() on columns of table "action"
input ActionStddevPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevSamp on columns
type ActionStddevSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  projectId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by stddevSamp() on columns of table "action"
input ActionStddevSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Streaming cursor of the table "action"
input ActionStreamCursorInput {
  # Stream column input with initial value
  initialValue: ActionStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ActionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# aggregate sum on columns
type ActionSumFields {
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  points: smallint
  projectId: bigint
  settledById: bigint
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# order by sum() on columns of table "action"
input ActionSumOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# update columns of table "action"
enum ActionUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  eventJoinId

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  points

  # column name
  projectId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  teamId

  # column name
  tenantId

  # column name
  userId
}

input ActionUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ActionIncInput

  # sets the columns of the filtered rows to the given values
  _set: ActionSetInput

  # filter the rows which have to be updated
  where: ActionBoolExp!
}

# aggregate variance on columns
type ActionVarianceFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  projectId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by variance() on columns of table "action"
input ActionVarianceOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varPop on columns
type ActionVarPopFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  projectId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by varPop() on columns of table "action"
input ActionVarPopOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varSamp on columns
type ActionVarSampFields {
  createdById: Float
  eventJoinId: Float
  id: Float
  points: Float
  projectId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by varSamp() on columns of table "action"
input ActionVarSampOrderBy {
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# columns and relationships of "actor"
type Actor {
  # An array relationship
  actorAddresses(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  # An aggregate relationship
  actorAddressesAggregate(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  # An array relationship
  actorBankInfos(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  # An aggregate relationship
  actorBankInfosAggregate(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  # An array relationship
  actorImages(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): [ActorImage!]!

  # An aggregate relationship
  actorImagesAggregate(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  # An array relationship
  actorTags(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  # An aggregate relationship
  actorTagsAggregate(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!
  bio: String!

  # An array relationship
  botInfos(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): [BotInfo!]!

  # An aggregate relationship
  botInfosAggregate(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): BotInfoAggregate!
  createdAt: timestamptz!

  # An object relationship
  createdBy: Individual
  createdById: bigint
  deletedAt: timestamptz
  email: String!

  # An array relationship
  favorites(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): [Favorite!]!

  # An aggregate relationship
  favoritesAggregate(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  # An array relationship
  finances(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # An aggregate relationship
  financesAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!

  # An array relationship
  follows(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): [Follow!]!

  # An aggregate relationship
  followsAggregate(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): FollowAggregate!
  hiddenAt: timestamptz
  ical: String!
  id: bigint!

  # An object relationship
  individual: Individual
  individualId: bigint

  # An object relationship
  legalUnit: LegalUnit
  legalUnitId: bigint
  name: String!

  # An array relationship
  reports(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): [Report!]!

  # An aggregate relationship
  reportsAggregate(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): ReportAggregate!

  # An array relationship
  shortcuts(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): [Shortcut!]!

  # An aggregate relationship
  shortcutsAggregate(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): ShortcutAggregate!
  slug: String!

  # An array relationship
  socials(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): [Social!]!

  # An aggregate relationship
  socialsAggregate(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): SocialAggregate!
  status: String!

  # An object relationship
  team: Team
  teamId: bigint

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  website: String!
}

# columns and relationships of "actor_address"
type ActorAddress {
  # An object relationship
  actor: Actor!

  # An array relationship
  actorBankInfos(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  # An aggregate relationship
  actorBankInfosAggregate(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!
  actorId: bigint!

  # An object relationship
  campus: Campus
  campusId: bigint
  city: String!
  country: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An array relationship
  events(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An aggregate relationship
  eventsAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # An array relationship
  expenseItems(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): [ExpenseItem!]!

  # An aggregate relationship
  expenseItemsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): ExpenseItemAggregate!

  # An object relationship
  fileUpload: FileUpload

  # An array relationship
  finances(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # An aggregate relationship
  financesAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint

  # An object relationship
  individual: Individual
  latitude: Float
  longitude: Float
  name: String!
  public: Boolean!
  state: String!
  street: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  zip: String!
}

# aggregated selection of "actor_address"
type ActorAddressAggregate {
  aggregate: ActorAddressAggregateFields
  nodes: [ActorAddress!]!
}

input ActorAddressAggregateBoolExp {
  bool_and: actorAddressAggregateBoolExpBool_and
  bool_or: actorAddressAggregateBoolExpBool_or
  count: actorAddressAggregateBoolExpCount
}

input actorAddressAggregateBoolExpBool_and {
  arguments: ActorAddressSelectColumnActorAddressAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: BooleanComparisonExp!
}

input actorAddressAggregateBoolExpBool_or {
  arguments: ActorAddressSelectColumnActorAddressAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: BooleanComparisonExp!
}

input actorAddressAggregateBoolExpCount {
  arguments: [ActorAddressSelectColumn!]
  distinct: Boolean
  filter: ActorAddressBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "actor_address"
type ActorAddressAggregateFields {
  avg: ActorAddressAvgFields
  count(columns: [ActorAddressSelectColumn!], distinct: Boolean): Int!
  max: ActorAddressMaxFields
  min: ActorAddressMinFields
  stddev: ActorAddressStddevFields
  stddevPop: ActorAddressStddevPopFields
  stddevSamp: ActorAddressStddevSampFields
  sum: ActorAddressSumFields
  varPop: ActorAddressVarPopFields
  varSamp: ActorAddressVarSampFields
  variance: ActorAddressVarianceFields
}

# order by aggregate values of table "actor_address"
input ActorAddressAggregateOrderBy {
  avg: ActorAddressAvgOrderBy
  count: OrderBy
  max: ActorAddressMaxOrderBy
  min: ActorAddressMinOrderBy
  stddev: ActorAddressStddevOrderBy
  stddevPop: ActorAddressStddevPopOrderBy
  stddevSamp: ActorAddressStddevSampOrderBy
  sum: ActorAddressSumOrderBy
  varPop: ActorAddressVarPopOrderBy
  varSamp: ActorAddressVarSampOrderBy
  variance: ActorAddressVarianceOrderBy
}

# input type for inserting array relation for remote table "actor_address"
input ActorAddressArrRelInsertInput {
  data: [ActorAddressInsertInput!]!

  # upsert condition
  onConflict: ActorAddressOnConflict
}

# aggregate avg on columns
type ActorAddressAvgFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

# order by avg() on columns of table "actor_address"
input ActorAddressAvgOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "actor_address". All fields are combined with a logical 'AND'.
input ActorAddressBoolExp {
  _and: [ActorAddressBoolExp!]
  _not: ActorAddressBoolExp
  _or: [ActorAddressBoolExp!]
  actor: ActorBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorId: BigintComparisonExp
  campus: CampusBoolExp
  campusId: BigintComparisonExp
  city: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  fileUpload: FileUploadBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  latitude: FloatComparisonExp
  longitude: FloatComparisonExp
  name: StringComparisonExp
  public: BooleanComparisonExp
  state: StringComparisonExp
  street: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  zip: StringComparisonExp
}

# unique or primary key constraints on table "actor_address"
enum ActorAddressConstraint {
  # unique or primary key constraint on columns "campus_id"
  actor_address_campus_id_unique

  # unique or primary key constraint on columns "image_id"
  actor_address_image_id_unique

  # unique or primary key constraint on columns "id"
  actor_address_pkey
}

# input type for incrementing numeric columns in table "actor_address"
input ActorAddressIncInput {
  actorId: bigint
  campusId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  tenantId: bigint
}

# input type for inserting data into table "actor_address"
input ActorAddressInsertInput {
  actor: ActorObjRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorId: bigint
  campus: CampusObjRelInsertInput
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  expenseItems: ExpenseItemArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  finances: FinanceArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  zip: String
}

# aggregate max on columns
type ActorAddressMaxFields {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  tenantId: bigint
  zip: String
}

# order by max() on columns of table "actor_address"
input ActorAddressMaxOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  tenantId: OrderBy
  zip: OrderBy
}

# aggregate min on columns
type ActorAddressMinFields {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  state: String
  street: String
  tenantId: bigint
  zip: String
}

# order by min() on columns of table "actor_address"
input ActorAddressMinOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  state: OrderBy
  street: OrderBy
  tenantId: OrderBy
  zip: OrderBy
}

# response of any mutation on the table "actor_address"
type ActorAddressMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ActorAddress!]!
}

# input type for inserting object relation for remote table "actor_address"
input ActorAddressObjRelInsertInput {
  data: ActorAddressInsertInput!

  # upsert condition
  onConflict: ActorAddressOnConflict
}

# on_conflict condition type for table "actor_address"
input ActorAddressOnConflict {
  constraint: ActorAddressConstraint!
  updateColumns: [ActorAddressUpdateColumn!]! = []
  where: ActorAddressBoolExp
}

# Ordering options when selecting data from "actor_address".
input ActorAddressOrderBy {
  actor: ActorOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorId: OrderBy
  campus: CampusOrderBy
  campusId: OrderBy
  city: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  fileUpload: FileUploadOrderBy
  financesAggregate: FinanceAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  latitude: OrderBy
  longitude: OrderBy
  name: OrderBy
  public: OrderBy
  state: OrderBy
  street: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  zip: OrderBy
}

# primary key columns input for table: actor_address
input ActorAddressPkColumnsInput {
  id: bigint!
}

# select columns of table "actor_address"
enum ActorAddressSelectColumn {
  # column name
  actorId

  # column name
  campusId

  # column name
  city

  # column name
  country

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  latitude

  # column name
  longitude

  # column name
  name

  # column name
  public

  # column name
  state

  # column name
  street

  # column name
  tenantId

  # column name
  zip
}

# select "actorAddressAggregateBoolExpBool_andArgumentsColumns" columns of table "actor_address"
enum ActorAddressSelectColumnActorAddressAggregateBoolExpBool_andArgumentsColumns {
  # column name
  public
}

# select "actorAddressAggregateBoolExpBool_orArgumentsColumns" columns of table "actor_address"
enum ActorAddressSelectColumnActorAddressAggregateBoolExpBool_orArgumentsColumns {
  # column name
  public
}

# input type for updating data in table "actor_address"
input ActorAddressSetInput {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  tenantId: bigint
  zip: String
}

# aggregate stddev on columns
type ActorAddressStddevFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

# order by stddev() on columns of table "actor_address"
input ActorAddressStddevOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ActorAddressStddevPopFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "actor_address"
input ActorAddressStddevPopOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ActorAddressStddevSampFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "actor_address"
input ActorAddressStddevSampOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "actor_address"
input ActorAddressStreamCursorInput {
  # Stream column input with initial value
  initialValue: ActorAddressStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ActorAddressStreamCursorValueInput {
  actorId: bigint
  campusId: bigint
  city: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  name: String
  public: Boolean
  state: String
  street: String
  tenantId: bigint
  zip: String
}

# aggregate sum on columns
type ActorAddressSumFields {
  actorId: bigint
  campusId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  latitude: Float
  longitude: Float
  tenantId: bigint
}

# order by sum() on columns of table "actor_address"
input ActorAddressSumOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# update columns of table "actor_address"
enum ActorAddressUpdateColumn {
  # column name
  actorId

  # column name
  campusId

  # column name
  city

  # column name
  country

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  latitude

  # column name
  longitude

  # column name
  name

  # column name
  public

  # column name
  state

  # column name
  street

  # column name
  tenantId

  # column name
  zip
}

input ActorAddressUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ActorAddressIncInput

  # sets the columns of the filtered rows to the given values
  _set: ActorAddressSetInput

  # filter the rows which have to be updated
  where: ActorAddressBoolExp!
}

# aggregate variance on columns
type ActorAddressVarianceFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

# order by variance() on columns of table "actor_address"
input ActorAddressVarianceOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ActorAddressVarPopFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

# order by varPop() on columns of table "actor_address"
input ActorAddressVarPopOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ActorAddressVarSampFields {
  actorId: Float
  campusId: Float
  createdById: Float
  id: Float
  imageId: Float
  latitude: Float
  longitude: Float
  tenantId: Float
}

# order by varSamp() on columns of table "actor_address"
input ActorAddressVarSampOrderBy {
  actorId: OrderBy
  campusId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  tenantId: OrderBy
}

# aggregated selection of "actor"
type ActorAggregate {
  aggregate: ActorAggregateFields
  nodes: [Actor!]!
}

input ActorAggregateBoolExp {
  count: actorAggregateBoolExpCount
}

input actorAggregateBoolExpCount {
  arguments: [ActorSelectColumn!]
  distinct: Boolean
  filter: ActorBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "actor"
type ActorAggregateFields {
  avg: ActorAvgFields
  count(columns: [ActorSelectColumn!], distinct: Boolean): Int!
  max: ActorMaxFields
  min: ActorMinFields
  stddev: ActorStddevFields
  stddevPop: ActorStddevPopFields
  stddevSamp: ActorStddevSampFields
  sum: ActorSumFields
  varPop: ActorVarPopFields
  varSamp: ActorVarSampFields
  variance: ActorVarianceFields
}

# order by aggregate values of table "actor"
input ActorAggregateOrderBy {
  avg: ActorAvgOrderBy
  count: OrderBy
  max: ActorMaxOrderBy
  min: ActorMinOrderBy
  stddev: ActorStddevOrderBy
  stddevPop: ActorStddevPopOrderBy
  stddevSamp: ActorStddevSampOrderBy
  sum: ActorSumOrderBy
  varPop: ActorVarPopOrderBy
  varSamp: ActorVarSampOrderBy
  variance: ActorVarianceOrderBy
}

# input type for inserting array relation for remote table "actor"
input ActorArrRelInsertInput {
  data: [ActorInsertInput!]!

  # upsert condition
  onConflict: ActorOnConflict
}

# aggregate avg on columns
type ActorAvgFields {
  createdById: Float
  id: Float
  individualId: Float
  legalUnitId: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "actor"
input ActorAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "actor_bank_info"
type ActorBankInfo {
  accountCode: String!

  # An object relationship
  actor: Actor!

  # An object relationship
  actorAddress: ActorAddress!
  actorId: bigint!
  addressId: bigint!
  agencyCode: String!
  bankCode: String!
  bankCodeBic: String!
  checksum: String!
  country: String!
  countryCode: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An array relationship
  expenses(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # An aggregate relationship
  expensesAggregate(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): ExpenseAggregate!
  fullAcount: String!
  hiddenAt: timestamptz
  holderName: String!
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "actor_bank_info"
type ActorBankInfoAggregate {
  aggregate: ActorBankInfoAggregateFields
  nodes: [ActorBankInfo!]!
}

input ActorBankInfoAggregateBoolExp {
  count: actorBankInfoAggregateBoolExpCount
}

input actorBankInfoAggregateBoolExpCount {
  arguments: [ActorBankInfoSelectColumn!]
  distinct: Boolean
  filter: ActorBankInfoBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "actor_bank_info"
type ActorBankInfoAggregateFields {
  avg: ActorBankInfoAvgFields
  count(columns: [ActorBankInfoSelectColumn!], distinct: Boolean): Int!
  max: ActorBankInfoMaxFields
  min: ActorBankInfoMinFields
  stddev: ActorBankInfoStddevFields
  stddevPop: ActorBankInfoStddevPopFields
  stddevSamp: ActorBankInfoStddevSampFields
  sum: ActorBankInfoSumFields
  varPop: ActorBankInfoVarPopFields
  varSamp: ActorBankInfoVarSampFields
  variance: ActorBankInfoVarianceFields
}

# order by aggregate values of table "actor_bank_info"
input ActorBankInfoAggregateOrderBy {
  avg: ActorBankInfoAvgOrderBy
  count: OrderBy
  max: ActorBankInfoMaxOrderBy
  min: ActorBankInfoMinOrderBy
  stddev: ActorBankInfoStddevOrderBy
  stddevPop: ActorBankInfoStddevPopOrderBy
  stddevSamp: ActorBankInfoStddevSampOrderBy
  sum: ActorBankInfoSumOrderBy
  varPop: ActorBankInfoVarPopOrderBy
  varSamp: ActorBankInfoVarSampOrderBy
  variance: ActorBankInfoVarianceOrderBy
}

# input type for inserting array relation for remote table "actor_bank_info"
input ActorBankInfoArrRelInsertInput {
  data: [ActorBankInfoInsertInput!]!

  # upsert condition
  onConflict: ActorBankInfoOnConflict
}

# aggregate avg on columns
type ActorBankInfoAvgFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "actor_bank_info"
input ActorBankInfoAvgOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "actor_bank_info". All fields are combined with a logical 'AND'.
input ActorBankInfoBoolExp {
  _and: [ActorBankInfoBoolExp!]
  _not: ActorBankInfoBoolExp
  _or: [ActorBankInfoBoolExp!]
  accountCode: StringComparisonExp
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  actorId: BigintComparisonExp
  addressId: BigintComparisonExp
  agencyCode: StringComparisonExp
  bankCode: StringComparisonExp
  bankCodeBic: StringComparisonExp
  checksum: StringComparisonExp
  country: StringComparisonExp
  countryCode: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fullAcount: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  holderName: StringComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "actor_bank_info"
enum ActorBankInfoConstraint {
  # unique or primary key constraint on columns "id"
  actor_bank_info_pkey
}

# input type for incrementing numeric columns in table "actor_bank_info"
input ActorBankInfoIncInput {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "actor_bank_info"
input ActorBankInfoInsertInput {
  accountCode: String
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expenses: ExpenseArrRelInsertInput
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type ActorBankInfoMaxFields {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

# order by max() on columns of table "actor_bank_info"
input ActorBankInfoMaxOrderBy {
  accountCode: OrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type ActorBankInfoMinFields {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

# order by min() on columns of table "actor_bank_info"
input ActorBankInfoMinOrderBy {
  accountCode: OrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "actor_bank_info"
type ActorBankInfoMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ActorBankInfo!]!
}

# input type for inserting object relation for remote table "actor_bank_info"
input ActorBankInfoObjRelInsertInput {
  data: ActorBankInfoInsertInput!

  # upsert condition
  onConflict: ActorBankInfoOnConflict
}

# on_conflict condition type for table "actor_bank_info"
input ActorBankInfoOnConflict {
  constraint: ActorBankInfoConstraint!
  updateColumns: [ActorBankInfoUpdateColumn!]! = []
  where: ActorBankInfoBoolExp
}

# Ordering options when selecting data from "actor_bank_info".
input ActorBankInfoOrderBy {
  accountCode: OrderBy
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  actorId: OrderBy
  addressId: OrderBy
  agencyCode: OrderBy
  bankCode: OrderBy
  bankCodeBic: OrderBy
  checksum: OrderBy
  country: OrderBy
  countryCode: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fullAcount: OrderBy
  hiddenAt: OrderBy
  holderName: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: actor_bank_info
input ActorBankInfoPkColumnsInput {
  id: bigint!
}

# select columns of table "actor_bank_info"
enum ActorBankInfoSelectColumn {
  # column name
  accountCode

  # column name
  actorId

  # column name
  addressId

  # column name
  agencyCode

  # column name
  bankCode

  # column name
  bankCodeBic

  # column name
  checksum

  # column name
  country

  # column name
  countryCode

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  fullAcount

  # column name
  hiddenAt

  # column name
  holderName

  # column name
  id

  # column name
  tenantId
}

# input type for updating data in table "actor_bank_info"
input ActorBankInfoSetInput {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type ActorBankInfoStddevFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "actor_bank_info"
input ActorBankInfoStddevOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ActorBankInfoStddevPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "actor_bank_info"
input ActorBankInfoStddevPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ActorBankInfoStddevSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "actor_bank_info"
input ActorBankInfoStddevSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "actor_bank_info"
input ActorBankInfoStreamCursorInput {
  # Stream column input with initial value
  initialValue: ActorBankInfoStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ActorBankInfoStreamCursorValueInput {
  accountCode: String
  actorId: bigint
  addressId: bigint
  agencyCode: String
  bankCode: String
  bankCodeBic: String
  checksum: String
  country: String
  countryCode: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fullAcount: String
  hiddenAt: timestamptz
  holderName: String
  id: bigint
  tenantId: bigint
}

# aggregate sum on columns
type ActorBankInfoSumFields {
  actorId: bigint
  addressId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "actor_bank_info"
input ActorBankInfoSumOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "actor_bank_info"
enum ActorBankInfoUpdateColumn {
  # column name
  accountCode

  # column name
  actorId

  # column name
  addressId

  # column name
  agencyCode

  # column name
  bankCode

  # column name
  bankCodeBic

  # column name
  checksum

  # column name
  country

  # column name
  countryCode

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  fullAcount

  # column name
  hiddenAt

  # column name
  holderName

  # column name
  id

  # column name
  tenantId
}

input ActorBankInfoUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ActorBankInfoIncInput

  # sets the columns of the filtered rows to the given values
  _set: ActorBankInfoSetInput

  # filter the rows which have to be updated
  where: ActorBankInfoBoolExp!
}

# aggregate variance on columns
type ActorBankInfoVarianceFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "actor_bank_info"
input ActorBankInfoVarianceOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ActorBankInfoVarPopFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "actor_bank_info"
input ActorBankInfoVarPopOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ActorBankInfoVarSampFields {
  actorId: Float
  addressId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "actor_bank_info"
input ActorBankInfoVarSampOrderBy {
  actorId: OrderBy
  addressId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "actor". All fields are combined with a logical 'AND'.
input ActorBoolExp {
  _and: [ActorBoolExp!]
  _not: ActorBoolExp
  _or: [ActorBoolExp!]
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  bio: StringComparisonExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  email: StringComparisonExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  ical: StringComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
  legalUnit: LegalUnitBoolExp
  legalUnitId: BigintComparisonExp
  name: StringComparisonExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  slug: StringComparisonExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  status: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  website: StringComparisonExp
}

# unique or primary key constraints on table "actor"
enum ActorConstraint {
  # unique or primary key constraint on columns "ical"
  actor_ical_unique

  # unique or primary key constraint on columns "individual_id"
  actor_individual_id_unique

  # unique or primary key constraint on columns "legal_unit_id"
  actor_legal_unit_id_unique

  # unique or primary key constraint on columns "id"
  actor_pkey

  # unique or primary key constraint on columns "team_id"
  actor_team_id_unique
}

# columns and relationships of "actor_image"
type ActorImage {
  # An object relationship
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  fileUpload: FileUpload!
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint!

  # An object relationship
  individual: Individual
  lastActiveDate: timestamptz

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

# aggregated selection of "actor_image"
type ActorImageAggregate {
  aggregate: ActorImageAggregateFields
  nodes: [ActorImage!]!
}

input ActorImageAggregateBoolExp {
  count: actorImageAggregateBoolExpCount
}

input actorImageAggregateBoolExpCount {
  arguments: [ActorImageSelectColumn!]
  distinct: Boolean
  filter: ActorImageBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "actor_image"
type ActorImageAggregateFields {
  avg: ActorImageAvgFields
  count(columns: [ActorImageSelectColumn!], distinct: Boolean): Int!
  max: ActorImageMaxFields
  min: ActorImageMinFields
  stddev: ActorImageStddevFields
  stddevPop: ActorImageStddevPopFields
  stddevSamp: ActorImageStddevSampFields
  sum: ActorImageSumFields
  varPop: ActorImageVarPopFields
  varSamp: ActorImageVarSampFields
  variance: ActorImageVarianceFields
}

# order by aggregate values of table "actor_image"
input ActorImageAggregateOrderBy {
  avg: ActorImageAvgOrderBy
  count: OrderBy
  max: ActorImageMaxOrderBy
  min: ActorImageMinOrderBy
  stddev: ActorImageStddevOrderBy
  stddevPop: ActorImageStddevPopOrderBy
  stddevSamp: ActorImageStddevSampOrderBy
  sum: ActorImageSumOrderBy
  varPop: ActorImageVarPopOrderBy
  varSamp: ActorImageVarSampOrderBy
  variance: ActorImageVarianceOrderBy
}

# input type for inserting array relation for remote table "actor_image"
input ActorImageArrRelInsertInput {
  data: [ActorImageInsertInput!]!

  # upsert condition
  onConflict: ActorImageOnConflict
}

# aggregate avg on columns
type ActorImageAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by avg() on columns of table "actor_image"
input ActorImageAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "actor_image". All fields are combined with a logical 'AND'.
input ActorImageBoolExp {
  _and: [ActorImageBoolExp!]
  _not: ActorImageBoolExp
  _or: [ActorImageBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

# unique or primary key constraints on table "actor_image"
enum ActorImageConstraint {
  # unique or primary key constraint on columns "image_id"
  actor_image_image_id_unique

  # unique or primary key constraint on columns "id"
  actor_image_pkey
}

# input type for incrementing numeric columns in table "actor_image"
input ActorImageIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

# input type for inserting data into table "actor_image"
input ActorImageInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

# aggregate max on columns
type ActorImageMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# order by max() on columns of table "actor_image"
input ActorImageMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type ActorImageMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# order by min() on columns of table "actor_image"
input ActorImageMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "actor_image"
type ActorImageMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ActorImage!]!
}

# input type for inserting object relation for remote table "actor_image"
input ActorImageObjRelInsertInput {
  data: ActorImageInsertInput!

  # upsert condition
  onConflict: ActorImageOnConflict
}

# on_conflict condition type for table "actor_image"
input ActorImageOnConflict {
  constraint: ActorImageConstraint!
  updateColumns: [ActorImageUpdateColumn!]! = []
  where: ActorImageBoolExp
}

# Ordering options when selecting data from "actor_image".
input ActorImageOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

# primary key columns input for table: actor_image
input ActorImagePkColumnsInput {
  id: bigint!
}

# select columns of table "actor_image"
enum ActorImageSelectColumn {
  # column name
  actorId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  lastActiveDate

  # column name
  tenantId

  # column name
  type
}

# input type for updating data in table "actor_image"
input ActorImageSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type ActorImageStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by stddev() on columns of table "actor_image"
input ActorImageStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ActorImageStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "actor_image"
input ActorImageStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ActorImageStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "actor_image"
input ActorImageStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "actor_image"
input ActorImageStreamCursorInput {
  # Stream column input with initial value
  initialValue: ActorImageStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ActorImageStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# aggregate sum on columns
type ActorImageSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "actor_image"
input ActorImageSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# update columns of table "actor_image"
enum ActorImageUpdateColumn {
  # column name
  actorId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  lastActiveDate

  # column name
  tenantId

  # column name
  type
}

input ActorImageUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ActorImageIncInput

  # sets the columns of the filtered rows to the given values
  _set: ActorImageSetInput

  # filter the rows which have to be updated
  where: ActorImageBoolExp!
}

# aggregate variance on columns
type ActorImageVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by variance() on columns of table "actor_image"
input ActorImageVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ActorImageVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by varPop() on columns of table "actor_image"
input ActorImageVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ActorImageVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "actor_image"
input ActorImageVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# input type for incrementing numeric columns in table "actor"
input ActorIncInput {
  createdById: bigint
  id: bigint
  individualId: bigint
  legalUnitId: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "actor"
input ActorInsertInput {
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actorTags: ActorTagsArrRelInsertInput
  bio: String
  botInfos: BotInfoArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  deletedAt: timestamptz
  email: String
  favorites: FavoriteArrRelInsertInput
  finances: FinanceArrRelInsertInput
  follows: FollowArrRelInsertInput
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
  legalUnit: LegalUnitObjRelInsertInput
  legalUnitId: bigint
  name: String
  reports: ReportArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  slug: String
  socials: SocialArrRelInsertInput
  status: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  website: String
}

# aggregate max on columns
type ActorMaxFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  legalUnitId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

# order by max() on columns of table "actor"
input ActorMaxOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  name: OrderBy
  slug: OrderBy
  status: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  website: OrderBy
}

# aggregate min on columns
type ActorMinFields {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  legalUnitId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

# order by min() on columns of table "actor"
input ActorMinOrderBy {
  bio: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  name: OrderBy
  slug: OrderBy
  status: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  website: OrderBy
}

# response of any mutation on the table "actor"
type ActorMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Actor!]!
}

# input type for inserting object relation for remote table "actor"
input ActorObjRelInsertInput {
  data: ActorInsertInput!

  # upsert condition
  onConflict: ActorOnConflict
}

# on_conflict condition type for table "actor"
input ActorOnConflict {
  constraint: ActorConstraint!
  updateColumns: [ActorUpdateColumn!]! = []
  where: ActorBoolExp
}

# Ordering options when selecting data from "actor".
input ActorOrderBy {
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorTagsAggregate: ActorTagsAggregateOrderBy
  bio: OrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  email: OrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  financesAggregate: FinanceAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  hiddenAt: OrderBy
  ical: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
  legalUnit: LegalUnitOrderBy
  legalUnitId: OrderBy
  name: OrderBy
  reportsAggregate: ReportAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  slug: OrderBy
  socialsAggregate: SocialAggregateOrderBy
  status: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  website: OrderBy
}

# primary key columns input for table: actor
input ActorPkColumnsInput {
  id: bigint!
}

# select columns of table "actor"
enum ActorSelectColumn {
  # column name
  bio

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  email

  # column name
  hiddenAt

  # column name
  ical

  # column name
  id

  # column name
  individualId

  # column name
  legalUnitId

  # column name
  name

  # column name
  slug

  # column name
  status

  # column name
  teamId

  # column name
  tenantId

  # column name
  website
}

# input type for updating data in table "actor"
input ActorSetInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  legalUnitId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

# aggregate stddev on columns
type ActorStddevFields {
  createdById: Float
  id: Float
  individualId: Float
  legalUnitId: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "actor"
input ActorStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ActorStddevPopFields {
  createdById: Float
  id: Float
  individualId: Float
  legalUnitId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "actor"
input ActorStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ActorStddevSampFields {
  createdById: Float
  id: Float
  individualId: Float
  legalUnitId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "actor"
input ActorStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "actor"
input ActorStreamCursorInput {
  # Stream column input with initial value
  initialValue: ActorStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ActorStreamCursorValueInput {
  bio: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  email: String
  hiddenAt: timestamptz
  ical: String
  id: bigint
  individualId: bigint
  legalUnitId: bigint
  name: String
  slug: String
  status: String
  teamId: bigint
  tenantId: bigint
  website: String
}

# aggregate sum on columns
type ActorSumFields {
  createdById: bigint
  id: bigint
  individualId: bigint
  legalUnitId: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "actor"
input ActorSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "actor_tags"
type ActorTags {
  # An object relationship
  actor: Actor!
  actorId: bigint!

  # An object relationship
  tag: Tag!
  tagId: bigint!
}

# aggregated selection of "actor_tags"
type ActorTagsAggregate {
  aggregate: ActorTagsAggregateFields
  nodes: [ActorTags!]!
}

input ActorTagsAggregateBoolExp {
  count: actorTagsAggregateBoolExpCount
}

input actorTagsAggregateBoolExpCount {
  arguments: [ActorTagsSelectColumn!]
  distinct: Boolean
  filter: ActorTagsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "actor_tags"
type ActorTagsAggregateFields {
  avg: ActorTagsAvgFields
  count(columns: [ActorTagsSelectColumn!], distinct: Boolean): Int!
  max: ActorTagsMaxFields
  min: ActorTagsMinFields
  stddev: ActorTagsStddevFields
  stddevPop: ActorTagsStddevPopFields
  stddevSamp: ActorTagsStddevSampFields
  sum: ActorTagsSumFields
  varPop: ActorTagsVarPopFields
  varSamp: ActorTagsVarSampFields
  variance: ActorTagsVarianceFields
}

# order by aggregate values of table "actor_tags"
input ActorTagsAggregateOrderBy {
  avg: ActorTagsAvgOrderBy
  count: OrderBy
  max: ActorTagsMaxOrderBy
  min: ActorTagsMinOrderBy
  stddev: ActorTagsStddevOrderBy
  stddevPop: ActorTagsStddevPopOrderBy
  stddevSamp: ActorTagsStddevSampOrderBy
  sum: ActorTagsSumOrderBy
  varPop: ActorTagsVarPopOrderBy
  varSamp: ActorTagsVarSampOrderBy
  variance: ActorTagsVarianceOrderBy
}

# input type for inserting array relation for remote table "actor_tags"
input ActorTagsArrRelInsertInput {
  data: [ActorTagsInsertInput!]!

  # upsert condition
  onConflict: ActorTagsOnConflict
}

# aggregate avg on columns
type ActorTagsAvgFields {
  actorId: Float
  tagId: Float
}

# order by avg() on columns of table "actor_tags"
input ActorTagsAvgOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# Boolean expression to filter rows from the table "actor_tags". All fields are combined with a logical 'AND'.
input ActorTagsBoolExp {
  _and: [ActorTagsBoolExp!]
  _not: ActorTagsBoolExp
  _or: [ActorTagsBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

# unique or primary key constraints on table "actor_tags"
enum ActorTagsConstraint {
  # unique or primary key constraint on columns "tag_id", "actor_id"
  actor_tags_pkey
}

# input type for incrementing numeric columns in table "actor_tags"
input ActorTagsIncInput {
  actorId: bigint
  tagId: bigint
}

# input type for inserting data into table "actor_tags"
input ActorTagsInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

# aggregate max on columns
type ActorTagsMaxFields {
  actorId: bigint
  tagId: bigint
}

# order by max() on columns of table "actor_tags"
input ActorTagsMaxOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# aggregate min on columns
type ActorTagsMinFields {
  actorId: bigint
  tagId: bigint
}

# order by min() on columns of table "actor_tags"
input ActorTagsMinOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# response of any mutation on the table "actor_tags"
type ActorTagsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ActorTags!]!
}

# on_conflict condition type for table "actor_tags"
input ActorTagsOnConflict {
  constraint: ActorTagsConstraint!
  updateColumns: [ActorTagsUpdateColumn!]! = []
  where: ActorTagsBoolExp
}

# Ordering options when selecting data from "actor_tags".
input ActorTagsOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

# primary key columns input for table: actor_tags
input ActorTagsPkColumnsInput {
  actorId: bigint!
  tagId: bigint!
}

# select columns of table "actor_tags"
enum ActorTagsSelectColumn {
  # column name
  actorId

  # column name
  tagId
}

# input type for updating data in table "actor_tags"
input ActorTagsSetInput {
  actorId: bigint
  tagId: bigint
}

# aggregate stddev on columns
type ActorTagsStddevFields {
  actorId: Float
  tagId: Float
}

# order by stddev() on columns of table "actor_tags"
input ActorTagsStddevOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# aggregate stddevPop on columns
type ActorTagsStddevPopFields {
  actorId: Float
  tagId: Float
}

# order by stddevPop() on columns of table "actor_tags"
input ActorTagsStddevPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# aggregate stddevSamp on columns
type ActorTagsStddevSampFields {
  actorId: Float
  tagId: Float
}

# order by stddevSamp() on columns of table "actor_tags"
input ActorTagsStddevSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# Streaming cursor of the table "actor_tags"
input ActorTagsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ActorTagsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ActorTagsStreamCursorValueInput {
  actorId: bigint
  tagId: bigint
}

# aggregate sum on columns
type ActorTagsSumFields {
  actorId: bigint
  tagId: bigint
}

# order by sum() on columns of table "actor_tags"
input ActorTagsSumOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# update columns of table "actor_tags"
enum ActorTagsUpdateColumn {
  # column name
  actorId

  # column name
  tagId
}

input ActorTagsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ActorTagsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ActorTagsSetInput

  # filter the rows which have to be updated
  where: ActorTagsBoolExp!
}

# aggregate variance on columns
type ActorTagsVarianceFields {
  actorId: Float
  tagId: Float
}

# order by variance() on columns of table "actor_tags"
input ActorTagsVarianceOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# aggregate varPop on columns
type ActorTagsVarPopFields {
  actorId: Float
  tagId: Float
}

# order by varPop() on columns of table "actor_tags"
input ActorTagsVarPopOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# aggregate varSamp on columns
type ActorTagsVarSampFields {
  actorId: Float
  tagId: Float
}

# order by varSamp() on columns of table "actor_tags"
input ActorTagsVarSampOrderBy {
  actorId: OrderBy
  tagId: OrderBy
}

# update columns of table "actor"
enum ActorUpdateColumn {
  # column name
  bio

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  email

  # column name
  hiddenAt

  # column name
  ical

  # column name
  id

  # column name
  individualId

  # column name
  legalUnitId

  # column name
  name

  # column name
  slug

  # column name
  status

  # column name
  teamId

  # column name
  tenantId

  # column name
  website
}

input ActorUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ActorIncInput

  # sets the columns of the filtered rows to the given values
  _set: ActorSetInput

  # filter the rows which have to be updated
  where: ActorBoolExp!
}

# aggregate variance on columns
type ActorVarianceFields {
  createdById: Float
  id: Float
  individualId: Float
  legalUnitId: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "actor"
input ActorVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ActorVarPopFields {
  createdById: Float
  id: Float
  individualId: Float
  legalUnitId: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "actor"
input ActorVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ActorVarSampFields {
  createdById: Float
  id: Float
  individualId: Float
  legalUnitId: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "actor"
input ActorVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  individualId: OrderBy
  legalUnitId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

scalar bigint

# Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

# Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

# columns and relationships of "bot_info"
type BotInfo {
  # An object relationship
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  individualById: Individual
  ownerId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "bot_info"
type BotInfoAggregate {
  aggregate: BotInfoAggregateFields
  nodes: [BotInfo!]!
}

input BotInfoAggregateBoolExp {
  count: botInfoAggregateBoolExpCount
}

input botInfoAggregateBoolExpCount {
  arguments: [BotInfoSelectColumn!]
  distinct: Boolean
  filter: BotInfoBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "bot_info"
type BotInfoAggregateFields {
  avg: BotInfoAvgFields
  count(columns: [BotInfoSelectColumn!], distinct: Boolean): Int!
  max: BotInfoMaxFields
  min: BotInfoMinFields
  stddev: BotInfoStddevFields
  stddevPop: BotInfoStddevPopFields
  stddevSamp: BotInfoStddevSampFields
  sum: BotInfoSumFields
  varPop: BotInfoVarPopFields
  varSamp: BotInfoVarSampFields
  variance: BotInfoVarianceFields
}

# order by aggregate values of table "bot_info"
input BotInfoAggregateOrderBy {
  avg: BotInfoAvgOrderBy
  count: OrderBy
  max: BotInfoMaxOrderBy
  min: BotInfoMinOrderBy
  stddev: BotInfoStddevOrderBy
  stddevPop: BotInfoStddevPopOrderBy
  stddevSamp: BotInfoStddevSampOrderBy
  sum: BotInfoSumOrderBy
  varPop: BotInfoVarPopOrderBy
  varSamp: BotInfoVarSampOrderBy
  variance: BotInfoVarianceOrderBy
}

# input type for inserting array relation for remote table "bot_info"
input BotInfoArrRelInsertInput {
  data: [BotInfoInsertInput!]!

  # upsert condition
  onConflict: BotInfoOnConflict
}

# aggregate avg on columns
type BotInfoAvgFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

# order by avg() on columns of table "bot_info"
input BotInfoAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "bot_info". All fields are combined with a logical 'AND'.
input BotInfoBoolExp {
  _and: [BotInfoBoolExp!]
  _not: BotInfoBoolExp
  _or: [BotInfoBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualById: IndividualBoolExp
  ownerId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "bot_info"
enum BotInfoConstraint {
  # unique or primary key constraint on columns "id"
  bot_info_pkey
}

# input type for incrementing numeric columns in table "bot_info"
input BotInfoIncInput {
  createdById: bigint
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

# input type for inserting data into table "bot_info"
input BotInfoInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualById: IndividualObjRelInsertInput
  ownerId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type BotInfoMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

# order by max() on columns of table "bot_info"
input BotInfoMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type BotInfoMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

# order by min() on columns of table "bot_info"
input BotInfoMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "bot_info"
type BotInfoMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [BotInfo!]!
}

# input type for inserting object relation for remote table "bot_info"
input BotInfoObjRelInsertInput {
  data: BotInfoInsertInput!

  # upsert condition
  onConflict: BotInfoOnConflict
}

# on_conflict condition type for table "bot_info"
input BotInfoOnConflict {
  constraint: BotInfoConstraint!
  updateColumns: [BotInfoUpdateColumn!]! = []
  where: BotInfoBoolExp
}

# Ordering options when selecting data from "bot_info".
input BotInfoOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualById: IndividualOrderBy
  ownerId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: bot_info
input BotInfoPkColumnsInput {
  id: bigint!
}

# select columns of table "bot_info"
enum BotInfoSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  ownerId

  # column name
  tenantId
}

# input type for updating data in table "bot_info"
input BotInfoSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type BotInfoStddevFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

# order by stddev() on columns of table "bot_info"
input BotInfoStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type BotInfoStddevPopFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "bot_info"
input BotInfoStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type BotInfoStddevSampFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "bot_info"
input BotInfoStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "bot_info"
input BotInfoStreamCursorInput {
  # Stream column input with initial value
  initialValue: BotInfoStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input BotInfoStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type BotInfoSumFields {
  createdById: bigint
  id: bigint
  ownerId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "bot_info"
input BotInfoSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# update columns of table "bot_info"
enum BotInfoUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  ownerId

  # column name
  tenantId
}

input BotInfoUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: BotInfoIncInput

  # sets the columns of the filtered rows to the given values
  _set: BotInfoSetInput

  # filter the rows which have to be updated
  where: BotInfoBoolExp!
}

# aggregate variance on columns
type BotInfoVarianceFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

# order by variance() on columns of table "bot_info"
input BotInfoVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type BotInfoVarPopFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

# order by varPop() on columns of table "bot_info"
input BotInfoVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type BotInfoVarSampFields {
  createdById: Float
  id: Float
  ownerId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "bot_info"
input BotInfoVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  ownerId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "campus"
type Campus {
  # An object relationship
  actorAddress: ActorAddress
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "campus"
type CampusAggregate {
  aggregate: CampusAggregateFields
  nodes: [Campus!]!
}

input CampusAggregateBoolExp {
  count: campusAggregateBoolExpCount
}

input campusAggregateBoolExpCount {
  arguments: [CampusSelectColumn!]
  distinct: Boolean
  filter: CampusBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "campus"
type CampusAggregateFields {
  avg: CampusAvgFields
  count(columns: [CampusSelectColumn!], distinct: Boolean): Int!
  max: CampusMaxFields
  min: CampusMinFields
  stddev: CampusStddevFields
  stddevPop: CampusStddevPopFields
  stddevSamp: CampusStddevSampFields
  sum: CampusSumFields
  varPop: CampusVarPopFields
  varSamp: CampusVarSampFields
  variance: CampusVarianceFields
}

# order by aggregate values of table "campus"
input CampusAggregateOrderBy {
  avg: CampusAvgOrderBy
  count: OrderBy
  max: CampusMaxOrderBy
  min: CampusMinOrderBy
  stddev: CampusStddevOrderBy
  stddevPop: CampusStddevPopOrderBy
  stddevSamp: CampusStddevSampOrderBy
  sum: CampusSumOrderBy
  varPop: CampusVarPopOrderBy
  varSamp: CampusVarSampOrderBy
  variance: CampusVarianceOrderBy
}

# input type for inserting array relation for remote table "campus"
input CampusArrRelInsertInput {
  data: [CampusInsertInput!]!

  # upsert condition
  onConflict: CampusOnConflict
}

# aggregate avg on columns
type CampusAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "campus"
input CampusAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "campus". All fields are combined with a logical 'AND'.
input CampusBoolExp {
  _and: [CampusBoolExp!]
  _not: CampusBoolExp
  _or: [CampusBoolExp!]
  actorAddress: ActorAddressBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "campus"
enum CampusConstraint {
  # unique or primary key constraint on columns "id"
  campus_pkey
}

# input type for incrementing numeric columns in table "campus"
input CampusIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "campus"
input CampusInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type CampusMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

# order by max() on columns of table "campus"
input CampusMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type CampusMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

# order by min() on columns of table "campus"
input CampusMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "campus"
type CampusMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Campus!]!
}

# input type for inserting object relation for remote table "campus"
input CampusObjRelInsertInput {
  data: CampusInsertInput!

  # upsert condition
  onConflict: CampusOnConflict
}

# on_conflict condition type for table "campus"
input CampusOnConflict {
  constraint: CampusConstraint!
  updateColumns: [CampusUpdateColumn!]! = []
  where: CampusBoolExp
}

# Ordering options when selecting data from "campus".
input CampusOrderBy {
  actorAddress: ActorAddressOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: campus
input CampusPkColumnsInput {
  id: bigint!
}

# select columns of table "campus"
enum CampusSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  tenantId
}

# input type for updating data in table "campus"
input CampusSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

# aggregate stddev on columns
type CampusStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "campus"
input CampusStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type CampusStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "campus"
input CampusStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type CampusStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "campus"
input CampusStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "campus"
input CampusStreamCursorInput {
  # Stream column input with initial value
  initialValue: CampusStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input CampusStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  tenantId: bigint
}

# aggregate sum on columns
type CampusSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "campus"
input CampusSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "campus"
enum CampusUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  tenantId
}

input CampusUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: CampusIncInput

  # sets the columns of the filtered rows to the given values
  _set: CampusSetInput

  # filter the rows which have to be updated
  where: CampusBoolExp!
}

# aggregate variance on columns
type CampusVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "campus"
input CampusVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type CampusVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "campus"
input CampusVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type CampusVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "campus"
input CampusVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "canteen"
type Canteen {
  # An array relationship
  canteenFoods(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  # An aggregate relationship
  canteenFoodsAggregate(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  # An array relationship
  canteenMenus(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  # An aggregate relationship
  canteenMenusAggregate(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  team: Team

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "canteen"
type CanteenAggregate {
  aggregate: CanteenAggregateFields
  nodes: [Canteen!]!
}

input CanteenAggregateBoolExp {
  count: canteenAggregateBoolExpCount
}

input canteenAggregateBoolExpCount {
  arguments: [CanteenSelectColumn!]
  distinct: Boolean
  filter: CanteenBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "canteen"
type CanteenAggregateFields {
  avg: CanteenAvgFields
  count(columns: [CanteenSelectColumn!], distinct: Boolean): Int!
  max: CanteenMaxFields
  min: CanteenMinFields
  stddev: CanteenStddevFields
  stddevPop: CanteenStddevPopFields
  stddevSamp: CanteenStddevSampFields
  sum: CanteenSumFields
  varPop: CanteenVarPopFields
  varSamp: CanteenVarSampFields
  variance: CanteenVarianceFields
}

# order by aggregate values of table "canteen"
input CanteenAggregateOrderBy {
  avg: CanteenAvgOrderBy
  count: OrderBy
  max: CanteenMaxOrderBy
  min: CanteenMinOrderBy
  stddev: CanteenStddevOrderBy
  stddevPop: CanteenStddevPopOrderBy
  stddevSamp: CanteenStddevSampOrderBy
  sum: CanteenSumOrderBy
  varPop: CanteenVarPopOrderBy
  varSamp: CanteenVarSampOrderBy
  variance: CanteenVarianceOrderBy
}

# input type for inserting array relation for remote table "canteen"
input CanteenArrRelInsertInput {
  data: [CanteenInsertInput!]!

  # upsert condition
  onConflict: CanteenOnConflict
}

# aggregate avg on columns
type CanteenAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "canteen"
input CanteenAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "canteen". All fields are combined with a logical 'AND'.
input CanteenBoolExp {
  _and: [CanteenBoolExp!]
  _not: CanteenBoolExp
  _or: [CanteenBoolExp!]
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "canteen"
enum CanteenConstraint {
  # unique or primary key constraint on columns "id"
  canteen_pkey
}

# columns and relationships of "canteen_food"
type CanteenFood {
  # An object relationship
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "canteen_food"
type CanteenFoodAggregate {
  aggregate: CanteenFoodAggregateFields
  nodes: [CanteenFood!]!
}

input CanteenFoodAggregateBoolExp {
  count: canteenFoodAggregateBoolExpCount
}

input canteenFoodAggregateBoolExpCount {
  arguments: [CanteenFoodSelectColumn!]
  distinct: Boolean
  filter: CanteenFoodBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "canteen_food"
type CanteenFoodAggregateFields {
  avg: CanteenFoodAvgFields
  count(columns: [CanteenFoodSelectColumn!], distinct: Boolean): Int!
  max: CanteenFoodMaxFields
  min: CanteenFoodMinFields
  stddev: CanteenFoodStddevFields
  stddevPop: CanteenFoodStddevPopFields
  stddevSamp: CanteenFoodStddevSampFields
  sum: CanteenFoodSumFields
  varPop: CanteenFoodVarPopFields
  varSamp: CanteenFoodVarSampFields
  variance: CanteenFoodVarianceFields
}

# order by aggregate values of table "canteen_food"
input CanteenFoodAggregateOrderBy {
  avg: CanteenFoodAvgOrderBy
  count: OrderBy
  max: CanteenFoodMaxOrderBy
  min: CanteenFoodMinOrderBy
  stddev: CanteenFoodStddevOrderBy
  stddevPop: CanteenFoodStddevPopOrderBy
  stddevSamp: CanteenFoodStddevSampOrderBy
  sum: CanteenFoodSumOrderBy
  varPop: CanteenFoodVarPopOrderBy
  varSamp: CanteenFoodVarSampOrderBy
  variance: CanteenFoodVarianceOrderBy
}

# input type for inserting array relation for remote table "canteen_food"
input CanteenFoodArrRelInsertInput {
  data: [CanteenFoodInsertInput!]!

  # upsert condition
  onConflict: CanteenFoodOnConflict
}

# aggregate avg on columns
type CanteenFoodAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "canteen_food"
input CanteenFoodAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "canteen_food". All fields are combined with a logical 'AND'.
input CanteenFoodBoolExp {
  _and: [CanteenFoodBoolExp!]
  _not: CanteenFoodBoolExp
  _or: [CanteenFoodBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "canteen_food"
enum CanteenFoodConstraint {
  # unique or primary key constraint on columns "id"
  canteen_food_pkey
}

# input type for incrementing numeric columns in table "canteen_food"
input CanteenFoodIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "canteen_food"
input CanteenFoodInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type CanteenFoodMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by max() on columns of table "canteen_food"
input CanteenFoodMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type CanteenFoodMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by min() on columns of table "canteen_food"
input CanteenFoodMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "canteen_food"
type CanteenFoodMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [CanteenFood!]!
}

# on_conflict condition type for table "canteen_food"
input CanteenFoodOnConflict {
  constraint: CanteenFoodConstraint!
  updateColumns: [CanteenFoodUpdateColumn!]! = []
  where: CanteenFoodBoolExp
}

# Ordering options when selecting data from "canteen_food".
input CanteenFoodOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: canteen_food
input CanteenFoodPkColumnsInput {
  id: bigint!
}

# select columns of table "canteen_food"
enum CanteenFoodSelectColumn {
  # column name
  canteenId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

# input type for updating data in table "canteen_food"
input CanteenFoodSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type CanteenFoodStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "canteen_food"
input CanteenFoodStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type CanteenFoodStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "canteen_food"
input CanteenFoodStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type CanteenFoodStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "canteen_food"
input CanteenFoodStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "canteen_food"
input CanteenFoodStreamCursorInput {
  # Stream column input with initial value
  initialValue: CanteenFoodStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input CanteenFoodStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate sum on columns
type CanteenFoodSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "canteen_food"
input CanteenFoodSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "canteen_food"
enum CanteenFoodUpdateColumn {
  # column name
  canteenId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

input CanteenFoodUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: CanteenFoodIncInput

  # sets the columns of the filtered rows to the given values
  _set: CanteenFoodSetInput

  # filter the rows which have to be updated
  where: CanteenFoodBoolExp!
}

# aggregate variance on columns
type CanteenFoodVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "canteen_food"
input CanteenFoodVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type CanteenFoodVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "canteen_food"
input CanteenFoodVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type CanteenFoodVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "canteen_food"
input CanteenFoodVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# input type for incrementing numeric columns in table "canteen"
input CanteenIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "canteen"
input CanteenInsertInput {
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type CanteenMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by max() on columns of table "canteen"
input CanteenMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "canteen_menu"
type CanteenMenu {
  # An object relationship
  canteen: Canteen!
  canteenId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "canteen_menu"
type CanteenMenuAggregate {
  aggregate: CanteenMenuAggregateFields
  nodes: [CanteenMenu!]!
}

input CanteenMenuAggregateBoolExp {
  count: canteenMenuAggregateBoolExpCount
}

input canteenMenuAggregateBoolExpCount {
  arguments: [CanteenMenuSelectColumn!]
  distinct: Boolean
  filter: CanteenMenuBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "canteen_menu"
type CanteenMenuAggregateFields {
  avg: CanteenMenuAvgFields
  count(columns: [CanteenMenuSelectColumn!], distinct: Boolean): Int!
  max: CanteenMenuMaxFields
  min: CanteenMenuMinFields
  stddev: CanteenMenuStddevFields
  stddevPop: CanteenMenuStddevPopFields
  stddevSamp: CanteenMenuStddevSampFields
  sum: CanteenMenuSumFields
  varPop: CanteenMenuVarPopFields
  varSamp: CanteenMenuVarSampFields
  variance: CanteenMenuVarianceFields
}

# order by aggregate values of table "canteen_menu"
input CanteenMenuAggregateOrderBy {
  avg: CanteenMenuAvgOrderBy
  count: OrderBy
  max: CanteenMenuMaxOrderBy
  min: CanteenMenuMinOrderBy
  stddev: CanteenMenuStddevOrderBy
  stddevPop: CanteenMenuStddevPopOrderBy
  stddevSamp: CanteenMenuStddevSampOrderBy
  sum: CanteenMenuSumOrderBy
  varPop: CanteenMenuVarPopOrderBy
  varSamp: CanteenMenuVarSampOrderBy
  variance: CanteenMenuVarianceOrderBy
}

# input type for inserting array relation for remote table "canteen_menu"
input CanteenMenuArrRelInsertInput {
  data: [CanteenMenuInsertInput!]!

  # upsert condition
  onConflict: CanteenMenuOnConflict
}

# aggregate avg on columns
type CanteenMenuAvgFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "canteen_menu"
input CanteenMenuAvgOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "canteen_menu". All fields are combined with a logical 'AND'.
input CanteenMenuBoolExp {
  _and: [CanteenMenuBoolExp!]
  _not: CanteenMenuBoolExp
  _or: [CanteenMenuBoolExp!]
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "canteen_menu"
enum CanteenMenuConstraint {
  # unique or primary key constraint on columns "id"
  canteen_menu_pkey
}

# input type for incrementing numeric columns in table "canteen_menu"
input CanteenMenuIncInput {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "canteen_menu"
input CanteenMenuInsertInput {
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type CanteenMenuMaxFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by max() on columns of table "canteen_menu"
input CanteenMenuMaxOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type CanteenMenuMinFields {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by min() on columns of table "canteen_menu"
input CanteenMenuMinOrderBy {
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "canteen_menu"
type CanteenMenuMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [CanteenMenu!]!
}

# on_conflict condition type for table "canteen_menu"
input CanteenMenuOnConflict {
  constraint: CanteenMenuConstraint!
  updateColumns: [CanteenMenuUpdateColumn!]! = []
  where: CanteenMenuBoolExp
}

# Ordering options when selecting data from "canteen_menu".
input CanteenMenuOrderBy {
  canteen: CanteenOrderBy
  canteenId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: canteen_menu
input CanteenMenuPkColumnsInput {
  id: bigint!
}

# select columns of table "canteen_menu"
enum CanteenMenuSelectColumn {
  # column name
  canteenId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

# input type for updating data in table "canteen_menu"
input CanteenMenuSetInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type CanteenMenuStddevFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "canteen_menu"
input CanteenMenuStddevOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type CanteenMenuStddevPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "canteen_menu"
input CanteenMenuStddevPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type CanteenMenuStddevSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "canteen_menu"
input CanteenMenuStddevSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "canteen_menu"
input CanteenMenuStreamCursorInput {
  # Stream column input with initial value
  initialValue: CanteenMenuStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input CanteenMenuStreamCursorValueInput {
  canteenId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate sum on columns
type CanteenMenuSumFields {
  canteenId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "canteen_menu"
input CanteenMenuSumOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "canteen_menu"
enum CanteenMenuUpdateColumn {
  # column name
  canteenId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

input CanteenMenuUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: CanteenMenuIncInput

  # sets the columns of the filtered rows to the given values
  _set: CanteenMenuSetInput

  # filter the rows which have to be updated
  where: CanteenMenuBoolExp!
}

# aggregate variance on columns
type CanteenMenuVarianceFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "canteen_menu"
input CanteenMenuVarianceOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type CanteenMenuVarPopFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "canteen_menu"
input CanteenMenuVarPopOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type CanteenMenuVarSampFields {
  canteenId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "canteen_menu"
input CanteenMenuVarSampOrderBy {
  canteenId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type CanteenMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by min() on columns of table "canteen"
input CanteenMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "canteen"
type CanteenMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Canteen!]!
}

# input type for inserting object relation for remote table "canteen"
input CanteenObjRelInsertInput {
  data: CanteenInsertInput!

  # upsert condition
  onConflict: CanteenOnConflict
}

# on_conflict condition type for table "canteen"
input CanteenOnConflict {
  constraint: CanteenConstraint!
  updateColumns: [CanteenUpdateColumn!]! = []
  where: CanteenBoolExp
}

# Ordering options when selecting data from "canteen".
input CanteenOrderBy {
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: canteen
input CanteenPkColumnsInput {
  id: bigint!
}

# select columns of table "canteen"
enum CanteenSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

# input type for updating data in table "canteen"
input CanteenSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type CanteenStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "canteen"
input CanteenStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type CanteenStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "canteen"
input CanteenStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type CanteenStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "canteen"
input CanteenStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "canteen"
input CanteenStreamCursorInput {
  # Stream column input with initial value
  initialValue: CanteenStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input CanteenStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate sum on columns
type CanteenSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "canteen"
input CanteenSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "canteen"
enum CanteenUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

input CanteenUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: CanteenIncInput

  # sets the columns of the filtered rows to the given values
  _set: CanteenSetInput

  # filter the rows which have to be updated
  where: CanteenBoolExp!
}

# aggregate variance on columns
type CanteenVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "canteen"
input CanteenVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type CanteenVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "canteen"
input CanteenVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type CanteenVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "canteen"
input CanteenVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "class_group"
type ClassGroup {
  # An array relationship
  classGroupTeachers(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  # An aggregate relationship
  classGroupTeachersAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An array relationship
  subjectClassGroups(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  # An aggregate relationship
  subjectClassGroupsAggregate(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  # An object relationship
  team: Team

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

# aggregated selection of "class_group"
type ClassGroupAggregate {
  aggregate: ClassGroupAggregateFields
  nodes: [ClassGroup!]!
}

input ClassGroupAggregateBoolExp {
  count: classGroupAggregateBoolExpCount
}

input classGroupAggregateBoolExpCount {
  arguments: [ClassGroupSelectColumn!]
  distinct: Boolean
  filter: ClassGroupBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "class_group"
type ClassGroupAggregateFields {
  avg: ClassGroupAvgFields
  count(columns: [ClassGroupSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupMaxFields
  min: ClassGroupMinFields
  stddev: ClassGroupStddevFields
  stddevPop: ClassGroupStddevPopFields
  stddevSamp: ClassGroupStddevSampFields
  sum: ClassGroupSumFields
  varPop: ClassGroupVarPopFields
  varSamp: ClassGroupVarSampFields
  variance: ClassGroupVarianceFields
}

# order by aggregate values of table "class_group"
input ClassGroupAggregateOrderBy {
  avg: ClassGroupAvgOrderBy
  count: OrderBy
  max: ClassGroupMaxOrderBy
  min: ClassGroupMinOrderBy
  stddev: ClassGroupStddevOrderBy
  stddevPop: ClassGroupStddevPopOrderBy
  stddevSamp: ClassGroupStddevSampOrderBy
  sum: ClassGroupSumOrderBy
  varPop: ClassGroupVarPopOrderBy
  varSamp: ClassGroupVarSampOrderBy
  variance: ClassGroupVarianceOrderBy
}

# input type for inserting array relation for remote table "class_group"
input ClassGroupArrRelInsertInput {
  data: [ClassGroupInsertInput!]!

  # upsert condition
  onConflict: ClassGroupOnConflict
}

# aggregate avg on columns
type ClassGroupAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "class_group"
input ClassGroupAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "class_group". All fields are combined with a logical 'AND'.
input ClassGroupBoolExp {
  _and: [ClassGroupBoolExp!]
  _not: ClassGroupBoolExp
  _or: [ClassGroupBoolExp!]
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

# unique or primary key constraints on table "class_group"
enum ClassGroupConstraint {
  # unique or primary key constraint on columns "id"
  class_group_pkey
}

# input type for incrementing numeric columns in table "class_group"
input ClassGroupIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "class_group"
input ClassGroupInsertInput {
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

# aggregate max on columns
type ClassGroupMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

# order by max() on columns of table "class_group"
input ClassGroupMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type ClassGroupMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

# order by min() on columns of table "class_group"
input ClassGroupMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "class_group"
type ClassGroupMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ClassGroup!]!
}

# input type for inserting object relation for remote table "class_group"
input ClassGroupObjRelInsertInput {
  data: ClassGroupInsertInput!

  # upsert condition
  onConflict: ClassGroupOnConflict
}

# on_conflict condition type for table "class_group"
input ClassGroupOnConflict {
  constraint: ClassGroupConstraint!
  updateColumns: [ClassGroupUpdateColumn!]! = []
  where: ClassGroupBoolExp
}

# Ordering options when selecting data from "class_group".
input ClassGroupOrderBy {
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

# primary key columns input for table: class_group
input ClassGroupPkColumnsInput {
  id: bigint!
}

# select columns of table "class_group"
enum ClassGroupSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId

  # column name
  type
}

# input type for updating data in table "class_group"
input ClassGroupSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type ClassGroupStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "class_group"
input ClassGroupStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ClassGroupStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "class_group"
input ClassGroupStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ClassGroupStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "class_group"
input ClassGroupStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "class_group"
input ClassGroupStreamCursorInput {
  # Stream column input with initial value
  initialValue: ClassGroupStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ClassGroupStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
}

# aggregate sum on columns
type ClassGroupSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "class_group"
input ClassGroupSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "class_group_teacher"
type ClassGroupTeacher {
  # An object relationship
  classGroup: ClassGroup!
  classGroupId: bigint!

  # An array relationship
  classGroupTeacherSubjects(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  # An aggregate relationship
  classGroupTeacherSubjectsAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  startDate: timestamptz!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "class_group_teacher"
type ClassGroupTeacherAggregate {
  aggregate: ClassGroupTeacherAggregateFields
  nodes: [ClassGroupTeacher!]!
}

input ClassGroupTeacherAggregateBoolExp {
  count: classGroupTeacherAggregateBoolExpCount
}

input classGroupTeacherAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "class_group_teacher"
type ClassGroupTeacherAggregateFields {
  avg: ClassGroupTeacherAvgFields
  count(columns: [ClassGroupTeacherSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherMaxFields
  min: ClassGroupTeacherMinFields
  stddev: ClassGroupTeacherStddevFields
  stddevPop: ClassGroupTeacherStddevPopFields
  stddevSamp: ClassGroupTeacherStddevSampFields
  sum: ClassGroupTeacherSumFields
  varPop: ClassGroupTeacherVarPopFields
  varSamp: ClassGroupTeacherVarSampFields
  variance: ClassGroupTeacherVarianceFields
}

# order by aggregate values of table "class_group_teacher"
input ClassGroupTeacherAggregateOrderBy {
  avg: ClassGroupTeacherAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherMaxOrderBy
  min: ClassGroupTeacherMinOrderBy
  stddev: ClassGroupTeacherStddevOrderBy
  stddevPop: ClassGroupTeacherStddevPopOrderBy
  stddevSamp: ClassGroupTeacherStddevSampOrderBy
  sum: ClassGroupTeacherSumOrderBy
  varPop: ClassGroupTeacherVarPopOrderBy
  varSamp: ClassGroupTeacherVarSampOrderBy
  variance: ClassGroupTeacherVarianceOrderBy
}

# input type for inserting array relation for remote table "class_group_teacher"
input ClassGroupTeacherArrRelInsertInput {
  data: [ClassGroupTeacherInsertInput!]!

  # upsert condition
  onConflict: ClassGroupTeacherOnConflict
}

# aggregate avg on columns
type ClassGroupTeacherAvgFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by avg() on columns of table "class_group_teacher"
input ClassGroupTeacherAvgOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Boolean expression to filter rows from the table "class_group_teacher". All fields are combined with a logical 'AND'.
input ClassGroupTeacherBoolExp {
  _and: [ClassGroupTeacherBoolExp!]
  _not: ClassGroupTeacherBoolExp
  _or: [ClassGroupTeacherBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  startDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "class_group_teacher"
enum ClassGroupTeacherConstraint {
  # unique or primary key constraint on columns "id"
  class_group_teacher_pkey
}

# input type for incrementing numeric columns in table "class_group_teacher"
input ClassGroupTeacherIncInput {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

# input type for inserting data into table "class_group_teacher"
input ClassGroupTeacherInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  startDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type ClassGroupTeacherMaxFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

# order by max() on columns of table "class_group_teacher"
input ClassGroupTeacherMaxOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate min on columns
type ClassGroupTeacherMinFields {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

# order by min() on columns of table "class_group_teacher"
input ClassGroupTeacherMinOrderBy {
  classGroupId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  startDate: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# response of any mutation on the table "class_group_teacher"
type ClassGroupTeacherMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ClassGroupTeacher!]!
}

# input type for inserting object relation for remote table "class_group_teacher"
input ClassGroupTeacherObjRelInsertInput {
  data: ClassGroupTeacherInsertInput!

  # upsert condition
  onConflict: ClassGroupTeacherOnConflict
}

# on_conflict condition type for table "class_group_teacher"
input ClassGroupTeacherOnConflict {
  constraint: ClassGroupTeacherConstraint!
  updateColumns: [ClassGroupTeacherUpdateColumn!]! = []
  where: ClassGroupTeacherBoolExp
}

# Ordering options when selecting data from "class_group_teacher".
input ClassGroupTeacherOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  startDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: class_group_teacher
input ClassGroupTeacherPkColumnsInput {
  id: bigint!
}

# select columns of table "class_group_teacher"
enum ClassGroupTeacherSelectColumn {
  # column name
  classGroupId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  endDate

  # column name
  hiddenAt

  # column name
  id

  # column name
  startDate

  # column name
  tenantId

  # column name
  userId
}

# input type for updating data in table "class_group_teacher"
input ClassGroupTeacherSetInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

# aggregate stddev on columns
type ClassGroupTeacherStddevFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddev() on columns of table "class_group_teacher"
input ClassGroupTeacherStddevOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevPop on columns
type ClassGroupTeacherStddevPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddevPop() on columns of table "class_group_teacher"
input ClassGroupTeacherStddevPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevSamp on columns
type ClassGroupTeacherStddevSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddevSamp() on columns of table "class_group_teacher"
input ClassGroupTeacherStddevSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Streaming cursor of the table "class_group_teacher"
input ClassGroupTeacherStreamCursorInput {
  # Stream column input with initial value
  initialValue: ClassGroupTeacherStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ClassGroupTeacherStreamCursorValueInput {
  classGroupId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  startDate: timestamptz
  tenantId: bigint
  userId: bigint
}

# columns and relationships of "class_group_teacher_subjects"
type ClassGroupTeacherSubjects {
  # An object relationship
  classGroupTeacher: ClassGroupTeacher!
  classGroupTeacherId: bigint!

  # An object relationship
  subject: Subject!
  subjectId: bigint!
}

# aggregated selection of "class_group_teacher_subjects"
type ClassGroupTeacherSubjectsAggregate {
  aggregate: ClassGroupTeacherSubjectsAggregateFields
  nodes: [ClassGroupTeacherSubjects!]!
}

input ClassGroupTeacherSubjectsAggregateBoolExp {
  count: classGroupTeacherSubjectsAggregateBoolExpCount
}

input classGroupTeacherSubjectsAggregateBoolExpCount {
  arguments: [ClassGroupTeacherSubjectsSelectColumn!]
  distinct: Boolean
  filter: ClassGroupTeacherSubjectsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "class_group_teacher_subjects"
type ClassGroupTeacherSubjectsAggregateFields {
  avg: ClassGroupTeacherSubjectsAvgFields
  count(columns: [ClassGroupTeacherSubjectsSelectColumn!], distinct: Boolean): Int!
  max: ClassGroupTeacherSubjectsMaxFields
  min: ClassGroupTeacherSubjectsMinFields
  stddev: ClassGroupTeacherSubjectsStddevFields
  stddevPop: ClassGroupTeacherSubjectsStddevPopFields
  stddevSamp: ClassGroupTeacherSubjectsStddevSampFields
  sum: ClassGroupTeacherSubjectsSumFields
  varPop: ClassGroupTeacherSubjectsVarPopFields
  varSamp: ClassGroupTeacherSubjectsVarSampFields
  variance: ClassGroupTeacherSubjectsVarianceFields
}

# order by aggregate values of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsAggregateOrderBy {
  avg: ClassGroupTeacherSubjectsAvgOrderBy
  count: OrderBy
  max: ClassGroupTeacherSubjectsMaxOrderBy
  min: ClassGroupTeacherSubjectsMinOrderBy
  stddev: ClassGroupTeacherSubjectsStddevOrderBy
  stddevPop: ClassGroupTeacherSubjectsStddevPopOrderBy
  stddevSamp: ClassGroupTeacherSubjectsStddevSampOrderBy
  sum: ClassGroupTeacherSubjectsSumOrderBy
  varPop: ClassGroupTeacherSubjectsVarPopOrderBy
  varSamp: ClassGroupTeacherSubjectsVarSampOrderBy
  variance: ClassGroupTeacherSubjectsVarianceOrderBy
}

# input type for inserting array relation for remote table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsArrRelInsertInput {
  data: [ClassGroupTeacherSubjectsInsertInput!]!

  # upsert condition
  onConflict: ClassGroupTeacherSubjectsOnConflict
}

# aggregate avg on columns
type ClassGroupTeacherSubjectsAvgFields {
  classGroupTeacherId: Float
  subjectId: Float
}

# order by avg() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsAvgOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# Boolean expression to filter rows from the table "class_group_teacher_subjects".
# All fields are combined with a logical 'AND'.
input ClassGroupTeacherSubjectsBoolExp {
  _and: [ClassGroupTeacherSubjectsBoolExp!]
  _not: ClassGroupTeacherSubjectsBoolExp
  _or: [ClassGroupTeacherSubjectsBoolExp!]
  classGroupTeacher: ClassGroupTeacherBoolExp
  classGroupTeacherId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

# unique or primary key constraints on table "class_group_teacher_subjects"
enum ClassGroupTeacherSubjectsConstraint {
  # unique or primary key constraint on columns "class_group_teacher_id", "subject_id"
  class_group_teacher_subjects_pkey
}

# input type for incrementing numeric columns in table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsIncInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

# input type for inserting data into table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsInsertInput {
  classGroupTeacher: ClassGroupTeacherObjRelInsertInput
  classGroupTeacherId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

# aggregate max on columns
type ClassGroupTeacherSubjectsMaxFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

# order by max() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsMaxOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# aggregate min on columns
type ClassGroupTeacherSubjectsMinFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

# order by min() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsMinOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# response of any mutation on the table "class_group_teacher_subjects"
type ClassGroupTeacherSubjectsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ClassGroupTeacherSubjects!]!
}

# on_conflict condition type for table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsOnConflict {
  constraint: ClassGroupTeacherSubjectsConstraint!
  updateColumns: [ClassGroupTeacherSubjectsUpdateColumn!]! = []
  where: ClassGroupTeacherSubjectsBoolExp
}

# Ordering options when selecting data from "class_group_teacher_subjects".
input ClassGroupTeacherSubjectsOrderBy {
  classGroupTeacher: ClassGroupTeacherOrderBy
  classGroupTeacherId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

# primary key columns input for table: class_group_teacher_subjects
input ClassGroupTeacherSubjectsPkColumnsInput {
  classGroupTeacherId: bigint!
  subjectId: bigint!
}

# select columns of table "class_group_teacher_subjects"
enum ClassGroupTeacherSubjectsSelectColumn {
  # column name
  classGroupTeacherId

  # column name
  subjectId
}

# input type for updating data in table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsSetInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

# aggregate stddev on columns
type ClassGroupTeacherSubjectsStddevFields {
  classGroupTeacherId: Float
  subjectId: Float
}

# order by stddev() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsStddevOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# aggregate stddevPop on columns
type ClassGroupTeacherSubjectsStddevPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

# order by stddevPop() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsStddevPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# aggregate stddevSamp on columns
type ClassGroupTeacherSubjectsStddevSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

# order by stddevSamp() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsStddevSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# Streaming cursor of the table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ClassGroupTeacherSubjectsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ClassGroupTeacherSubjectsStreamCursorValueInput {
  classGroupTeacherId: bigint
  subjectId: bigint
}

# aggregate sum on columns
type ClassGroupTeacherSubjectsSumFields {
  classGroupTeacherId: bigint
  subjectId: bigint
}

# order by sum() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsSumOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# update columns of table "class_group_teacher_subjects"
enum ClassGroupTeacherSubjectsUpdateColumn {
  # column name
  classGroupTeacherId

  # column name
  subjectId
}

input ClassGroupTeacherSubjectsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ClassGroupTeacherSubjectsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ClassGroupTeacherSubjectsSetInput

  # filter the rows which have to be updated
  where: ClassGroupTeacherSubjectsBoolExp!
}

# aggregate variance on columns
type ClassGroupTeacherSubjectsVarianceFields {
  classGroupTeacherId: Float
  subjectId: Float
}

# order by variance() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsVarianceOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# aggregate varPop on columns
type ClassGroupTeacherSubjectsVarPopFields {
  classGroupTeacherId: Float
  subjectId: Float
}

# order by varPop() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsVarPopOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# aggregate varSamp on columns
type ClassGroupTeacherSubjectsVarSampFields {
  classGroupTeacherId: Float
  subjectId: Float
}

# order by varSamp() on columns of table "class_group_teacher_subjects"
input ClassGroupTeacherSubjectsVarSampOrderBy {
  classGroupTeacherId: OrderBy
  subjectId: OrderBy
}

# aggregate sum on columns
type ClassGroupTeacherSumFields {
  classGroupId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

# order by sum() on columns of table "class_group_teacher"
input ClassGroupTeacherSumOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# update columns of table "class_group_teacher"
enum ClassGroupTeacherUpdateColumn {
  # column name
  classGroupId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  endDate

  # column name
  hiddenAt

  # column name
  id

  # column name
  startDate

  # column name
  tenantId

  # column name
  userId
}

input ClassGroupTeacherUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ClassGroupTeacherIncInput

  # sets the columns of the filtered rows to the given values
  _set: ClassGroupTeacherSetInput

  # filter the rows which have to be updated
  where: ClassGroupTeacherBoolExp!
}

# aggregate variance on columns
type ClassGroupTeacherVarianceFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by variance() on columns of table "class_group_teacher"
input ClassGroupTeacherVarianceOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varPop on columns
type ClassGroupTeacherVarPopFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by varPop() on columns of table "class_group_teacher"
input ClassGroupTeacherVarPopOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varSamp on columns
type ClassGroupTeacherVarSampFields {
  classGroupId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by varSamp() on columns of table "class_group_teacher"
input ClassGroupTeacherVarSampOrderBy {
  classGroupId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# update columns of table "class_group"
enum ClassGroupUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId

  # column name
  type
}

input ClassGroupUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ClassGroupIncInput

  # sets the columns of the filtered rows to the given values
  _set: ClassGroupSetInput

  # filter the rows which have to be updated
  where: ClassGroupBoolExp!
}

# aggregate variance on columns
type ClassGroupVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "class_group"
input ClassGroupVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ClassGroupVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "class_group"
input ClassGroupVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ClassGroupVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "class_group"
input ClassGroupVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "cohort"
type Cohort {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  team: Team

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  year: smallint!
}

# aggregated selection of "cohort"
type CohortAggregate {
  aggregate: CohortAggregateFields
  nodes: [Cohort!]!
}

input CohortAggregateBoolExp {
  count: cohortAggregateBoolExpCount
}

input cohortAggregateBoolExpCount {
  arguments: [CohortSelectColumn!]
  distinct: Boolean
  filter: CohortBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "cohort"
type CohortAggregateFields {
  avg: CohortAvgFields
  count(columns: [CohortSelectColumn!], distinct: Boolean): Int!
  max: CohortMaxFields
  min: CohortMinFields
  stddev: CohortStddevFields
  stddevPop: CohortStddevPopFields
  stddevSamp: CohortStddevSampFields
  sum: CohortSumFields
  varPop: CohortVarPopFields
  varSamp: CohortVarSampFields
  variance: CohortVarianceFields
}

# order by aggregate values of table "cohort"
input CohortAggregateOrderBy {
  avg: CohortAvgOrderBy
  count: OrderBy
  max: CohortMaxOrderBy
  min: CohortMinOrderBy
  stddev: CohortStddevOrderBy
  stddevPop: CohortStddevPopOrderBy
  stddevSamp: CohortStddevSampOrderBy
  sum: CohortSumOrderBy
  varPop: CohortVarPopOrderBy
  varSamp: CohortVarSampOrderBy
  variance: CohortVarianceOrderBy
}

# input type for inserting array relation for remote table "cohort"
input CohortArrRelInsertInput {
  data: [CohortInsertInput!]!

  # upsert condition
  onConflict: CohortOnConflict
}

# aggregate avg on columns
type CohortAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

# order by avg() on columns of table "cohort"
input CohortAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# Boolean expression to filter rows from the table "cohort". All fields are combined with a logical 'AND'.
input CohortBoolExp {
  _and: [CohortBoolExp!]
  _not: CohortBoolExp
  _or: [CohortBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  team: TeamBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  year: SmallintComparisonExp
}

# unique or primary key constraints on table "cohort"
enum CohortConstraint {
  # unique or primary key constraint on columns "id"
  cohort_pkey
}

# input type for incrementing numeric columns in table "cohort"
input CohortIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

# input type for inserting data into table "cohort"
input CohortInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  team: TeamObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  year: smallint
}

# aggregate max on columns
type CohortMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

# order by max() on columns of table "cohort"
input CohortMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# aggregate min on columns
type CohortMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

# order by min() on columns of table "cohort"
input CohortMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# response of any mutation on the table "cohort"
type CohortMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Cohort!]!
}

# input type for inserting object relation for remote table "cohort"
input CohortObjRelInsertInput {
  data: CohortInsertInput!

  # upsert condition
  onConflict: CohortOnConflict
}

# on_conflict condition type for table "cohort"
input CohortOnConflict {
  constraint: CohortConstraint!
  updateColumns: [CohortUpdateColumn!]! = []
  where: CohortBoolExp
}

# Ordering options when selecting data from "cohort".
input CohortOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  team: TeamOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  year: OrderBy
}

# primary key columns input for table: cohort
input CohortPkColumnsInput {
  id: bigint!
}

# select columns of table "cohort"
enum CohortSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId

  # column name
  year
}

# input type for updating data in table "cohort"
input CohortSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

# aggregate stddev on columns
type CohortStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

# order by stddev() on columns of table "cohort"
input CohortStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# aggregate stddevPop on columns
type CohortStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

# order by stddevPop() on columns of table "cohort"
input CohortStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# aggregate stddevSamp on columns
type CohortStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

# order by stddevSamp() on columns of table "cohort"
input CohortStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# Streaming cursor of the table "cohort"
input CohortStreamCursorInput {
  # Stream column input with initial value
  initialValue: CohortStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input CohortStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  year: smallint
}

# aggregate sum on columns
type CohortSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  year: smallint
}

# order by sum() on columns of table "cohort"
input CohortSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# update columns of table "cohort"
enum CohortUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId

  # column name
  year
}

input CohortUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: CohortIncInput

  # sets the columns of the filtered rows to the given values
  _set: CohortSetInput

  # filter the rows which have to be updated
  where: CohortBoolExp!
}

# aggregate variance on columns
type CohortVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

# order by variance() on columns of table "cohort"
input CohortVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# aggregate varPop on columns
type CohortVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

# order by varPop() on columns of table "cohort"
input CohortVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# aggregate varSamp on columns
type CohortVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  year: Float
}

# order by varSamp() on columns of table "cohort"
input CohortVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  year: OrderBy
}

# columns and relationships of "content"
type Content {
  # An object relationship
  content: Content

  # An array relationship
  contentAttachments(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  # An aggregate relationship
  contentAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!

  # An object relationship
  contentByReplyingToId: Content

  # An array relationship
  contents(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # An aggregate relationship
  contentsAggregate(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): ContentAggregate!

  # An array relationship
  contentsByReplyingToId(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # An aggregate relationship
  contentsByReplyingToIdAggregate(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  event: Event

  # An array relationship
  favorites(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): [Favorite!]!

  # An aggregate relationship
  favoritesAggregate(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): FavoriteAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  isAnonymous: Boolean!

  # An object relationship
  issue: Issue
  parentId: bigint

  # An array relationship
  reactions(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): [Reaction!]!

  # An aggregate relationship
  reactionsAggregate(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): ReactionAggregate!
  replyingToId: bigint

  # An array relationship
  reports(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): [Report!]!

  # An aggregate relationship
  reportsAggregate(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): ReportAggregate!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  text: String!

  # An object relationship
  thread: Thread

  # An array relationship
  validations(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): [Validation!]!

  # An aggregate relationship
  validationsAggregate(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): ValidationAggregate!

  # An array relationship
  votes(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): [Vote!]!

  # An aggregate relationship
  votesAggregate(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): VoteAggregate!
}

# aggregated selection of "content"
type ContentAggregate {
  aggregate: ContentAggregateFields
  nodes: [Content!]!
}

input ContentAggregateBoolExp {
  bool_and: contentAggregateBoolExpBool_and
  bool_or: contentAggregateBoolExpBool_or
  count: contentAggregateBoolExpCount
}

input contentAggregateBoolExpBool_and {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpBool_or {
  arguments: ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ContentBoolExp
  predicate: BooleanComparisonExp!
}

input contentAggregateBoolExpCount {
  arguments: [ContentSelectColumn!]
  distinct: Boolean
  filter: ContentBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "content"
type ContentAggregateFields {
  avg: ContentAvgFields
  count(columns: [ContentSelectColumn!], distinct: Boolean): Int!
  max: ContentMaxFields
  min: ContentMinFields
  stddev: ContentStddevFields
  stddevPop: ContentStddevPopFields
  stddevSamp: ContentStddevSampFields
  sum: ContentSumFields
  varPop: ContentVarPopFields
  varSamp: ContentVarSampFields
  variance: ContentVarianceFields
}

# order by aggregate values of table "content"
input ContentAggregateOrderBy {
  avg: ContentAvgOrderBy
  count: OrderBy
  max: ContentMaxOrderBy
  min: ContentMinOrderBy
  stddev: ContentStddevOrderBy
  stddevPop: ContentStddevPopOrderBy
  stddevSamp: ContentStddevSampOrderBy
  sum: ContentSumOrderBy
  varPop: ContentVarPopOrderBy
  varSamp: ContentVarSampOrderBy
  variance: ContentVarianceOrderBy
}

# input type for inserting array relation for remote table "content"
input ContentArrRelInsertInput {
  data: [ContentInsertInput!]!

  # upsert condition
  onConflict: ContentOnConflict
}

# columns and relationships of "content_attachments"
type ContentAttachments {
  # An object relationship
  content: Content!
  contentId: bigint!

  # An object relationship
  fileUpload: FileUpload!
  fileUploadId: bigint!
}

# aggregated selection of "content_attachments"
type ContentAttachmentsAggregate {
  aggregate: ContentAttachmentsAggregateFields
  nodes: [ContentAttachments!]!
}

input ContentAttachmentsAggregateBoolExp {
  count: contentAttachmentsAggregateBoolExpCount
}

input contentAttachmentsAggregateBoolExpCount {
  arguments: [ContentAttachmentsSelectColumn!]
  distinct: Boolean
  filter: ContentAttachmentsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "content_attachments"
type ContentAttachmentsAggregateFields {
  avg: ContentAttachmentsAvgFields
  count(columns: [ContentAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: ContentAttachmentsMaxFields
  min: ContentAttachmentsMinFields
  stddev: ContentAttachmentsStddevFields
  stddevPop: ContentAttachmentsStddevPopFields
  stddevSamp: ContentAttachmentsStddevSampFields
  sum: ContentAttachmentsSumFields
  varPop: ContentAttachmentsVarPopFields
  varSamp: ContentAttachmentsVarSampFields
  variance: ContentAttachmentsVarianceFields
}

# order by aggregate values of table "content_attachments"
input ContentAttachmentsAggregateOrderBy {
  avg: ContentAttachmentsAvgOrderBy
  count: OrderBy
  max: ContentAttachmentsMaxOrderBy
  min: ContentAttachmentsMinOrderBy
  stddev: ContentAttachmentsStddevOrderBy
  stddevPop: ContentAttachmentsStddevPopOrderBy
  stddevSamp: ContentAttachmentsStddevSampOrderBy
  sum: ContentAttachmentsSumOrderBy
  varPop: ContentAttachmentsVarPopOrderBy
  varSamp: ContentAttachmentsVarSampOrderBy
  variance: ContentAttachmentsVarianceOrderBy
}

# input type for inserting array relation for remote table "content_attachments"
input ContentAttachmentsArrRelInsertInput {
  data: [ContentAttachmentsInsertInput!]!

  # upsert condition
  onConflict: ContentAttachmentsOnConflict
}

# aggregate avg on columns
type ContentAttachmentsAvgFields {
  contentId: Float
  fileUploadId: Float
}

# order by avg() on columns of table "content_attachments"
input ContentAttachmentsAvgOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# Boolean expression to filter rows from the table "content_attachments". All fields are combined with a logical 'AND'.
input ContentAttachmentsBoolExp {
  _and: [ContentAttachmentsBoolExp!]
  _not: ContentAttachmentsBoolExp
  _or: [ContentAttachmentsBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
}

# unique or primary key constraints on table "content_attachments"
enum ContentAttachmentsConstraint {
  # unique or primary key constraint on columns "file_upload_id", "content_id"
  content_attachments_pkey
}

# input type for incrementing numeric columns in table "content_attachments"
input ContentAttachmentsIncInput {
  contentId: bigint
  fileUploadId: bigint
}

# input type for inserting data into table "content_attachments"
input ContentAttachmentsInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
}

# aggregate max on columns
type ContentAttachmentsMaxFields {
  contentId: bigint
  fileUploadId: bigint
}

# order by max() on columns of table "content_attachments"
input ContentAttachmentsMaxOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# aggregate min on columns
type ContentAttachmentsMinFields {
  contentId: bigint
  fileUploadId: bigint
}

# order by min() on columns of table "content_attachments"
input ContentAttachmentsMinOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# response of any mutation on the table "content_attachments"
type ContentAttachmentsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ContentAttachments!]!
}

# on_conflict condition type for table "content_attachments"
input ContentAttachmentsOnConflict {
  constraint: ContentAttachmentsConstraint!
  updateColumns: [ContentAttachmentsUpdateColumn!]! = []
  where: ContentAttachmentsBoolExp
}

# Ordering options when selecting data from "content_attachments".
input ContentAttachmentsOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
}

# primary key columns input for table: content_attachments
input ContentAttachmentsPkColumnsInput {
  contentId: bigint!
  fileUploadId: bigint!
}

# select columns of table "content_attachments"
enum ContentAttachmentsSelectColumn {
  # column name
  contentId

  # column name
  fileUploadId
}

# input type for updating data in table "content_attachments"
input ContentAttachmentsSetInput {
  contentId: bigint
  fileUploadId: bigint
}

# aggregate stddev on columns
type ContentAttachmentsStddevFields {
  contentId: Float
  fileUploadId: Float
}

# order by stddev() on columns of table "content_attachments"
input ContentAttachmentsStddevOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# aggregate stddevPop on columns
type ContentAttachmentsStddevPopFields {
  contentId: Float
  fileUploadId: Float
}

# order by stddevPop() on columns of table "content_attachments"
input ContentAttachmentsStddevPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# aggregate stddevSamp on columns
type ContentAttachmentsStddevSampFields {
  contentId: Float
  fileUploadId: Float
}

# order by stddevSamp() on columns of table "content_attachments"
input ContentAttachmentsStddevSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# Streaming cursor of the table "content_attachments"
input ContentAttachmentsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ContentAttachmentsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ContentAttachmentsStreamCursorValueInput {
  contentId: bigint
  fileUploadId: bigint
}

# aggregate sum on columns
type ContentAttachmentsSumFields {
  contentId: bigint
  fileUploadId: bigint
}

# order by sum() on columns of table "content_attachments"
input ContentAttachmentsSumOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# update columns of table "content_attachments"
enum ContentAttachmentsUpdateColumn {
  # column name
  contentId

  # column name
  fileUploadId
}

input ContentAttachmentsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ContentAttachmentsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ContentAttachmentsSetInput

  # filter the rows which have to be updated
  where: ContentAttachmentsBoolExp!
}

# aggregate variance on columns
type ContentAttachmentsVarianceFields {
  contentId: Float
  fileUploadId: Float
}

# order by variance() on columns of table "content_attachments"
input ContentAttachmentsVarianceOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# aggregate varPop on columns
type ContentAttachmentsVarPopFields {
  contentId: Float
  fileUploadId: Float
}

# order by varPop() on columns of table "content_attachments"
input ContentAttachmentsVarPopOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# aggregate varSamp on columns
type ContentAttachmentsVarSampFields {
  contentId: Float
  fileUploadId: Float
}

# order by varSamp() on columns of table "content_attachments"
input ContentAttachmentsVarSampOrderBy {
  contentId: OrderBy
  fileUploadId: OrderBy
}

# aggregate avg on columns
type ContentAvgFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "content"
input ContentAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "content". All fields are combined with a logical 'AND'.
input ContentBoolExp {
  _and: [ContentBoolExp!]
  _not: ContentBoolExp
  _or: [ContentBoolExp!]
  content: ContentBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  contentByReplyingToId: ContentBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  contentsByReplyingToId: ContentBoolExp
  contentsByReplyingToIdAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isAnonymous: BooleanComparisonExp
  issue: IssueBoolExp
  parentId: BigintComparisonExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  replyingToId: BigintComparisonExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  text: StringComparisonExp
  thread: ThreadBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

# unique or primary key constraints on table "content"
enum ContentConstraint {
  # unique or primary key constraint on columns "id"
  content_pkey
}

# input type for incrementing numeric columns in table "content"
input ContentIncInput {
  createdById: bigint
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "content"
input ContentInsertInput {
  content: ContentObjRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  contentByReplyingToId: ContentObjRelInsertInput
  contents: ContentArrRelInsertInput
  contentsByReplyingToId: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  favorites: FavoriteArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isAnonymous: Boolean
  issue: IssueObjRelInsertInput
  parentId: bigint
  reactions: ReactionArrRelInsertInput
  replyingToId: bigint
  reports: ReportArrRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  text: String
  thread: ThreadObjRelInsertInput
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

# aggregate max on columns
type ContentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

# order by max() on columns of table "content"
input ContentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

# aggregate min on columns
type ContentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

# order by min() on columns of table "content"
input ContentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  text: OrderBy
}

# response of any mutation on the table "content"
type ContentMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Content!]!
}

# input type for inserting object relation for remote table "content"
input ContentObjRelInsertInput {
  data: ContentInsertInput!

  # upsert condition
  onConflict: ContentOnConflict
}

# on_conflict condition type for table "content"
input ContentOnConflict {
  constraint: ContentConstraint!
  updateColumns: [ContentUpdateColumn!]! = []
  where: ContentBoolExp
}

# Ordering options when selecting data from "content".
input ContentOrderBy {
  content: ContentOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  contentByReplyingToId: ContentOrderBy
  contentsAggregate: ContentAggregateOrderBy
  contentsByReplyingToIdAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isAnonymous: OrderBy
  issue: IssueOrderBy
  parentId: OrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  replyingToId: OrderBy
  reportsAggregate: ReportAggregateOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  text: OrderBy
  thread: ThreadOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

# primary key columns input for table: content
input ContentPkColumnsInput {
  id: bigint!
}

# select columns of table "content"
enum ContentSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  isAnonymous

  # column name
  parentId

  # column name
  replyingToId

  # column name
  teamId

  # column name
  tenantId

  # column name
  text
}

# select "contentAggregateBoolExpBool_andArgumentsColumns" columns of table "content"
enum ContentSelectColumnContentAggregateBoolExpBool_andArgumentsColumns {
  # column name
  isAnonymous
}

# select "contentAggregateBoolExpBool_orArgumentsColumns" columns of table "content"
enum ContentSelectColumnContentAggregateBoolExpBool_orArgumentsColumns {
  # column name
  isAnonymous
}

# input type for updating data in table "content"
input ContentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

# aggregate stddev on columns
type ContentStddevFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "content"
input ContentStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ContentStddevPopFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "content"
input ContentStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ContentStddevSampFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "content"
input ContentStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "content"
input ContentStreamCursorInput {
  # Stream column input with initial value
  initialValue: ContentStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ContentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAnonymous: Boolean
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
  text: String
}

# aggregate sum on columns
type ContentSumFields {
  createdById: bigint
  id: bigint
  parentId: bigint
  replyingToId: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "content"
input ContentSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "content"
enum ContentUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  isAnonymous

  # column name
  parentId

  # column name
  replyingToId

  # column name
  teamId

  # column name
  tenantId

  # column name
  text
}

input ContentUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ContentIncInput

  # sets the columns of the filtered rows to the given values
  _set: ContentSetInput

  # filter the rows which have to be updated
  where: ContentBoolExp!
}

# aggregate variance on columns
type ContentVarianceFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "content"
input ContentVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ContentVarPopFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "content"
input ContentVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ContentVarSampFields {
  createdById: Float
  id: Float
  parentId: Float
  replyingToId: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "content"
input ContentVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  parentId: OrderBy
  replyingToId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# ordering argument of a cursor
enum CursorOrdering {
  # ascending ordering of the cursor
  ASC

  # descending ordering of the cursor
  DESC
}

# columns and relationships of "document"
type Document {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  fileId: bigint

  # An object relationship
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!

  # An object relationship
  subject: Subject
  subjectId: bigint

  # An object relationship
  team: Team
  teamId: bigint

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  yearVersion: smallint
}

# aggregated selection of "document"
type DocumentAggregate {
  aggregate: DocumentAggregateFields
  nodes: [Document!]!
}

input DocumentAggregateBoolExp {
  count: documentAggregateBoolExpCount
}

input documentAggregateBoolExpCount {
  arguments: [DocumentSelectColumn!]
  distinct: Boolean
  filter: DocumentBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "document"
type DocumentAggregateFields {
  avg: DocumentAvgFields
  count(columns: [DocumentSelectColumn!], distinct: Boolean): Int!
  max: DocumentMaxFields
  min: DocumentMinFields
  stddev: DocumentStddevFields
  stddevPop: DocumentStddevPopFields
  stddevSamp: DocumentStddevSampFields
  sum: DocumentSumFields
  varPop: DocumentVarPopFields
  varSamp: DocumentVarSampFields
  variance: DocumentVarianceFields
}

# order by aggregate values of table "document"
input DocumentAggregateOrderBy {
  avg: DocumentAvgOrderBy
  count: OrderBy
  max: DocumentMaxOrderBy
  min: DocumentMinOrderBy
  stddev: DocumentStddevOrderBy
  stddevPop: DocumentStddevPopOrderBy
  stddevSamp: DocumentStddevSampOrderBy
  sum: DocumentSumOrderBy
  varPop: DocumentVarPopOrderBy
  varSamp: DocumentVarSampOrderBy
  variance: DocumentVarianceOrderBy
}

# input type for inserting array relation for remote table "document"
input DocumentArrRelInsertInput {
  data: [DocumentInsertInput!]!

  # upsert condition
  onConflict: DocumentOnConflict
}

# aggregate avg on columns
type DocumentAvgFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

# order by avg() on columns of table "document"
input DocumentAvgOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# Boolean expression to filter rows from the table "document". All fields are combined with a logical 'AND'.
input DocumentBoolExp {
  _and: [DocumentBoolExp!]
  _not: DocumentBoolExp
  _or: [DocumentBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  fileId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  yearVersion: SmallintComparisonExp
}

# unique or primary key constraints on table "document"
enum DocumentConstraint {
  # unique or primary key constraint on columns "file_id"
  document_file_id_unique

  # unique or primary key constraint on columns "id"
  document_pkey
}

# input type for incrementing numeric columns in table "document"
input DocumentIncInput {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

# input type for inserting data into table "document"
input DocumentInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  subject: SubjectObjRelInsertInput
  subjectId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  yearVersion: smallint
}

# aggregate max on columns
type DocumentMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

# order by max() on columns of table "document"
input DocumentMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

# aggregate min on columns
type DocumentMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

# order by min() on columns of table "document"
input DocumentMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

# response of any mutation on the table "document"
type DocumentMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Document!]!
}

# input type for inserting object relation for remote table "document"
input DocumentObjRelInsertInput {
  data: DocumentInsertInput!

  # upsert condition
  onConflict: DocumentOnConflict
}

# on_conflict condition type for table "document"
input DocumentOnConflict {
  constraint: DocumentConstraint!
  updateColumns: [DocumentUpdateColumn!]! = []
  where: DocumentBoolExp
}

# Ordering options when selecting data from "document".
input DocumentOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  fileId: OrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  yearVersion: OrderBy
}

# primary key columns input for table: document
input DocumentPkColumnsInput {
  id: bigint!
}

# select columns of table "document"
enum DocumentSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  fileId

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  subjectId

  # column name
  teamId

  # column name
  tenantId

  # column name
  type

  # column name
  yearVersion
}

# input type for updating data in table "document"
input DocumentSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

# aggregate stddev on columns
type DocumentStddevFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

# order by stddev() on columns of table "document"
input DocumentStddevOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# aggregate stddevPop on columns
type DocumentStddevPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

# order by stddevPop() on columns of table "document"
input DocumentStddevPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# aggregate stddevSamp on columns
type DocumentStddevSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

# order by stddevSamp() on columns of table "document"
input DocumentStddevSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# Streaming cursor of the table "document"
input DocumentStreamCursorInput {
  # Stream column input with initial value
  initialValue: DocumentStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input DocumentStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  fileId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  type: String
  yearVersion: smallint
}

# aggregate sum on columns
type DocumentSumFields {
  createdById: bigint
  fileId: bigint
  id: bigint
  subjectId: bigint
  teamId: bigint
  tenantId: bigint
  yearVersion: smallint
}

# order by sum() on columns of table "document"
input DocumentSumOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# update columns of table "document"
enum DocumentUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  fileId

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  subjectId

  # column name
  teamId

  # column name
  tenantId

  # column name
  type

  # column name
  yearVersion
}

input DocumentUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: DocumentIncInput

  # sets the columns of the filtered rows to the given values
  _set: DocumentSetInput

  # filter the rows which have to be updated
  where: DocumentBoolExp!
}

# aggregate variance on columns
type DocumentVarianceFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

# order by variance() on columns of table "document"
input DocumentVarianceOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# aggregate varPop on columns
type DocumentVarPopFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

# order by varPop() on columns of table "document"
input DocumentVarPopOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# aggregate varSamp on columns
type DocumentVarSampFields {
  createdById: Float
  fileId: Float
  id: Float
  subjectId: Float
  teamId: Float
  tenantId: Float
  yearVersion: Float
}

# order by varSamp() on columns of table "document"
input DocumentVarSampOrderBy {
  createdById: OrderBy
  fileId: OrderBy
  id: OrderBy
  subjectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  yearVersion: OrderBy
}

# columns and relationships of "event"
type Event {
  # An object relationship
  actorAddress: ActorAddress
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean!
  bannerId: bigint

  # An object relationship
  content: Content!
  contentId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz!

  # An object relationship
  eventApprovalStep: EventApprovalStep

  # An array relationship
  eventApprovals(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  # An aggregate relationship
  eventApprovalsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An array relationship
  eventManages(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): [EventManage!]!

  # An aggregate relationship
  eventManagesAggregate(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): EventManageAggregate!

  # An array relationship
  eventSupervisors(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): [EventSupervisors!]!

  # An aggregate relationship
  eventSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): EventSupervisorsAggregate!

  # An array relationship
  eventTags(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): [EventTags!]!

  # An aggregate relationship
  eventTagsAggregate(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  # An object relationship
  fileUpload: FileUpload

  # An array relationship
  finances(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # An aggregate relationship
  financesAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!

  # An object relationship
  form: Form

  # An object relationship
  formSubmission: FormSubmission
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  isPrivate: Boolean!
  isTemplate: Boolean!
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  meta(
    # JSON select path
    path: String
  ): jsonb!
  name: String!
  onlineMeetingLink: String
  onlineMeetingPlace: String
  pointsPresence: Float!
  price: Float!

  # An object relationship
  project: Project
  projectId: bigint
  slug: String!
  start: timestamptz!
  state: String!

  # An array relationship
  teamEvents(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  # An aggregate relationship
  teamEventsAggregate(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "event"
type EventAggregate {
  aggregate: EventAggregateFields
  nodes: [Event!]!
}

input EventAggregateBoolExp {
  bool_and: eventAggregateBoolExpBool_and
  bool_or: eventAggregateBoolExpBool_or
  count: eventAggregateBoolExpCount
}

input eventAggregateBoolExpBool_and {
  arguments: EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpBool_or {
  arguments: EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventBoolExp
  predicate: BooleanComparisonExp!
}

input eventAggregateBoolExpCount {
  arguments: [EventSelectColumn!]
  distinct: Boolean
  filter: EventBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event"
type EventAggregateFields {
  avg: EventAvgFields
  count(columns: [EventSelectColumn!], distinct: Boolean): Int!
  max: EventMaxFields
  min: EventMinFields
  stddev: EventStddevFields
  stddevPop: EventStddevPopFields
  stddevSamp: EventStddevSampFields
  sum: EventSumFields
  varPop: EventVarPopFields
  varSamp: EventVarSampFields
  variance: EventVarianceFields
}

# order by aggregate values of table "event"
input EventAggregateOrderBy {
  avg: EventAvgOrderBy
  count: OrderBy
  max: EventMaxOrderBy
  min: EventMinOrderBy
  stddev: EventStddevOrderBy
  stddevPop: EventStddevPopOrderBy
  stddevSamp: EventStddevSampOrderBy
  sum: EventSumOrderBy
  varPop: EventVarPopOrderBy
  varSamp: EventVarSampOrderBy
  variance: EventVarianceOrderBy
}

# append existing jsonb value of filtered columns with new jsonb value
input EventAppendInput {
  meta: jsonb
}

# columns and relationships of "event_approval"
type EventApproval {
  approved: Boolean!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  event: Event

  # An object relationship
  eventApprovalStep: EventApprovalStep
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  message: String
  stepId: bigint

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "event_approval"
type EventApprovalAggregate {
  aggregate: EventApprovalAggregateFields
  nodes: [EventApproval!]!
}

input EventApprovalAggregateBoolExp {
  bool_and: eventApprovalAggregateBoolExpBool_and
  bool_or: eventApprovalAggregateBoolExpBool_or
  count: eventApprovalAggregateBoolExpCount
}

input eventApprovalAggregateBoolExpBool_and {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpBool_or {
  arguments: EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: BooleanComparisonExp!
}

input eventApprovalAggregateBoolExpCount {
  arguments: [EventApprovalSelectColumn!]
  distinct: Boolean
  filter: EventApprovalBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_approval"
type EventApprovalAggregateFields {
  avg: EventApprovalAvgFields
  count(columns: [EventApprovalSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalMaxFields
  min: EventApprovalMinFields
  stddev: EventApprovalStddevFields
  stddevPop: EventApprovalStddevPopFields
  stddevSamp: EventApprovalStddevSampFields
  sum: EventApprovalSumFields
  varPop: EventApprovalVarPopFields
  varSamp: EventApprovalVarSampFields
  variance: EventApprovalVarianceFields
}

# order by aggregate values of table "event_approval"
input EventApprovalAggregateOrderBy {
  avg: EventApprovalAvgOrderBy
  count: OrderBy
  max: EventApprovalMaxOrderBy
  min: EventApprovalMinOrderBy
  stddev: EventApprovalStddevOrderBy
  stddevPop: EventApprovalStddevPopOrderBy
  stddevSamp: EventApprovalStddevSampOrderBy
  sum: EventApprovalSumOrderBy
  varPop: EventApprovalVarPopOrderBy
  varSamp: EventApprovalVarSampOrderBy
  variance: EventApprovalVarianceOrderBy
}

# input type for inserting array relation for remote table "event_approval"
input EventApprovalArrRelInsertInput {
  data: [EventApprovalInsertInput!]!

  # upsert condition
  onConflict: EventApprovalOnConflict
}

# aggregate avg on columns
type EventApprovalAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

# order by avg() on columns of table "event_approval"
input EventApprovalAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "event_approval". All fields are combined with a logical 'AND'.
input EventApprovalBoolExp {
  _and: [EventApprovalBoolExp!]
  _not: EventApprovalBoolExp
  _or: [EventApprovalBoolExp!]
  approved: BooleanComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  message: StringComparisonExp
  stepId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "event_approval"
enum EventApprovalConstraint {
  # unique or primary key constraint on columns "id"
  event_approval_pkey
}

# input type for incrementing numeric columns in table "event_approval"
input EventApprovalIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  stepId: bigint
  tenantId: bigint
}

# input type for inserting data into table "event_approval"
input EventApprovalInsertInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  message: String
  stepId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type EventApprovalMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

# order by max() on columns of table "event_approval"
input EventApprovalMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type EventApprovalMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

# order by min() on columns of table "event_approval"
input EventApprovalMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  message: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "event_approval"
type EventApprovalMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventApproval!]!
}

# on_conflict condition type for table "event_approval"
input EventApprovalOnConflict {
  constraint: EventApprovalConstraint!
  updateColumns: [EventApprovalUpdateColumn!]! = []
  where: EventApprovalBoolExp
}

# Ordering options when selecting data from "event_approval".
input EventApprovalOrderBy {
  approved: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  message: OrderBy
  stepId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: event_approval
input EventApprovalPkColumnsInput {
  id: bigint!
}

# select columns of table "event_approval"
enum EventApprovalSelectColumn {
  # column name
  approved

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventId

  # column name
  hiddenAt

  # column name
  id

  # column name
  message

  # column name
  stepId

  # column name
  tenantId
}

# select "eventApprovalAggregateBoolExpBool_andArgumentsColumns" columns of table "event_approval"
enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_andArgumentsColumns {
  # column name
  approved
}

# select "eventApprovalAggregateBoolExpBool_orArgumentsColumns" columns of table "event_approval"
enum EventApprovalSelectColumnEventApprovalAggregateBoolExpBool_orArgumentsColumns {
  # column name
  approved
}

# input type for updating data in table "event_approval"
input EventApprovalSetInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type EventApprovalStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

# order by stddev() on columns of table "event_approval"
input EventApprovalStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type EventApprovalStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "event_approval"
input EventApprovalStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type EventApprovalStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "event_approval"
input EventApprovalStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "event_approval_step"
type EventApprovalStep {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  # An object relationship
  eventApprovalStep: EventApprovalStep

  # An array relationship
  eventApprovalStepNotifiees(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  # An aggregate relationship
  eventApprovalStepNotifieesAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  # An array relationship
  eventApprovalStepValidators(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  # An aggregate relationship
  eventApprovalStepValidatorsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  # An array relationship
  eventApprovalSteps(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  # An aggregate relationship
  eventApprovalStepsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  # An array relationship
  eventApprovals(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  # An aggregate relationship
  eventApprovalsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  # An array relationship
  events(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An aggregate relationship
  eventsAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!
  previousStepId: bigint

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "event_approval_step"
type EventApprovalStepAggregate {
  aggregate: EventApprovalStepAggregateFields
  nodes: [EventApprovalStep!]!
}

input EventApprovalStepAggregateBoolExp {
  count: eventApprovalStepAggregateBoolExpCount
}

input eventApprovalStepAggregateBoolExpCount {
  arguments: [EventApprovalStepSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_approval_step"
type EventApprovalStepAggregateFields {
  avg: EventApprovalStepAvgFields
  count(columns: [EventApprovalStepSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepMaxFields
  min: EventApprovalStepMinFields
  stddev: EventApprovalStepStddevFields
  stddevPop: EventApprovalStepStddevPopFields
  stddevSamp: EventApprovalStepStddevSampFields
  sum: EventApprovalStepSumFields
  varPop: EventApprovalStepVarPopFields
  varSamp: EventApprovalStepVarSampFields
  variance: EventApprovalStepVarianceFields
}

# order by aggregate values of table "event_approval_step"
input EventApprovalStepAggregateOrderBy {
  avg: EventApprovalStepAvgOrderBy
  count: OrderBy
  max: EventApprovalStepMaxOrderBy
  min: EventApprovalStepMinOrderBy
  stddev: EventApprovalStepStddevOrderBy
  stddevPop: EventApprovalStepStddevPopOrderBy
  stddevSamp: EventApprovalStepStddevSampOrderBy
  sum: EventApprovalStepSumOrderBy
  varPop: EventApprovalStepVarPopOrderBy
  varSamp: EventApprovalStepVarSampOrderBy
  variance: EventApprovalStepVarianceOrderBy
}

# input type for inserting array relation for remote table "event_approval_step"
input EventApprovalStepArrRelInsertInput {
  data: [EventApprovalStepInsertInput!]!

  # upsert condition
  onConflict: EventApprovalStepOnConflict
}

# aggregate avg on columns
type EventApprovalStepAvgFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

# order by avg() on columns of table "event_approval_step"
input EventApprovalStepAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "event_approval_step". All fields are combined with a logical 'AND'.
input EventApprovalStepBoolExp {
  _and: [EventApprovalStepBoolExp!]
  _not: EventApprovalStepBoolExp
  _or: [EventApprovalStepBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepNotifiees: EventApprovalStepNotifieesBoolExp
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateBoolExp
  eventApprovalStepValidators: EventApprovalStepValidatorsBoolExp
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateBoolExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  previousStepId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "event_approval_step"
enum EventApprovalStepConstraint {
  # unique or primary key constraint on columns "id"
  event_approval_step_pkey
}

# input type for incrementing numeric columns in table "event_approval_step"
input EventApprovalStepIncInput {
  createdById: bigint
  id: bigint
  previousStepId: bigint
  tenantId: bigint
}

# input type for inserting data into table "event_approval_step"
input EventApprovalStepInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepNotifiees: EventApprovalStepNotifieesArrRelInsertInput
  eventApprovalStepValidators: EventApprovalStepValidatorsArrRelInsertInput
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  events: EventArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  previousStepId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type EventApprovalStepMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

# order by max() on columns of table "event_approval_step"
input EventApprovalStepMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type EventApprovalStepMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

# order by min() on columns of table "event_approval_step"
input EventApprovalStepMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "event_approval_step"
type EventApprovalStepMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventApprovalStep!]!
}

# columns and relationships of "event_approval_step_notifiees"
type EventApprovalStepNotifiees {
  # An object relationship
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!

  # An object relationship
  individual: Individual!
  individualId: bigint!
}

# aggregated selection of "event_approval_step_notifiees"
type EventApprovalStepNotifieesAggregate {
  aggregate: EventApprovalStepNotifieesAggregateFields
  nodes: [EventApprovalStepNotifiees!]!
}

input EventApprovalStepNotifieesAggregateBoolExp {
  count: eventApprovalStepNotifieesAggregateBoolExpCount
}

input eventApprovalStepNotifieesAggregateBoolExpCount {
  arguments: [EventApprovalStepNotifieesSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepNotifieesBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_approval_step_notifiees"
type EventApprovalStepNotifieesAggregateFields {
  avg: EventApprovalStepNotifieesAvgFields
  count(columns: [EventApprovalStepNotifieesSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepNotifieesMaxFields
  min: EventApprovalStepNotifieesMinFields
  stddev: EventApprovalStepNotifieesStddevFields
  stddevPop: EventApprovalStepNotifieesStddevPopFields
  stddevSamp: EventApprovalStepNotifieesStddevSampFields
  sum: EventApprovalStepNotifieesSumFields
  varPop: EventApprovalStepNotifieesVarPopFields
  varSamp: EventApprovalStepNotifieesVarSampFields
  variance: EventApprovalStepNotifieesVarianceFields
}

# order by aggregate values of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesAggregateOrderBy {
  avg: EventApprovalStepNotifieesAvgOrderBy
  count: OrderBy
  max: EventApprovalStepNotifieesMaxOrderBy
  min: EventApprovalStepNotifieesMinOrderBy
  stddev: EventApprovalStepNotifieesStddevOrderBy
  stddevPop: EventApprovalStepNotifieesStddevPopOrderBy
  stddevSamp: EventApprovalStepNotifieesStddevSampOrderBy
  sum: EventApprovalStepNotifieesSumOrderBy
  varPop: EventApprovalStepNotifieesVarPopOrderBy
  varSamp: EventApprovalStepNotifieesVarSampOrderBy
  variance: EventApprovalStepNotifieesVarianceOrderBy
}

# input type for inserting array relation for remote table "event_approval_step_notifiees"
input EventApprovalStepNotifieesArrRelInsertInput {
  data: [EventApprovalStepNotifieesInsertInput!]!

  # upsert condition
  onConflict: EventApprovalStepNotifieesOnConflict
}

# aggregate avg on columns
type EventApprovalStepNotifieesAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by avg() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# Boolean expression to filter rows from the table
# "event_approval_step_notifiees". All fields are combined with a logical 'AND'.
input EventApprovalStepNotifieesBoolExp {
  _and: [EventApprovalStepNotifieesBoolExp!]
  _not: EventApprovalStepNotifieesBoolExp
  _or: [EventApprovalStepNotifieesBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

# unique or primary key constraints on table "event_approval_step_notifiees"
enum EventApprovalStepNotifieesConstraint {
  # unique or primary key constraint on columns "event_approval_step_id", "individual_id"
  event_approval_step_notifiees_pkey
}

# input type for incrementing numeric columns in table "event_approval_step_notifiees"
input EventApprovalStepNotifieesIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

# input type for inserting data into table "event_approval_step_notifiees"
input EventApprovalStepNotifieesInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

# aggregate max on columns
type EventApprovalStepNotifieesMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

# order by max() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate min on columns
type EventApprovalStepNotifieesMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

# order by min() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# response of any mutation on the table "event_approval_step_notifiees"
type EventApprovalStepNotifieesMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventApprovalStepNotifiees!]!
}

# on_conflict condition type for table "event_approval_step_notifiees"
input EventApprovalStepNotifieesOnConflict {
  constraint: EventApprovalStepNotifieesConstraint!
  updateColumns: [EventApprovalStepNotifieesUpdateColumn!]! = []
  where: EventApprovalStepNotifieesBoolExp
}

# Ordering options when selecting data from "event_approval_step_notifiees".
input EventApprovalStepNotifieesOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

# primary key columns input for table: event_approval_step_notifiees
input EventApprovalStepNotifieesPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

# select columns of table "event_approval_step_notifiees"
enum EventApprovalStepNotifieesSelectColumn {
  # column name
  eventApprovalStepId

  # column name
  individualId
}

# input type for updating data in table "event_approval_step_notifiees"
input EventApprovalStepNotifieesSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

# aggregate stddev on columns
type EventApprovalStepNotifieesStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by stddev() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate stddevPop on columns
type EventApprovalStepNotifieesStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by stddevPop() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate stddevSamp on columns
type EventApprovalStepNotifieesStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by stddevSamp() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# Streaming cursor of the table "event_approval_step_notifiees"
input EventApprovalStepNotifieesStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventApprovalStepNotifieesStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventApprovalStepNotifieesStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

# aggregate sum on columns
type EventApprovalStepNotifieesSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

# order by sum() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# update columns of table "event_approval_step_notifiees"
enum EventApprovalStepNotifieesUpdateColumn {
  # column name
  eventApprovalStepId

  # column name
  individualId
}

input EventApprovalStepNotifieesUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventApprovalStepNotifieesIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventApprovalStepNotifieesSetInput

  # filter the rows which have to be updated
  where: EventApprovalStepNotifieesBoolExp!
}

# aggregate variance on columns
type EventApprovalStepNotifieesVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by variance() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate varPop on columns
type EventApprovalStepNotifieesVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by varPop() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate varSamp on columns
type EventApprovalStepNotifieesVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by varSamp() on columns of table "event_approval_step_notifiees"
input EventApprovalStepNotifieesVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# input type for inserting object relation for remote table "event_approval_step"
input EventApprovalStepObjRelInsertInput {
  data: EventApprovalStepInsertInput!

  # upsert condition
  onConflict: EventApprovalStepOnConflict
}

# on_conflict condition type for table "event_approval_step"
input EventApprovalStepOnConflict {
  constraint: EventApprovalStepConstraint!
  updateColumns: [EventApprovalStepUpdateColumn!]! = []
  where: EventApprovalStepBoolExp
}

# Ordering options when selecting data from "event_approval_step".
input EventApprovalStepOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateOrderBy
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateOrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  previousStepId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: event_approval_step
input EventApprovalStepPkColumnsInput {
  id: bigint!
}

# select columns of table "event_approval_step"
enum EventApprovalStepSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  previousStepId

  # column name
  tenantId
}

# input type for updating data in table "event_approval_step"
input EventApprovalStepSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type EventApprovalStepStddevFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

# order by stddev() on columns of table "event_approval_step"
input EventApprovalStepStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type EventApprovalStepStddevPopFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "event_approval_step"
input EventApprovalStepStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type EventApprovalStepStddevSampFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "event_approval_step"
input EventApprovalStepStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "event_approval_step"
input EventApprovalStepStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventApprovalStepStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventApprovalStepStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  previousStepId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type EventApprovalStepSumFields {
  createdById: bigint
  id: bigint
  previousStepId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "event_approval_step"
input EventApprovalStepSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# update columns of table "event_approval_step"
enum EventApprovalStepUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  previousStepId

  # column name
  tenantId
}

input EventApprovalStepUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventApprovalStepIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventApprovalStepSetInput

  # filter the rows which have to be updated
  where: EventApprovalStepBoolExp!
}

# columns and relationships of "event_approval_step_validators"
type EventApprovalStepValidators {
  # An object relationship
  eventApprovalStep: EventApprovalStep!
  eventApprovalStepId: bigint!

  # An object relationship
  individual: Individual!
  individualId: bigint!
}

# aggregated selection of "event_approval_step_validators"
type EventApprovalStepValidatorsAggregate {
  aggregate: EventApprovalStepValidatorsAggregateFields
  nodes: [EventApprovalStepValidators!]!
}

input EventApprovalStepValidatorsAggregateBoolExp {
  count: eventApprovalStepValidatorsAggregateBoolExpCount
}

input eventApprovalStepValidatorsAggregateBoolExpCount {
  arguments: [EventApprovalStepValidatorsSelectColumn!]
  distinct: Boolean
  filter: EventApprovalStepValidatorsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_approval_step_validators"
type EventApprovalStepValidatorsAggregateFields {
  avg: EventApprovalStepValidatorsAvgFields
  count(columns: [EventApprovalStepValidatorsSelectColumn!], distinct: Boolean): Int!
  max: EventApprovalStepValidatorsMaxFields
  min: EventApprovalStepValidatorsMinFields
  stddev: EventApprovalStepValidatorsStddevFields
  stddevPop: EventApprovalStepValidatorsStddevPopFields
  stddevSamp: EventApprovalStepValidatorsStddevSampFields
  sum: EventApprovalStepValidatorsSumFields
  varPop: EventApprovalStepValidatorsVarPopFields
  varSamp: EventApprovalStepValidatorsVarSampFields
  variance: EventApprovalStepValidatorsVarianceFields
}

# order by aggregate values of table "event_approval_step_validators"
input EventApprovalStepValidatorsAggregateOrderBy {
  avg: EventApprovalStepValidatorsAvgOrderBy
  count: OrderBy
  max: EventApprovalStepValidatorsMaxOrderBy
  min: EventApprovalStepValidatorsMinOrderBy
  stddev: EventApprovalStepValidatorsStddevOrderBy
  stddevPop: EventApprovalStepValidatorsStddevPopOrderBy
  stddevSamp: EventApprovalStepValidatorsStddevSampOrderBy
  sum: EventApprovalStepValidatorsSumOrderBy
  varPop: EventApprovalStepValidatorsVarPopOrderBy
  varSamp: EventApprovalStepValidatorsVarSampOrderBy
  variance: EventApprovalStepValidatorsVarianceOrderBy
}

# input type for inserting array relation for remote table "event_approval_step_validators"
input EventApprovalStepValidatorsArrRelInsertInput {
  data: [EventApprovalStepValidatorsInsertInput!]!

  # upsert condition
  onConflict: EventApprovalStepValidatorsOnConflict
}

# aggregate avg on columns
type EventApprovalStepValidatorsAvgFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by avg() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsAvgOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# Boolean expression to filter rows from the table
# "event_approval_step_validators". All fields are combined with a logical 'AND'.
input EventApprovalStepValidatorsBoolExp {
  _and: [EventApprovalStepValidatorsBoolExp!]
  _not: EventApprovalStepValidatorsBoolExp
  _or: [EventApprovalStepValidatorsBoolExp!]
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovalStepId: BigintComparisonExp
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
}

# unique or primary key constraints on table "event_approval_step_validators"
enum EventApprovalStepValidatorsConstraint {
  # unique or primary key constraint on columns "event_approval_step_id", "individual_id"
  event_approval_step_validators_pkey
}

# input type for incrementing numeric columns in table "event_approval_step_validators"
input EventApprovalStepValidatorsIncInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

# input type for inserting data into table "event_approval_step_validators"
input EventApprovalStepValidatorsInsertInput {
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovalStepId: bigint
  individual: IndividualObjRelInsertInput
  individualId: bigint
}

# aggregate max on columns
type EventApprovalStepValidatorsMaxFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

# order by max() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsMaxOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate min on columns
type EventApprovalStepValidatorsMinFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

# order by min() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsMinOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# response of any mutation on the table "event_approval_step_validators"
type EventApprovalStepValidatorsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventApprovalStepValidators!]!
}

# on_conflict condition type for table "event_approval_step_validators"
input EventApprovalStepValidatorsOnConflict {
  constraint: EventApprovalStepValidatorsConstraint!
  updateColumns: [EventApprovalStepValidatorsUpdateColumn!]! = []
  where: EventApprovalStepValidatorsBoolExp
}

# Ordering options when selecting data from "event_approval_step_validators".
input EventApprovalStepValidatorsOrderBy {
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalStepId: OrderBy
  individual: IndividualOrderBy
  individualId: OrderBy
}

# primary key columns input for table: event_approval_step_validators
input EventApprovalStepValidatorsPkColumnsInput {
  eventApprovalStepId: bigint!
  individualId: bigint!
}

# select columns of table "event_approval_step_validators"
enum EventApprovalStepValidatorsSelectColumn {
  # column name
  eventApprovalStepId

  # column name
  individualId
}

# input type for updating data in table "event_approval_step_validators"
input EventApprovalStepValidatorsSetInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

# aggregate stddev on columns
type EventApprovalStepValidatorsStddevFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by stddev() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsStddevOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate stddevPop on columns
type EventApprovalStepValidatorsStddevPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by stddevPop() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsStddevPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate stddevSamp on columns
type EventApprovalStepValidatorsStddevSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by stddevSamp() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsStddevSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# Streaming cursor of the table "event_approval_step_validators"
input EventApprovalStepValidatorsStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventApprovalStepValidatorsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventApprovalStepValidatorsStreamCursorValueInput {
  eventApprovalStepId: bigint
  individualId: bigint
}

# aggregate sum on columns
type EventApprovalStepValidatorsSumFields {
  eventApprovalStepId: bigint
  individualId: bigint
}

# order by sum() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsSumOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# update columns of table "event_approval_step_validators"
enum EventApprovalStepValidatorsUpdateColumn {
  # column name
  eventApprovalStepId

  # column name
  individualId
}

input EventApprovalStepValidatorsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventApprovalStepValidatorsIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventApprovalStepValidatorsSetInput

  # filter the rows which have to be updated
  where: EventApprovalStepValidatorsBoolExp!
}

# aggregate variance on columns
type EventApprovalStepValidatorsVarianceFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by variance() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsVarianceOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate varPop on columns
type EventApprovalStepValidatorsVarPopFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by varPop() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsVarPopOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate varSamp on columns
type EventApprovalStepValidatorsVarSampFields {
  eventApprovalStepId: Float
  individualId: Float
}

# order by varSamp() on columns of table "event_approval_step_validators"
input EventApprovalStepValidatorsVarSampOrderBy {
  eventApprovalStepId: OrderBy
  individualId: OrderBy
}

# aggregate variance on columns
type EventApprovalStepVarianceFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

# order by variance() on columns of table "event_approval_step"
input EventApprovalStepVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type EventApprovalStepVarPopFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

# order by varPop() on columns of table "event_approval_step"
input EventApprovalStepVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type EventApprovalStepVarSampFields {
  createdById: Float
  id: Float
  previousStepId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "event_approval_step"
input EventApprovalStepVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  previousStepId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "event_approval"
input EventApprovalStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventApprovalStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventApprovalStreamCursorValueInput {
  approved: Boolean
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  message: String
  stepId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type EventApprovalSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  stepId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "event_approval"
input EventApprovalSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# update columns of table "event_approval"
enum EventApprovalUpdateColumn {
  # column name
  approved

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventId

  # column name
  hiddenAt

  # column name
  id

  # column name
  message

  # column name
  stepId

  # column name
  tenantId
}

input EventApprovalUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventApprovalIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventApprovalSetInput

  # filter the rows which have to be updated
  where: EventApprovalBoolExp!
}

# aggregate variance on columns
type EventApprovalVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

# order by variance() on columns of table "event_approval"
input EventApprovalVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type EventApprovalVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

# order by varPop() on columns of table "event_approval"
input EventApprovalVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type EventApprovalVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  stepId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "event_approval"
input EventApprovalVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  stepId: OrderBy
  tenantId: OrderBy
}

# input type for inserting array relation for remote table "event"
input EventArrRelInsertInput {
  data: [EventInsertInput!]!

  # upsert condition
  onConflict: EventOnConflict
}

# aggregate avg on columns
type EventAvgFields {
  addressId: Float
  approvalSubmissionId: Float
  bannerId: Float
  contentId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  maxParticipants: Float
  pointsPresence: Float
  price: Float
  projectId: Float
  tenantId: Float
}

# order by avg() on columns of table "event"
input EventAvgOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
input EventBoolExp {
  _and: [EventBoolExp!]
  _not: EventBoolExp
  _or: [EventBoolExp!]
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  approvalSubmissionId: BigintComparisonExp
  autoAcceptJoins: BooleanComparisonExp
  bannerId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  end: TimestamptzComparisonExp
  eventApprovalStep: EventApprovalStepBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventManages: EventManageBoolExp
  eventManagesAggregate: EventManageAggregateBoolExp
  eventSupervisors: EventSupervisorsBoolExp
  eventSupervisorsAggregate: EventSupervisorsAggregateBoolExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  fileUpload: FileUploadBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  form: FormBoolExp
  formSubmission: FormSubmissionBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isPrivate: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  joinFormId: BigintComparisonExp
  lastEventApprovalStepId: BigintComparisonExp
  maxParticipants: SmallintComparisonExp
  meta: JsonbComparisonExp
  name: StringComparisonExp
  onlineMeetingLink: StringComparisonExp
  onlineMeetingPlace: StringComparisonExp
  pointsPresence: FloatComparisonExp
  price: FloatComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  slug: StringComparisonExp
  start: TimestamptzComparisonExp
  state: StringComparisonExp
  teamEvents: TeamEventsBoolExp
  teamEventsAggregate: TeamEventsAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "event"
enum EventConstraint {
  # unique or primary key constraint on columns "approval_submission_id"
  event_approval_submission_id_unique

  # unique or primary key constraint on columns "content_id"
  event_content_id_unique

  # unique or primary key constraint on columns "id"
  event_pkey
}

# delete the field or element with specified path (for JSON arrays, negative integers count from the end)
input EventDeleteAtPathInput {
  meta: [String!]
}

# delete the array element with specified index (negative integers count from the
# end). throws an error if top level container is not an array
input EventDeleteElemInput {
  meta: Int
}

# delete key/value pair or string element. key/value pairs are matched based on their key value
input EventDeleteKeyInput {
  meta: String
}

# input type for incrementing numeric columns in table "event"
input EventIncInput {
  addressId: bigint
  approvalSubmissionId: bigint
  bannerId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  pointsPresence: Float
  price: Float
  projectId: bigint
  tenantId: bigint
}

# input type for inserting data into table "event"
input EventInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  bannerId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  eventApprovalStep: EventApprovalStepObjRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventManages: EventManageArrRelInsertInput
  eventSupervisors: EventSupervisorsArrRelInsertInput
  eventTags: EventTagsArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  finances: FinanceArrRelInsertInput
  form: FormObjRelInsertInput
  formSubmission: FormSubmissionObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isPrivate: Boolean
  isTemplate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  onlineMeetingLink: String
  onlineMeetingPlace: String
  pointsPresence: Float
  price: Float
  project: ProjectObjRelInsertInput
  projectId: bigint
  slug: String
  start: timestamptz
  state: String
  teamEvents: TeamEventsArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# columns and relationships of "event_join"
type EventJoin {
  # An object relationship
  action: Action
  actionId: bigint

  # An array relationship
  actions(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # An aggregate relationship
  actionsAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  event: Event!
  eventId: bigint!

  # An object relationship
  eventManage: EventManage

  # An object relationship
  fileUpload: FileUpload

  # An object relationship
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  individualByPresenceSettledById: Individual

  # An object relationship
  individualBySettledById: Individual
  joinedForId: bigint
  joinerId: bigint!

  # An object relationship
  linkedMissionJoin: MissionJoin

  # An object relationship
  missionJoin: MissionJoin
  missionJoinId: bigint
  presence: Boolean
  presenceSettledAt: timestamptz
  presenceSettledById: bigint
  presenceSettledVia: String
  qrCodeId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "event_join"
type EventJoinAggregate {
  aggregate: EventJoinAggregateFields
  nodes: [EventJoin!]!
}

input EventJoinAggregateBoolExp {
  bool_and: eventJoinAggregateBoolExpBool_and
  bool_or: eventJoinAggregateBoolExpBool_or
  count: eventJoinAggregateBoolExpCount
}

input eventJoinAggregateBoolExpBool_and {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpBool_or {
  arguments: EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: BooleanComparisonExp!
}

input eventJoinAggregateBoolExpCount {
  arguments: [EventJoinSelectColumn!]
  distinct: Boolean
  filter: EventJoinBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_join"
type EventJoinAggregateFields {
  avg: EventJoinAvgFields
  count(columns: [EventJoinSelectColumn!], distinct: Boolean): Int!
  max: EventJoinMaxFields
  min: EventJoinMinFields
  stddev: EventJoinStddevFields
  stddevPop: EventJoinStddevPopFields
  stddevSamp: EventJoinStddevSampFields
  sum: EventJoinSumFields
  varPop: EventJoinVarPopFields
  varSamp: EventJoinVarSampFields
  variance: EventJoinVarianceFields
}

# order by aggregate values of table "event_join"
input EventJoinAggregateOrderBy {
  avg: EventJoinAvgOrderBy
  count: OrderBy
  max: EventJoinMaxOrderBy
  min: EventJoinMinOrderBy
  stddev: EventJoinStddevOrderBy
  stddevPop: EventJoinStddevPopOrderBy
  stddevSamp: EventJoinStddevSampOrderBy
  sum: EventJoinSumOrderBy
  varPop: EventJoinVarPopOrderBy
  varSamp: EventJoinVarSampOrderBy
  variance: EventJoinVarianceOrderBy
}

# input type for inserting array relation for remote table "event_join"
input EventJoinArrRelInsertInput {
  data: [EventJoinInsertInput!]!

  # upsert condition
  onConflict: EventJoinOnConflict
}

# aggregate avg on columns
type EventJoinAvgFields {
  actionId: Float
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedForId: Float
  joinerId: Float
  missionJoinId: Float
  presenceSettledById: Float
  qrCodeId: Float
  settledById: Float
  tenantId: Float
}

# order by avg() on columns of table "event_join"
input EventJoinAvgOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "event_join". All fields are combined with a logical 'AND'.
input EventJoinBoolExp {
  _and: [EventJoinBoolExp!]
  _not: EventJoinBoolExp
  _or: [EventJoinBoolExp!]
  action: ActionBoolExp
  actionId: BigintComparisonExp
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  eventManage: EventManageBoolExp
  fileUpload: FileUploadBoolExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualByPresenceSettledById: IndividualBoolExp
  individualBySettledById: IndividualBoolExp
  joinedForId: BigintComparisonExp
  joinerId: BigintComparisonExp
  linkedMissionJoin: MissionJoinBoolExp
  missionJoin: MissionJoinBoolExp
  missionJoinId: BigintComparisonExp
  presence: BooleanComparisonExp
  presenceSettledAt: TimestamptzComparisonExp
  presenceSettledById: BigintComparisonExp
  presenceSettledVia: StringComparisonExp
  qrCodeId: BigintComparisonExp
  settledAt: TimestamptzComparisonExp
  settledById: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "event_join"
enum EventJoinConstraint {
  # unique or primary key constraint on columns "id"
  event_join_pkey
}

# input type for incrementing numeric columns in table "event_join"
input EventJoinIncInput {
  actionId: bigint
  createdById: bigint
  eventId: bigint
  formSubmissionId: bigint
  id: bigint
  joinedForId: bigint
  joinerId: bigint
  missionJoinId: bigint
  presenceSettledById: bigint
  qrCodeId: bigint
  settledById: bigint
  tenantId: bigint
}

# input type for inserting data into table "event_join"
input EventJoinInsertInput {
  action: ActionObjRelInsertInput
  actionId: bigint
  actions: ActionArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventId: bigint
  eventManage: EventManageObjRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualByPresenceSettledById: IndividualObjRelInsertInput
  individualBySettledById: IndividualObjRelInsertInput
  joinedForId: bigint
  joinerId: bigint
  linkedMissionJoin: MissionJoinObjRelInsertInput
  missionJoin: MissionJoinObjRelInsertInput
  missionJoinId: bigint
  presence: Boolean
  presenceSettledAt: timestamptz
  presenceSettledById: bigint
  presenceSettledVia: String
  qrCodeId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type EventJoinMaxFields {
  actionId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedForId: bigint
  joinerId: bigint
  missionJoinId: bigint
  presenceSettledAt: timestamptz
  presenceSettledById: bigint
  presenceSettledVia: String
  qrCodeId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# order by max() on columns of table "event_join"
input EventJoinMaxOrderBy {
  actionId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledAt: OrderBy
  presenceSettledById: OrderBy
  presenceSettledVia: OrderBy
  qrCodeId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type EventJoinMinFields {
  actionId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedForId: bigint
  joinerId: bigint
  missionJoinId: bigint
  presenceSettledAt: timestamptz
  presenceSettledById: bigint
  presenceSettledVia: String
  qrCodeId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# order by min() on columns of table "event_join"
input EventJoinMinOrderBy {
  actionId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledAt: OrderBy
  presenceSettledById: OrderBy
  presenceSettledVia: OrderBy
  qrCodeId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "event_join"
type EventJoinMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventJoin!]!
}

# input type for inserting object relation for remote table "event_join"
input EventJoinObjRelInsertInput {
  data: EventJoinInsertInput!

  # upsert condition
  onConflict: EventJoinOnConflict
}

# on_conflict condition type for table "event_join"
input EventJoinOnConflict {
  constraint: EventJoinConstraint!
  updateColumns: [EventJoinUpdateColumn!]! = []
  where: EventJoinBoolExp
}

# Ordering options when selecting data from "event_join".
input EventJoinOrderBy {
  action: ActionOrderBy
  actionId: OrderBy
  actionsAggregate: ActionAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  eventManage: EventManageOrderBy
  fileUpload: FileUploadOrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualByPresenceSettledById: IndividualOrderBy
  individualBySettledById: IndividualOrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  linkedMissionJoin: MissionJoinOrderBy
  missionJoin: MissionJoinOrderBy
  missionJoinId: OrderBy
  presence: OrderBy
  presenceSettledAt: OrderBy
  presenceSettledById: OrderBy
  presenceSettledVia: OrderBy
  qrCodeId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: event_join
input EventJoinPkColumnsInput {
  id: bigint!
}

# select columns of table "event_join"
enum EventJoinSelectColumn {
  # column name
  actionId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventId

  # column name
  formSubmissionId

  # column name
  hiddenAt

  # column name
  id

  # column name
  joinedForId

  # column name
  joinerId

  # column name
  missionJoinId

  # column name
  presence

  # column name
  presenceSettledAt

  # column name
  presenceSettledById

  # column name
  presenceSettledVia

  # column name
  qrCodeId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  tenantId
}

# select "eventJoinAggregateBoolExpBool_andArgumentsColumns" columns of table "event_join"
enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_andArgumentsColumns {
  # column name
  presence
}

# select "eventJoinAggregateBoolExpBool_orArgumentsColumns" columns of table "event_join"
enum EventJoinSelectColumnEventJoinAggregateBoolExpBool_orArgumentsColumns {
  # column name
  presence
}

# input type for updating data in table "event_join"
input EventJoinSetInput {
  actionId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedForId: bigint
  joinerId: bigint
  missionJoinId: bigint
  presence: Boolean
  presenceSettledAt: timestamptz
  presenceSettledById: bigint
  presenceSettledVia: String
  qrCodeId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# aggregate stddev on columns
type EventJoinStddevFields {
  actionId: Float
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedForId: Float
  joinerId: Float
  missionJoinId: Float
  presenceSettledById: Float
  qrCodeId: Float
  settledById: Float
  tenantId: Float
}

# order by stddev() on columns of table "event_join"
input EventJoinStddevOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type EventJoinStddevPopFields {
  actionId: Float
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedForId: Float
  joinerId: Float
  missionJoinId: Float
  presenceSettledById: Float
  qrCodeId: Float
  settledById: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "event_join"
input EventJoinStddevPopOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type EventJoinStddevSampFields {
  actionId: Float
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedForId: Float
  joinerId: Float
  missionJoinId: Float
  presenceSettledById: Float
  qrCodeId: Float
  settledById: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "event_join"
input EventJoinStddevSampOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "event_join"
input EventJoinStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventJoinStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventJoinStreamCursorValueInput {
  actionId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinedForId: bigint
  joinerId: bigint
  missionJoinId: bigint
  presence: Boolean
  presenceSettledAt: timestamptz
  presenceSettledById: bigint
  presenceSettledVia: String
  qrCodeId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# aggregate sum on columns
type EventJoinSumFields {
  actionId: bigint
  createdById: bigint
  eventId: bigint
  formSubmissionId: bigint
  id: bigint
  joinedForId: bigint
  joinerId: bigint
  missionJoinId: bigint
  presenceSettledById: bigint
  qrCodeId: bigint
  settledById: bigint
  tenantId: bigint
}

# order by sum() on columns of table "event_join"
input EventJoinSumOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# update columns of table "event_join"
enum EventJoinUpdateColumn {
  # column name
  actionId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventId

  # column name
  formSubmissionId

  # column name
  hiddenAt

  # column name
  id

  # column name
  joinedForId

  # column name
  joinerId

  # column name
  missionJoinId

  # column name
  presence

  # column name
  presenceSettledAt

  # column name
  presenceSettledById

  # column name
  presenceSettledVia

  # column name
  qrCodeId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  tenantId
}

input EventJoinUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventJoinIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventJoinSetInput

  # filter the rows which have to be updated
  where: EventJoinBoolExp!
}

# aggregate variance on columns
type EventJoinVarianceFields {
  actionId: Float
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedForId: Float
  joinerId: Float
  missionJoinId: Float
  presenceSettledById: Float
  qrCodeId: Float
  settledById: Float
  tenantId: Float
}

# order by variance() on columns of table "event_join"
input EventJoinVarianceOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type EventJoinVarPopFields {
  actionId: Float
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedForId: Float
  joinerId: Float
  missionJoinId: Float
  presenceSettledById: Float
  qrCodeId: Float
  settledById: Float
  tenantId: Float
}

# order by varPop() on columns of table "event_join"
input EventJoinVarPopOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type EventJoinVarSampFields {
  actionId: Float
  createdById: Float
  eventId: Float
  formSubmissionId: Float
  id: Float
  joinedForId: Float
  joinerId: Float
  missionJoinId: Float
  presenceSettledById: Float
  qrCodeId: Float
  settledById: Float
  tenantId: Float
}

# order by varSamp() on columns of table "event_join"
input EventJoinVarSampOrderBy {
  actionId: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinedForId: OrderBy
  joinerId: OrderBy
  missionJoinId: OrderBy
  presenceSettledById: OrderBy
  qrCodeId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "event_manage"
type EventManage {
  activities: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  event: Event!
  eventId: bigint!

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An array relationship
  missions(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # An aggregate relationship
  missionsAggregate(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): MissionAggregate!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "event_manage"
type EventManageAggregate {
  aggregate: EventManageAggregateFields
  nodes: [EventManage!]!
}

input EventManageAggregateBoolExp {
  count: eventManageAggregateBoolExpCount
}

input eventManageAggregateBoolExpCount {
  arguments: [EventManageSelectColumn!]
  distinct: Boolean
  filter: EventManageBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_manage"
type EventManageAggregateFields {
  avg: EventManageAvgFields
  count(columns: [EventManageSelectColumn!], distinct: Boolean): Int!
  max: EventManageMaxFields
  min: EventManageMinFields
  stddev: EventManageStddevFields
  stddevPop: EventManageStddevPopFields
  stddevSamp: EventManageStddevSampFields
  sum: EventManageSumFields
  varPop: EventManageVarPopFields
  varSamp: EventManageVarSampFields
  variance: EventManageVarianceFields
}

# order by aggregate values of table "event_manage"
input EventManageAggregateOrderBy {
  avg: EventManageAvgOrderBy
  count: OrderBy
  max: EventManageMaxOrderBy
  min: EventManageMinOrderBy
  stddev: EventManageStddevOrderBy
  stddevPop: EventManageStddevPopOrderBy
  stddevSamp: EventManageStddevSampOrderBy
  sum: EventManageSumOrderBy
  varPop: EventManageVarPopOrderBy
  varSamp: EventManageVarSampOrderBy
  variance: EventManageVarianceOrderBy
}

# input type for inserting array relation for remote table "event_manage"
input EventManageArrRelInsertInput {
  data: [EventManageInsertInput!]!

  # upsert condition
  onConflict: EventManageOnConflict
}

# aggregate avg on columns
type EventManageAvgFields {
  createdById: Float
  eventId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "event_manage"
input EventManageAvgOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "event_manage". All fields are combined with a logical 'AND'.
input EventManageBoolExp {
  _and: [EventManageBoolExp!]
  _not: EventManageBoolExp
  _or: [EventManageBoolExp!]
  activities: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "event_manage"
enum EventManageConstraint {
  # unique or primary key constraint on columns "id"
  event_manage_pkey
}

# input type for incrementing numeric columns in table "event_manage"
input EventManageIncInput {
  createdById: bigint
  eventId: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "event_manage"
input EventManageInsertInput {
  activities: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  missions: MissionArrRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type EventManageMaxFields {
  activities: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# order by max() on columns of table "event_manage"
input EventManageMaxOrderBy {
  activities: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type EventManageMinFields {
  activities: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# order by min() on columns of table "event_manage"
input EventManageMinOrderBy {
  activities: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "event_manage"
type EventManageMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventManage!]!
}

# input type for inserting object relation for remote table "event_manage"
input EventManageObjRelInsertInput {
  data: EventManageInsertInput!

  # upsert condition
  onConflict: EventManageOnConflict
}

# on_conflict condition type for table "event_manage"
input EventManageOnConflict {
  constraint: EventManageConstraint!
  updateColumns: [EventManageUpdateColumn!]! = []
  where: EventManageBoolExp
}

# Ordering options when selecting data from "event_manage".
input EventManageOrderBy {
  activities: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  missionsAggregate: MissionAggregateOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: event_manage
input EventManagePkColumnsInput {
  id: bigint!
}

# select columns of table "event_manage"
enum EventManageSelectColumn {
  # column name
  activities

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventId

  # column name
  hiddenAt

  # column name
  id

  # column name
  teamId

  # column name
  tenantId
}

# input type for updating data in table "event_manage"
input EventManageSetInput {
  activities: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type EventManageStddevFields {
  createdById: Float
  eventId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "event_manage"
input EventManageStddevOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type EventManageStddevPopFields {
  createdById: Float
  eventId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "event_manage"
input EventManageStddevPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type EventManageStddevSampFields {
  createdById: Float
  eventId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "event_manage"
input EventManageStddevSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "event_manage"
input EventManageStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventManageStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventManageStreamCursorValueInput {
  activities: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventId: bigint
  hiddenAt: timestamptz
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type EventManageSumFields {
  createdById: bigint
  eventId: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "event_manage"
input EventManageSumOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "event_manage"
enum EventManageUpdateColumn {
  # column name
  activities

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventId

  # column name
  hiddenAt

  # column name
  id

  # column name
  teamId

  # column name
  tenantId
}

input EventManageUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventManageIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventManageSetInput

  # filter the rows which have to be updated
  where: EventManageBoolExp!
}

# aggregate variance on columns
type EventManageVarianceFields {
  createdById: Float
  eventId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "event_manage"
input EventManageVarianceOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type EventManageVarPopFields {
  createdById: Float
  eventId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "event_manage"
input EventManageVarPopOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type EventManageVarSampFields {
  createdById: Float
  eventId: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "event_manage"
input EventManageVarSampOrderBy {
  createdById: OrderBy
  eventId: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate max on columns
type EventMaxFields {
  addressId: bigint
  approvalSubmissionId: bigint
  bannerId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  name: String
  onlineMeetingLink: String
  onlineMeetingPlace: String
  pointsPresence: Float
  price: Float
  projectId: bigint
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

# order by max() on columns of table "event"
input EventMaxOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  name: OrderBy
  onlineMeetingLink: OrderBy
  onlineMeetingPlace: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type EventMinFields {
  addressId: bigint
  approvalSubmissionId: bigint
  bannerId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  name: String
  onlineMeetingLink: String
  onlineMeetingPlace: String
  pointsPresence: Float
  price: Float
  projectId: bigint
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

# order by min() on columns of table "event"
input EventMinOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  name: OrderBy
  onlineMeetingLink: OrderBy
  onlineMeetingPlace: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "event"
type EventMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Event!]!
}

# input type for inserting object relation for remote table "event"
input EventObjRelInsertInput {
  data: EventInsertInput!

  # upsert condition
  onConflict: EventOnConflict
}

# on_conflict condition type for table "event"
input EventOnConflict {
  constraint: EventConstraint!
  updateColumns: [EventUpdateColumn!]! = []
  where: EventBoolExp
}

# Ordering options when selecting data from "event".
input EventOrderBy {
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  autoAcceptJoins: OrderBy
  bannerId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  end: OrderBy
  eventApprovalStep: EventApprovalStepOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventManagesAggregate: EventManageAggregateOrderBy
  eventSupervisorsAggregate: EventSupervisorsAggregateOrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  fileUpload: FileUploadOrderBy
  financesAggregate: FinanceAggregateOrderBy
  form: FormOrderBy
  formSubmission: FormSubmissionOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isPrivate: OrderBy
  isTemplate: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  meta: OrderBy
  name: OrderBy
  onlineMeetingLink: OrderBy
  onlineMeetingPlace: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  slug: OrderBy
  start: OrderBy
  state: OrderBy
  teamEventsAggregate: TeamEventsAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: event
input EventPkColumnsInput {
  id: bigint!
}

# prepend existing jsonb value of filtered columns with new jsonb value
input EventPrependInput {
  meta: jsonb
}

# select columns of table "event"
enum EventSelectColumn {
  # column name
  addressId

  # column name
  approvalSubmissionId

  # column name
  autoAcceptJoins

  # column name
  bannerId

  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  end

  # column name
  hiddenAt

  # column name
  id

  # column name
  isPrivate

  # column name
  isTemplate

  # column name
  joinFormId

  # column name
  lastEventApprovalStepId

  # column name
  maxParticipants

  # column name
  meta

  # column name
  name

  # column name
  onlineMeetingLink

  # column name
  onlineMeetingPlace

  # column name
  pointsPresence

  # column name
  price

  # column name
  projectId

  # column name
  slug

  # column name
  start

  # column name
  state

  # column name
  tenantId
}

# select "eventAggregateBoolExpBool_andArgumentsColumns" columns of table "event"
enum EventSelectColumnEventAggregateBoolExpBool_andArgumentsColumns {
  # column name
  autoAcceptJoins

  # column name
  isPrivate

  # column name
  isTemplate
}

# select "eventAggregateBoolExpBool_orArgumentsColumns" columns of table "event"
enum EventSelectColumnEventAggregateBoolExpBool_orArgumentsColumns {
  # column name
  autoAcceptJoins

  # column name
  isPrivate

  # column name
  isTemplate
}

# input type for updating data in table "event"
input EventSetInput {
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  bannerId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  onlineMeetingLink: String
  onlineMeetingPlace: String
  pointsPresence: Float
  price: Float
  projectId: bigint
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

# aggregate stddev on columns
type EventStddevFields {
  addressId: Float
  approvalSubmissionId: Float
  bannerId: Float
  contentId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  maxParticipants: Float
  pointsPresence: Float
  price: Float
  projectId: Float
  tenantId: Float
}

# order by stddev() on columns of table "event"
input EventStddevOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type EventStddevPopFields {
  addressId: Float
  approvalSubmissionId: Float
  bannerId: Float
  contentId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  maxParticipants: Float
  pointsPresence: Float
  price: Float
  projectId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "event"
input EventStddevPopOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type EventStddevSampFields {
  addressId: Float
  approvalSubmissionId: Float
  bannerId: Float
  contentId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  maxParticipants: Float
  pointsPresence: Float
  price: Float
  projectId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "event"
input EventStddevSampOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "event"
input EventStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventStreamCursorValueInput {
  addressId: bigint
  approvalSubmissionId: bigint
  autoAcceptJoins: Boolean
  bannerId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  end: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  meta: jsonb
  name: String
  onlineMeetingLink: String
  onlineMeetingPlace: String
  pointsPresence: Float
  price: Float
  projectId: bigint
  slug: String
  start: timestamptz
  state: String
  tenantId: bigint
}

# aggregate sum on columns
type EventSumFields {
  addressId: bigint
  approvalSubmissionId: bigint
  bannerId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  joinFormId: bigint
  lastEventApprovalStepId: bigint
  maxParticipants: smallint
  pointsPresence: Float
  price: Float
  projectId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "event"
input EventSumOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "event_supervisors"
type EventSupervisors {
  # An object relationship
  event: Event!
  eventId: bigint!

  # An object relationship
  userInfo: UserInfo!
  userInfoId: bigint!
}

# aggregated selection of "event_supervisors"
type EventSupervisorsAggregate {
  aggregate: EventSupervisorsAggregateFields
  nodes: [EventSupervisors!]!
}

input EventSupervisorsAggregateBoolExp {
  count: eventSupervisorsAggregateBoolExpCount
}

input eventSupervisorsAggregateBoolExpCount {
  arguments: [EventSupervisorsSelectColumn!]
  distinct: Boolean
  filter: EventSupervisorsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_supervisors"
type EventSupervisorsAggregateFields {
  avg: EventSupervisorsAvgFields
  count(columns: [EventSupervisorsSelectColumn!], distinct: Boolean): Int!
  max: EventSupervisorsMaxFields
  min: EventSupervisorsMinFields
  stddev: EventSupervisorsStddevFields
  stddevPop: EventSupervisorsStddevPopFields
  stddevSamp: EventSupervisorsStddevSampFields
  sum: EventSupervisorsSumFields
  varPop: EventSupervisorsVarPopFields
  varSamp: EventSupervisorsVarSampFields
  variance: EventSupervisorsVarianceFields
}

# order by aggregate values of table "event_supervisors"
input EventSupervisorsAggregateOrderBy {
  avg: EventSupervisorsAvgOrderBy
  count: OrderBy
  max: EventSupervisorsMaxOrderBy
  min: EventSupervisorsMinOrderBy
  stddev: EventSupervisorsStddevOrderBy
  stddevPop: EventSupervisorsStddevPopOrderBy
  stddevSamp: EventSupervisorsStddevSampOrderBy
  sum: EventSupervisorsSumOrderBy
  varPop: EventSupervisorsVarPopOrderBy
  varSamp: EventSupervisorsVarSampOrderBy
  variance: EventSupervisorsVarianceOrderBy
}

# input type for inserting array relation for remote table "event_supervisors"
input EventSupervisorsArrRelInsertInput {
  data: [EventSupervisorsInsertInput!]!

  # upsert condition
  onConflict: EventSupervisorsOnConflict
}

# aggregate avg on columns
type EventSupervisorsAvgFields {
  eventId: Float
  userInfoId: Float
}

# order by avg() on columns of table "event_supervisors"
input EventSupervisorsAvgOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# Boolean expression to filter rows from the table "event_supervisors". All fields are combined with a logical 'AND'.
input EventSupervisorsBoolExp {
  _and: [EventSupervisorsBoolExp!]
  _not: EventSupervisorsBoolExp
  _or: [EventSupervisorsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  userInfo: UserInfoBoolExp
  userInfoId: BigintComparisonExp
}

# unique or primary key constraints on table "event_supervisors"
enum EventSupervisorsConstraint {
  # unique or primary key constraint on columns "user_info_id", "event_id"
  event_supervisors_pkey
}

# input type for incrementing numeric columns in table "event_supervisors"
input EventSupervisorsIncInput {
  eventId: bigint
  userInfoId: bigint
}

# input type for inserting data into table "event_supervisors"
input EventSupervisorsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  userInfo: UserInfoObjRelInsertInput
  userInfoId: bigint
}

# aggregate max on columns
type EventSupervisorsMaxFields {
  eventId: bigint
  userInfoId: bigint
}

# order by max() on columns of table "event_supervisors"
input EventSupervisorsMaxOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# aggregate min on columns
type EventSupervisorsMinFields {
  eventId: bigint
  userInfoId: bigint
}

# order by min() on columns of table "event_supervisors"
input EventSupervisorsMinOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# response of any mutation on the table "event_supervisors"
type EventSupervisorsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventSupervisors!]!
}

# on_conflict condition type for table "event_supervisors"
input EventSupervisorsOnConflict {
  constraint: EventSupervisorsConstraint!
  updateColumns: [EventSupervisorsUpdateColumn!]! = []
  where: EventSupervisorsBoolExp
}

# Ordering options when selecting data from "event_supervisors".
input EventSupervisorsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  userInfo: UserInfoOrderBy
  userInfoId: OrderBy
}

# primary key columns input for table: event_supervisors
input EventSupervisorsPkColumnsInput {
  eventId: bigint!
  userInfoId: bigint!
}

# select columns of table "event_supervisors"
enum EventSupervisorsSelectColumn {
  # column name
  eventId

  # column name
  userInfoId
}

# input type for updating data in table "event_supervisors"
input EventSupervisorsSetInput {
  eventId: bigint
  userInfoId: bigint
}

# aggregate stddev on columns
type EventSupervisorsStddevFields {
  eventId: Float
  userInfoId: Float
}

# order by stddev() on columns of table "event_supervisors"
input EventSupervisorsStddevOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# aggregate stddevPop on columns
type EventSupervisorsStddevPopFields {
  eventId: Float
  userInfoId: Float
}

# order by stddevPop() on columns of table "event_supervisors"
input EventSupervisorsStddevPopOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# aggregate stddevSamp on columns
type EventSupervisorsStddevSampFields {
  eventId: Float
  userInfoId: Float
}

# order by stddevSamp() on columns of table "event_supervisors"
input EventSupervisorsStddevSampOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# Streaming cursor of the table "event_supervisors"
input EventSupervisorsStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventSupervisorsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventSupervisorsStreamCursorValueInput {
  eventId: bigint
  userInfoId: bigint
}

# aggregate sum on columns
type EventSupervisorsSumFields {
  eventId: bigint
  userInfoId: bigint
}

# order by sum() on columns of table "event_supervisors"
input EventSupervisorsSumOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# update columns of table "event_supervisors"
enum EventSupervisorsUpdateColumn {
  # column name
  eventId

  # column name
  userInfoId
}

input EventSupervisorsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventSupervisorsIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventSupervisorsSetInput

  # filter the rows which have to be updated
  where: EventSupervisorsBoolExp!
}

# aggregate variance on columns
type EventSupervisorsVarianceFields {
  eventId: Float
  userInfoId: Float
}

# order by variance() on columns of table "event_supervisors"
input EventSupervisorsVarianceOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# aggregate varPop on columns
type EventSupervisorsVarPopFields {
  eventId: Float
  userInfoId: Float
}

# order by varPop() on columns of table "event_supervisors"
input EventSupervisorsVarPopOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# aggregate varSamp on columns
type EventSupervisorsVarSampFields {
  eventId: Float
  userInfoId: Float
}

# order by varSamp() on columns of table "event_supervisors"
input EventSupervisorsVarSampOrderBy {
  eventId: OrderBy
  userInfoId: OrderBy
}

# columns and relationships of "event_tags"
type EventTags {
  # An object relationship
  event: Event!
  eventId: bigint!

  # An object relationship
  tag: Tag!
  tagId: bigint!
}

# aggregated selection of "event_tags"
type EventTagsAggregate {
  aggregate: EventTagsAggregateFields
  nodes: [EventTags!]!
}

input EventTagsAggregateBoolExp {
  count: eventTagsAggregateBoolExpCount
}

input eventTagsAggregateBoolExpCount {
  arguments: [EventTagsSelectColumn!]
  distinct: Boolean
  filter: EventTagsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "event_tags"
type EventTagsAggregateFields {
  avg: EventTagsAvgFields
  count(columns: [EventTagsSelectColumn!], distinct: Boolean): Int!
  max: EventTagsMaxFields
  min: EventTagsMinFields
  stddev: EventTagsStddevFields
  stddevPop: EventTagsStddevPopFields
  stddevSamp: EventTagsStddevSampFields
  sum: EventTagsSumFields
  varPop: EventTagsVarPopFields
  varSamp: EventTagsVarSampFields
  variance: EventTagsVarianceFields
}

# order by aggregate values of table "event_tags"
input EventTagsAggregateOrderBy {
  avg: EventTagsAvgOrderBy
  count: OrderBy
  max: EventTagsMaxOrderBy
  min: EventTagsMinOrderBy
  stddev: EventTagsStddevOrderBy
  stddevPop: EventTagsStddevPopOrderBy
  stddevSamp: EventTagsStddevSampOrderBy
  sum: EventTagsSumOrderBy
  varPop: EventTagsVarPopOrderBy
  varSamp: EventTagsVarSampOrderBy
  variance: EventTagsVarianceOrderBy
}

# input type for inserting array relation for remote table "event_tags"
input EventTagsArrRelInsertInput {
  data: [EventTagsInsertInput!]!

  # upsert condition
  onConflict: EventTagsOnConflict
}

# aggregate avg on columns
type EventTagsAvgFields {
  eventId: Float
  tagId: Float
}

# order by avg() on columns of table "event_tags"
input EventTagsAvgOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# Boolean expression to filter rows from the table "event_tags". All fields are combined with a logical 'AND'.
input EventTagsBoolExp {
  _and: [EventTagsBoolExp!]
  _not: EventTagsBoolExp
  _or: [EventTagsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

# unique or primary key constraints on table "event_tags"
enum EventTagsConstraint {
  # unique or primary key constraint on columns "event_id", "tag_id"
  event_tags_pkey
}

# input type for incrementing numeric columns in table "event_tags"
input EventTagsIncInput {
  eventId: bigint
  tagId: bigint
}

# input type for inserting data into table "event_tags"
input EventTagsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

# aggregate max on columns
type EventTagsMaxFields {
  eventId: bigint
  tagId: bigint
}

# order by max() on columns of table "event_tags"
input EventTagsMaxOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# aggregate min on columns
type EventTagsMinFields {
  eventId: bigint
  tagId: bigint
}

# order by min() on columns of table "event_tags"
input EventTagsMinOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# response of any mutation on the table "event_tags"
type EventTagsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [EventTags!]!
}

# on_conflict condition type for table "event_tags"
input EventTagsOnConflict {
  constraint: EventTagsConstraint!
  updateColumns: [EventTagsUpdateColumn!]! = []
  where: EventTagsBoolExp
}

# Ordering options when selecting data from "event_tags".
input EventTagsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

# primary key columns input for table: event_tags
input EventTagsPkColumnsInput {
  eventId: bigint!
  tagId: bigint!
}

# select columns of table "event_tags"
enum EventTagsSelectColumn {
  # column name
  eventId

  # column name
  tagId
}

# input type for updating data in table "event_tags"
input EventTagsSetInput {
  eventId: bigint
  tagId: bigint
}

# aggregate stddev on columns
type EventTagsStddevFields {
  eventId: Float
  tagId: Float
}

# order by stddev() on columns of table "event_tags"
input EventTagsStddevOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# aggregate stddevPop on columns
type EventTagsStddevPopFields {
  eventId: Float
  tagId: Float
}

# order by stddevPop() on columns of table "event_tags"
input EventTagsStddevPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# aggregate stddevSamp on columns
type EventTagsStddevSampFields {
  eventId: Float
  tagId: Float
}

# order by stddevSamp() on columns of table "event_tags"
input EventTagsStddevSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# Streaming cursor of the table "event_tags"
input EventTagsStreamCursorInput {
  # Stream column input with initial value
  initialValue: EventTagsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input EventTagsStreamCursorValueInput {
  eventId: bigint
  tagId: bigint
}

# aggregate sum on columns
type EventTagsSumFields {
  eventId: bigint
  tagId: bigint
}

# order by sum() on columns of table "event_tags"
input EventTagsSumOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# update columns of table "event_tags"
enum EventTagsUpdateColumn {
  # column name
  eventId

  # column name
  tagId
}

input EventTagsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: EventTagsIncInput

  # sets the columns of the filtered rows to the given values
  _set: EventTagsSetInput

  # filter the rows which have to be updated
  where: EventTagsBoolExp!
}

# aggregate variance on columns
type EventTagsVarianceFields {
  eventId: Float
  tagId: Float
}

# order by variance() on columns of table "event_tags"
input EventTagsVarianceOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# aggregate varPop on columns
type EventTagsVarPopFields {
  eventId: Float
  tagId: Float
}

# order by varPop() on columns of table "event_tags"
input EventTagsVarPopOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# aggregate varSamp on columns
type EventTagsVarSampFields {
  eventId: Float
  tagId: Float
}

# order by varSamp() on columns of table "event_tags"
input EventTagsVarSampOrderBy {
  eventId: OrderBy
  tagId: OrderBy
}

# update columns of table "event"
enum EventUpdateColumn {
  # column name
  addressId

  # column name
  approvalSubmissionId

  # column name
  autoAcceptJoins

  # column name
  bannerId

  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  end

  # column name
  hiddenAt

  # column name
  id

  # column name
  isPrivate

  # column name
  isTemplate

  # column name
  joinFormId

  # column name
  lastEventApprovalStepId

  # column name
  maxParticipants

  # column name
  meta

  # column name
  name

  # column name
  onlineMeetingLink

  # column name
  onlineMeetingPlace

  # column name
  pointsPresence

  # column name
  price

  # column name
  projectId

  # column name
  slug

  # column name
  start

  # column name
  state

  # column name
  tenantId
}

input EventUpdates {
  # append existing jsonb value of filtered columns with new jsonb value
  _append: EventAppendInput

  # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  _deleteAtPath: EventDeleteAtPathInput

  # delete the array element with specified index (negative integers count from
  # the end). throws an error if top level container is not an array
  _deleteElem: EventDeleteElemInput

  # delete key/value pair or string element. key/value pairs are matched based on their key value
  _deleteKey: EventDeleteKeyInput

  # increments the numeric columns with given value of the filtered values
  _inc: EventIncInput

  # prepend existing jsonb value of filtered columns with new jsonb value
  _prepend: EventPrependInput

  # sets the columns of the filtered rows to the given values
  _set: EventSetInput

  # filter the rows which have to be updated
  where: EventBoolExp!
}

# aggregate variance on columns
type EventVarianceFields {
  addressId: Float
  approvalSubmissionId: Float
  bannerId: Float
  contentId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  maxParticipants: Float
  pointsPresence: Float
  price: Float
  projectId: Float
  tenantId: Float
}

# order by variance() on columns of table "event"
input EventVarianceOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type EventVarPopFields {
  addressId: Float
  approvalSubmissionId: Float
  bannerId: Float
  contentId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  maxParticipants: Float
  pointsPresence: Float
  price: Float
  projectId: Float
  tenantId: Float
}

# order by varPop() on columns of table "event"
input EventVarPopOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type EventVarSampFields {
  addressId: Float
  approvalSubmissionId: Float
  bannerId: Float
  contentId: Float
  createdById: Float
  id: Float
  joinFormId: Float
  lastEventApprovalStepId: Float
  maxParticipants: Float
  pointsPresence: Float
  price: Float
  projectId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "event"
input EventVarSampOrderBy {
  addressId: OrderBy
  approvalSubmissionId: OrderBy
  bannerId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  joinFormId: OrderBy
  lastEventApprovalStepId: OrderBy
  maxParticipants: OrderBy
  pointsPresence: OrderBy
  price: OrderBy
  projectId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "expense"
type Expense {
  # An object relationship
  actorBankInfo: ActorBankInfo!
  bankInfoId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  # An array relationship
  expenseItems(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): [ExpenseItem!]!

  # An aggregate relationship
  expenseItemsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): ExpenseItemAggregate!
  expenseReportId: bigint!

  # An object relationship
  fileUpload: FileUpload!

  # An object relationship
  finance: Finance
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  individualBySettledById: Individual
  lastNotifiedAt: timestamptz
  settledAt: timestamptz
  settledById: bigint
  state: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "expense"
type ExpenseAggregate {
  aggregate: ExpenseAggregateFields
  nodes: [Expense!]!
}

input ExpenseAggregateBoolExp {
  count: expenseAggregateBoolExpCount
}

input expenseAggregateBoolExpCount {
  arguments: [ExpenseSelectColumn!]
  distinct: Boolean
  filter: ExpenseBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "expense"
type ExpenseAggregateFields {
  avg: ExpenseAvgFields
  count(columns: [ExpenseSelectColumn!], distinct: Boolean): Int!
  max: ExpenseMaxFields
  min: ExpenseMinFields
  stddev: ExpenseStddevFields
  stddevPop: ExpenseStddevPopFields
  stddevSamp: ExpenseStddevSampFields
  sum: ExpenseSumFields
  varPop: ExpenseVarPopFields
  varSamp: ExpenseVarSampFields
  variance: ExpenseVarianceFields
}

# order by aggregate values of table "expense"
input ExpenseAggregateOrderBy {
  avg: ExpenseAvgOrderBy
  count: OrderBy
  max: ExpenseMaxOrderBy
  min: ExpenseMinOrderBy
  stddev: ExpenseStddevOrderBy
  stddevPop: ExpenseStddevPopOrderBy
  stddevSamp: ExpenseStddevSampOrderBy
  sum: ExpenseSumOrderBy
  varPop: ExpenseVarPopOrderBy
  varSamp: ExpenseVarSampOrderBy
  variance: ExpenseVarianceOrderBy
}

# input type for inserting array relation for remote table "expense"
input ExpenseArrRelInsertInput {
  data: [ExpenseInsertInput!]!

  # upsert condition
  onConflict: ExpenseOnConflict
}

# aggregate avg on columns
type ExpenseAvgFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  settledById: Float
  tenantId: Float
}

# order by avg() on columns of table "expense"
input ExpenseAvgOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "expense". All fields are combined with a logical 'AND'.
input ExpenseBoolExp {
  _and: [ExpenseBoolExp!]
  _not: ExpenseBoolExp
  _or: [ExpenseBoolExp!]
  actorBankInfo: ActorBankInfoBoolExp
  bankInfoId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  expenseReportId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  finance: FinanceBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualBySettledById: IndividualBoolExp
  lastNotifiedAt: TimestamptzComparisonExp
  settledAt: TimestamptzComparisonExp
  settledById: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "expense"
enum ExpenseConstraint {
  # unique or primary key constraint on columns "id"
  expense_pkey
}

# input type for incrementing numeric columns in table "expense"
input ExpenseIncInput {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  settledById: bigint
  tenantId: bigint
}

# input type for inserting data into table "expense"
input ExpenseInsertInput {
  actorBankInfo: ActorBankInfoObjRelInsertInput
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseItems: ExpenseItemArrRelInsertInput
  expenseReportId: bigint
  fileUpload: FileUploadObjRelInsertInput
  finance: FinanceObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualBySettledById: IndividualObjRelInsertInput
  lastNotifiedAt: timestamptz
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# columns and relationships of "expense_item"
type ExpenseItem {
  # An object relationship
  actorAddress: ActorAddress
  addressId: bigint
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  # An object relationship
  expense: Expense
  expenseId: bigint

  # An array relationship
  expenseItemAttachments(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): [ExpenseItemAttachments!]!

  # An aggregate relationship
  expenseItemAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): ExpenseItemAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!
  payedAt: timestamptz
  quantity: smallint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  unitCost: Float!
}

# aggregated selection of "expense_item"
type ExpenseItemAggregate {
  aggregate: ExpenseItemAggregateFields
  nodes: [ExpenseItem!]!
}

input ExpenseItemAggregateBoolExp {
  count: expenseItemAggregateBoolExpCount
}

input expenseItemAggregateBoolExpCount {
  arguments: [ExpenseItemSelectColumn!]
  distinct: Boolean
  filter: ExpenseItemBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "expense_item"
type ExpenseItemAggregateFields {
  avg: ExpenseItemAvgFields
  count(columns: [ExpenseItemSelectColumn!], distinct: Boolean): Int!
  max: ExpenseItemMaxFields
  min: ExpenseItemMinFields
  stddev: ExpenseItemStddevFields
  stddevPop: ExpenseItemStddevPopFields
  stddevSamp: ExpenseItemStddevSampFields
  sum: ExpenseItemSumFields
  varPop: ExpenseItemVarPopFields
  varSamp: ExpenseItemVarSampFields
  variance: ExpenseItemVarianceFields
}

# order by aggregate values of table "expense_item"
input ExpenseItemAggregateOrderBy {
  avg: ExpenseItemAvgOrderBy
  count: OrderBy
  max: ExpenseItemMaxOrderBy
  min: ExpenseItemMinOrderBy
  stddev: ExpenseItemStddevOrderBy
  stddevPop: ExpenseItemStddevPopOrderBy
  stddevSamp: ExpenseItemStddevSampOrderBy
  sum: ExpenseItemSumOrderBy
  varPop: ExpenseItemVarPopOrderBy
  varSamp: ExpenseItemVarSampOrderBy
  variance: ExpenseItemVarianceOrderBy
}

# input type for inserting array relation for remote table "expense_item"
input ExpenseItemArrRelInsertInput {
  data: [ExpenseItemInsertInput!]!

  # upsert condition
  onConflict: ExpenseItemOnConflict
}

# columns and relationships of "expense_item_attachments"
type ExpenseItemAttachments {
  # An object relationship
  expenseItem: ExpenseItem!
  expenseItemId: bigint!

  # An object relationship
  fileUpload: FileUpload!
  fileUploadId: bigint!
}

# aggregated selection of "expense_item_attachments"
type ExpenseItemAttachmentsAggregate {
  aggregate: ExpenseItemAttachmentsAggregateFields
  nodes: [ExpenseItemAttachments!]!
}

input ExpenseItemAttachmentsAggregateBoolExp {
  count: expenseItemAttachmentsAggregateBoolExpCount
}

input expenseItemAttachmentsAggregateBoolExpCount {
  arguments: [ExpenseItemAttachmentsSelectColumn!]
  distinct: Boolean
  filter: ExpenseItemAttachmentsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "expense_item_attachments"
type ExpenseItemAttachmentsAggregateFields {
  avg: ExpenseItemAttachmentsAvgFields
  count(columns: [ExpenseItemAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: ExpenseItemAttachmentsMaxFields
  min: ExpenseItemAttachmentsMinFields
  stddev: ExpenseItemAttachmentsStddevFields
  stddevPop: ExpenseItemAttachmentsStddevPopFields
  stddevSamp: ExpenseItemAttachmentsStddevSampFields
  sum: ExpenseItemAttachmentsSumFields
  varPop: ExpenseItemAttachmentsVarPopFields
  varSamp: ExpenseItemAttachmentsVarSampFields
  variance: ExpenseItemAttachmentsVarianceFields
}

# order by aggregate values of table "expense_item_attachments"
input ExpenseItemAttachmentsAggregateOrderBy {
  avg: ExpenseItemAttachmentsAvgOrderBy
  count: OrderBy
  max: ExpenseItemAttachmentsMaxOrderBy
  min: ExpenseItemAttachmentsMinOrderBy
  stddev: ExpenseItemAttachmentsStddevOrderBy
  stddevPop: ExpenseItemAttachmentsStddevPopOrderBy
  stddevSamp: ExpenseItemAttachmentsStddevSampOrderBy
  sum: ExpenseItemAttachmentsSumOrderBy
  varPop: ExpenseItemAttachmentsVarPopOrderBy
  varSamp: ExpenseItemAttachmentsVarSampOrderBy
  variance: ExpenseItemAttachmentsVarianceOrderBy
}

# input type for inserting array relation for remote table "expense_item_attachments"
input ExpenseItemAttachmentsArrRelInsertInput {
  data: [ExpenseItemAttachmentsInsertInput!]!

  # upsert condition
  onConflict: ExpenseItemAttachmentsOnConflict
}

# aggregate avg on columns
type ExpenseItemAttachmentsAvgFields {
  expenseItemId: Float
  fileUploadId: Float
}

# order by avg() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsAvgOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# Boolean expression to filter rows from the table "expense_item_attachments". All fields are combined with a logical 'AND'.
input ExpenseItemAttachmentsBoolExp {
  _and: [ExpenseItemAttachmentsBoolExp!]
  _not: ExpenseItemAttachmentsBoolExp
  _or: [ExpenseItemAttachmentsBoolExp!]
  expenseItem: ExpenseItemBoolExp
  expenseItemId: BigintComparisonExp
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
}

# unique or primary key constraints on table "expense_item_attachments"
enum ExpenseItemAttachmentsConstraint {
  # unique or primary key constraint on columns "file_upload_id", "expense_item_id"
  expense_item_attachments_pkey
}

# input type for incrementing numeric columns in table "expense_item_attachments"
input ExpenseItemAttachmentsIncInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

# input type for inserting data into table "expense_item_attachments"
input ExpenseItemAttachmentsInsertInput {
  expenseItem: ExpenseItemObjRelInsertInput
  expenseItemId: bigint
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
}

# aggregate max on columns
type ExpenseItemAttachmentsMaxFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

# order by max() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsMaxOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# aggregate min on columns
type ExpenseItemAttachmentsMinFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

# order by min() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsMinOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# response of any mutation on the table "expense_item_attachments"
type ExpenseItemAttachmentsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ExpenseItemAttachments!]!
}

# on_conflict condition type for table "expense_item_attachments"
input ExpenseItemAttachmentsOnConflict {
  constraint: ExpenseItemAttachmentsConstraint!
  updateColumns: [ExpenseItemAttachmentsUpdateColumn!]! = []
  where: ExpenseItemAttachmentsBoolExp
}

# Ordering options when selecting data from "expense_item_attachments".
input ExpenseItemAttachmentsOrderBy {
  expenseItem: ExpenseItemOrderBy
  expenseItemId: OrderBy
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
}

# primary key columns input for table: expense_item_attachments
input ExpenseItemAttachmentsPkColumnsInput {
  expenseItemId: bigint!
  fileUploadId: bigint!
}

# select columns of table "expense_item_attachments"
enum ExpenseItemAttachmentsSelectColumn {
  # column name
  expenseItemId

  # column name
  fileUploadId
}

# input type for updating data in table "expense_item_attachments"
input ExpenseItemAttachmentsSetInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

# aggregate stddev on columns
type ExpenseItemAttachmentsStddevFields {
  expenseItemId: Float
  fileUploadId: Float
}

# order by stddev() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsStddevOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# aggregate stddevPop on columns
type ExpenseItemAttachmentsStddevPopFields {
  expenseItemId: Float
  fileUploadId: Float
}

# order by stddevPop() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsStddevPopOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# aggregate stddevSamp on columns
type ExpenseItemAttachmentsStddevSampFields {
  expenseItemId: Float
  fileUploadId: Float
}

# order by stddevSamp() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsStddevSampOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# Streaming cursor of the table "expense_item_attachments"
input ExpenseItemAttachmentsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ExpenseItemAttachmentsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ExpenseItemAttachmentsStreamCursorValueInput {
  expenseItemId: bigint
  fileUploadId: bigint
}

# aggregate sum on columns
type ExpenseItemAttachmentsSumFields {
  expenseItemId: bigint
  fileUploadId: bigint
}

# order by sum() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsSumOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# update columns of table "expense_item_attachments"
enum ExpenseItemAttachmentsUpdateColumn {
  # column name
  expenseItemId

  # column name
  fileUploadId
}

input ExpenseItemAttachmentsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ExpenseItemAttachmentsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ExpenseItemAttachmentsSetInput

  # filter the rows which have to be updated
  where: ExpenseItemAttachmentsBoolExp!
}

# aggregate variance on columns
type ExpenseItemAttachmentsVarianceFields {
  expenseItemId: Float
  fileUploadId: Float
}

# order by variance() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsVarianceOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# aggregate varPop on columns
type ExpenseItemAttachmentsVarPopFields {
  expenseItemId: Float
  fileUploadId: Float
}

# order by varPop() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsVarPopOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# aggregate varSamp on columns
type ExpenseItemAttachmentsVarSampFields {
  expenseItemId: Float
  fileUploadId: Float
}

# order by varSamp() on columns of table "expense_item_attachments"
input ExpenseItemAttachmentsVarSampOrderBy {
  expenseItemId: OrderBy
  fileUploadId: OrderBy
}

# aggregate avg on columns
type ExpenseItemAvgFields {
  addressId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

# order by avg() on columns of table "expense_item"
input ExpenseItemAvgOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# Boolean expression to filter rows from the table "expense_item". All fields are combined with a logical 'AND'.
input ExpenseItemBoolExp {
  _and: [ExpenseItemBoolExp!]
  _not: ExpenseItemBoolExp
  _or: [ExpenseItemBoolExp!]
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  expenseItemAttachments: ExpenseItemAttachmentsBoolExp
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  quantity: SmallintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  unitCost: FloatComparisonExp
}

# unique or primary key constraints on table "expense_item"
enum ExpenseItemConstraint {
  # unique or primary key constraint on columns "id"
  expense_item_pkey
}

# input type for incrementing numeric columns in table "expense_item"
input ExpenseItemIncInput {
  addressId: bigint
  createdById: bigint
  expenseId: bigint
  id: bigint
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

# input type for inserting data into table "expense_item"
input ExpenseItemInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  expenseItemAttachments: ExpenseItemAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  unitCost: Float
}

# aggregate max on columns
type ExpenseItemMaxFields {
  addressId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

# order by max() on columns of table "expense_item"
input ExpenseItemMaxOrderBy {
  addressId: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# aggregate min on columns
type ExpenseItemMinFields {
  addressId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

# order by min() on columns of table "expense_item"
input ExpenseItemMinOrderBy {
  addressId: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# response of any mutation on the table "expense_item"
type ExpenseItemMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ExpenseItem!]!
}

# input type for inserting object relation for remote table "expense_item"
input ExpenseItemObjRelInsertInput {
  data: ExpenseItemInsertInput!

  # upsert condition
  onConflict: ExpenseItemOnConflict
}

# on_conflict condition type for table "expense_item"
input ExpenseItemOnConflict {
  constraint: ExpenseItemConstraint!
  updateColumns: [ExpenseItemUpdateColumn!]! = []
  where: ExpenseItemBoolExp
}

# Ordering options when selecting data from "expense_item".
input ExpenseItemOrderBy {
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  payedAt: OrderBy
  quantity: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# primary key columns input for table: expense_item
input ExpenseItemPkColumnsInput {
  id: bigint!
}

# select columns of table "expense_item"
enum ExpenseItemSelectColumn {
  # column name
  addressId

  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  expenseId

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  payedAt

  # column name
  quantity

  # column name
  tenantId

  # column name
  unitCost
}

# input type for updating data in table "expense_item"
input ExpenseItemSetInput {
  addressId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

# aggregate stddev on columns
type ExpenseItemStddevFields {
  addressId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

# order by stddev() on columns of table "expense_item"
input ExpenseItemStddevOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# aggregate stddevPop on columns
type ExpenseItemStddevPopFields {
  addressId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

# order by stddevPop() on columns of table "expense_item"
input ExpenseItemStddevPopOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# aggregate stddevSamp on columns
type ExpenseItemStddevSampFields {
  addressId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

# order by stddevSamp() on columns of table "expense_item"
input ExpenseItemStddevSampOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# Streaming cursor of the table "expense_item"
input ExpenseItemStreamCursorInput {
  # Stream column input with initial value
  initialValue: ExpenseItemStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ExpenseItemStreamCursorValueInput {
  addressId: bigint
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  payedAt: timestamptz
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

# aggregate sum on columns
type ExpenseItemSumFields {
  addressId: bigint
  createdById: bigint
  expenseId: bigint
  id: bigint
  quantity: smallint
  tenantId: bigint
  unitCost: Float
}

# order by sum() on columns of table "expense_item"
input ExpenseItemSumOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# update columns of table "expense_item"
enum ExpenseItemUpdateColumn {
  # column name
  addressId

  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  expenseId

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  payedAt

  # column name
  quantity

  # column name
  tenantId

  # column name
  unitCost
}

input ExpenseItemUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ExpenseItemIncInput

  # sets the columns of the filtered rows to the given values
  _set: ExpenseItemSetInput

  # filter the rows which have to be updated
  where: ExpenseItemBoolExp!
}

# aggregate variance on columns
type ExpenseItemVarianceFields {
  addressId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

# order by variance() on columns of table "expense_item"
input ExpenseItemVarianceOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# aggregate varPop on columns
type ExpenseItemVarPopFields {
  addressId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

# order by varPop() on columns of table "expense_item"
input ExpenseItemVarPopOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# aggregate varSamp on columns
type ExpenseItemVarSampFields {
  addressId: Float
  createdById: Float
  expenseId: Float
  id: Float
  quantity: Float
  tenantId: Float
  unitCost: Float
}

# order by varSamp() on columns of table "expense_item"
input ExpenseItemVarSampOrderBy {
  addressId: OrderBy
  createdById: OrderBy
  expenseId: OrderBy
  id: OrderBy
  quantity: OrderBy
  tenantId: OrderBy
  unitCost: OrderBy
}

# aggregate max on columns
type ExpenseMaxFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# order by max() on columns of table "expense"
input ExpenseMaxOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type ExpenseMinFields {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# order by min() on columns of table "expense"
input ExpenseMinOrderBy {
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseReportId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastNotifiedAt: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "expense"
type ExpenseMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Expense!]!
}

# input type for inserting object relation for remote table "expense"
input ExpenseObjRelInsertInput {
  data: ExpenseInsertInput!

  # upsert condition
  onConflict: ExpenseOnConflict
}

# on_conflict condition type for table "expense"
input ExpenseOnConflict {
  constraint: ExpenseConstraint!
  updateColumns: [ExpenseUpdateColumn!]! = []
  where: ExpenseBoolExp
}

# Ordering options when selecting data from "expense".
input ExpenseOrderBy {
  actorBankInfo: ActorBankInfoOrderBy
  bankInfoId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  expenseReportId: OrderBy
  fileUpload: FileUploadOrderBy
  finance: FinanceOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualBySettledById: IndividualOrderBy
  lastNotifiedAt: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: expense
input ExpensePkColumnsInput {
  id: bigint!
}

# select columns of table "expense"
enum ExpenseSelectColumn {
  # column name
  bankInfoId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  expenseReportId

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastNotifiedAt

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  tenantId
}

# input type for updating data in table "expense"
input ExpenseSetInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# aggregate stddev on columns
type ExpenseStddevFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  settledById: Float
  tenantId: Float
}

# order by stddev() on columns of table "expense"
input ExpenseStddevOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ExpenseStddevPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  settledById: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "expense"
input ExpenseStddevPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ExpenseStddevSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  settledById: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "expense"
input ExpenseStddevSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "expense"
input ExpenseStreamCursorInput {
  # Stream column input with initial value
  initialValue: ExpenseStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ExpenseStreamCursorValueInput {
  bankInfoId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  expenseReportId: bigint
  hiddenAt: timestamptz
  id: bigint
  lastNotifiedAt: timestamptz
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# aggregate sum on columns
type ExpenseSumFields {
  bankInfoId: bigint
  createdById: bigint
  expenseReportId: bigint
  id: bigint
  settledById: bigint
  tenantId: bigint
}

# order by sum() on columns of table "expense"
input ExpenseSumOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# update columns of table "expense"
enum ExpenseUpdateColumn {
  # column name
  bankInfoId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  expenseReportId

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastNotifiedAt

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  tenantId
}

input ExpenseUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ExpenseIncInput

  # sets the columns of the filtered rows to the given values
  _set: ExpenseSetInput

  # filter the rows which have to be updated
  where: ExpenseBoolExp!
}

# aggregate variance on columns
type ExpenseVarianceFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  settledById: Float
  tenantId: Float
}

# order by variance() on columns of table "expense"
input ExpenseVarianceOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ExpenseVarPopFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  settledById: Float
  tenantId: Float
}

# order by varPop() on columns of table "expense"
input ExpenseVarPopOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ExpenseVarSampFields {
  bankInfoId: Float
  createdById: Float
  expenseReportId: Float
  id: Float
  settledById: Float
  tenantId: Float
}

# order by varSamp() on columns of table "expense"
input ExpenseVarSampOrderBy {
  bankInfoId: OrderBy
  createdById: OrderBy
  expenseReportId: OrderBy
  id: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "favorite"
type Favorite {
  # An object relationship
  actor: Actor
  actorId: bigint

  # An object relationship
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  lastActiveDate: timestamptz

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "favorite"
type FavoriteAggregate {
  aggregate: FavoriteAggregateFields
  nodes: [Favorite!]!
}

input FavoriteAggregateBoolExp {
  count: favoriteAggregateBoolExpCount
}

input favoriteAggregateBoolExpCount {
  arguments: [FavoriteSelectColumn!]
  distinct: Boolean
  filter: FavoriteBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "favorite"
type FavoriteAggregateFields {
  avg: FavoriteAvgFields
  count(columns: [FavoriteSelectColumn!], distinct: Boolean): Int!
  max: FavoriteMaxFields
  min: FavoriteMinFields
  stddev: FavoriteStddevFields
  stddevPop: FavoriteStddevPopFields
  stddevSamp: FavoriteStddevSampFields
  sum: FavoriteSumFields
  varPop: FavoriteVarPopFields
  varSamp: FavoriteVarSampFields
  variance: FavoriteVarianceFields
}

# order by aggregate values of table "favorite"
input FavoriteAggregateOrderBy {
  avg: FavoriteAvgOrderBy
  count: OrderBy
  max: FavoriteMaxOrderBy
  min: FavoriteMinOrderBy
  stddev: FavoriteStddevOrderBy
  stddevPop: FavoriteStddevPopOrderBy
  stddevSamp: FavoriteStddevSampOrderBy
  sum: FavoriteSumOrderBy
  varPop: FavoriteVarPopOrderBy
  varSamp: FavoriteVarSampOrderBy
  variance: FavoriteVarianceOrderBy
}

# input type for inserting array relation for remote table "favorite"
input FavoriteArrRelInsertInput {
  data: [FavoriteInsertInput!]!

  # upsert condition
  onConflict: FavoriteOnConflict
}

# aggregate avg on columns
type FavoriteAvgFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "favorite"
input FavoriteAvgOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "favorite". All fields are combined with a logical 'AND'.
input FavoriteBoolExp {
  _and: [FavoriteBoolExp!]
  _not: FavoriteBoolExp
  _or: [FavoriteBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "favorite"
enum FavoriteConstraint {
  # unique or primary key constraint on columns "id"
  favorite_pkey
}

# input type for incrementing numeric columns in table "favorite"
input FavoriteIncInput {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "favorite"
input FavoriteInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type FavoriteMaxFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

# order by max() on columns of table "favorite"
input FavoriteMaxOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type FavoriteMinFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

# order by min() on columns of table "favorite"
input FavoriteMinOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "favorite"
type FavoriteMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Favorite!]!
}

# on_conflict condition type for table "favorite"
input FavoriteOnConflict {
  constraint: FavoriteConstraint!
  updateColumns: [FavoriteUpdateColumn!]! = []
  where: FavoriteBoolExp
}

# Ordering options when selecting data from "favorite".
input FavoriteOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: favorite
input FavoritePkColumnsInput {
  id: bigint!
}

# select columns of table "favorite"
enum FavoriteSelectColumn {
  # column name
  actorId

  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  tenantId
}

# input type for updating data in table "favorite"
input FavoriteSetInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

# aggregate stddev on columns
type FavoriteStddevFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "favorite"
input FavoriteStddevOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type FavoriteStddevPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "favorite"
input FavoriteStddevPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type FavoriteStddevSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "favorite"
input FavoriteStddevSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "favorite"
input FavoriteStreamCursorInput {
  # Stream column input with initial value
  initialValue: FavoriteStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input FavoriteStreamCursorValueInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
}

# aggregate sum on columns
type FavoriteSumFields {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "favorite"
input FavoriteSumOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "favorite"
enum FavoriteUpdateColumn {
  # column name
  actorId

  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  tenantId
}

input FavoriteUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: FavoriteIncInput

  # sets the columns of the filtered rows to the given values
  _set: FavoriteSetInput

  # filter the rows which have to be updated
  where: FavoriteBoolExp!
}

# aggregate variance on columns
type FavoriteVarianceFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "favorite"
input FavoriteVarianceOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type FavoriteVarPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "favorite"
input FavoriteVarPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type FavoriteVarSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "favorite"
input FavoriteVarSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "file_upload"
type FileUpload {
  # An object relationship
  actorAddress: ActorAddress

  # An object relationship
  actorImage: ActorImage

  # An array relationship
  contentAttachments(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  # An aggregate relationship
  contentAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  document: Document

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An array relationship
  events(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An aggregate relationship
  eventsAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # An array relationship
  expenseItemAttachments(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): [ExpenseItemAttachments!]!

  # An aggregate relationship
  expenseItemAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): ExpenseItemAttachmentsAggregate!

  # An array relationship
  expenses(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # An aggregate relationship
  expensesAggregate(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): ExpenseAggregate!
  fileLastModifiedAt: timestamptz!

  # An array relationship
  financeAttachments(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): [FinanceAttachments!]!

  # An aggregate relationship
  financeAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): FinanceAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!

  # An array relationship
  projects(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): [Project!]!

  # An aggregate relationship
  projectsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): ProjectAggregate!
  size: Int!

  # An array relationship
  tags(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): [Tag!]!

  # An aggregate relationship
  tagsAggregate(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): TagAggregate!

  # An array relationship
  teams(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): [Team!]!

  # An aggregate relationship
  teamsAggregate(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): TeamAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  url: String!
}

# aggregated selection of "file_upload"
type FileUploadAggregate {
  aggregate: FileUploadAggregateFields
  nodes: [FileUpload!]!
}

input FileUploadAggregateBoolExp {
  count: fileUploadAggregateBoolExpCount
}

input fileUploadAggregateBoolExpCount {
  arguments: [FileUploadSelectColumn!]
  distinct: Boolean
  filter: FileUploadBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "file_upload"
type FileUploadAggregateFields {
  avg: FileUploadAvgFields
  count(columns: [FileUploadSelectColumn!], distinct: Boolean): Int!
  max: FileUploadMaxFields
  min: FileUploadMinFields
  stddev: FileUploadStddevFields
  stddevPop: FileUploadStddevPopFields
  stddevSamp: FileUploadStddevSampFields
  sum: FileUploadSumFields
  varPop: FileUploadVarPopFields
  varSamp: FileUploadVarSampFields
  variance: FileUploadVarianceFields
}

# order by aggregate values of table "file_upload"
input FileUploadAggregateOrderBy {
  avg: FileUploadAvgOrderBy
  count: OrderBy
  max: FileUploadMaxOrderBy
  min: FileUploadMinOrderBy
  stddev: FileUploadStddevOrderBy
  stddevPop: FileUploadStddevPopOrderBy
  stddevSamp: FileUploadStddevSampOrderBy
  sum: FileUploadSumOrderBy
  varPop: FileUploadVarPopOrderBy
  varSamp: FileUploadVarSampOrderBy
  variance: FileUploadVarianceOrderBy
}

# input type for inserting array relation for remote table "file_upload"
input FileUploadArrRelInsertInput {
  data: [FileUploadInsertInput!]!

  # upsert condition
  onConflict: FileUploadOnConflict
}

# aggregate avg on columns
type FileUploadAvgFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

# order by avg() on columns of table "file_upload"
input FileUploadAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "file_upload". All fields are combined with a logical 'AND'.
input FileUploadBoolExp {
  _and: [FileUploadBoolExp!]
  _not: FileUploadBoolExp
  _or: [FileUploadBoolExp!]
  actorAddress: ActorAddressBoolExp
  actorImage: ActorImageBoolExp
  contentAttachments: ContentAttachmentsBoolExp
  contentAttachmentsAggregate: ContentAttachmentsAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  document: DocumentBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItemAttachments: ExpenseItemAttachmentsBoolExp
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  fileLastModifiedAt: TimestamptzComparisonExp
  financeAttachments: FinanceAttachmentsBoolExp
  financeAttachmentsAggregate: FinanceAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  size: IntComparisonExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

# unique or primary key constraints on table "file_upload"
enum FileUploadConstraint {
  # unique or primary key constraint on columns "id"
  file_upload_pkey
}

# input type for incrementing numeric columns in table "file_upload"
input FileUploadIncInput {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

# input type for inserting data into table "file_upload"
input FileUploadInsertInput {
  actorAddress: ActorAddressObjRelInsertInput
  actorImage: ActorImageObjRelInsertInput
  contentAttachments: ContentAttachmentsArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  document: DocumentObjRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  events: EventArrRelInsertInput
  expenseItemAttachments: ExpenseItemAttachmentsArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  fileLastModifiedAt: timestamptz
  financeAttachments: FinanceAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  projects: ProjectArrRelInsertInput
  size: Int
  tags: TagArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  url: String
}

# aggregate max on columns
type FileUploadMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

# order by max() on columns of table "file_upload"
input FileUploadMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# aggregate min on columns
type FileUploadMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

# order by min() on columns of table "file_upload"
input FileUploadMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  fileLastModifiedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  size: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# response of any mutation on the table "file_upload"
type FileUploadMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [FileUpload!]!
}

# input type for inserting object relation for remote table "file_upload"
input FileUploadObjRelInsertInput {
  data: FileUploadInsertInput!

  # upsert condition
  onConflict: FileUploadOnConflict
}

# on_conflict condition type for table "file_upload"
input FileUploadOnConflict {
  constraint: FileUploadConstraint!
  updateColumns: [FileUploadUpdateColumn!]! = []
  where: FileUploadBoolExp
}

# Ordering options when selecting data from "file_upload".
input FileUploadOrderBy {
  actorAddress: ActorAddressOrderBy
  actorImage: ActorImageOrderBy
  contentAttachmentsAggregate: ContentAttachmentsAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  document: DocumentOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemAttachmentsAggregate: ExpenseItemAttachmentsAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  fileLastModifiedAt: OrderBy
  financeAttachmentsAggregate: FinanceAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  projectsAggregate: ProjectAggregateOrderBy
  size: OrderBy
  tagsAggregate: TagAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# primary key columns input for table: file_upload
input FileUploadPkColumnsInput {
  id: bigint!
}

# select columns of table "file_upload"
enum FileUploadSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  fileLastModifiedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  size

  # column name
  tenantId

  # column name
  type

  # column name
  url
}

# input type for updating data in table "file_upload"
input FileUploadSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

# aggregate stddev on columns
type FileUploadStddevFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

# order by stddev() on columns of table "file_upload"
input FileUploadStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type FileUploadStddevPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "file_upload"
input FileUploadStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type FileUploadStddevSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "file_upload"
input FileUploadStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "file_upload"
input FileUploadStreamCursorInput {
  # Stream column input with initial value
  initialValue: FileUploadStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input FileUploadStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  fileLastModifiedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  size: Int
  tenantId: bigint
  type: String
  url: String
}

# aggregate sum on columns
type FileUploadSumFields {
  createdById: bigint
  id: bigint
  size: Int
  tenantId: bigint
}

# order by sum() on columns of table "file_upload"
input FileUploadSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# update columns of table "file_upload"
enum FileUploadUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  fileLastModifiedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  size

  # column name
  tenantId

  # column name
  type

  # column name
  url
}

input FileUploadUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: FileUploadIncInput

  # sets the columns of the filtered rows to the given values
  _set: FileUploadSetInput

  # filter the rows which have to be updated
  where: FileUploadBoolExp!
}

# aggregate variance on columns
type FileUploadVarianceFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

# order by variance() on columns of table "file_upload"
input FileUploadVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type FileUploadVarPopFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

# order by varPop() on columns of table "file_upload"
input FileUploadVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type FileUploadVarSampFields {
  createdById: Float
  id: Float
  size: Float
  tenantId: Float
}

# order by varSamp() on columns of table "file_upload"
input FileUploadVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  size: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "finance"
type Finance {
  # An object relationship
  actor: Actor

  # An object relationship
  actorAddress: ActorAddress
  addressId: bigint
  addressType: String!
  amount: Float!
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  # An object relationship
  event: Event
  eventId: bigint

  # An object relationship
  expense: Expense
  expenseId: bigint

  # An array relationship
  financeAttachments(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): [FinanceAttachments!]!

  # An aggregate relationship
  financeAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): FinanceAttachmentsAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  method: String!
  name: String!
  payedAt: timestamptz!
  payedById: bigint
  payedByType: String!

  # An object relationship
  project: Project
  projectId: bigint
  state: String!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "finance"
type FinanceAggregate {
  aggregate: FinanceAggregateFields
  nodes: [Finance!]!
}

input FinanceAggregateBoolExp {
  count: financeAggregateBoolExpCount
}

input financeAggregateBoolExpCount {
  arguments: [FinanceSelectColumn!]
  distinct: Boolean
  filter: FinanceBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "finance"
type FinanceAggregateFields {
  avg: FinanceAvgFields
  count(columns: [FinanceSelectColumn!], distinct: Boolean): Int!
  max: FinanceMaxFields
  min: FinanceMinFields
  stddev: FinanceStddevFields
  stddevPop: FinanceStddevPopFields
  stddevSamp: FinanceStddevSampFields
  sum: FinanceSumFields
  varPop: FinanceVarPopFields
  varSamp: FinanceVarSampFields
  variance: FinanceVarianceFields
}

# order by aggregate values of table "finance"
input FinanceAggregateOrderBy {
  avg: FinanceAvgOrderBy
  count: OrderBy
  max: FinanceMaxOrderBy
  min: FinanceMinOrderBy
  stddev: FinanceStddevOrderBy
  stddevPop: FinanceStddevPopOrderBy
  stddevSamp: FinanceStddevSampOrderBy
  sum: FinanceSumOrderBy
  varPop: FinanceVarPopOrderBy
  varSamp: FinanceVarSampOrderBy
  variance: FinanceVarianceOrderBy
}

# input type for inserting array relation for remote table "finance"
input FinanceArrRelInsertInput {
  data: [FinanceInsertInput!]!

  # upsert condition
  onConflict: FinanceOnConflict
}

# columns and relationships of "finance_attachments"
type FinanceAttachments {
  # An object relationship
  fileUpload: FileUpload!
  fileUploadId: bigint!

  # An object relationship
  finance: Finance!
  financeId: bigint!
}

# aggregated selection of "finance_attachments"
type FinanceAttachmentsAggregate {
  aggregate: FinanceAttachmentsAggregateFields
  nodes: [FinanceAttachments!]!
}

input FinanceAttachmentsAggregateBoolExp {
  count: financeAttachmentsAggregateBoolExpCount
}

input financeAttachmentsAggregateBoolExpCount {
  arguments: [FinanceAttachmentsSelectColumn!]
  distinct: Boolean
  filter: FinanceAttachmentsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "finance_attachments"
type FinanceAttachmentsAggregateFields {
  avg: FinanceAttachmentsAvgFields
  count(columns: [FinanceAttachmentsSelectColumn!], distinct: Boolean): Int!
  max: FinanceAttachmentsMaxFields
  min: FinanceAttachmentsMinFields
  stddev: FinanceAttachmentsStddevFields
  stddevPop: FinanceAttachmentsStddevPopFields
  stddevSamp: FinanceAttachmentsStddevSampFields
  sum: FinanceAttachmentsSumFields
  varPop: FinanceAttachmentsVarPopFields
  varSamp: FinanceAttachmentsVarSampFields
  variance: FinanceAttachmentsVarianceFields
}

# order by aggregate values of table "finance_attachments"
input FinanceAttachmentsAggregateOrderBy {
  avg: FinanceAttachmentsAvgOrderBy
  count: OrderBy
  max: FinanceAttachmentsMaxOrderBy
  min: FinanceAttachmentsMinOrderBy
  stddev: FinanceAttachmentsStddevOrderBy
  stddevPop: FinanceAttachmentsStddevPopOrderBy
  stddevSamp: FinanceAttachmentsStddevSampOrderBy
  sum: FinanceAttachmentsSumOrderBy
  varPop: FinanceAttachmentsVarPopOrderBy
  varSamp: FinanceAttachmentsVarSampOrderBy
  variance: FinanceAttachmentsVarianceOrderBy
}

# input type for inserting array relation for remote table "finance_attachments"
input FinanceAttachmentsArrRelInsertInput {
  data: [FinanceAttachmentsInsertInput!]!

  # upsert condition
  onConflict: FinanceAttachmentsOnConflict
}

# aggregate avg on columns
type FinanceAttachmentsAvgFields {
  fileUploadId: Float
  financeId: Float
}

# order by avg() on columns of table "finance_attachments"
input FinanceAttachmentsAvgOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# Boolean expression to filter rows from the table "finance_attachments". All fields are combined with a logical 'AND'.
input FinanceAttachmentsBoolExp {
  _and: [FinanceAttachmentsBoolExp!]
  _not: FinanceAttachmentsBoolExp
  _or: [FinanceAttachmentsBoolExp!]
  fileUpload: FileUploadBoolExp
  fileUploadId: BigintComparisonExp
  finance: FinanceBoolExp
  financeId: BigintComparisonExp
}

# unique or primary key constraints on table "finance_attachments"
enum FinanceAttachmentsConstraint {
  # unique or primary key constraint on columns "file_upload_id", "finance_id"
  finance_attachments_pkey
}

# input type for incrementing numeric columns in table "finance_attachments"
input FinanceAttachmentsIncInput {
  fileUploadId: bigint
  financeId: bigint
}

# input type for inserting data into table "finance_attachments"
input FinanceAttachmentsInsertInput {
  fileUpload: FileUploadObjRelInsertInput
  fileUploadId: bigint
  finance: FinanceObjRelInsertInput
  financeId: bigint
}

# aggregate max on columns
type FinanceAttachmentsMaxFields {
  fileUploadId: bigint
  financeId: bigint
}

# order by max() on columns of table "finance_attachments"
input FinanceAttachmentsMaxOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# aggregate min on columns
type FinanceAttachmentsMinFields {
  fileUploadId: bigint
  financeId: bigint
}

# order by min() on columns of table "finance_attachments"
input FinanceAttachmentsMinOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# response of any mutation on the table "finance_attachments"
type FinanceAttachmentsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [FinanceAttachments!]!
}

# on_conflict condition type for table "finance_attachments"
input FinanceAttachmentsOnConflict {
  constraint: FinanceAttachmentsConstraint!
  updateColumns: [FinanceAttachmentsUpdateColumn!]! = []
  where: FinanceAttachmentsBoolExp
}

# Ordering options when selecting data from "finance_attachments".
input FinanceAttachmentsOrderBy {
  fileUpload: FileUploadOrderBy
  fileUploadId: OrderBy
  finance: FinanceOrderBy
  financeId: OrderBy
}

# primary key columns input for table: finance_attachments
input FinanceAttachmentsPkColumnsInput {
  fileUploadId: bigint!
  financeId: bigint!
}

# select columns of table "finance_attachments"
enum FinanceAttachmentsSelectColumn {
  # column name
  fileUploadId

  # column name
  financeId
}

# input type for updating data in table "finance_attachments"
input FinanceAttachmentsSetInput {
  fileUploadId: bigint
  financeId: bigint
}

# aggregate stddev on columns
type FinanceAttachmentsStddevFields {
  fileUploadId: Float
  financeId: Float
}

# order by stddev() on columns of table "finance_attachments"
input FinanceAttachmentsStddevOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# aggregate stddevPop on columns
type FinanceAttachmentsStddevPopFields {
  fileUploadId: Float
  financeId: Float
}

# order by stddevPop() on columns of table "finance_attachments"
input FinanceAttachmentsStddevPopOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# aggregate stddevSamp on columns
type FinanceAttachmentsStddevSampFields {
  fileUploadId: Float
  financeId: Float
}

# order by stddevSamp() on columns of table "finance_attachments"
input FinanceAttachmentsStddevSampOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# Streaming cursor of the table "finance_attachments"
input FinanceAttachmentsStreamCursorInput {
  # Stream column input with initial value
  initialValue: FinanceAttachmentsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input FinanceAttachmentsStreamCursorValueInput {
  fileUploadId: bigint
  financeId: bigint
}

# aggregate sum on columns
type FinanceAttachmentsSumFields {
  fileUploadId: bigint
  financeId: bigint
}

# order by sum() on columns of table "finance_attachments"
input FinanceAttachmentsSumOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# update columns of table "finance_attachments"
enum FinanceAttachmentsUpdateColumn {
  # column name
  fileUploadId

  # column name
  financeId
}

input FinanceAttachmentsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: FinanceAttachmentsIncInput

  # sets the columns of the filtered rows to the given values
  _set: FinanceAttachmentsSetInput

  # filter the rows which have to be updated
  where: FinanceAttachmentsBoolExp!
}

# aggregate variance on columns
type FinanceAttachmentsVarianceFields {
  fileUploadId: Float
  financeId: Float
}

# order by variance() on columns of table "finance_attachments"
input FinanceAttachmentsVarianceOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# aggregate varPop on columns
type FinanceAttachmentsVarPopFields {
  fileUploadId: Float
  financeId: Float
}

# order by varPop() on columns of table "finance_attachments"
input FinanceAttachmentsVarPopOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# aggregate varSamp on columns
type FinanceAttachmentsVarSampFields {
  fileUploadId: Float
  financeId: Float
}

# order by varSamp() on columns of table "finance_attachments"
input FinanceAttachmentsVarSampOrderBy {
  fileUploadId: OrderBy
  financeId: OrderBy
}

# aggregate avg on columns
type FinanceAvgFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "finance"
input FinanceAvgOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "finance". All fields are combined with a logical 'AND'.
input FinanceBoolExp {
  _and: [FinanceBoolExp!]
  _not: FinanceBoolExp
  _or: [FinanceBoolExp!]
  actor: ActorBoolExp
  actorAddress: ActorAddressBoolExp
  addressId: BigintComparisonExp
  addressType: StringComparisonExp
  amount: FloatComparisonExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  event: EventBoolExp
  eventId: BigintComparisonExp
  expense: ExpenseBoolExp
  expenseId: BigintComparisonExp
  financeAttachments: FinanceAttachmentsBoolExp
  financeAttachmentsAggregate: FinanceAttachmentsAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  method: StringComparisonExp
  name: StringComparisonExp
  payedAt: TimestamptzComparisonExp
  payedById: BigintComparisonExp
  payedByType: StringComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "finance"
enum FinanceConstraint {
  # unique or primary key constraint on columns "expense_id"
  finance_expense_id_unique

  # unique or primary key constraint on columns "id"
  finance_pkey
}

# input type for incrementing numeric columns in table "finance"
input FinanceIncInput {
  addressId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "finance"
input FinanceInsertInput {
  actor: ActorObjRelInsertInput
  actorAddress: ActorAddressObjRelInsertInput
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  event: EventObjRelInsertInput
  eventId: bigint
  expense: ExpenseObjRelInsertInput
  expenseId: bigint
  financeAttachments: FinanceAttachmentsArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  project: ProjectObjRelInsertInput
  projectId: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type FinanceMaxFields {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# order by max() on columns of table "finance"
input FinanceMaxOrderBy {
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type FinanceMinFields {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# order by min() on columns of table "finance"
input FinanceMinOrderBy {
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  projectId: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "finance"
type FinanceMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Finance!]!
}

# input type for inserting object relation for remote table "finance"
input FinanceObjRelInsertInput {
  data: FinanceInsertInput!

  # upsert condition
  onConflict: FinanceOnConflict
}

# on_conflict condition type for table "finance"
input FinanceOnConflict {
  constraint: FinanceConstraint!
  updateColumns: [FinanceUpdateColumn!]! = []
  where: FinanceBoolExp
}

# Ordering options when selecting data from "finance".
input FinanceOrderBy {
  actor: ActorOrderBy
  actorAddress: ActorAddressOrderBy
  addressId: OrderBy
  addressType: OrderBy
  amount: OrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  event: EventOrderBy
  eventId: OrderBy
  expense: ExpenseOrderBy
  expenseId: OrderBy
  financeAttachmentsAggregate: FinanceAttachmentsAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  method: OrderBy
  name: OrderBy
  payedAt: OrderBy
  payedById: OrderBy
  payedByType: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: finance
input FinancePkColumnsInput {
  id: bigint!
}

# select columns of table "finance"
enum FinanceSelectColumn {
  # column name
  addressId

  # column name
  addressType

  # column name
  amount

  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  eventId

  # column name
  expenseId

  # column name
  hiddenAt

  # column name
  id

  # column name
  method

  # column name
  name

  # column name
  payedAt

  # column name
  payedById

  # column name
  payedByType

  # column name
  projectId

  # column name
  state

  # column name
  teamId

  # column name
  tenantId
}

# input type for updating data in table "finance"
input FinanceSetInput {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type FinanceStddevFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "finance"
input FinanceStddevOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type FinanceStddevPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "finance"
input FinanceStddevPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type FinanceStddevSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "finance"
input FinanceStddevSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "finance"
input FinanceStreamCursorInput {
  # Stream column input with initial value
  initialValue: FinanceStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input FinanceStreamCursorValueInput {
  addressId: bigint
  addressType: String
  amount: Float
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventId: bigint
  expenseId: bigint
  hiddenAt: timestamptz
  id: bigint
  method: String
  name: String
  payedAt: timestamptz
  payedById: bigint
  payedByType: String
  projectId: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type FinanceSumFields {
  addressId: bigint
  amount: Float
  createdById: bigint
  eventId: bigint
  expenseId: bigint
  id: bigint
  payedById: bigint
  projectId: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "finance"
input FinanceSumOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "finance"
enum FinanceUpdateColumn {
  # column name
  addressId

  # column name
  addressType

  # column name
  amount

  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  eventId

  # column name
  expenseId

  # column name
  hiddenAt

  # column name
  id

  # column name
  method

  # column name
  name

  # column name
  payedAt

  # column name
  payedById

  # column name
  payedByType

  # column name
  projectId

  # column name
  state

  # column name
  teamId

  # column name
  tenantId
}

input FinanceUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: FinanceIncInput

  # sets the columns of the filtered rows to the given values
  _set: FinanceSetInput

  # filter the rows which have to be updated
  where: FinanceBoolExp!
}

# aggregate variance on columns
type FinanceVarianceFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "finance"
input FinanceVarianceOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type FinanceVarPopFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "finance"
input FinanceVarPopOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type FinanceVarSampFields {
  addressId: Float
  amount: Float
  createdById: Float
  eventId: Float
  expenseId: Float
  id: Float
  payedById: Float
  projectId: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "finance"
input FinanceVarSampOrderBy {
  addressId: OrderBy
  amount: OrderBy
  createdById: OrderBy
  eventId: OrderBy
  expenseId: OrderBy
  id: OrderBy
  payedById: OrderBy
  projectId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
input FloatComparisonExp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _isNull: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

# columns and relationships of "follow"
type Follow {
  # An object relationship
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "follow"
type FollowAggregate {
  aggregate: FollowAggregateFields
  nodes: [Follow!]!
}

input FollowAggregateBoolExp {
  count: followAggregateBoolExpCount
}

input followAggregateBoolExpCount {
  arguments: [FollowSelectColumn!]
  distinct: Boolean
  filter: FollowBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "follow"
type FollowAggregateFields {
  avg: FollowAvgFields
  count(columns: [FollowSelectColumn!], distinct: Boolean): Int!
  max: FollowMaxFields
  min: FollowMinFields
  stddev: FollowStddevFields
  stddevPop: FollowStddevPopFields
  stddevSamp: FollowStddevSampFields
  sum: FollowSumFields
  varPop: FollowVarPopFields
  varSamp: FollowVarSampFields
  variance: FollowVarianceFields
}

# order by aggregate values of table "follow"
input FollowAggregateOrderBy {
  avg: FollowAvgOrderBy
  count: OrderBy
  max: FollowMaxOrderBy
  min: FollowMinOrderBy
  stddev: FollowStddevOrderBy
  stddevPop: FollowStddevPopOrderBy
  stddevSamp: FollowStddevSampOrderBy
  sum: FollowSumOrderBy
  varPop: FollowVarPopOrderBy
  varSamp: FollowVarSampOrderBy
  variance: FollowVarianceOrderBy
}

# input type for inserting array relation for remote table "follow"
input FollowArrRelInsertInput {
  data: [FollowInsertInput!]!

  # upsert condition
  onConflict: FollowOnConflict
}

# aggregate avg on columns
type FollowAvgFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "follow"
input FollowAvgOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "follow". All fields are combined with a logical 'AND'.
input FollowBoolExp {
  _and: [FollowBoolExp!]
  _not: FollowBoolExp
  _or: [FollowBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  followedActorId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "follow"
enum FollowConstraint {
  # unique or primary key constraint on columns "id"
  follow_pkey
}

# input type for incrementing numeric columns in table "follow"
input FollowIncInput {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "follow"
input FollowInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type FollowMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by max() on columns of table "follow"
input FollowMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type FollowMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by min() on columns of table "follow"
input FollowMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "follow"
type FollowMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Follow!]!
}

# on_conflict condition type for table "follow"
input FollowOnConflict {
  constraint: FollowConstraint!
  updateColumns: [FollowUpdateColumn!]! = []
  where: FollowBoolExp
}

# Ordering options when selecting data from "follow".
input FollowOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  followedActorId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: follow
input FollowPkColumnsInput {
  id: bigint!
}

# select columns of table "follow"
enum FollowSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  followedActorId

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

# input type for updating data in table "follow"
input FollowSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type FollowStddevFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "follow"
input FollowStddevOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type FollowStddevPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "follow"
input FollowStddevPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type FollowStddevSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "follow"
input FollowStddevSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "follow"
input FollowStreamCursorInput {
  # Stream column input with initial value
  initialValue: FollowStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input FollowStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  followedActorId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# aggregate sum on columns
type FollowSumFields {
  createdById: bigint
  followedActorId: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "follow"
input FollowSumOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "follow"
enum FollowUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  followedActorId

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId
}

input FollowUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: FollowIncInput

  # sets the columns of the filtered rows to the given values
  _set: FollowSetInput

  # filter the rows which have to be updated
  where: FollowBoolExp!
}

# aggregate variance on columns
type FollowVarianceFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "follow"
input FollowVarianceOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type FollowVarPopFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "follow"
input FollowVarPopOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type FollowVarSampFields {
  createdById: Float
  followedActorId: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "follow"
input FollowVarSampOrderBy {
  createdById: OrderBy
  followedActorId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "form"
type Form {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An array relationship
  events(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An aggregate relationship
  eventsAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # An array relationship
  formSubmissions(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  # An aggregate relationship
  formSubmissionsAggregate(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  isAllowingEditingAnswers: Boolean!
  isAllowingMultipleAnswers: Boolean!
  isEnabled: Boolean!
  isRequired: Boolean!
  name: String!
  schema(
    # JSON select path
    path: String
  ): jsonb!

  # An object relationship
  team: Team
  teamId: bigint

  # An object relationship
  tenant: Tenant!

  # An object relationship
  tenantById: Tenant
  tenantId: bigint!
  type: String!
}

# aggregated selection of "form"
type FormAggregate {
  aggregate: FormAggregateFields
  nodes: [Form!]!
}

input FormAggregateBoolExp {
  bool_and: formAggregateBoolExpBool_and
  bool_or: formAggregateBoolExpBool_or
  count: formAggregateBoolExpCount
}

input formAggregateBoolExpBool_and {
  arguments: FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpBool_or {
  arguments: FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: FormBoolExp
  predicate: BooleanComparisonExp!
}

input formAggregateBoolExpCount {
  arguments: [FormSelectColumn!]
  distinct: Boolean
  filter: FormBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "form"
type FormAggregateFields {
  avg: FormAvgFields
  count(columns: [FormSelectColumn!], distinct: Boolean): Int!
  max: FormMaxFields
  min: FormMinFields
  stddev: FormStddevFields
  stddevPop: FormStddevPopFields
  stddevSamp: FormStddevSampFields
  sum: FormSumFields
  varPop: FormVarPopFields
  varSamp: FormVarSampFields
  variance: FormVarianceFields
}

# order by aggregate values of table "form"
input FormAggregateOrderBy {
  avg: FormAvgOrderBy
  count: OrderBy
  max: FormMaxOrderBy
  min: FormMinOrderBy
  stddev: FormStddevOrderBy
  stddevPop: FormStddevPopOrderBy
  stddevSamp: FormStddevSampOrderBy
  sum: FormSumOrderBy
  varPop: FormVarPopOrderBy
  varSamp: FormVarSampOrderBy
  variance: FormVarianceOrderBy
}

# append existing jsonb value of filtered columns with new jsonb value
input FormAppendInput {
  schema: jsonb
}

# input type for inserting array relation for remote table "form"
input FormArrRelInsertInput {
  data: [FormInsertInput!]!

  # upsert condition
  onConflict: FormOnConflict
}

# aggregate avg on columns
type FormAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "form"
input FormAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "form". All fields are combined with a logical 'AND'.
input FormBoolExp {
  _and: [FormBoolExp!]
  _not: FormBoolExp
  _or: [FormBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isAllowingEditingAnswers: BooleanComparisonExp
  isAllowingMultipleAnswers: BooleanComparisonExp
  isEnabled: BooleanComparisonExp
  isRequired: BooleanComparisonExp
  name: StringComparisonExp
  schema: JsonbComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantById: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

# unique or primary key constraints on table "form"
enum FormConstraint {
  # unique or primary key constraint on columns "id"
  form_pkey

  # unique or primary key constraint on columns "team_id"
  form_team_id_unique
}

# delete the field or element with specified path (for JSON arrays, negative integers count from the end)
input FormDeleteAtPathInput {
  schema: [String!]
}

# delete the array element with specified index (negative integers count from the
# end). throws an error if top level container is not an array
input FormDeleteElemInput {
  schema: Int
}

# delete key/value pair or string element. key/value pairs are matched based on their key value
input FormDeleteKeyInput {
  schema: String
}

# input type for incrementing numeric columns in table "form"
input FormIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "form"
input FormInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  events: EventArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  name: String
  schema: jsonb
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

# aggregate max on columns
type FormMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
  type: String
}

# order by max() on columns of table "form"
input FormMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type FormMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
  type: String
}

# order by min() on columns of table "form"
input FormMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "form"
type FormMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Form!]!
}

# input type for inserting object relation for remote table "form"
input FormObjRelInsertInput {
  data: FormInsertInput!

  # upsert condition
  onConflict: FormOnConflict
}

# on_conflict condition type for table "form"
input FormOnConflict {
  constraint: FormConstraint!
  updateColumns: [FormUpdateColumn!]! = []
  where: FormBoolExp
}

# Ordering options when selecting data from "form".
input FormOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventsAggregate: EventAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isAllowingEditingAnswers: OrderBy
  isAllowingMultipleAnswers: OrderBy
  isEnabled: OrderBy
  isRequired: OrderBy
  name: OrderBy
  schema: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantById: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

# primary key columns input for table: form
input FormPkColumnsInput {
  id: bigint!
}

# prepend existing jsonb value of filtered columns with new jsonb value
input FormPrependInput {
  schema: jsonb
}

# select columns of table "form"
enum FormSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  isAllowingEditingAnswers

  # column name
  isAllowingMultipleAnswers

  # column name
  isEnabled

  # column name
  isRequired

  # column name
  name

  # column name
  schema

  # column name
  teamId

  # column name
  tenantId

  # column name
  type
}

# select "formAggregateBoolExpBool_andArgumentsColumns" columns of table "form"
enum FormSelectColumnFormAggregateBoolExpBool_andArgumentsColumns {
  # column name
  isAllowingEditingAnswers

  # column name
  isAllowingMultipleAnswers

  # column name
  isEnabled

  # column name
  isRequired
}

# select "formAggregateBoolExpBool_orArgumentsColumns" columns of table "form"
enum FormSelectColumnFormAggregateBoolExpBool_orArgumentsColumns {
  # column name
  isAllowingEditingAnswers

  # column name
  isAllowingMultipleAnswers

  # column name
  isEnabled

  # column name
  isRequired
}

# input type for updating data in table "form"
input FormSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  name: String
  schema: jsonb
  teamId: bigint
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type FormStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "form"
input FormStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type FormStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "form"
input FormStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type FormStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "form"
input FormStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "form"
input FormStreamCursorInput {
  # Stream column input with initial value
  initialValue: FormStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input FormStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isAllowingEditingAnswers: Boolean
  isAllowingMultipleAnswers: Boolean
  isEnabled: Boolean
  isRequired: Boolean
  name: String
  schema: jsonb
  teamId: bigint
  tenantId: bigint
  type: String
}

# columns and relationships of "form_submission"
type FormSubmission {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  event: Event

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An object relationship
  form: Form!
  formId: bigint!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  submission(
    # JSON select path
    path: String
  ): jsonb!

  # An array relationship
  teamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  teamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "form_submission"
type FormSubmissionAggregate {
  aggregate: FormSubmissionAggregateFields
  nodes: [FormSubmission!]!
}

input FormSubmissionAggregateBoolExp {
  count: formSubmissionAggregateBoolExpCount
}

input formSubmissionAggregateBoolExpCount {
  arguments: [FormSubmissionSelectColumn!]
  distinct: Boolean
  filter: FormSubmissionBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "form_submission"
type FormSubmissionAggregateFields {
  avg: FormSubmissionAvgFields
  count(columns: [FormSubmissionSelectColumn!], distinct: Boolean): Int!
  max: FormSubmissionMaxFields
  min: FormSubmissionMinFields
  stddev: FormSubmissionStddevFields
  stddevPop: FormSubmissionStddevPopFields
  stddevSamp: FormSubmissionStddevSampFields
  sum: FormSubmissionSumFields
  varPop: FormSubmissionVarPopFields
  varSamp: FormSubmissionVarSampFields
  variance: FormSubmissionVarianceFields
}

# order by aggregate values of table "form_submission"
input FormSubmissionAggregateOrderBy {
  avg: FormSubmissionAvgOrderBy
  count: OrderBy
  max: FormSubmissionMaxOrderBy
  min: FormSubmissionMinOrderBy
  stddev: FormSubmissionStddevOrderBy
  stddevPop: FormSubmissionStddevPopOrderBy
  stddevSamp: FormSubmissionStddevSampOrderBy
  sum: FormSubmissionSumOrderBy
  varPop: FormSubmissionVarPopOrderBy
  varSamp: FormSubmissionVarSampOrderBy
  variance: FormSubmissionVarianceOrderBy
}

# append existing jsonb value of filtered columns with new jsonb value
input FormSubmissionAppendInput {
  submission: jsonb
}

# input type for inserting array relation for remote table "form_submission"
input FormSubmissionArrRelInsertInput {
  data: [FormSubmissionInsertInput!]!

  # upsert condition
  onConflict: FormSubmissionOnConflict
}

# aggregate avg on columns
type FormSubmissionAvgFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "form_submission"
input FormSubmissionAvgOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "form_submission". All fields are combined with a logical 'AND'.
input FormSubmissionBoolExp {
  _and: [FormSubmissionBoolExp!]
  _not: FormSubmissionBoolExp
  _or: [FormSubmissionBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  event: EventBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  form: FormBoolExp
  formId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  submission: JsonbComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "form_submission"
enum FormSubmissionConstraint {
  # unique or primary key constraint on columns "id"
  form_submission_pkey
}

# delete the field or element with specified path (for JSON arrays, negative integers count from the end)
input FormSubmissionDeleteAtPathInput {
  submission: [String!]
}

# delete the array element with specified index (negative integers count from the
# end). throws an error if top level container is not an array
input FormSubmissionDeleteElemInput {
  submission: Int
}

# delete key/value pair or string element. key/value pairs are matched based on their key value
input FormSubmissionDeleteKeyInput {
  submission: String
}

# input type for incrementing numeric columns in table "form_submission"
input FormSubmissionIncInput {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "form_submission"
input FormSubmissionInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  event: EventObjRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  form: FormObjRelInsertInput
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  submission: jsonb
  teamJoins: TeamJoinArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type FormSubmissionMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by max() on columns of table "form_submission"
input FormSubmissionMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type FormSubmissionMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
}

# order by min() on columns of table "form_submission"
input FormSubmissionMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "form_submission"
type FormSubmissionMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [FormSubmission!]!
}

# input type for inserting object relation for remote table "form_submission"
input FormSubmissionObjRelInsertInput {
  data: FormSubmissionInsertInput!

  # upsert condition
  onConflict: FormSubmissionOnConflict
}

# on_conflict condition type for table "form_submission"
input FormSubmissionOnConflict {
  constraint: FormSubmissionConstraint!
  updateColumns: [FormSubmissionUpdateColumn!]! = []
  where: FormSubmissionBoolExp
}

# Ordering options when selecting data from "form_submission".
input FormSubmissionOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  event: EventOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  form: FormOrderBy
  formId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  submission: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: form_submission
input FormSubmissionPkColumnsInput {
  id: bigint!
}

# prepend existing jsonb value of filtered columns with new jsonb value
input FormSubmissionPrependInput {
  submission: jsonb
}

# select columns of table "form_submission"
enum FormSubmissionSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  formId

  # column name
  hiddenAt

  # column name
  id

  # column name
  submission

  # column name
  tenantId
}

# input type for updating data in table "form_submission"
input FormSubmissionSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

# aggregate stddev on columns
type FormSubmissionStddevFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "form_submission"
input FormSubmissionStddevOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type FormSubmissionStddevPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "form_submission"
input FormSubmissionStddevPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type FormSubmissionStddevSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "form_submission"
input FormSubmissionStddevSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "form_submission"
input FormSubmissionStreamCursorInput {
  # Stream column input with initial value
  initialValue: FormSubmissionStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input FormSubmissionStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formId: bigint
  hiddenAt: timestamptz
  id: bigint
  submission: jsonb
  tenantId: bigint
}

# aggregate sum on columns
type FormSubmissionSumFields {
  createdById: bigint
  formId: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "form_submission"
input FormSubmissionSumOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "form_submission"
enum FormSubmissionUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  formId

  # column name
  hiddenAt

  # column name
  id

  # column name
  submission

  # column name
  tenantId
}

input FormSubmissionUpdates {
  # append existing jsonb value of filtered columns with new jsonb value
  _append: FormSubmissionAppendInput

  # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  _deleteAtPath: FormSubmissionDeleteAtPathInput

  # delete the array element with specified index (negative integers count from
  # the end). throws an error if top level container is not an array
  _deleteElem: FormSubmissionDeleteElemInput

  # delete key/value pair or string element. key/value pairs are matched based on their key value
  _deleteKey: FormSubmissionDeleteKeyInput

  # increments the numeric columns with given value of the filtered values
  _inc: FormSubmissionIncInput

  # prepend existing jsonb value of filtered columns with new jsonb value
  _prepend: FormSubmissionPrependInput

  # sets the columns of the filtered rows to the given values
  _set: FormSubmissionSetInput

  # filter the rows which have to be updated
  where: FormSubmissionBoolExp!
}

# aggregate variance on columns
type FormSubmissionVarianceFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "form_submission"
input FormSubmissionVarianceOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type FormSubmissionVarPopFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "form_submission"
input FormSubmissionVarPopOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type FormSubmissionVarSampFields {
  createdById: Float
  formId: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "form_submission"
input FormSubmissionVarSampOrderBy {
  createdById: OrderBy
  formId: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate sum on columns
type FormSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "form"
input FormSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "form"
enum FormUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  isAllowingEditingAnswers

  # column name
  isAllowingMultipleAnswers

  # column name
  isEnabled

  # column name
  isRequired

  # column name
  name

  # column name
  schema

  # column name
  teamId

  # column name
  tenantId

  # column name
  type
}

input FormUpdates {
  # append existing jsonb value of filtered columns with new jsonb value
  _append: FormAppendInput

  # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  _deleteAtPath: FormDeleteAtPathInput

  # delete the array element with specified index (negative integers count from
  # the end). throws an error if top level container is not an array
  _deleteElem: FormDeleteElemInput

  # delete key/value pair or string element. key/value pairs are matched based on their key value
  _deleteKey: FormDeleteKeyInput

  # increments the numeric columns with given value of the filtered values
  _inc: FormIncInput

  # prepend existing jsonb value of filtered columns with new jsonb value
  _prepend: FormPrependInput

  # sets the columns of the filtered rows to the given values
  _set: FormSetInput

  # filter the rows which have to be updated
  where: FormBoolExp!
}

# aggregate variance on columns
type FormVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "form"
input FormVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type FormVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "form"
input FormVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type FormVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "form"
input FormVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "individual"
type Individual {
  # An array relationship
  actions(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # An aggregate relationship
  actionsAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!

  # An object relationship
  actor: Actor

  # An array relationship
  actorAddresses(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  # An aggregate relationship
  actorAddressesAggregate(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  # An array relationship
  actorBankInfos(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  # An aggregate relationship
  actorBankInfosAggregate(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  # An array relationship
  actorImages(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): [ActorImage!]!

  # An aggregate relationship
  actorImagesAggregate(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  # An array relationship
  actors(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): [Actor!]!

  # An aggregate relationship
  actorsAggregate(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): ActorAggregate!
  botId: bigint

  # An object relationship
  botInfo: BotInfo

  # An array relationship
  botInfos(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): [BotInfo!]!

  # An aggregate relationship
  botInfosAggregate(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  # An array relationship
  campuses(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): [Campus!]!

  # An aggregate relationship
  campusesAggregate(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): CampusAggregate!

  # An array relationship
  canteenFoods(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  # An aggregate relationship
  canteenFoodsAggregate(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  # An array relationship
  canteenMenus(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  # An aggregate relationship
  canteenMenusAggregate(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  # An array relationship
  canteens(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): [Canteen!]!

  # An aggregate relationship
  canteensAggregate(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): CanteenAggregate!

  # An array relationship
  classGroupTeachers(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  # An aggregate relationship
  classGroupTeachersAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  # An array relationship
  classGroups(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  # An aggregate relationship
  classGroupsAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  # An array relationship
  cohorts(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): [Cohort!]!

  # An aggregate relationship
  cohortsAggregate(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): CohortAggregate!

  # An array relationship
  completedSettledMissionJoins(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # An aggregate relationship
  completedSettledMissionJoinsAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!

  # An array relationship
  contents(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # An aggregate relationship
  contentsAggregate(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!

  # An object relationship
  createdBy: Individual
  createdById: bigint

  # An array relationship
  createdEventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  createdEventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An array relationship
  createdTeamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  createdTeamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!
  deletedAt: timestamptz

  # An array relationship
  documents(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): [Document!]!

  # An aggregate relationship
  documentsAggregate(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): DocumentAggregate!

  # An array relationship
  eventApprovalStepNotifiees(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  # An aggregate relationship
  eventApprovalStepNotifieesAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  # An array relationship
  eventApprovalStepValidators(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  # An aggregate relationship
  eventApprovalStepValidatorsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  # An array relationship
  eventApprovalSteps(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  # An aggregate relationship
  eventApprovalStepsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  # An array relationship
  eventApprovals(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  # An aggregate relationship
  eventApprovalsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  # An array relationship
  eventManages(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): [EventManage!]!

  # An aggregate relationship
  eventManagesAggregate(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): EventManageAggregate!

  # An array relationship
  events(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An aggregate relationship
  eventsAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # An array relationship
  expenseItems(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): [ExpenseItem!]!

  # An aggregate relationship
  expenseItemsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): ExpenseItemAggregate!

  # An array relationship
  expenses(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # An aggregate relationship
  expensesAggregate(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  # An array relationship
  expensesBySettledById(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # An aggregate relationship
  expensesBySettledByIdAggregate(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  # An array relationship
  favorites(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): [Favorite!]!

  # An aggregate relationship
  favoritesAggregate(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  # An array relationship
  fileUploads(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): [FileUpload!]!

  # An aggregate relationship
  fileUploadsAggregate(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  # An array relationship
  finances(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # An aggregate relationship
  financesAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!

  # An array relationship
  follows(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): [Follow!]!

  # An aggregate relationship
  followsAggregate(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): FollowAggregate!

  # An array relationship
  formSubmissions(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  # An aggregate relationship
  formSubmissionsAggregate(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  # An array relationship
  forms(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): [Form!]!

  # An aggregate relationship
  formsAggregate(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): FormAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An array relationship
  individuals(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): [Individual!]!

  # An aggregate relationship
  individualsAggregate(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): IndividualAggregate!

  # An array relationship
  issueContributors(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): [IssueContributors!]!

  # An aggregate relationship
  issueContributorsAggregate(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): IssueContributorsAggregate!

  # An array relationship
  issues(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): [Issue!]!

  # An aggregate relationship
  issuesAggregate(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): IssueAggregate!

  # An array relationship
  legalUnits(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): [LegalUnit!]!

  # An aggregate relationship
  legalUnitsAggregate(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): LegalUnitAggregate!

  # An array relationship
  missionJoins(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # An aggregate relationship
  missionJoinsAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!

  # An array relationship
  missions(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # An aggregate relationship
  missionsAggregate(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): MissionAggregate!
  passwordHash: String

  # An array relationship
  poles(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): [Pole!]!

  # An aggregate relationship
  polesAggregate(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): PoleAggregate!

  # An array relationship
  presenceSettledEventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  presenceSettledEventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An array relationship
  projects(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): [Project!]!

  # An aggregate relationship
  projectsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): ProjectAggregate!

  # An array relationship
  reactions(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): [Reaction!]!

  # An aggregate relationship
  reactionsAggregate(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): ReactionAggregate!

  # An array relationship
  reports(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): [Report!]!

  # An aggregate relationship
  reportsAggregate(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): ReportAggregate!

  # An array relationship
  roles(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): [Role!]!

  # An aggregate relationship
  rolesAggregate(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): RoleAggregate!
  scopeRole: String!

  # An array relationship
  sessions(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): [Session!]!

  # An aggregate relationship
  sessionsAggregate(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): SessionAggregate!

  # An array relationship
  settledActions(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # An aggregate relationship
  settledActionsAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!

  # An array relationship
  settledEventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  settledEventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An array relationship
  settledMissionJoins(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # An aggregate relationship
  settledMissionJoinsAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!

  # An array relationship
  shortcuts(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): [Shortcut!]!

  # An aggregate relationship
  shortcutsAggregate(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  # An array relationship
  socials(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): [Social!]!

  # An aggregate relationship
  socialsAggregate(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): SocialAggregate!

  # An array relationship
  subjects(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): [Subject!]!

  # An aggregate relationship
  subjectsAggregate(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): SubjectAggregate!

  # An array relationship
  tags(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): [Tag!]!

  # An aggregate relationship
  tagsAggregate(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): TagAggregate!

  # An array relationship
  teamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  teamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # An array relationship
  teamMembers(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  # An aggregate relationship
  teamMembersAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  # An array relationship
  teamMetrics(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  # An aggregate relationship
  teamMetricsAggregate(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  # An array relationship
  teams(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): [Team!]!

  # An aggregate relationship
  teamsAggregate(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): TeamAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!

  # An array relationship
  tenants(
    # distinct select on columns
    distinctOn: [TenantSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TenantOrderBy!]

    # filter the rows returned
    where: TenantBoolExp
  ): [Tenant!]!

  # An aggregate relationship
  tenantsAggregate(
    # distinct select on columns
    distinctOn: [TenantSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TenantOrderBy!]

    # filter the rows returned
    where: TenantBoolExp
  ): TenantAggregate!

  # An array relationship
  threadContributors(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): [ThreadContributors!]!

  # An aggregate relationship
  threadContributorsAggregate(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): ThreadContributorsAggregate!

  # An array relationship
  threads(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): [Thread!]!

  # An aggregate relationship
  threadsAggregate(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): ThreadAggregate!
  userId: bigint

  # An object relationship
  userInfo: UserInfo

  # An array relationship
  userInfos(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): [UserInfo!]!

  # An aggregate relationship
  userInfosAggregate(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  # An array relationship
  validations(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): [Validation!]!

  # An aggregate relationship
  validationsAggregate(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): ValidationAggregate!

  # An array relationship
  votes(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): [Vote!]!

  # An aggregate relationship
  votesAggregate(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): VoteAggregate!
}

# aggregated selection of "individual"
type IndividualAggregate {
  aggregate: IndividualAggregateFields
  nodes: [Individual!]!
}

input IndividualAggregateBoolExp {
  count: individualAggregateBoolExpCount
}

input individualAggregateBoolExpCount {
  arguments: [IndividualSelectColumn!]
  distinct: Boolean
  filter: IndividualBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "individual"
type IndividualAggregateFields {
  avg: IndividualAvgFields
  count(columns: [IndividualSelectColumn!], distinct: Boolean): Int!
  max: IndividualMaxFields
  min: IndividualMinFields
  stddev: IndividualStddevFields
  stddevPop: IndividualStddevPopFields
  stddevSamp: IndividualStddevSampFields
  sum: IndividualSumFields
  varPop: IndividualVarPopFields
  varSamp: IndividualVarSampFields
  variance: IndividualVarianceFields
}

# order by aggregate values of table "individual"
input IndividualAggregateOrderBy {
  avg: IndividualAvgOrderBy
  count: OrderBy
  max: IndividualMaxOrderBy
  min: IndividualMinOrderBy
  stddev: IndividualStddevOrderBy
  stddevPop: IndividualStddevPopOrderBy
  stddevSamp: IndividualStddevSampOrderBy
  sum: IndividualSumOrderBy
  varPop: IndividualVarPopOrderBy
  varSamp: IndividualVarSampOrderBy
  variance: IndividualVarianceOrderBy
}

# input type for inserting array relation for remote table "individual"
input IndividualArrRelInsertInput {
  data: [IndividualInsertInput!]!

  # upsert condition
  onConflict: IndividualOnConflict
}

# aggregate avg on columns
type IndividualAvgFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by avg() on columns of table "individual"
input IndividualAvgOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Boolean expression to filter rows from the table "individual". All fields are combined with a logical 'AND'.
input IndividualBoolExp {
  _and: [IndividualBoolExp!]
  _not: IndividualBoolExp
  _or: [IndividualBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  botId: BigintComparisonExp
  botInfo: BotInfoBoolExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  canteens: CanteenBoolExp
  canteensAggregate: CanteenAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  classGroups: ClassGroupBoolExp
  classGroupsAggregate: ClassGroupAggregateBoolExp
  cohorts: CohortBoolExp
  cohortsAggregate: CohortAggregateBoolExp
  completedSettledMissionJoins: MissionJoinBoolExp
  completedSettledMissionJoinsAggregate: MissionJoinAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdBy: IndividualBoolExp
  createdById: BigintComparisonExp
  createdEventJoins: EventJoinBoolExp
  createdEventJoinsAggregate: EventJoinAggregateBoolExp
  createdTeamJoins: TeamJoinBoolExp
  createdTeamJoinsAggregate: TeamJoinAggregateBoolExp
  deletedAt: TimestamptzComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  eventApprovalStepNotifiees: EventApprovalStepNotifieesBoolExp
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateBoolExp
  eventApprovalStepValidators: EventApprovalStepValidatorsBoolExp
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateBoolExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventManages: EventManageBoolExp
  eventManagesAggregate: EventManageAggregateBoolExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  expensesBySettledById: ExpenseBoolExp
  expensesBySettledByIdAggregate: ExpenseAggregateBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individuals: IndividualBoolExp
  individualsAggregate: IndividualAggregateBoolExp
  issueContributors: IssueContributorsBoolExp
  issueContributorsAggregate: IssueContributorsAggregateBoolExp
  issues: IssueBoolExp
  issuesAggregate: IssueAggregateBoolExp
  legalUnits: LegalUnitBoolExp
  legalUnitsAggregate: LegalUnitAggregateBoolExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  passwordHash: StringComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  presenceSettledEventJoins: EventJoinBoolExp
  presenceSettledEventJoinsAggregate: EventJoinAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  scopeRole: StringComparisonExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  settledActions: ActionBoolExp
  settledActionsAggregate: ActionAggregateBoolExp
  settledEventJoins: EventJoinBoolExp
  settledEventJoinsAggregate: EventJoinAggregateBoolExp
  settledMissionJoins: MissionJoinBoolExp
  settledMissionJoinsAggregate: MissionJoinAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  subjects: SubjectBoolExp
  subjectsAggregate: SubjectAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamMetrics: TeamMetricBoolExp
  teamMetricsAggregate: TeamMetricAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tenants: TenantBoolExp
  tenantsAggregate: TenantAggregateBoolExp
  threadContributors: ThreadContributorsBoolExp
  threadContributorsAggregate: ThreadContributorsAggregateBoolExp
  threads: ThreadBoolExp
  threadsAggregate: ThreadAggregateBoolExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
  userInfos: UserInfoBoolExp
  userInfosAggregate: UserInfoAggregateBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

# unique or primary key constraints on table "individual"
enum IndividualConstraint {
  # unique or primary key constraint on columns "bot_id"
  individual_bot_id_unique

  # unique or primary key constraint on columns "id"
  individual_pkey

  # unique or primary key constraint on columns "user_id"
  individual_user_id_unique
}

# input type for incrementing numeric columns in table "individual"
input IndividualIncInput {
  botId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

# input type for inserting data into table "individual"
input IndividualInsertInput {
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actors: ActorArrRelInsertInput
  botId: bigint
  botInfo: BotInfoObjRelInsertInput
  botInfos: BotInfoArrRelInsertInput
  campuses: CampusArrRelInsertInput
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  canteens: CanteenArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  classGroups: ClassGroupArrRelInsertInput
  cohorts: CohortArrRelInsertInput
  completedSettledMissionJoins: MissionJoinArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdBy: IndividualObjRelInsertInput
  createdById: bigint
  createdEventJoins: EventJoinArrRelInsertInput
  createdTeamJoins: TeamJoinArrRelInsertInput
  deletedAt: timestamptz
  documents: DocumentArrRelInsertInput
  eventApprovalStepNotifiees: EventApprovalStepNotifieesArrRelInsertInput
  eventApprovalStepValidators: EventApprovalStepValidatorsArrRelInsertInput
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventManages: EventManageArrRelInsertInput
  events: EventArrRelInsertInput
  expenseItems: ExpenseItemArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  expensesBySettledById: ExpenseArrRelInsertInput
  favorites: FavoriteArrRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  finances: FinanceArrRelInsertInput
  follows: FollowArrRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individuals: IndividualArrRelInsertInput
  issueContributors: IssueContributorsArrRelInsertInput
  issues: IssueArrRelInsertInput
  legalUnits: LegalUnitArrRelInsertInput
  missionJoins: MissionJoinArrRelInsertInput
  missions: MissionArrRelInsertInput
  passwordHash: String
  poles: PoleArrRelInsertInput
  presenceSettledEventJoins: EventJoinArrRelInsertInput
  projects: ProjectArrRelInsertInput
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  roles: RoleArrRelInsertInput
  scopeRole: String
  sessions: SessionArrRelInsertInput
  settledActions: ActionArrRelInsertInput
  settledEventJoins: EventJoinArrRelInsertInput
  settledMissionJoins: MissionJoinArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  socials: SocialArrRelInsertInput
  subjects: SubjectArrRelInsertInput
  tags: TagArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamMetrics: TeamMetricArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tenants: TenantArrRelInsertInput
  threadContributors: ThreadContributorsArrRelInsertInput
  threads: ThreadArrRelInsertInput
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
  userInfos: UserInfoArrRelInsertInput
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

# aggregate max on columns
type IndividualMaxFields {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

# order by max() on columns of table "individual"
input IndividualMaxOrderBy {
  botId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  scopeRole: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate min on columns
type IndividualMinFields {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

# order by min() on columns of table "individual"
input IndividualMinOrderBy {
  botId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  passwordHash: OrderBy
  scopeRole: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# response of any mutation on the table "individual"
type IndividualMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Individual!]!
}

# input type for inserting object relation for remote table "individual"
input IndividualObjRelInsertInput {
  data: IndividualInsertInput!

  # upsert condition
  onConflict: IndividualOnConflict
}

# on_conflict condition type for table "individual"
input IndividualOnConflict {
  constraint: IndividualConstraint!
  updateColumns: [IndividualUpdateColumn!]! = []
  where: IndividualBoolExp
}

# Ordering options when selecting data from "individual".
input IndividualOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  botId: OrderBy
  botInfo: BotInfoOrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  canteensAggregate: CanteenAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  classGroupsAggregate: ClassGroupAggregateOrderBy
  cohortsAggregate: CohortAggregateOrderBy
  completedSettledMissionJoinsAggregate: MissionJoinAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdBy: IndividualOrderBy
  createdById: OrderBy
  createdEventJoinsAggregate: EventJoinAggregateOrderBy
  createdTeamJoinsAggregate: TeamJoinAggregateOrderBy
  deletedAt: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  eventApprovalStepNotifieesAggregate: EventApprovalStepNotifieesAggregateOrderBy
  eventApprovalStepValidatorsAggregate: EventApprovalStepValidatorsAggregateOrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventManagesAggregate: EventManageAggregateOrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  expensesBySettledByIdAggregate: ExpenseAggregateOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  financesAggregate: FinanceAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individualsAggregate: IndividualAggregateOrderBy
  issueContributorsAggregate: IssueContributorsAggregateOrderBy
  issuesAggregate: IssueAggregateOrderBy
  legalUnitsAggregate: LegalUnitAggregateOrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  missionsAggregate: MissionAggregateOrderBy
  passwordHash: OrderBy
  polesAggregate: PoleAggregateOrderBy
  presenceSettledEventJoinsAggregate: EventJoinAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  scopeRole: OrderBy
  sessionsAggregate: SessionAggregateOrderBy
  settledActionsAggregate: ActionAggregateOrderBy
  settledEventJoinsAggregate: EventJoinAggregateOrderBy
  settledMissionJoinsAggregate: MissionJoinAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  subjectsAggregate: SubjectAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamMetricsAggregate: TeamMetricAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tenantsAggregate: TenantAggregateOrderBy
  threadContributorsAggregate: ThreadContributorsAggregateOrderBy
  threadsAggregate: ThreadAggregateOrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
  userInfosAggregate: UserInfoAggregateOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

# primary key columns input for table: individual
input IndividualPkColumnsInput {
  id: bigint!
}

# select columns of table "individual"
enum IndividualSelectColumn {
  # column name
  botId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  passwordHash

  # column name
  scopeRole

  # column name
  tenantId

  # column name
  userId
}

# input type for updating data in table "individual"
input IndividualSetInput {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

# aggregate stddev on columns
type IndividualStddevFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddev() on columns of table "individual"
input IndividualStddevOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevPop on columns
type IndividualStddevPopFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddevPop() on columns of table "individual"
input IndividualStddevPopOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevSamp on columns
type IndividualStddevSampFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddevSamp() on columns of table "individual"
input IndividualStddevSampOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Streaming cursor of the table "individual"
input IndividualStreamCursorInput {
  # Stream column input with initial value
  initialValue: IndividualStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input IndividualStreamCursorValueInput {
  botId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  passwordHash: String
  scopeRole: String
  tenantId: bigint
  userId: bigint
}

# aggregate sum on columns
type IndividualSumFields {
  botId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

# order by sum() on columns of table "individual"
input IndividualSumOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# update columns of table "individual"
enum IndividualUpdateColumn {
  # column name
  botId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  passwordHash

  # column name
  scopeRole

  # column name
  tenantId

  # column name
  userId
}

input IndividualUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: IndividualIncInput

  # sets the columns of the filtered rows to the given values
  _set: IndividualSetInput

  # filter the rows which have to be updated
  where: IndividualBoolExp!
}

# aggregate variance on columns
type IndividualVarianceFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by variance() on columns of table "individual"
input IndividualVarianceOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varPop on columns
type IndividualVarPopFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by varPop() on columns of table "individual"
input IndividualVarPopOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varSamp on columns
type IndividualVarSampFields {
  botId: Float
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by varSamp() on columns of table "individual"
input IndividualVarSampOrderBy {
  botId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# columns and relationships of "issue"
type Issue {
  # An object relationship
  content: Content!
  contentId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An array relationship
  issueContributors(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): [IssueContributors!]!

  # An aggregate relationship
  issueContributorsAggregate(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): IssueContributorsAggregate!

  # An array relationship
  issueTags(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): [IssueTags!]!

  # An aggregate relationship
  issueTagsAggregate(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): IssueTagsAggregate!
  name: String!
  slug: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "issue"
type IssueAggregate {
  aggregate: IssueAggregateFields
  nodes: [Issue!]!
}

input IssueAggregateBoolExp {
  count: issueAggregateBoolExpCount
}

input issueAggregateBoolExpCount {
  arguments: [IssueSelectColumn!]
  distinct: Boolean
  filter: IssueBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "issue"
type IssueAggregateFields {
  avg: IssueAvgFields
  count(columns: [IssueSelectColumn!], distinct: Boolean): Int!
  max: IssueMaxFields
  min: IssueMinFields
  stddev: IssueStddevFields
  stddevPop: IssueStddevPopFields
  stddevSamp: IssueStddevSampFields
  sum: IssueSumFields
  varPop: IssueVarPopFields
  varSamp: IssueVarSampFields
  variance: IssueVarianceFields
}

# order by aggregate values of table "issue"
input IssueAggregateOrderBy {
  avg: IssueAvgOrderBy
  count: OrderBy
  max: IssueMaxOrderBy
  min: IssueMinOrderBy
  stddev: IssueStddevOrderBy
  stddevPop: IssueStddevPopOrderBy
  stddevSamp: IssueStddevSampOrderBy
  sum: IssueSumOrderBy
  varPop: IssueVarPopOrderBy
  varSamp: IssueVarSampOrderBy
  variance: IssueVarianceOrderBy
}

# input type for inserting array relation for remote table "issue"
input IssueArrRelInsertInput {
  data: [IssueInsertInput!]!

  # upsert condition
  onConflict: IssueOnConflict
}

# aggregate avg on columns
type IssueAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "issue"
input IssueAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "issue". All fields are combined with a logical 'AND'.
input IssueBoolExp {
  _and: [IssueBoolExp!]
  _not: IssueBoolExp
  _or: [IssueBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  issueContributors: IssueContributorsBoolExp
  issueContributorsAggregate: IssueContributorsAggregateBoolExp
  issueTags: IssueTagsBoolExp
  issueTagsAggregate: IssueTagsAggregateBoolExp
  name: StringComparisonExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "issue"
enum IssueConstraint {
  # unique or primary key constraint on columns "content_id"
  issue_content_id_unique

  # unique or primary key constraint on columns "id"
  issue_pkey
}

# columns and relationships of "issue_contributors"
type IssueContributors {
  # An object relationship
  individual: Individual!
  individualId: bigint!

  # An object relationship
  issue: Issue!
  issueId: bigint!
}

# aggregated selection of "issue_contributors"
type IssueContributorsAggregate {
  aggregate: IssueContributorsAggregateFields
  nodes: [IssueContributors!]!
}

input IssueContributorsAggregateBoolExp {
  count: issueContributorsAggregateBoolExpCount
}

input issueContributorsAggregateBoolExpCount {
  arguments: [IssueContributorsSelectColumn!]
  distinct: Boolean
  filter: IssueContributorsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "issue_contributors"
type IssueContributorsAggregateFields {
  avg: IssueContributorsAvgFields
  count(columns: [IssueContributorsSelectColumn!], distinct: Boolean): Int!
  max: IssueContributorsMaxFields
  min: IssueContributorsMinFields
  stddev: IssueContributorsStddevFields
  stddevPop: IssueContributorsStddevPopFields
  stddevSamp: IssueContributorsStddevSampFields
  sum: IssueContributorsSumFields
  varPop: IssueContributorsVarPopFields
  varSamp: IssueContributorsVarSampFields
  variance: IssueContributorsVarianceFields
}

# order by aggregate values of table "issue_contributors"
input IssueContributorsAggregateOrderBy {
  avg: IssueContributorsAvgOrderBy
  count: OrderBy
  max: IssueContributorsMaxOrderBy
  min: IssueContributorsMinOrderBy
  stddev: IssueContributorsStddevOrderBy
  stddevPop: IssueContributorsStddevPopOrderBy
  stddevSamp: IssueContributorsStddevSampOrderBy
  sum: IssueContributorsSumOrderBy
  varPop: IssueContributorsVarPopOrderBy
  varSamp: IssueContributorsVarSampOrderBy
  variance: IssueContributorsVarianceOrderBy
}

# input type for inserting array relation for remote table "issue_contributors"
input IssueContributorsArrRelInsertInput {
  data: [IssueContributorsInsertInput!]!

  # upsert condition
  onConflict: IssueContributorsOnConflict
}

# aggregate avg on columns
type IssueContributorsAvgFields {
  individualId: Float
  issueId: Float
}

# order by avg() on columns of table "issue_contributors"
input IssueContributorsAvgOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# Boolean expression to filter rows from the table "issue_contributors". All fields are combined with a logical 'AND'.
input IssueContributorsBoolExp {
  _and: [IssueContributorsBoolExp!]
  _not: IssueContributorsBoolExp
  _or: [IssueContributorsBoolExp!]
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
  issue: IssueBoolExp
  issueId: BigintComparisonExp
}

# unique or primary key constraints on table "issue_contributors"
enum IssueContributorsConstraint {
  # unique or primary key constraint on columns "issue_id", "individual_id"
  issue_contributors_pkey
}

# input type for incrementing numeric columns in table "issue_contributors"
input IssueContributorsIncInput {
  individualId: bigint
  issueId: bigint
}

# input type for inserting data into table "issue_contributors"
input IssueContributorsInsertInput {
  individual: IndividualObjRelInsertInput
  individualId: bigint
  issue: IssueObjRelInsertInput
  issueId: bigint
}

# aggregate max on columns
type IssueContributorsMaxFields {
  individualId: bigint
  issueId: bigint
}

# order by max() on columns of table "issue_contributors"
input IssueContributorsMaxOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# aggregate min on columns
type IssueContributorsMinFields {
  individualId: bigint
  issueId: bigint
}

# order by min() on columns of table "issue_contributors"
input IssueContributorsMinOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# response of any mutation on the table "issue_contributors"
type IssueContributorsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [IssueContributors!]!
}

# on_conflict condition type for table "issue_contributors"
input IssueContributorsOnConflict {
  constraint: IssueContributorsConstraint!
  updateColumns: [IssueContributorsUpdateColumn!]! = []
  where: IssueContributorsBoolExp
}

# Ordering options when selecting data from "issue_contributors".
input IssueContributorsOrderBy {
  individual: IndividualOrderBy
  individualId: OrderBy
  issue: IssueOrderBy
  issueId: OrderBy
}

# primary key columns input for table: issue_contributors
input IssueContributorsPkColumnsInput {
  individualId: bigint!
  issueId: bigint!
}

# select columns of table "issue_contributors"
enum IssueContributorsSelectColumn {
  # column name
  individualId

  # column name
  issueId
}

# input type for updating data in table "issue_contributors"
input IssueContributorsSetInput {
  individualId: bigint
  issueId: bigint
}

# aggregate stddev on columns
type IssueContributorsStddevFields {
  individualId: Float
  issueId: Float
}

# order by stddev() on columns of table "issue_contributors"
input IssueContributorsStddevOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# aggregate stddevPop on columns
type IssueContributorsStddevPopFields {
  individualId: Float
  issueId: Float
}

# order by stddevPop() on columns of table "issue_contributors"
input IssueContributorsStddevPopOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# aggregate stddevSamp on columns
type IssueContributorsStddevSampFields {
  individualId: Float
  issueId: Float
}

# order by stddevSamp() on columns of table "issue_contributors"
input IssueContributorsStddevSampOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# Streaming cursor of the table "issue_contributors"
input IssueContributorsStreamCursorInput {
  # Stream column input with initial value
  initialValue: IssueContributorsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input IssueContributorsStreamCursorValueInput {
  individualId: bigint
  issueId: bigint
}

# aggregate sum on columns
type IssueContributorsSumFields {
  individualId: bigint
  issueId: bigint
}

# order by sum() on columns of table "issue_contributors"
input IssueContributorsSumOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# update columns of table "issue_contributors"
enum IssueContributorsUpdateColumn {
  # column name
  individualId

  # column name
  issueId
}

input IssueContributorsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: IssueContributorsIncInput

  # sets the columns of the filtered rows to the given values
  _set: IssueContributorsSetInput

  # filter the rows which have to be updated
  where: IssueContributorsBoolExp!
}

# aggregate variance on columns
type IssueContributorsVarianceFields {
  individualId: Float
  issueId: Float
}

# order by variance() on columns of table "issue_contributors"
input IssueContributorsVarianceOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# aggregate varPop on columns
type IssueContributorsVarPopFields {
  individualId: Float
  issueId: Float
}

# order by varPop() on columns of table "issue_contributors"
input IssueContributorsVarPopOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# aggregate varSamp on columns
type IssueContributorsVarSampFields {
  individualId: Float
  issueId: Float
}

# order by varSamp() on columns of table "issue_contributors"
input IssueContributorsVarSampOrderBy {
  individualId: OrderBy
  issueId: OrderBy
}

# input type for incrementing numeric columns in table "issue"
input IssueIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "issue"
input IssueInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  issueContributors: IssueContributorsArrRelInsertInput
  issueTags: IssueTagsArrRelInsertInput
  name: String
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type IssueMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# order by max() on columns of table "issue"
input IssueMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type IssueMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# order by min() on columns of table "issue"
input IssueMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "issue"
type IssueMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Issue!]!
}

# input type for inserting object relation for remote table "issue"
input IssueObjRelInsertInput {
  data: IssueInsertInput!

  # upsert condition
  onConflict: IssueOnConflict
}

# on_conflict condition type for table "issue"
input IssueOnConflict {
  constraint: IssueConstraint!
  updateColumns: [IssueUpdateColumn!]! = []
  where: IssueBoolExp
}

# Ordering options when selecting data from "issue".
input IssueOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  issueContributorsAggregate: IssueContributorsAggregateOrderBy
  issueTagsAggregate: IssueTagsAggregateOrderBy
  name: OrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: issue
input IssuePkColumnsInput {
  id: bigint!
}

# select columns of table "issue"
enum IssueSelectColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  slug

  # column name
  tenantId
}

# input type for updating data in table "issue"
input IssueSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# aggregate stddev on columns
type IssueStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "issue"
input IssueStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type IssueStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "issue"
input IssueStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type IssueStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "issue"
input IssueStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "issue"
input IssueStreamCursorInput {
  # Stream column input with initial value
  initialValue: IssueStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input IssueStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# aggregate sum on columns
type IssueSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "issue"
input IssueSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "issue_tags"
type IssueTags {
  # An object relationship
  issue: Issue!
  issueId: bigint!

  # An object relationship
  tag: Tag!
  tagId: bigint!
}

# aggregated selection of "issue_tags"
type IssueTagsAggregate {
  aggregate: IssueTagsAggregateFields
  nodes: [IssueTags!]!
}

input IssueTagsAggregateBoolExp {
  count: issueTagsAggregateBoolExpCount
}

input issueTagsAggregateBoolExpCount {
  arguments: [IssueTagsSelectColumn!]
  distinct: Boolean
  filter: IssueTagsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "issue_tags"
type IssueTagsAggregateFields {
  avg: IssueTagsAvgFields
  count(columns: [IssueTagsSelectColumn!], distinct: Boolean): Int!
  max: IssueTagsMaxFields
  min: IssueTagsMinFields
  stddev: IssueTagsStddevFields
  stddevPop: IssueTagsStddevPopFields
  stddevSamp: IssueTagsStddevSampFields
  sum: IssueTagsSumFields
  varPop: IssueTagsVarPopFields
  varSamp: IssueTagsVarSampFields
  variance: IssueTagsVarianceFields
}

# order by aggregate values of table "issue_tags"
input IssueTagsAggregateOrderBy {
  avg: IssueTagsAvgOrderBy
  count: OrderBy
  max: IssueTagsMaxOrderBy
  min: IssueTagsMinOrderBy
  stddev: IssueTagsStddevOrderBy
  stddevPop: IssueTagsStddevPopOrderBy
  stddevSamp: IssueTagsStddevSampOrderBy
  sum: IssueTagsSumOrderBy
  varPop: IssueTagsVarPopOrderBy
  varSamp: IssueTagsVarSampOrderBy
  variance: IssueTagsVarianceOrderBy
}

# input type for inserting array relation for remote table "issue_tags"
input IssueTagsArrRelInsertInput {
  data: [IssueTagsInsertInput!]!

  # upsert condition
  onConflict: IssueTagsOnConflict
}

# aggregate avg on columns
type IssueTagsAvgFields {
  issueId: Float
  tagId: Float
}

# order by avg() on columns of table "issue_tags"
input IssueTagsAvgOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# Boolean expression to filter rows from the table "issue_tags". All fields are combined with a logical 'AND'.
input IssueTagsBoolExp {
  _and: [IssueTagsBoolExp!]
  _not: IssueTagsBoolExp
  _or: [IssueTagsBoolExp!]
  issue: IssueBoolExp
  issueId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

# unique or primary key constraints on table "issue_tags"
enum IssueTagsConstraint {
  # unique or primary key constraint on columns "issue_id", "tag_id"
  issue_tags_pkey
}

# input type for incrementing numeric columns in table "issue_tags"
input IssueTagsIncInput {
  issueId: bigint
  tagId: bigint
}

# input type for inserting data into table "issue_tags"
input IssueTagsInsertInput {
  issue: IssueObjRelInsertInput
  issueId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

# aggregate max on columns
type IssueTagsMaxFields {
  issueId: bigint
  tagId: bigint
}

# order by max() on columns of table "issue_tags"
input IssueTagsMaxOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# aggregate min on columns
type IssueTagsMinFields {
  issueId: bigint
  tagId: bigint
}

# order by min() on columns of table "issue_tags"
input IssueTagsMinOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# response of any mutation on the table "issue_tags"
type IssueTagsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [IssueTags!]!
}

# on_conflict condition type for table "issue_tags"
input IssueTagsOnConflict {
  constraint: IssueTagsConstraint!
  updateColumns: [IssueTagsUpdateColumn!]! = []
  where: IssueTagsBoolExp
}

# Ordering options when selecting data from "issue_tags".
input IssueTagsOrderBy {
  issue: IssueOrderBy
  issueId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

# primary key columns input for table: issue_tags
input IssueTagsPkColumnsInput {
  issueId: bigint!
  tagId: bigint!
}

# select columns of table "issue_tags"
enum IssueTagsSelectColumn {
  # column name
  issueId

  # column name
  tagId
}

# input type for updating data in table "issue_tags"
input IssueTagsSetInput {
  issueId: bigint
  tagId: bigint
}

# aggregate stddev on columns
type IssueTagsStddevFields {
  issueId: Float
  tagId: Float
}

# order by stddev() on columns of table "issue_tags"
input IssueTagsStddevOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# aggregate stddevPop on columns
type IssueTagsStddevPopFields {
  issueId: Float
  tagId: Float
}

# order by stddevPop() on columns of table "issue_tags"
input IssueTagsStddevPopOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# aggregate stddevSamp on columns
type IssueTagsStddevSampFields {
  issueId: Float
  tagId: Float
}

# order by stddevSamp() on columns of table "issue_tags"
input IssueTagsStddevSampOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# Streaming cursor of the table "issue_tags"
input IssueTagsStreamCursorInput {
  # Stream column input with initial value
  initialValue: IssueTagsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input IssueTagsStreamCursorValueInput {
  issueId: bigint
  tagId: bigint
}

# aggregate sum on columns
type IssueTagsSumFields {
  issueId: bigint
  tagId: bigint
}

# order by sum() on columns of table "issue_tags"
input IssueTagsSumOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# update columns of table "issue_tags"
enum IssueTagsUpdateColumn {
  # column name
  issueId

  # column name
  tagId
}

input IssueTagsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: IssueTagsIncInput

  # sets the columns of the filtered rows to the given values
  _set: IssueTagsSetInput

  # filter the rows which have to be updated
  where: IssueTagsBoolExp!
}

# aggregate variance on columns
type IssueTagsVarianceFields {
  issueId: Float
  tagId: Float
}

# order by variance() on columns of table "issue_tags"
input IssueTagsVarianceOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# aggregate varPop on columns
type IssueTagsVarPopFields {
  issueId: Float
  tagId: Float
}

# order by varPop() on columns of table "issue_tags"
input IssueTagsVarPopOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# aggregate varSamp on columns
type IssueTagsVarSampFields {
  issueId: Float
  tagId: Float
}

# order by varSamp() on columns of table "issue_tags"
input IssueTagsVarSampOrderBy {
  issueId: OrderBy
  tagId: OrderBy
}

# update columns of table "issue"
enum IssueUpdateColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  slug

  # column name
  tenantId
}

input IssueUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: IssueIncInput

  # sets the columns of the filtered rows to the given values
  _set: IssueSetInput

  # filter the rows which have to be updated
  where: IssueBoolExp!
}

# aggregate variance on columns
type IssueVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "issue"
input IssueVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type IssueVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "issue"
input IssueVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type IssueVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "issue"
input IssueVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

scalar jsonb

input JsonbCastExp {
  String: StringComparisonExp
}

# Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
input JsonbComparisonExp {
  _cast: JsonbCastExp

  # is the column contained in the given json value
  _containedIn: jsonb

  # does the column contain the given json value at the top level
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  # does the string exist as a top-level key in the column
  _hasKey: String

  # do all of these strings exist as top-level keys in the column
  _hasKeysAll: [String!]

  # do any of these strings exist as top-level keys in the column
  _hasKeysAny: [String!]
  _in: [jsonb!]
  _isNull: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

# columns and relationships of "legal_unit"
type LegalUnit {
  # An object relationship
  actor: Actor
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  order: smallint!
  pseudo: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  url: String!
}

# aggregated selection of "legal_unit"
type LegalUnitAggregate {
  aggregate: LegalUnitAggregateFields
  nodes: [LegalUnit!]!
}

input LegalUnitAggregateBoolExp {
  count: legalUnitAggregateBoolExpCount
}

input legalUnitAggregateBoolExpCount {
  arguments: [LegalUnitSelectColumn!]
  distinct: Boolean
  filter: LegalUnitBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "legal_unit"
type LegalUnitAggregateFields {
  avg: LegalUnitAvgFields
  count(columns: [LegalUnitSelectColumn!], distinct: Boolean): Int!
  max: LegalUnitMaxFields
  min: LegalUnitMinFields
  stddev: LegalUnitStddevFields
  stddevPop: LegalUnitStddevPopFields
  stddevSamp: LegalUnitStddevSampFields
  sum: LegalUnitSumFields
  varPop: LegalUnitVarPopFields
  varSamp: LegalUnitVarSampFields
  variance: LegalUnitVarianceFields
}

# order by aggregate values of table "legal_unit"
input LegalUnitAggregateOrderBy {
  avg: LegalUnitAvgOrderBy
  count: OrderBy
  max: LegalUnitMaxOrderBy
  min: LegalUnitMinOrderBy
  stddev: LegalUnitStddevOrderBy
  stddevPop: LegalUnitStddevPopOrderBy
  stddevSamp: LegalUnitStddevSampOrderBy
  sum: LegalUnitSumOrderBy
  varPop: LegalUnitVarPopOrderBy
  varSamp: LegalUnitVarSampOrderBy
  variance: LegalUnitVarianceOrderBy
}

# input type for inserting array relation for remote table "legal_unit"
input LegalUnitArrRelInsertInput {
  data: [LegalUnitInsertInput!]!

  # upsert condition
  onConflict: LegalUnitOnConflict
}

# aggregate avg on columns
type LegalUnitAvgFields {
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by avg() on columns of table "legal_unit"
input LegalUnitAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "legal_unit". All fields are combined with a logical 'AND'.
input LegalUnitBoolExp {
  _and: [LegalUnitBoolExp!]
  _not: LegalUnitBoolExp
  _or: [LegalUnitBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  order: SmallintComparisonExp
  pseudo: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

# unique or primary key constraints on table "legal_unit"
enum LegalUnitConstraint {
  # unique or primary key constraint on columns "id"
  legal_unit_pkey
}

# input type for incrementing numeric columns in table "legal_unit"
input LegalUnitIncInput {
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

# input type for inserting data into table "legal_unit"
input LegalUnitInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  order: smallint
  pseudo: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  url: String
}

# aggregate max on columns
type LegalUnitMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# order by max() on columns of table "legal_unit"
input LegalUnitMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# aggregate min on columns
type LegalUnitMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# order by min() on columns of table "legal_unit"
input LegalUnitMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# response of any mutation on the table "legal_unit"
type LegalUnitMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [LegalUnit!]!
}

# input type for inserting object relation for remote table "legal_unit"
input LegalUnitObjRelInsertInput {
  data: LegalUnitInsertInput!

  # upsert condition
  onConflict: LegalUnitOnConflict
}

# on_conflict condition type for table "legal_unit"
input LegalUnitOnConflict {
  constraint: LegalUnitConstraint!
  updateColumns: [LegalUnitUpdateColumn!]! = []
  where: LegalUnitBoolExp
}

# Ordering options when selecting data from "legal_unit".
input LegalUnitOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  order: OrderBy
  pseudo: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# primary key columns input for table: legal_unit
input LegalUnitPkColumnsInput {
  id: bigint!
}

# select columns of table "legal_unit"
enum LegalUnitSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  order

  # column name
  pseudo

  # column name
  tenantId

  # column name
  type

  # column name
  url
}

# input type for updating data in table "legal_unit"
input LegalUnitSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# aggregate stddev on columns
type LegalUnitStddevFields {
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by stddev() on columns of table "legal_unit"
input LegalUnitStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type LegalUnitStddevPopFields {
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "legal_unit"
input LegalUnitStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type LegalUnitStddevSampFields {
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "legal_unit"
input LegalUnitStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "legal_unit"
input LegalUnitStreamCursorInput {
  # Stream column input with initial value
  initialValue: LegalUnitStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input LegalUnitStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# aggregate sum on columns
type LegalUnitSumFields {
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

# order by sum() on columns of table "legal_unit"
input LegalUnitSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# update columns of table "legal_unit"
enum LegalUnitUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  order

  # column name
  pseudo

  # column name
  tenantId

  # column name
  type

  # column name
  url
}

input LegalUnitUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: LegalUnitIncInput

  # sets the columns of the filtered rows to the given values
  _set: LegalUnitSetInput

  # filter the rows which have to be updated
  where: LegalUnitBoolExp!
}

# aggregate variance on columns
type LegalUnitVarianceFields {
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by variance() on columns of table "legal_unit"
input LegalUnitVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type LegalUnitVarPopFields {
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by varPop() on columns of table "legal_unit"
input LegalUnitVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type LegalUnitVarSampFields {
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by varSamp() on columns of table "legal_unit"
input LegalUnitVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "mission"
type Mission {
  autoAcceptMember: Boolean!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  # An object relationship
  eventManage: EventManage
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  isTemplate: Boolean!

  # An array relationship
  missionJoins(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # An aggregate relationship
  missionJoinsAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!
  name: String!
  pointsMaximum: smallint!
  pointsMinimum: smallint!

  # An object relationship
  project: Project
  projectId: bigint
  quantity: smallint!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "mission"
type MissionAggregate {
  aggregate: MissionAggregateFields
  nodes: [Mission!]!
}

input MissionAggregateBoolExp {
  bool_and: missionAggregateBoolExpBool_and
  bool_or: missionAggregateBoolExpBool_or
  count: missionAggregateBoolExpCount
}

input missionAggregateBoolExpBool_and {
  arguments: MissionSelectColumnMissionAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: MissionBoolExp
  predicate: BooleanComparisonExp!
}

input missionAggregateBoolExpBool_or {
  arguments: MissionSelectColumnMissionAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: MissionBoolExp
  predicate: BooleanComparisonExp!
}

input missionAggregateBoolExpCount {
  arguments: [MissionSelectColumn!]
  distinct: Boolean
  filter: MissionBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "mission"
type MissionAggregateFields {
  avg: MissionAvgFields
  count(columns: [MissionSelectColumn!], distinct: Boolean): Int!
  max: MissionMaxFields
  min: MissionMinFields
  stddev: MissionStddevFields
  stddevPop: MissionStddevPopFields
  stddevSamp: MissionStddevSampFields
  sum: MissionSumFields
  varPop: MissionVarPopFields
  varSamp: MissionVarSampFields
  variance: MissionVarianceFields
}

# order by aggregate values of table "mission"
input MissionAggregateOrderBy {
  avg: MissionAvgOrderBy
  count: OrderBy
  max: MissionMaxOrderBy
  min: MissionMinOrderBy
  stddev: MissionStddevOrderBy
  stddevPop: MissionStddevPopOrderBy
  stddevSamp: MissionStddevSampOrderBy
  sum: MissionSumOrderBy
  varPop: MissionVarPopOrderBy
  varSamp: MissionVarSampOrderBy
  variance: MissionVarianceOrderBy
}

# input type for inserting array relation for remote table "mission"
input MissionArrRelInsertInput {
  data: [MissionInsertInput!]!

  # upsert condition
  onConflict: MissionOnConflict
}

# aggregate avg on columns
type MissionAvgFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "mission"
input MissionAvgOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "mission". All fields are combined with a logical 'AND'.
input MissionBoolExp {
  _and: [MissionBoolExp!]
  _not: MissionBoolExp
  _or: [MissionBoolExp!]
  autoAcceptMember: BooleanComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventManage: EventManageBoolExp
  eventManageId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isTemplate: BooleanComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  name: StringComparisonExp
  pointsMaximum: SmallintComparisonExp
  pointsMinimum: SmallintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  quantity: SmallintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "mission"
enum MissionConstraint {
  # unique or primary key constraint on columns "id"
  mission_pkey
}

# input type for incrementing numeric columns in table "mission"
input MissionIncInput {
  createdById: bigint
  eventManageId: bigint
  id: bigint
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "mission"
input MissionInsertInput {
  autoAcceptMember: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManage: EventManageObjRelInsertInput
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isTemplate: Boolean
  missionJoins: MissionJoinArrRelInsertInput
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  project: ProjectObjRelInsertInput
  projectId: bigint
  quantity: smallint
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# columns and relationships of "mission_join"
type MissionJoin {
  completed: Boolean
  completedSettledAt: timestamptz

  # An object relationship
  completedSettledBy: Individual
  completedSettledById: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  eventJoin: EventJoin
  eventJoinId: bigint

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  individualBySettledById: Individual
  joinerId: bigint!

  # An object relationship
  mission: Mission!
  missionId: bigint!
  points: smallint

  # An object relationship
  project: Project
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "mission_join"
type MissionJoinAggregate {
  aggregate: MissionJoinAggregateFields
  nodes: [MissionJoin!]!
}

input MissionJoinAggregateBoolExp {
  bool_and: missionJoinAggregateBoolExpBool_and
  bool_or: missionJoinAggregateBoolExpBool_or
  count: missionJoinAggregateBoolExpCount
}

input missionJoinAggregateBoolExpBool_and {
  arguments: MissionJoinSelectColumnMissionJoinAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: MissionJoinBoolExp
  predicate: BooleanComparisonExp!
}

input missionJoinAggregateBoolExpBool_or {
  arguments: MissionJoinSelectColumnMissionJoinAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: MissionJoinBoolExp
  predicate: BooleanComparisonExp!
}

input missionJoinAggregateBoolExpCount {
  arguments: [MissionJoinSelectColumn!]
  distinct: Boolean
  filter: MissionJoinBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "mission_join"
type MissionJoinAggregateFields {
  avg: MissionJoinAvgFields
  count(columns: [MissionJoinSelectColumn!], distinct: Boolean): Int!
  max: MissionJoinMaxFields
  min: MissionJoinMinFields
  stddev: MissionJoinStddevFields
  stddevPop: MissionJoinStddevPopFields
  stddevSamp: MissionJoinStddevSampFields
  sum: MissionJoinSumFields
  varPop: MissionJoinVarPopFields
  varSamp: MissionJoinVarSampFields
  variance: MissionJoinVarianceFields
}

# order by aggregate values of table "mission_join"
input MissionJoinAggregateOrderBy {
  avg: MissionJoinAvgOrderBy
  count: OrderBy
  max: MissionJoinMaxOrderBy
  min: MissionJoinMinOrderBy
  stddev: MissionJoinStddevOrderBy
  stddevPop: MissionJoinStddevPopOrderBy
  stddevSamp: MissionJoinStddevSampOrderBy
  sum: MissionJoinSumOrderBy
  varPop: MissionJoinVarPopOrderBy
  varSamp: MissionJoinVarSampOrderBy
  variance: MissionJoinVarianceOrderBy
}

# input type for inserting array relation for remote table "mission_join"
input MissionJoinArrRelInsertInput {
  data: [MissionJoinInsertInput!]!

  # upsert condition
  onConflict: MissionJoinOnConflict
}

# aggregate avg on columns
type MissionJoinAvgFields {
  completedSettledById: Float
  createdById: Float
  eventJoinId: Float
  id: Float
  joinerId: Float
  missionId: Float
  points: Float
  projectId: Float
  settledById: Float
  tenantId: Float
}

# order by avg() on columns of table "mission_join"
input MissionJoinAvgOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "mission_join". All fields are combined with a logical 'AND'.
input MissionJoinBoolExp {
  _and: [MissionJoinBoolExp!]
  _not: MissionJoinBoolExp
  _or: [MissionJoinBoolExp!]
  completed: BooleanComparisonExp
  completedSettledAt: TimestamptzComparisonExp
  completedSettledBy: IndividualBoolExp
  completedSettledById: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoin: EventJoinBoolExp
  eventJoinId: BigintComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualBySettledById: IndividualBoolExp
  joinerId: BigintComparisonExp
  mission: MissionBoolExp
  missionId: BigintComparisonExp
  points: SmallintComparisonExp
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  settledAt: TimestamptzComparisonExp
  settledById: BigintComparisonExp
  state: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "mission_join"
enum MissionJoinConstraint {
  # unique or primary key constraint on columns "event_join_id"
  mission_join_event_join_id_unique

  # unique or primary key constraint on columns "id"
  mission_join_pkey
}

# input type for incrementing numeric columns in table "mission_join"
input MissionJoinIncInput {
  completedSettledById: bigint
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  joinerId: bigint
  missionId: bigint
  points: smallint
  projectId: bigint
  settledById: bigint
  tenantId: bigint
}

# input type for inserting data into table "mission_join"
input MissionJoinInsertInput {
  completed: Boolean
  completedSettledAt: timestamptz
  completedSettledBy: IndividualObjRelInsertInput
  completedSettledById: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoin: EventJoinObjRelInsertInput
  eventJoinId: bigint
  eventJoins: EventJoinArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualBySettledById: IndividualObjRelInsertInput
  joinerId: bigint
  mission: MissionObjRelInsertInput
  missionId: bigint
  points: smallint
  project: ProjectObjRelInsertInput
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type MissionJoinMaxFields {
  completedSettledAt: timestamptz
  completedSettledById: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  missionId: bigint
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# order by max() on columns of table "mission_join"
input MissionJoinMaxOrderBy {
  completedSettledAt: OrderBy
  completedSettledById: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type MissionJoinMinFields {
  completedSettledAt: timestamptz
  completedSettledById: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  missionId: bigint
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# order by min() on columns of table "mission_join"
input MissionJoinMinOrderBy {
  completedSettledAt: OrderBy
  completedSettledById: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoinId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "mission_join"
type MissionJoinMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [MissionJoin!]!
}

# input type for inserting object relation for remote table "mission_join"
input MissionJoinObjRelInsertInput {
  data: MissionJoinInsertInput!

  # upsert condition
  onConflict: MissionJoinOnConflict
}

# on_conflict condition type for table "mission_join"
input MissionJoinOnConflict {
  constraint: MissionJoinConstraint!
  updateColumns: [MissionJoinUpdateColumn!]! = []
  where: MissionJoinBoolExp
}

# Ordering options when selecting data from "mission_join".
input MissionJoinOrderBy {
  completed: OrderBy
  completedSettledAt: OrderBy
  completedSettledBy: IndividualOrderBy
  completedSettledById: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  eventJoin: EventJoinOrderBy
  eventJoinId: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualBySettledById: IndividualOrderBy
  joinerId: OrderBy
  mission: MissionOrderBy
  missionId: OrderBy
  points: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: mission_join
input MissionJoinPkColumnsInput {
  id: bigint!
}

# select columns of table "mission_join"
enum MissionJoinSelectColumn {
  # column name
  completed

  # column name
  completedSettledAt

  # column name
  completedSettledById

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventJoinId

  # column name
  hiddenAt

  # column name
  id

  # column name
  joinerId

  # column name
  missionId

  # column name
  points

  # column name
  projectId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  tenantId
}

# select "missionJoinAggregateBoolExpBool_andArgumentsColumns" columns of table "mission_join"
enum MissionJoinSelectColumnMissionJoinAggregateBoolExpBool_andArgumentsColumns {
  # column name
  completed
}

# select "missionJoinAggregateBoolExpBool_orArgumentsColumns" columns of table "mission_join"
enum MissionJoinSelectColumnMissionJoinAggregateBoolExpBool_orArgumentsColumns {
  # column name
  completed
}

# input type for updating data in table "mission_join"
input MissionJoinSetInput {
  completed: Boolean
  completedSettledAt: timestamptz
  completedSettledById: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  missionId: bigint
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# aggregate stddev on columns
type MissionJoinStddevFields {
  completedSettledById: Float
  createdById: Float
  eventJoinId: Float
  id: Float
  joinerId: Float
  missionId: Float
  points: Float
  projectId: Float
  settledById: Float
  tenantId: Float
}

# order by stddev() on columns of table "mission_join"
input MissionJoinStddevOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type MissionJoinStddevPopFields {
  completedSettledById: Float
  createdById: Float
  eventJoinId: Float
  id: Float
  joinerId: Float
  missionId: Float
  points: Float
  projectId: Float
  settledById: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "mission_join"
input MissionJoinStddevPopOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type MissionJoinStddevSampFields {
  completedSettledById: Float
  createdById: Float
  eventJoinId: Float
  id: Float
  joinerId: Float
  missionId: Float
  points: Float
  projectId: Float
  settledById: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "mission_join"
input MissionJoinStddevSampOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "mission_join"
input MissionJoinStreamCursorInput {
  # Stream column input with initial value
  initialValue: MissionJoinStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input MissionJoinStreamCursorValueInput {
  completed: Boolean
  completedSettledAt: timestamptz
  completedSettledById: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  eventJoinId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  missionId: bigint
  points: smallint
  projectId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  tenantId: bigint
}

# aggregate sum on columns
type MissionJoinSumFields {
  completedSettledById: bigint
  createdById: bigint
  eventJoinId: bigint
  id: bigint
  joinerId: bigint
  missionId: bigint
  points: smallint
  projectId: bigint
  settledById: bigint
  tenantId: bigint
}

# order by sum() on columns of table "mission_join"
input MissionJoinSumOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# update columns of table "mission_join"
enum MissionJoinUpdateColumn {
  # column name
  completed

  # column name
  completedSettledAt

  # column name
  completedSettledById

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  eventJoinId

  # column name
  hiddenAt

  # column name
  id

  # column name
  joinerId

  # column name
  missionId

  # column name
  points

  # column name
  projectId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  tenantId
}

input MissionJoinUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: MissionJoinIncInput

  # sets the columns of the filtered rows to the given values
  _set: MissionJoinSetInput

  # filter the rows which have to be updated
  where: MissionJoinBoolExp!
}

# aggregate variance on columns
type MissionJoinVarianceFields {
  completedSettledById: Float
  createdById: Float
  eventJoinId: Float
  id: Float
  joinerId: Float
  missionId: Float
  points: Float
  projectId: Float
  settledById: Float
  tenantId: Float
}

# order by variance() on columns of table "mission_join"
input MissionJoinVarianceOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type MissionJoinVarPopFields {
  completedSettledById: Float
  createdById: Float
  eventJoinId: Float
  id: Float
  joinerId: Float
  missionId: Float
  points: Float
  projectId: Float
  settledById: Float
  tenantId: Float
}

# order by varPop() on columns of table "mission_join"
input MissionJoinVarPopOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type MissionJoinVarSampFields {
  completedSettledById: Float
  createdById: Float
  eventJoinId: Float
  id: Float
  joinerId: Float
  missionId: Float
  points: Float
  projectId: Float
  settledById: Float
  tenantId: Float
}

# order by varSamp() on columns of table "mission_join"
input MissionJoinVarSampOrderBy {
  completedSettledById: OrderBy
  createdById: OrderBy
  eventJoinId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  missionId: OrderBy
  points: OrderBy
  projectId: OrderBy
  settledById: OrderBy
  tenantId: OrderBy
}

# aggregate max on columns
type MissionMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

# order by max() on columns of table "mission"
input MissionMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type MissionMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

# order by min() on columns of table "mission"
input MissionMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManageId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "mission"
type MissionMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Mission!]!
}

# input type for inserting object relation for remote table "mission"
input MissionObjRelInsertInput {
  data: MissionInsertInput!

  # upsert condition
  onConflict: MissionOnConflict
}

# on_conflict condition type for table "mission"
input MissionOnConflict {
  constraint: MissionConstraint!
  updateColumns: [MissionUpdateColumn!]! = []
  where: MissionBoolExp
}

# Ordering options when selecting data from "mission".
input MissionOrderBy {
  autoAcceptMember: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventManage: EventManageOrderBy
  eventManageId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isTemplate: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  name: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  project: ProjectOrderBy
  projectId: OrderBy
  quantity: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: mission
input MissionPkColumnsInput {
  id: bigint!
}

# select columns of table "mission"
enum MissionSelectColumn {
  # column name
  autoAcceptMember

  # column name
  color

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  eventManageId

  # column name
  hiddenAt

  # column name
  id

  # column name
  isTemplate

  # column name
  name

  # column name
  pointsMaximum

  # column name
  pointsMinimum

  # column name
  projectId

  # column name
  quantity

  # column name
  teamId

  # column name
  tenantId
}

# select "missionAggregateBoolExpBool_andArgumentsColumns" columns of table "mission"
enum MissionSelectColumnMissionAggregateBoolExpBool_andArgumentsColumns {
  # column name
  autoAcceptMember

  # column name
  isTemplate
}

# select "missionAggregateBoolExpBool_orArgumentsColumns" columns of table "mission"
enum MissionSelectColumnMissionAggregateBoolExpBool_orArgumentsColumns {
  # column name
  autoAcceptMember

  # column name
  isTemplate
}

# input type for updating data in table "mission"
input MissionSetInput {
  autoAcceptMember: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  isTemplate: Boolean
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type MissionStddevFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "mission"
input MissionStddevOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type MissionStddevPopFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "mission"
input MissionStddevPopOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type MissionStddevSampFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "mission"
input MissionStddevSampOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "mission"
input MissionStreamCursorInput {
  # Stream column input with initial value
  initialValue: MissionStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input MissionStreamCursorValueInput {
  autoAcceptMember: Boolean
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventManageId: bigint
  hiddenAt: timestamptz
  id: bigint
  isTemplate: Boolean
  name: String
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type MissionSumFields {
  createdById: bigint
  eventManageId: bigint
  id: bigint
  pointsMaximum: smallint
  pointsMinimum: smallint
  projectId: bigint
  quantity: smallint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "mission"
input MissionSumOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "mission"
enum MissionUpdateColumn {
  # column name
  autoAcceptMember

  # column name
  color

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  eventManageId

  # column name
  hiddenAt

  # column name
  id

  # column name
  isTemplate

  # column name
  name

  # column name
  pointsMaximum

  # column name
  pointsMinimum

  # column name
  projectId

  # column name
  quantity

  # column name
  teamId

  # column name
  tenantId
}

input MissionUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: MissionIncInput

  # sets the columns of the filtered rows to the given values
  _set: MissionSetInput

  # filter the rows which have to be updated
  where: MissionBoolExp!
}

# aggregate variance on columns
type MissionVarianceFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "mission"
input MissionVarianceOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type MissionVarPopFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "mission"
input MissionVarPopOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type MissionVarSampFields {
  createdById: Float
  eventManageId: Float
  id: Float
  pointsMaximum: Float
  pointsMinimum: Float
  projectId: Float
  quantity: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "mission"
input MissionVarSampOrderBy {
  createdById: OrderBy
  eventManageId: OrderBy
  id: OrderBy
  pointsMaximum: OrderBy
  pointsMinimum: OrderBy
  projectId: OrderBy
  quantity: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# mutation root
type Mutation {
  # delete data from the table: "action"
  deleteAction(
    # filter the rows which have to be deleted
    where: ActionBoolExp!
  ): ActionMutationResponse

  # delete single row from the table: "action"
  deleteActionByPk(id: bigint!): Action

  # delete data from the table: "actor"
  deleteActor(
    # filter the rows which have to be deleted
    where: ActorBoolExp!
  ): ActorMutationResponse

  # delete data from the table: "actor_address"
  deleteActorAddress(
    # filter the rows which have to be deleted
    where: ActorAddressBoolExp!
  ): ActorAddressMutationResponse

  # delete single row from the table: "actor_address"
  deleteActorAddressByPk(id: bigint!): ActorAddress

  # delete data from the table: "actor_bank_info"
  deleteActorBankInfo(
    # filter the rows which have to be deleted
    where: ActorBankInfoBoolExp!
  ): ActorBankInfoMutationResponse

  # delete single row from the table: "actor_bank_info"
  deleteActorBankInfoByPk(id: bigint!): ActorBankInfo

  # delete single row from the table: "actor"
  deleteActorByPk(id: bigint!): Actor

  # delete data from the table: "actor_image"
  deleteActorImage(
    # filter the rows which have to be deleted
    where: ActorImageBoolExp!
  ): ActorImageMutationResponse

  # delete single row from the table: "actor_image"
  deleteActorImageByPk(id: bigint!): ActorImage

  # delete data from the table: "actor_tags"
  deleteActorTags(
    # filter the rows which have to be deleted
    where: ActorTagsBoolExp!
  ): ActorTagsMutationResponse

  # delete single row from the table: "actor_tags"
  deleteActorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags

  # delete data from the table: "bot_info"
  deleteBotInfo(
    # filter the rows which have to be deleted
    where: BotInfoBoolExp!
  ): BotInfoMutationResponse

  # delete single row from the table: "bot_info"
  deleteBotInfoByPk(id: bigint!): BotInfo

  # delete data from the table: "campus"
  deleteCampus(
    # filter the rows which have to be deleted
    where: CampusBoolExp!
  ): CampusMutationResponse

  # delete single row from the table: "campus"
  deleteCampusByPk(id: bigint!): Campus

  # delete data from the table: "canteen"
  deleteCanteen(
    # filter the rows which have to be deleted
    where: CanteenBoolExp!
  ): CanteenMutationResponse

  # delete single row from the table: "canteen"
  deleteCanteenByPk(id: bigint!): Canteen

  # delete data from the table: "canteen_food"
  deleteCanteenFood(
    # filter the rows which have to be deleted
    where: CanteenFoodBoolExp!
  ): CanteenFoodMutationResponse

  # delete single row from the table: "canteen_food"
  deleteCanteenFoodByPk(id: bigint!): CanteenFood

  # delete data from the table: "canteen_menu"
  deleteCanteenMenu(
    # filter the rows which have to be deleted
    where: CanteenMenuBoolExp!
  ): CanteenMenuMutationResponse

  # delete single row from the table: "canteen_menu"
  deleteCanteenMenuByPk(id: bigint!): CanteenMenu

  # delete data from the table: "class_group"
  deleteClassGroup(
    # filter the rows which have to be deleted
    where: ClassGroupBoolExp!
  ): ClassGroupMutationResponse

  # delete single row from the table: "class_group"
  deleteClassGroupByPk(id: bigint!): ClassGroup

  # delete data from the table: "class_group_teacher"
  deleteClassGroupTeacher(
    # filter the rows which have to be deleted
    where: ClassGroupTeacherBoolExp!
  ): ClassGroupTeacherMutationResponse

  # delete single row from the table: "class_group_teacher"
  deleteClassGroupTeacherByPk(id: bigint!): ClassGroupTeacher

  # delete data from the table: "class_group_teacher_subjects"
  deleteClassGroupTeacherSubjects(
    # filter the rows which have to be deleted
    where: ClassGroupTeacherSubjectsBoolExp!
  ): ClassGroupTeacherSubjectsMutationResponse

  # delete single row from the table: "class_group_teacher_subjects"
  deleteClassGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects

  # delete data from the table: "cohort"
  deleteCohort(
    # filter the rows which have to be deleted
    where: CohortBoolExp!
  ): CohortMutationResponse

  # delete single row from the table: "cohort"
  deleteCohortByPk(id: bigint!): Cohort

  # delete data from the table: "content"
  deleteContent(
    # filter the rows which have to be deleted
    where: ContentBoolExp!
  ): ContentMutationResponse

  # delete data from the table: "content_attachments"
  deleteContentAttachments(
    # filter the rows which have to be deleted
    where: ContentAttachmentsBoolExp!
  ): ContentAttachmentsMutationResponse

  # delete single row from the table: "content_attachments"
  deleteContentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments

  # delete single row from the table: "content"
  deleteContentByPk(id: bigint!): Content

  # delete data from the table: "document"
  deleteDocument(
    # filter the rows which have to be deleted
    where: DocumentBoolExp!
  ): DocumentMutationResponse

  # delete single row from the table: "document"
  deleteDocumentByPk(id: bigint!): Document

  # delete data from the table: "event"
  deleteEvent(
    # filter the rows which have to be deleted
    where: EventBoolExp!
  ): EventMutationResponse

  # delete data from the table: "event_approval"
  deleteEventApproval(
    # filter the rows which have to be deleted
    where: EventApprovalBoolExp!
  ): EventApprovalMutationResponse

  # delete single row from the table: "event_approval"
  deleteEventApprovalByPk(id: bigint!): EventApproval

  # delete data from the table: "event_approval_step"
  deleteEventApprovalStep(
    # filter the rows which have to be deleted
    where: EventApprovalStepBoolExp!
  ): EventApprovalStepMutationResponse

  # delete single row from the table: "event_approval_step"
  deleteEventApprovalStepByPk(id: bigint!): EventApprovalStep

  # delete data from the table: "event_approval_step_notifiees"
  deleteEventApprovalStepNotifiees(
    # filter the rows which have to be deleted
    where: EventApprovalStepNotifieesBoolExp!
  ): EventApprovalStepNotifieesMutationResponse

  # delete single row from the table: "event_approval_step_notifiees"
  deleteEventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees

  # delete data from the table: "event_approval_step_validators"
  deleteEventApprovalStepValidators(
    # filter the rows which have to be deleted
    where: EventApprovalStepValidatorsBoolExp!
  ): EventApprovalStepValidatorsMutationResponse

  # delete single row from the table: "event_approval_step_validators"
  deleteEventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators

  # delete single row from the table: "event"
  deleteEventByPk(id: bigint!): Event

  # delete data from the table: "event_join"
  deleteEventJoin(
    # filter the rows which have to be deleted
    where: EventJoinBoolExp!
  ): EventJoinMutationResponse

  # delete single row from the table: "event_join"
  deleteEventJoinByPk(id: bigint!): EventJoin

  # delete data from the table: "event_manage"
  deleteEventManage(
    # filter the rows which have to be deleted
    where: EventManageBoolExp!
  ): EventManageMutationResponse

  # delete single row from the table: "event_manage"
  deleteEventManageByPk(id: bigint!): EventManage

  # delete data from the table: "event_supervisors"
  deleteEventSupervisors(
    # filter the rows which have to be deleted
    where: EventSupervisorsBoolExp!
  ): EventSupervisorsMutationResponse

  # delete single row from the table: "event_supervisors"
  deleteEventSupervisorsByPk(eventId: bigint!, userInfoId: bigint!): EventSupervisors

  # delete data from the table: "event_tags"
  deleteEventTags(
    # filter the rows which have to be deleted
    where: EventTagsBoolExp!
  ): EventTagsMutationResponse

  # delete single row from the table: "event_tags"
  deleteEventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags

  # delete data from the table: "expense"
  deleteExpense(
    # filter the rows which have to be deleted
    where: ExpenseBoolExp!
  ): ExpenseMutationResponse

  # delete single row from the table: "expense"
  deleteExpenseByPk(id: bigint!): Expense

  # delete data from the table: "expense_item"
  deleteExpenseItem(
    # filter the rows which have to be deleted
    where: ExpenseItemBoolExp!
  ): ExpenseItemMutationResponse

  # delete data from the table: "expense_item_attachments"
  deleteExpenseItemAttachments(
    # filter the rows which have to be deleted
    where: ExpenseItemAttachmentsBoolExp!
  ): ExpenseItemAttachmentsMutationResponse

  # delete single row from the table: "expense_item_attachments"
  deleteExpenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments

  # delete single row from the table: "expense_item"
  deleteExpenseItemByPk(id: bigint!): ExpenseItem

  # delete data from the table: "favorite"
  deleteFavorite(
    # filter the rows which have to be deleted
    where: FavoriteBoolExp!
  ): FavoriteMutationResponse

  # delete single row from the table: "favorite"
  deleteFavoriteByPk(id: bigint!): Favorite

  # delete data from the table: "file_upload"
  deleteFileUpload(
    # filter the rows which have to be deleted
    where: FileUploadBoolExp!
  ): FileUploadMutationResponse

  # delete single row from the table: "file_upload"
  deleteFileUploadByPk(id: bigint!): FileUpload

  # delete data from the table: "finance"
  deleteFinance(
    # filter the rows which have to be deleted
    where: FinanceBoolExp!
  ): FinanceMutationResponse

  # delete data from the table: "finance_attachments"
  deleteFinanceAttachments(
    # filter the rows which have to be deleted
    where: FinanceAttachmentsBoolExp!
  ): FinanceAttachmentsMutationResponse

  # delete single row from the table: "finance_attachments"
  deleteFinanceAttachmentsByPk(fileUploadId: bigint!, financeId: bigint!): FinanceAttachments

  # delete single row from the table: "finance"
  deleteFinanceByPk(id: bigint!): Finance

  # delete data from the table: "follow"
  deleteFollow(
    # filter the rows which have to be deleted
    where: FollowBoolExp!
  ): FollowMutationResponse

  # delete single row from the table: "follow"
  deleteFollowByPk(id: bigint!): Follow

  # delete data from the table: "form"
  deleteForm(
    # filter the rows which have to be deleted
    where: FormBoolExp!
  ): FormMutationResponse

  # delete single row from the table: "form"
  deleteFormByPk(id: bigint!): Form

  # delete data from the table: "form_submission"
  deleteFormSubmission(
    # filter the rows which have to be deleted
    where: FormSubmissionBoolExp!
  ): FormSubmissionMutationResponse

  # delete single row from the table: "form_submission"
  deleteFormSubmissionByPk(id: bigint!): FormSubmission

  # delete data from the table: "individual"
  deleteIndividual(
    # filter the rows which have to be deleted
    where: IndividualBoolExp!
  ): IndividualMutationResponse

  # delete single row from the table: "individual"
  deleteIndividualByPk(id: bigint!): Individual

  # delete data from the table: "issue"
  deleteIssue(
    # filter the rows which have to be deleted
    where: IssueBoolExp!
  ): IssueMutationResponse

  # delete single row from the table: "issue"
  deleteIssueByPk(id: bigint!): Issue

  # delete data from the table: "issue_contributors"
  deleteIssueContributors(
    # filter the rows which have to be deleted
    where: IssueContributorsBoolExp!
  ): IssueContributorsMutationResponse

  # delete single row from the table: "issue_contributors"
  deleteIssueContributorsByPk(individualId: bigint!, issueId: bigint!): IssueContributors

  # delete data from the table: "issue_tags"
  deleteIssueTags(
    # filter the rows which have to be deleted
    where: IssueTagsBoolExp!
  ): IssueTagsMutationResponse

  # delete single row from the table: "issue_tags"
  deleteIssueTagsByPk(issueId: bigint!, tagId: bigint!): IssueTags

  # delete data from the table: "legal_unit"
  deleteLegalUnit(
    # filter the rows which have to be deleted
    where: LegalUnitBoolExp!
  ): LegalUnitMutationResponse

  # delete single row from the table: "legal_unit"
  deleteLegalUnitByPk(id: bigint!): LegalUnit

  # delete data from the table: "mission"
  deleteMission(
    # filter the rows which have to be deleted
    where: MissionBoolExp!
  ): MissionMutationResponse

  # delete single row from the table: "mission"
  deleteMissionByPk(id: bigint!): Mission

  # delete data from the table: "mission_join"
  deleteMissionJoin(
    # filter the rows which have to be deleted
    where: MissionJoinBoolExp!
  ): MissionJoinMutationResponse

  # delete single row from the table: "mission_join"
  deleteMissionJoinByPk(id: bigint!): MissionJoin

  # delete data from the table: "pole"
  deletePole(
    # filter the rows which have to be deleted
    where: PoleBoolExp!
  ): PoleMutationResponse

  # delete single row from the table: "pole"
  deletePoleByPk(id: bigint!): Pole

  # delete data from the table: "project"
  deleteProject(
    # filter the rows which have to be deleted
    where: ProjectBoolExp!
  ): ProjectMutationResponse

  # delete single row from the table: "project"
  deleteProjectByPk(id: bigint!): Project

  # delete data from the table: "project_supervisors"
  deleteProjectSupervisors(
    # filter the rows which have to be deleted
    where: ProjectSupervisorsBoolExp!
  ): ProjectSupervisorsMutationResponse

  # delete single row from the table: "project_supervisors"
  deleteProjectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors

  # delete data from the table: "project_tags"
  deleteProjectTags(
    # filter the rows which have to be deleted
    where: ProjectTagsBoolExp!
  ): ProjectTagsMutationResponse

  # delete single row from the table: "project_tags"
  deleteProjectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags

  # delete data from the table: "reaction"
  deleteReaction(
    # filter the rows which have to be deleted
    where: ReactionBoolExp!
  ): ReactionMutationResponse

  # delete single row from the table: "reaction"
  deleteReactionByPk(id: bigint!): Reaction

  # delete data from the table: "report"
  deleteReport(
    # filter the rows which have to be deleted
    where: ReportBoolExp!
  ): ReportMutationResponse

  # delete single row from the table: "report"
  deleteReportByPk(id: bigint!): Report

  # delete data from the table: "role"
  deleteRole(
    # filter the rows which have to be deleted
    where: RoleBoolExp!
  ): RoleMutationResponse

  # delete single row from the table: "role"
  deleteRoleByPk(id: bigint!): Role

  # delete data from the table: "session"
  deleteSession(
    # filter the rows which have to be deleted
    where: SessionBoolExp!
  ): SessionMutationResponse

  # delete single row from the table: "session"
  deleteSessionByPk(id: bigint!): Session

  # delete data from the table: "shortcut"
  deleteShortcut(
    # filter the rows which have to be deleted
    where: ShortcutBoolExp!
  ): ShortcutMutationResponse

  # delete single row from the table: "shortcut"
  deleteShortcutByPk(id: bigint!): Shortcut

  # delete data from the table: "social"
  deleteSocial(
    # filter the rows which have to be deleted
    where: SocialBoolExp!
  ): SocialMutationResponse

  # delete single row from the table: "social"
  deleteSocialByPk(id: bigint!): Social

  # delete data from the table: "subject"
  deleteSubject(
    # filter the rows which have to be deleted
    where: SubjectBoolExp!
  ): SubjectMutationResponse

  # delete single row from the table: "subject"
  deleteSubjectByPk(id: bigint!): Subject

  # delete data from the table: "subject_class_groups"
  deleteSubjectClassGroups(
    # filter the rows which have to be deleted
    where: SubjectClassGroupsBoolExp!
  ): SubjectClassGroupsMutationResponse

  # delete single row from the table: "subject_class_groups"
  deleteSubjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups

  # delete data from the table: "tag"
  deleteTag(
    # filter the rows which have to be deleted
    where: TagBoolExp!
  ): TagMutationResponse

  # delete single row from the table: "tag"
  deleteTagByPk(id: bigint!): Tag

  # delete data from the table: "team"
  deleteTeam(
    # filter the rows which have to be deleted
    where: TeamBoolExp!
  ): TeamMutationResponse

  # delete single row from the table: "team"
  deleteTeamByPk(id: bigint!): Team

  # delete data from the table: "team_events"
  deleteTeamEvents(
    # filter the rows which have to be deleted
    where: TeamEventsBoolExp!
  ): TeamEventsMutationResponse

  # delete single row from the table: "team_events"
  deleteTeamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents

  # delete data from the table: "team_join"
  deleteTeamJoin(
    # filter the rows which have to be deleted
    where: TeamJoinBoolExp!
  ): TeamJoinMutationResponse

  # delete single row from the table: "team_join"
  deleteTeamJoinByPk(id: bigint!): TeamJoin

  # delete data from the table: "team_member"
  deleteTeamMember(
    # filter the rows which have to be deleted
    where: TeamMemberBoolExp!
  ): TeamMemberMutationResponse

  # delete single row from the table: "team_member"
  deleteTeamMemberByPk(id: bigint!): TeamMember

  # delete data from the table: "team_member_roles"
  deleteTeamMemberRoles(
    # filter the rows which have to be deleted
    where: TeamMemberRolesBoolExp!
  ): TeamMemberRolesMutationResponse

  # delete single row from the table: "team_member_roles"
  deleteTeamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles

  # delete data from the table: "team_metric"
  deleteTeamMetric(
    # filter the rows which have to be deleted
    where: TeamMetricBoolExp!
  ): TeamMetricMutationResponse

  # delete single row from the table: "team_metric"
  deleteTeamMetricByPk(id: bigint!): TeamMetric

  # delete data from the table: "tenant"
  deleteTenant(
    # filter the rows which have to be deleted
    where: TenantBoolExp!
  ): TenantMutationResponse

  # delete single row from the table: "tenant"
  deleteTenantByPk(id: bigint!): Tenant

  # delete data from the table: "thread"
  deleteThread(
    # filter the rows which have to be deleted
    where: ThreadBoolExp!
  ): ThreadMutationResponse

  # delete single row from the table: "thread"
  deleteThreadByPk(id: bigint!): Thread

  # delete data from the table: "thread_contributors"
  deleteThreadContributors(
    # filter the rows which have to be deleted
    where: ThreadContributorsBoolExp!
  ): ThreadContributorsMutationResponse

  # delete single row from the table: "thread_contributors"
  deleteThreadContributorsByPk(individualId: bigint!, threadId: bigint!): ThreadContributors

  # delete data from the table: "thread_tags"
  deleteThreadTags(
    # filter the rows which have to be deleted
    where: ThreadTagsBoolExp!
  ): ThreadTagsMutationResponse

  # delete single row from the table: "thread_tags"
  deleteThreadTagsByPk(tagId: bigint!, threadId: bigint!): ThreadTags

  # delete data from the table: "user_info"
  deleteUserInfo(
    # filter the rows which have to be deleted
    where: UserInfoBoolExp!
  ): UserInfoMutationResponse

  # delete single row from the table: "user_info"
  deleteUserInfoByPk(id: bigint!): UserInfo

  # delete data from the table: "validation"
  deleteValidation(
    # filter the rows which have to be deleted
    where: ValidationBoolExp!
  ): ValidationMutationResponse

  # delete single row from the table: "validation"
  deleteValidationByPk(id: bigint!): Validation

  # delete data from the table: "vote"
  deleteVote(
    # filter the rows which have to be deleted
    where: VoteBoolExp!
  ): VoteMutationResponse

  # delete single row from the table: "vote"
  deleteVoteByPk(id: bigint!): Vote

  # insert data into the table: "action"
  insertAction(
    # the rows to be inserted
    objects: [ActionInsertInput!]!

    # upsert condition
    onConflict: ActionOnConflict
  ): ActionMutationResponse

  # insert a single row into the table: "action"
  insertActionOne(
    # the row to be inserted
    object: ActionInsertInput!

    # upsert condition
    onConflict: ActionOnConflict
  ): Action

  # insert data into the table: "actor"
  insertActor(
    # the rows to be inserted
    objects: [ActorInsertInput!]!

    # upsert condition
    onConflict: ActorOnConflict
  ): ActorMutationResponse

  # insert data into the table: "actor_address"
  insertActorAddress(
    # the rows to be inserted
    objects: [ActorAddressInsertInput!]!

    # upsert condition
    onConflict: ActorAddressOnConflict
  ): ActorAddressMutationResponse

  # insert a single row into the table: "actor_address"
  insertActorAddressOne(
    # the row to be inserted
    object: ActorAddressInsertInput!

    # upsert condition
    onConflict: ActorAddressOnConflict
  ): ActorAddress

  # insert data into the table: "actor_bank_info"
  insertActorBankInfo(
    # the rows to be inserted
    objects: [ActorBankInfoInsertInput!]!

    # upsert condition
    onConflict: ActorBankInfoOnConflict
  ): ActorBankInfoMutationResponse

  # insert a single row into the table: "actor_bank_info"
  insertActorBankInfoOne(
    # the row to be inserted
    object: ActorBankInfoInsertInput!

    # upsert condition
    onConflict: ActorBankInfoOnConflict
  ): ActorBankInfo

  # insert data into the table: "actor_image"
  insertActorImage(
    # the rows to be inserted
    objects: [ActorImageInsertInput!]!

    # upsert condition
    onConflict: ActorImageOnConflict
  ): ActorImageMutationResponse

  # insert a single row into the table: "actor_image"
  insertActorImageOne(
    # the row to be inserted
    object: ActorImageInsertInput!

    # upsert condition
    onConflict: ActorImageOnConflict
  ): ActorImage

  # insert a single row into the table: "actor"
  insertActorOne(
    # the row to be inserted
    object: ActorInsertInput!

    # upsert condition
    onConflict: ActorOnConflict
  ): Actor

  # insert data into the table: "actor_tags"
  insertActorTags(
    # the rows to be inserted
    objects: [ActorTagsInsertInput!]!

    # upsert condition
    onConflict: ActorTagsOnConflict
  ): ActorTagsMutationResponse

  # insert a single row into the table: "actor_tags"
  insertActorTagsOne(
    # the row to be inserted
    object: ActorTagsInsertInput!

    # upsert condition
    onConflict: ActorTagsOnConflict
  ): ActorTags

  # insert data into the table: "bot_info"
  insertBotInfo(
    # the rows to be inserted
    objects: [BotInfoInsertInput!]!

    # upsert condition
    onConflict: BotInfoOnConflict
  ): BotInfoMutationResponse

  # insert a single row into the table: "bot_info"
  insertBotInfoOne(
    # the row to be inserted
    object: BotInfoInsertInput!

    # upsert condition
    onConflict: BotInfoOnConflict
  ): BotInfo

  # insert data into the table: "campus"
  insertCampus(
    # the rows to be inserted
    objects: [CampusInsertInput!]!

    # upsert condition
    onConflict: CampusOnConflict
  ): CampusMutationResponse

  # insert a single row into the table: "campus"
  insertCampusOne(
    # the row to be inserted
    object: CampusInsertInput!

    # upsert condition
    onConflict: CampusOnConflict
  ): Campus

  # insert data into the table: "canteen"
  insertCanteen(
    # the rows to be inserted
    objects: [CanteenInsertInput!]!

    # upsert condition
    onConflict: CanteenOnConflict
  ): CanteenMutationResponse

  # insert data into the table: "canteen_food"
  insertCanteenFood(
    # the rows to be inserted
    objects: [CanteenFoodInsertInput!]!

    # upsert condition
    onConflict: CanteenFoodOnConflict
  ): CanteenFoodMutationResponse

  # insert a single row into the table: "canteen_food"
  insertCanteenFoodOne(
    # the row to be inserted
    object: CanteenFoodInsertInput!

    # upsert condition
    onConflict: CanteenFoodOnConflict
  ): CanteenFood

  # insert data into the table: "canteen_menu"
  insertCanteenMenu(
    # the rows to be inserted
    objects: [CanteenMenuInsertInput!]!

    # upsert condition
    onConflict: CanteenMenuOnConflict
  ): CanteenMenuMutationResponse

  # insert a single row into the table: "canteen_menu"
  insertCanteenMenuOne(
    # the row to be inserted
    object: CanteenMenuInsertInput!

    # upsert condition
    onConflict: CanteenMenuOnConflict
  ): CanteenMenu

  # insert a single row into the table: "canteen"
  insertCanteenOne(
    # the row to be inserted
    object: CanteenInsertInput!

    # upsert condition
    onConflict: CanteenOnConflict
  ): Canteen

  # insert data into the table: "class_group"
  insertClassGroup(
    # the rows to be inserted
    objects: [ClassGroupInsertInput!]!

    # upsert condition
    onConflict: ClassGroupOnConflict
  ): ClassGroupMutationResponse

  # insert a single row into the table: "class_group"
  insertClassGroupOne(
    # the row to be inserted
    object: ClassGroupInsertInput!

    # upsert condition
    onConflict: ClassGroupOnConflict
  ): ClassGroup

  # insert data into the table: "class_group_teacher"
  insertClassGroupTeacher(
    # the rows to be inserted
    objects: [ClassGroupTeacherInsertInput!]!

    # upsert condition
    onConflict: ClassGroupTeacherOnConflict
  ): ClassGroupTeacherMutationResponse

  # insert a single row into the table: "class_group_teacher"
  insertClassGroupTeacherOne(
    # the row to be inserted
    object: ClassGroupTeacherInsertInput!

    # upsert condition
    onConflict: ClassGroupTeacherOnConflict
  ): ClassGroupTeacher

  # insert data into the table: "class_group_teacher_subjects"
  insertClassGroupTeacherSubjects(
    # the rows to be inserted
    objects: [ClassGroupTeacherSubjectsInsertInput!]!

    # upsert condition
    onConflict: ClassGroupTeacherSubjectsOnConflict
  ): ClassGroupTeacherSubjectsMutationResponse

  # insert a single row into the table: "class_group_teacher_subjects"
  insertClassGroupTeacherSubjectsOne(
    # the row to be inserted
    object: ClassGroupTeacherSubjectsInsertInput!

    # upsert condition
    onConflict: ClassGroupTeacherSubjectsOnConflict
  ): ClassGroupTeacherSubjects

  # insert data into the table: "cohort"
  insertCohort(
    # the rows to be inserted
    objects: [CohortInsertInput!]!

    # upsert condition
    onConflict: CohortOnConflict
  ): CohortMutationResponse

  # insert a single row into the table: "cohort"
  insertCohortOne(
    # the row to be inserted
    object: CohortInsertInput!

    # upsert condition
    onConflict: CohortOnConflict
  ): Cohort

  # insert data into the table: "content"
  insertContent(
    # the rows to be inserted
    objects: [ContentInsertInput!]!

    # upsert condition
    onConflict: ContentOnConflict
  ): ContentMutationResponse

  # insert data into the table: "content_attachments"
  insertContentAttachments(
    # the rows to be inserted
    objects: [ContentAttachmentsInsertInput!]!

    # upsert condition
    onConflict: ContentAttachmentsOnConflict
  ): ContentAttachmentsMutationResponse

  # insert a single row into the table: "content_attachments"
  insertContentAttachmentsOne(
    # the row to be inserted
    object: ContentAttachmentsInsertInput!

    # upsert condition
    onConflict: ContentAttachmentsOnConflict
  ): ContentAttachments

  # insert a single row into the table: "content"
  insertContentOne(
    # the row to be inserted
    object: ContentInsertInput!

    # upsert condition
    onConflict: ContentOnConflict
  ): Content

  # insert data into the table: "document"
  insertDocument(
    # the rows to be inserted
    objects: [DocumentInsertInput!]!

    # upsert condition
    onConflict: DocumentOnConflict
  ): DocumentMutationResponse

  # insert a single row into the table: "document"
  insertDocumentOne(
    # the row to be inserted
    object: DocumentInsertInput!

    # upsert condition
    onConflict: DocumentOnConflict
  ): Document

  # insert data into the table: "event"
  insertEvent(
    # the rows to be inserted
    objects: [EventInsertInput!]!

    # upsert condition
    onConflict: EventOnConflict
  ): EventMutationResponse

  # insert data into the table: "event_approval"
  insertEventApproval(
    # the rows to be inserted
    objects: [EventApprovalInsertInput!]!

    # upsert condition
    onConflict: EventApprovalOnConflict
  ): EventApprovalMutationResponse

  # insert a single row into the table: "event_approval"
  insertEventApprovalOne(
    # the row to be inserted
    object: EventApprovalInsertInput!

    # upsert condition
    onConflict: EventApprovalOnConflict
  ): EventApproval

  # insert data into the table: "event_approval_step"
  insertEventApprovalStep(
    # the rows to be inserted
    objects: [EventApprovalStepInsertInput!]!

    # upsert condition
    onConflict: EventApprovalStepOnConflict
  ): EventApprovalStepMutationResponse

  # insert data into the table: "event_approval_step_notifiees"
  insertEventApprovalStepNotifiees(
    # the rows to be inserted
    objects: [EventApprovalStepNotifieesInsertInput!]!

    # upsert condition
    onConflict: EventApprovalStepNotifieesOnConflict
  ): EventApprovalStepNotifieesMutationResponse

  # insert a single row into the table: "event_approval_step_notifiees"
  insertEventApprovalStepNotifieesOne(
    # the row to be inserted
    object: EventApprovalStepNotifieesInsertInput!

    # upsert condition
    onConflict: EventApprovalStepNotifieesOnConflict
  ): EventApprovalStepNotifiees

  # insert a single row into the table: "event_approval_step"
  insertEventApprovalStepOne(
    # the row to be inserted
    object: EventApprovalStepInsertInput!

    # upsert condition
    onConflict: EventApprovalStepOnConflict
  ): EventApprovalStep

  # insert data into the table: "event_approval_step_validators"
  insertEventApprovalStepValidators(
    # the rows to be inserted
    objects: [EventApprovalStepValidatorsInsertInput!]!

    # upsert condition
    onConflict: EventApprovalStepValidatorsOnConflict
  ): EventApprovalStepValidatorsMutationResponse

  # insert a single row into the table: "event_approval_step_validators"
  insertEventApprovalStepValidatorsOne(
    # the row to be inserted
    object: EventApprovalStepValidatorsInsertInput!

    # upsert condition
    onConflict: EventApprovalStepValidatorsOnConflict
  ): EventApprovalStepValidators

  # insert data into the table: "event_join"
  insertEventJoin(
    # the rows to be inserted
    objects: [EventJoinInsertInput!]!

    # upsert condition
    onConflict: EventJoinOnConflict
  ): EventJoinMutationResponse

  # insert a single row into the table: "event_join"
  insertEventJoinOne(
    # the row to be inserted
    object: EventJoinInsertInput!

    # upsert condition
    onConflict: EventJoinOnConflict
  ): EventJoin

  # insert data into the table: "event_manage"
  insertEventManage(
    # the rows to be inserted
    objects: [EventManageInsertInput!]!

    # upsert condition
    onConflict: EventManageOnConflict
  ): EventManageMutationResponse

  # insert a single row into the table: "event_manage"
  insertEventManageOne(
    # the row to be inserted
    object: EventManageInsertInput!

    # upsert condition
    onConflict: EventManageOnConflict
  ): EventManage

  # insert a single row into the table: "event"
  insertEventOne(
    # the row to be inserted
    object: EventInsertInput!

    # upsert condition
    onConflict: EventOnConflict
  ): Event

  # insert data into the table: "event_supervisors"
  insertEventSupervisors(
    # the rows to be inserted
    objects: [EventSupervisorsInsertInput!]!

    # upsert condition
    onConflict: EventSupervisorsOnConflict
  ): EventSupervisorsMutationResponse

  # insert a single row into the table: "event_supervisors"
  insertEventSupervisorsOne(
    # the row to be inserted
    object: EventSupervisorsInsertInput!

    # upsert condition
    onConflict: EventSupervisorsOnConflict
  ): EventSupervisors

  # insert data into the table: "event_tags"
  insertEventTags(
    # the rows to be inserted
    objects: [EventTagsInsertInput!]!

    # upsert condition
    onConflict: EventTagsOnConflict
  ): EventTagsMutationResponse

  # insert a single row into the table: "event_tags"
  insertEventTagsOne(
    # the row to be inserted
    object: EventTagsInsertInput!

    # upsert condition
    onConflict: EventTagsOnConflict
  ): EventTags

  # insert data into the table: "expense"
  insertExpense(
    # the rows to be inserted
    objects: [ExpenseInsertInput!]!

    # upsert condition
    onConflict: ExpenseOnConflict
  ): ExpenseMutationResponse

  # insert data into the table: "expense_item"
  insertExpenseItem(
    # the rows to be inserted
    objects: [ExpenseItemInsertInput!]!

    # upsert condition
    onConflict: ExpenseItemOnConflict
  ): ExpenseItemMutationResponse

  # insert data into the table: "expense_item_attachments"
  insertExpenseItemAttachments(
    # the rows to be inserted
    objects: [ExpenseItemAttachmentsInsertInput!]!

    # upsert condition
    onConflict: ExpenseItemAttachmentsOnConflict
  ): ExpenseItemAttachmentsMutationResponse

  # insert a single row into the table: "expense_item_attachments"
  insertExpenseItemAttachmentsOne(
    # the row to be inserted
    object: ExpenseItemAttachmentsInsertInput!

    # upsert condition
    onConflict: ExpenseItemAttachmentsOnConflict
  ): ExpenseItemAttachments

  # insert a single row into the table: "expense_item"
  insertExpenseItemOne(
    # the row to be inserted
    object: ExpenseItemInsertInput!

    # upsert condition
    onConflict: ExpenseItemOnConflict
  ): ExpenseItem

  # insert a single row into the table: "expense"
  insertExpenseOne(
    # the row to be inserted
    object: ExpenseInsertInput!

    # upsert condition
    onConflict: ExpenseOnConflict
  ): Expense

  # insert data into the table: "favorite"
  insertFavorite(
    # the rows to be inserted
    objects: [FavoriteInsertInput!]!

    # upsert condition
    onConflict: FavoriteOnConflict
  ): FavoriteMutationResponse

  # insert a single row into the table: "favorite"
  insertFavoriteOne(
    # the row to be inserted
    object: FavoriteInsertInput!

    # upsert condition
    onConflict: FavoriteOnConflict
  ): Favorite

  # insert data into the table: "file_upload"
  insertFileUpload(
    # the rows to be inserted
    objects: [FileUploadInsertInput!]!

    # upsert condition
    onConflict: FileUploadOnConflict
  ): FileUploadMutationResponse

  # insert a single row into the table: "file_upload"
  insertFileUploadOne(
    # the row to be inserted
    object: FileUploadInsertInput!

    # upsert condition
    onConflict: FileUploadOnConflict
  ): FileUpload

  # insert data into the table: "finance"
  insertFinance(
    # the rows to be inserted
    objects: [FinanceInsertInput!]!

    # upsert condition
    onConflict: FinanceOnConflict
  ): FinanceMutationResponse

  # insert data into the table: "finance_attachments"
  insertFinanceAttachments(
    # the rows to be inserted
    objects: [FinanceAttachmentsInsertInput!]!

    # upsert condition
    onConflict: FinanceAttachmentsOnConflict
  ): FinanceAttachmentsMutationResponse

  # insert a single row into the table: "finance_attachments"
  insertFinanceAttachmentsOne(
    # the row to be inserted
    object: FinanceAttachmentsInsertInput!

    # upsert condition
    onConflict: FinanceAttachmentsOnConflict
  ): FinanceAttachments

  # insert a single row into the table: "finance"
  insertFinanceOne(
    # the row to be inserted
    object: FinanceInsertInput!

    # upsert condition
    onConflict: FinanceOnConflict
  ): Finance

  # insert data into the table: "follow"
  insertFollow(
    # the rows to be inserted
    objects: [FollowInsertInput!]!

    # upsert condition
    onConflict: FollowOnConflict
  ): FollowMutationResponse

  # insert a single row into the table: "follow"
  insertFollowOne(
    # the row to be inserted
    object: FollowInsertInput!

    # upsert condition
    onConflict: FollowOnConflict
  ): Follow

  # insert data into the table: "form"
  insertForm(
    # the rows to be inserted
    objects: [FormInsertInput!]!

    # upsert condition
    onConflict: FormOnConflict
  ): FormMutationResponse

  # insert a single row into the table: "form"
  insertFormOne(
    # the row to be inserted
    object: FormInsertInput!

    # upsert condition
    onConflict: FormOnConflict
  ): Form

  # insert data into the table: "form_submission"
  insertFormSubmission(
    # the rows to be inserted
    objects: [FormSubmissionInsertInput!]!

    # upsert condition
    onConflict: FormSubmissionOnConflict
  ): FormSubmissionMutationResponse

  # insert a single row into the table: "form_submission"
  insertFormSubmissionOne(
    # the row to be inserted
    object: FormSubmissionInsertInput!

    # upsert condition
    onConflict: FormSubmissionOnConflict
  ): FormSubmission

  # insert data into the table: "individual"
  insertIndividual(
    # the rows to be inserted
    objects: [IndividualInsertInput!]!

    # upsert condition
    onConflict: IndividualOnConflict
  ): IndividualMutationResponse

  # insert a single row into the table: "individual"
  insertIndividualOne(
    # the row to be inserted
    object: IndividualInsertInput!

    # upsert condition
    onConflict: IndividualOnConflict
  ): Individual

  # insert data into the table: "issue"
  insertIssue(
    # the rows to be inserted
    objects: [IssueInsertInput!]!

    # upsert condition
    onConflict: IssueOnConflict
  ): IssueMutationResponse

  # insert data into the table: "issue_contributors"
  insertIssueContributors(
    # the rows to be inserted
    objects: [IssueContributorsInsertInput!]!

    # upsert condition
    onConflict: IssueContributorsOnConflict
  ): IssueContributorsMutationResponse

  # insert a single row into the table: "issue_contributors"
  insertIssueContributorsOne(
    # the row to be inserted
    object: IssueContributorsInsertInput!

    # upsert condition
    onConflict: IssueContributorsOnConflict
  ): IssueContributors

  # insert a single row into the table: "issue"
  insertIssueOne(
    # the row to be inserted
    object: IssueInsertInput!

    # upsert condition
    onConflict: IssueOnConflict
  ): Issue

  # insert data into the table: "issue_tags"
  insertIssueTags(
    # the rows to be inserted
    objects: [IssueTagsInsertInput!]!

    # upsert condition
    onConflict: IssueTagsOnConflict
  ): IssueTagsMutationResponse

  # insert a single row into the table: "issue_tags"
  insertIssueTagsOne(
    # the row to be inserted
    object: IssueTagsInsertInput!

    # upsert condition
    onConflict: IssueTagsOnConflict
  ): IssueTags

  # insert data into the table: "legal_unit"
  insertLegalUnit(
    # the rows to be inserted
    objects: [LegalUnitInsertInput!]!

    # upsert condition
    onConflict: LegalUnitOnConflict
  ): LegalUnitMutationResponse

  # insert a single row into the table: "legal_unit"
  insertLegalUnitOne(
    # the row to be inserted
    object: LegalUnitInsertInput!

    # upsert condition
    onConflict: LegalUnitOnConflict
  ): LegalUnit

  # insert data into the table: "mission"
  insertMission(
    # the rows to be inserted
    objects: [MissionInsertInput!]!

    # upsert condition
    onConflict: MissionOnConflict
  ): MissionMutationResponse

  # insert data into the table: "mission_join"
  insertMissionJoin(
    # the rows to be inserted
    objects: [MissionJoinInsertInput!]!

    # upsert condition
    onConflict: MissionJoinOnConflict
  ): MissionJoinMutationResponse

  # insert a single row into the table: "mission_join"
  insertMissionJoinOne(
    # the row to be inserted
    object: MissionJoinInsertInput!

    # upsert condition
    onConflict: MissionJoinOnConflict
  ): MissionJoin

  # insert a single row into the table: "mission"
  insertMissionOne(
    # the row to be inserted
    object: MissionInsertInput!

    # upsert condition
    onConflict: MissionOnConflict
  ): Mission

  # insert data into the table: "pole"
  insertPole(
    # the rows to be inserted
    objects: [PoleInsertInput!]!

    # upsert condition
    onConflict: PoleOnConflict
  ): PoleMutationResponse

  # insert a single row into the table: "pole"
  insertPoleOne(
    # the row to be inserted
    object: PoleInsertInput!

    # upsert condition
    onConflict: PoleOnConflict
  ): Pole

  # insert data into the table: "project"
  insertProject(
    # the rows to be inserted
    objects: [ProjectInsertInput!]!

    # upsert condition
    onConflict: ProjectOnConflict
  ): ProjectMutationResponse

  # insert a single row into the table: "project"
  insertProjectOne(
    # the row to be inserted
    object: ProjectInsertInput!

    # upsert condition
    onConflict: ProjectOnConflict
  ): Project

  # insert data into the table: "project_supervisors"
  insertProjectSupervisors(
    # the rows to be inserted
    objects: [ProjectSupervisorsInsertInput!]!

    # upsert condition
    onConflict: ProjectSupervisorsOnConflict
  ): ProjectSupervisorsMutationResponse

  # insert a single row into the table: "project_supervisors"
  insertProjectSupervisorsOne(
    # the row to be inserted
    object: ProjectSupervisorsInsertInput!

    # upsert condition
    onConflict: ProjectSupervisorsOnConflict
  ): ProjectSupervisors

  # insert data into the table: "project_tags"
  insertProjectTags(
    # the rows to be inserted
    objects: [ProjectTagsInsertInput!]!

    # upsert condition
    onConflict: ProjectTagsOnConflict
  ): ProjectTagsMutationResponse

  # insert a single row into the table: "project_tags"
  insertProjectTagsOne(
    # the row to be inserted
    object: ProjectTagsInsertInput!

    # upsert condition
    onConflict: ProjectTagsOnConflict
  ): ProjectTags

  # insert data into the table: "reaction"
  insertReaction(
    # the rows to be inserted
    objects: [ReactionInsertInput!]!

    # upsert condition
    onConflict: ReactionOnConflict
  ): ReactionMutationResponse

  # insert a single row into the table: "reaction"
  insertReactionOne(
    # the row to be inserted
    object: ReactionInsertInput!

    # upsert condition
    onConflict: ReactionOnConflict
  ): Reaction

  # insert data into the table: "report"
  insertReport(
    # the rows to be inserted
    objects: [ReportInsertInput!]!

    # upsert condition
    onConflict: ReportOnConflict
  ): ReportMutationResponse

  # insert a single row into the table: "report"
  insertReportOne(
    # the row to be inserted
    object: ReportInsertInput!

    # upsert condition
    onConflict: ReportOnConflict
  ): Report

  # insert data into the table: "role"
  insertRole(
    # the rows to be inserted
    objects: [RoleInsertInput!]!

    # upsert condition
    onConflict: RoleOnConflict
  ): RoleMutationResponse

  # insert a single row into the table: "role"
  insertRoleOne(
    # the row to be inserted
    object: RoleInsertInput!

    # upsert condition
    onConflict: RoleOnConflict
  ): Role

  # insert data into the table: "session"
  insertSession(
    # the rows to be inserted
    objects: [SessionInsertInput!]!

    # upsert condition
    onConflict: SessionOnConflict
  ): SessionMutationResponse

  # insert a single row into the table: "session"
  insertSessionOne(
    # the row to be inserted
    object: SessionInsertInput!

    # upsert condition
    onConflict: SessionOnConflict
  ): Session

  # insert data into the table: "shortcut"
  insertShortcut(
    # the rows to be inserted
    objects: [ShortcutInsertInput!]!

    # upsert condition
    onConflict: ShortcutOnConflict
  ): ShortcutMutationResponse

  # insert a single row into the table: "shortcut"
  insertShortcutOne(
    # the row to be inserted
    object: ShortcutInsertInput!

    # upsert condition
    onConflict: ShortcutOnConflict
  ): Shortcut

  # insert data into the table: "social"
  insertSocial(
    # the rows to be inserted
    objects: [SocialInsertInput!]!

    # upsert condition
    onConflict: SocialOnConflict
  ): SocialMutationResponse

  # insert a single row into the table: "social"
  insertSocialOne(
    # the row to be inserted
    object: SocialInsertInput!

    # upsert condition
    onConflict: SocialOnConflict
  ): Social

  # insert data into the table: "subject"
  insertSubject(
    # the rows to be inserted
    objects: [SubjectInsertInput!]!

    # upsert condition
    onConflict: SubjectOnConflict
  ): SubjectMutationResponse

  # insert data into the table: "subject_class_groups"
  insertSubjectClassGroups(
    # the rows to be inserted
    objects: [SubjectClassGroupsInsertInput!]!

    # upsert condition
    onConflict: SubjectClassGroupsOnConflict
  ): SubjectClassGroupsMutationResponse

  # insert a single row into the table: "subject_class_groups"
  insertSubjectClassGroupsOne(
    # the row to be inserted
    object: SubjectClassGroupsInsertInput!

    # upsert condition
    onConflict: SubjectClassGroupsOnConflict
  ): SubjectClassGroups

  # insert a single row into the table: "subject"
  insertSubjectOne(
    # the row to be inserted
    object: SubjectInsertInput!

    # upsert condition
    onConflict: SubjectOnConflict
  ): Subject

  # insert data into the table: "tag"
  insertTag(
    # the rows to be inserted
    objects: [TagInsertInput!]!

    # upsert condition
    onConflict: TagOnConflict
  ): TagMutationResponse

  # insert a single row into the table: "tag"
  insertTagOne(
    # the row to be inserted
    object: TagInsertInput!

    # upsert condition
    onConflict: TagOnConflict
  ): Tag

  # insert data into the table: "team"
  insertTeam(
    # the rows to be inserted
    objects: [TeamInsertInput!]!

    # upsert condition
    onConflict: TeamOnConflict
  ): TeamMutationResponse

  # insert data into the table: "team_events"
  insertTeamEvents(
    # the rows to be inserted
    objects: [TeamEventsInsertInput!]!

    # upsert condition
    onConflict: TeamEventsOnConflict
  ): TeamEventsMutationResponse

  # insert a single row into the table: "team_events"
  insertTeamEventsOne(
    # the row to be inserted
    object: TeamEventsInsertInput!

    # upsert condition
    onConflict: TeamEventsOnConflict
  ): TeamEvents

  # insert data into the table: "team_join"
  insertTeamJoin(
    # the rows to be inserted
    objects: [TeamJoinInsertInput!]!

    # upsert condition
    onConflict: TeamJoinOnConflict
  ): TeamJoinMutationResponse

  # insert a single row into the table: "team_join"
  insertTeamJoinOne(
    # the row to be inserted
    object: TeamJoinInsertInput!

    # upsert condition
    onConflict: TeamJoinOnConflict
  ): TeamJoin

  # insert data into the table: "team_member"
  insertTeamMember(
    # the rows to be inserted
    objects: [TeamMemberInsertInput!]!

    # upsert condition
    onConflict: TeamMemberOnConflict
  ): TeamMemberMutationResponse

  # insert a single row into the table: "team_member"
  insertTeamMemberOne(
    # the row to be inserted
    object: TeamMemberInsertInput!

    # upsert condition
    onConflict: TeamMemberOnConflict
  ): TeamMember

  # insert data into the table: "team_member_roles"
  insertTeamMemberRoles(
    # the rows to be inserted
    objects: [TeamMemberRolesInsertInput!]!

    # upsert condition
    onConflict: TeamMemberRolesOnConflict
  ): TeamMemberRolesMutationResponse

  # insert a single row into the table: "team_member_roles"
  insertTeamMemberRolesOne(
    # the row to be inserted
    object: TeamMemberRolesInsertInput!

    # upsert condition
    onConflict: TeamMemberRolesOnConflict
  ): TeamMemberRoles

  # insert data into the table: "team_metric"
  insertTeamMetric(
    # the rows to be inserted
    objects: [TeamMetricInsertInput!]!

    # upsert condition
    onConflict: TeamMetricOnConflict
  ): TeamMetricMutationResponse

  # insert a single row into the table: "team_metric"
  insertTeamMetricOne(
    # the row to be inserted
    object: TeamMetricInsertInput!

    # upsert condition
    onConflict: TeamMetricOnConflict
  ): TeamMetric

  # insert a single row into the table: "team"
  insertTeamOne(
    # the row to be inserted
    object: TeamInsertInput!

    # upsert condition
    onConflict: TeamOnConflict
  ): Team

  # insert data into the table: "tenant"
  insertTenant(
    # the rows to be inserted
    objects: [TenantInsertInput!]!

    # upsert condition
    onConflict: TenantOnConflict
  ): TenantMutationResponse

  # insert a single row into the table: "tenant"
  insertTenantOne(
    # the row to be inserted
    object: TenantInsertInput!

    # upsert condition
    onConflict: TenantOnConflict
  ): Tenant

  # insert data into the table: "thread"
  insertThread(
    # the rows to be inserted
    objects: [ThreadInsertInput!]!

    # upsert condition
    onConflict: ThreadOnConflict
  ): ThreadMutationResponse

  # insert data into the table: "thread_contributors"
  insertThreadContributors(
    # the rows to be inserted
    objects: [ThreadContributorsInsertInput!]!

    # upsert condition
    onConflict: ThreadContributorsOnConflict
  ): ThreadContributorsMutationResponse

  # insert a single row into the table: "thread_contributors"
  insertThreadContributorsOne(
    # the row to be inserted
    object: ThreadContributorsInsertInput!

    # upsert condition
    onConflict: ThreadContributorsOnConflict
  ): ThreadContributors

  # insert a single row into the table: "thread"
  insertThreadOne(
    # the row to be inserted
    object: ThreadInsertInput!

    # upsert condition
    onConflict: ThreadOnConflict
  ): Thread

  # insert data into the table: "thread_tags"
  insertThreadTags(
    # the rows to be inserted
    objects: [ThreadTagsInsertInput!]!

    # upsert condition
    onConflict: ThreadTagsOnConflict
  ): ThreadTagsMutationResponse

  # insert a single row into the table: "thread_tags"
  insertThreadTagsOne(
    # the row to be inserted
    object: ThreadTagsInsertInput!

    # upsert condition
    onConflict: ThreadTagsOnConflict
  ): ThreadTags

  # insert data into the table: "user_info"
  insertUserInfo(
    # the rows to be inserted
    objects: [UserInfoInsertInput!]!

    # upsert condition
    onConflict: UserInfoOnConflict
  ): UserInfoMutationResponse

  # insert a single row into the table: "user_info"
  insertUserInfoOne(
    # the row to be inserted
    object: UserInfoInsertInput!

    # upsert condition
    onConflict: UserInfoOnConflict
  ): UserInfo

  # insert data into the table: "validation"
  insertValidation(
    # the rows to be inserted
    objects: [ValidationInsertInput!]!

    # upsert condition
    onConflict: ValidationOnConflict
  ): ValidationMutationResponse

  # insert a single row into the table: "validation"
  insertValidationOne(
    # the row to be inserted
    object: ValidationInsertInput!

    # upsert condition
    onConflict: ValidationOnConflict
  ): Validation

  # insert data into the table: "vote"
  insertVote(
    # the rows to be inserted
    objects: [VoteInsertInput!]!

    # upsert condition
    onConflict: VoteOnConflict
  ): VoteMutationResponse

  # insert a single row into the table: "vote"
  insertVoteOne(
    # the row to be inserted
    object: VoteInsertInput!

    # upsert condition
    onConflict: VoteOnConflict
  ): Vote

  # update data of the table: "action"
  updateAction(
    # increments the numeric columns with given value of the filtered values
    _inc: ActionIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActionSetInput

    # filter the rows which have to be updated
    where: ActionBoolExp!
  ): ActionMutationResponse

  # update single row of the table: "action"
  updateActionByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ActionIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActionSetInput
    pkColumns: ActionPkColumnsInput!
  ): Action

  # update multiples rows of table: "action"
  updateActionMany(
    # updates to execute, in order
    updates: [ActionUpdates!]!
  ): [ActionMutationResponse]

  # update data of the table: "actor"
  updateActor(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorSetInput

    # filter the rows which have to be updated
    where: ActorBoolExp!
  ): ActorMutationResponse

  # update data of the table: "actor_address"
  updateActorAddress(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorAddressIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorAddressSetInput

    # filter the rows which have to be updated
    where: ActorAddressBoolExp!
  ): ActorAddressMutationResponse

  # update single row of the table: "actor_address"
  updateActorAddressByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorAddressIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorAddressSetInput
    pkColumns: ActorAddressPkColumnsInput!
  ): ActorAddress

  # update multiples rows of table: "actor_address"
  updateActorAddressMany(
    # updates to execute, in order
    updates: [ActorAddressUpdates!]!
  ): [ActorAddressMutationResponse]

  # update data of the table: "actor_bank_info"
  updateActorBankInfo(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorBankInfoIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorBankInfoSetInput

    # filter the rows which have to be updated
    where: ActorBankInfoBoolExp!
  ): ActorBankInfoMutationResponse

  # update single row of the table: "actor_bank_info"
  updateActorBankInfoByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorBankInfoIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorBankInfoSetInput
    pkColumns: ActorBankInfoPkColumnsInput!
  ): ActorBankInfo

  # update multiples rows of table: "actor_bank_info"
  updateActorBankInfoMany(
    # updates to execute, in order
    updates: [ActorBankInfoUpdates!]!
  ): [ActorBankInfoMutationResponse]

  # update single row of the table: "actor"
  updateActorByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorSetInput
    pkColumns: ActorPkColumnsInput!
  ): Actor

  # update data of the table: "actor_image"
  updateActorImage(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorImageIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorImageSetInput

    # filter the rows which have to be updated
    where: ActorImageBoolExp!
  ): ActorImageMutationResponse

  # update single row of the table: "actor_image"
  updateActorImageByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorImageIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorImageSetInput
    pkColumns: ActorImagePkColumnsInput!
  ): ActorImage

  # update multiples rows of table: "actor_image"
  updateActorImageMany(
    # updates to execute, in order
    updates: [ActorImageUpdates!]!
  ): [ActorImageMutationResponse]

  # update multiples rows of table: "actor"
  updateActorMany(
    # updates to execute, in order
    updates: [ActorUpdates!]!
  ): [ActorMutationResponse]

  # update data of the table: "actor_tags"
  updateActorTags(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorTagsSetInput

    # filter the rows which have to be updated
    where: ActorTagsBoolExp!
  ): ActorTagsMutationResponse

  # update single row of the table: "actor_tags"
  updateActorTagsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ActorTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ActorTagsSetInput
    pkColumns: ActorTagsPkColumnsInput!
  ): ActorTags

  # update multiples rows of table: "actor_tags"
  updateActorTagsMany(
    # updates to execute, in order
    updates: [ActorTagsUpdates!]!
  ): [ActorTagsMutationResponse]

  # update data of the table: "bot_info"
  updateBotInfo(
    # increments the numeric columns with given value of the filtered values
    _inc: BotInfoIncInput

    # sets the columns of the filtered rows to the given values
    _set: BotInfoSetInput

    # filter the rows which have to be updated
    where: BotInfoBoolExp!
  ): BotInfoMutationResponse

  # update single row of the table: "bot_info"
  updateBotInfoByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: BotInfoIncInput

    # sets the columns of the filtered rows to the given values
    _set: BotInfoSetInput
    pkColumns: BotInfoPkColumnsInput!
  ): BotInfo

  # update multiples rows of table: "bot_info"
  updateBotInfoMany(
    # updates to execute, in order
    updates: [BotInfoUpdates!]!
  ): [BotInfoMutationResponse]

  # update data of the table: "campus"
  updateCampus(
    # increments the numeric columns with given value of the filtered values
    _inc: CampusIncInput

    # sets the columns of the filtered rows to the given values
    _set: CampusSetInput

    # filter the rows which have to be updated
    where: CampusBoolExp!
  ): CampusMutationResponse

  # update single row of the table: "campus"
  updateCampusByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: CampusIncInput

    # sets the columns of the filtered rows to the given values
    _set: CampusSetInput
    pkColumns: CampusPkColumnsInput!
  ): Campus

  # update multiples rows of table: "campus"
  updateCampusMany(
    # updates to execute, in order
    updates: [CampusUpdates!]!
  ): [CampusMutationResponse]

  # update data of the table: "canteen"
  updateCanteen(
    # increments the numeric columns with given value of the filtered values
    _inc: CanteenIncInput

    # sets the columns of the filtered rows to the given values
    _set: CanteenSetInput

    # filter the rows which have to be updated
    where: CanteenBoolExp!
  ): CanteenMutationResponse

  # update single row of the table: "canteen"
  updateCanteenByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: CanteenIncInput

    # sets the columns of the filtered rows to the given values
    _set: CanteenSetInput
    pkColumns: CanteenPkColumnsInput!
  ): Canteen

  # update data of the table: "canteen_food"
  updateCanteenFood(
    # increments the numeric columns with given value of the filtered values
    _inc: CanteenFoodIncInput

    # sets the columns of the filtered rows to the given values
    _set: CanteenFoodSetInput

    # filter the rows which have to be updated
    where: CanteenFoodBoolExp!
  ): CanteenFoodMutationResponse

  # update single row of the table: "canteen_food"
  updateCanteenFoodByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: CanteenFoodIncInput

    # sets the columns of the filtered rows to the given values
    _set: CanteenFoodSetInput
    pkColumns: CanteenFoodPkColumnsInput!
  ): CanteenFood

  # update multiples rows of table: "canteen_food"
  updateCanteenFoodMany(
    # updates to execute, in order
    updates: [CanteenFoodUpdates!]!
  ): [CanteenFoodMutationResponse]

  # update multiples rows of table: "canteen"
  updateCanteenMany(
    # updates to execute, in order
    updates: [CanteenUpdates!]!
  ): [CanteenMutationResponse]

  # update data of the table: "canteen_menu"
  updateCanteenMenu(
    # increments the numeric columns with given value of the filtered values
    _inc: CanteenMenuIncInput

    # sets the columns of the filtered rows to the given values
    _set: CanteenMenuSetInput

    # filter the rows which have to be updated
    where: CanteenMenuBoolExp!
  ): CanteenMenuMutationResponse

  # update single row of the table: "canteen_menu"
  updateCanteenMenuByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: CanteenMenuIncInput

    # sets the columns of the filtered rows to the given values
    _set: CanteenMenuSetInput
    pkColumns: CanteenMenuPkColumnsInput!
  ): CanteenMenu

  # update multiples rows of table: "canteen_menu"
  updateCanteenMenuMany(
    # updates to execute, in order
    updates: [CanteenMenuUpdates!]!
  ): [CanteenMenuMutationResponse]

  # update data of the table: "class_group"
  updateClassGroup(
    # increments the numeric columns with given value of the filtered values
    _inc: ClassGroupIncInput

    # sets the columns of the filtered rows to the given values
    _set: ClassGroupSetInput

    # filter the rows which have to be updated
    where: ClassGroupBoolExp!
  ): ClassGroupMutationResponse

  # update single row of the table: "class_group"
  updateClassGroupByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ClassGroupIncInput

    # sets the columns of the filtered rows to the given values
    _set: ClassGroupSetInput
    pkColumns: ClassGroupPkColumnsInput!
  ): ClassGroup

  # update multiples rows of table: "class_group"
  updateClassGroupMany(
    # updates to execute, in order
    updates: [ClassGroupUpdates!]!
  ): [ClassGroupMutationResponse]

  # update data of the table: "class_group_teacher"
  updateClassGroupTeacher(
    # increments the numeric columns with given value of the filtered values
    _inc: ClassGroupTeacherIncInput

    # sets the columns of the filtered rows to the given values
    _set: ClassGroupTeacherSetInput

    # filter the rows which have to be updated
    where: ClassGroupTeacherBoolExp!
  ): ClassGroupTeacherMutationResponse

  # update single row of the table: "class_group_teacher"
  updateClassGroupTeacherByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ClassGroupTeacherIncInput

    # sets the columns of the filtered rows to the given values
    _set: ClassGroupTeacherSetInput
    pkColumns: ClassGroupTeacherPkColumnsInput!
  ): ClassGroupTeacher

  # update multiples rows of table: "class_group_teacher"
  updateClassGroupTeacherMany(
    # updates to execute, in order
    updates: [ClassGroupTeacherUpdates!]!
  ): [ClassGroupTeacherMutationResponse]

  # update data of the table: "class_group_teacher_subjects"
  updateClassGroupTeacherSubjects(
    # increments the numeric columns with given value of the filtered values
    _inc: ClassGroupTeacherSubjectsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ClassGroupTeacherSubjectsSetInput

    # filter the rows which have to be updated
    where: ClassGroupTeacherSubjectsBoolExp!
  ): ClassGroupTeacherSubjectsMutationResponse

  # update single row of the table: "class_group_teacher_subjects"
  updateClassGroupTeacherSubjectsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ClassGroupTeacherSubjectsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ClassGroupTeacherSubjectsSetInput
    pkColumns: ClassGroupTeacherSubjectsPkColumnsInput!
  ): ClassGroupTeacherSubjects

  # update multiples rows of table: "class_group_teacher_subjects"
  updateClassGroupTeacherSubjectsMany(
    # updates to execute, in order
    updates: [ClassGroupTeacherSubjectsUpdates!]!
  ): [ClassGroupTeacherSubjectsMutationResponse]

  # update data of the table: "cohort"
  updateCohort(
    # increments the numeric columns with given value of the filtered values
    _inc: CohortIncInput

    # sets the columns of the filtered rows to the given values
    _set: CohortSetInput

    # filter the rows which have to be updated
    where: CohortBoolExp!
  ): CohortMutationResponse

  # update single row of the table: "cohort"
  updateCohortByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: CohortIncInput

    # sets the columns of the filtered rows to the given values
    _set: CohortSetInput
    pkColumns: CohortPkColumnsInput!
  ): Cohort

  # update multiples rows of table: "cohort"
  updateCohortMany(
    # updates to execute, in order
    updates: [CohortUpdates!]!
  ): [CohortMutationResponse]

  # update data of the table: "content"
  updateContent(
    # increments the numeric columns with given value of the filtered values
    _inc: ContentIncInput

    # sets the columns of the filtered rows to the given values
    _set: ContentSetInput

    # filter the rows which have to be updated
    where: ContentBoolExp!
  ): ContentMutationResponse

  # update data of the table: "content_attachments"
  updateContentAttachments(
    # increments the numeric columns with given value of the filtered values
    _inc: ContentAttachmentsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ContentAttachmentsSetInput

    # filter the rows which have to be updated
    where: ContentAttachmentsBoolExp!
  ): ContentAttachmentsMutationResponse

  # update single row of the table: "content_attachments"
  updateContentAttachmentsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ContentAttachmentsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ContentAttachmentsSetInput
    pkColumns: ContentAttachmentsPkColumnsInput!
  ): ContentAttachments

  # update multiples rows of table: "content_attachments"
  updateContentAttachmentsMany(
    # updates to execute, in order
    updates: [ContentAttachmentsUpdates!]!
  ): [ContentAttachmentsMutationResponse]

  # update single row of the table: "content"
  updateContentByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ContentIncInput

    # sets the columns of the filtered rows to the given values
    _set: ContentSetInput
    pkColumns: ContentPkColumnsInput!
  ): Content

  # update multiples rows of table: "content"
  updateContentMany(
    # updates to execute, in order
    updates: [ContentUpdates!]!
  ): [ContentMutationResponse]

  # update data of the table: "document"
  updateDocument(
    # increments the numeric columns with given value of the filtered values
    _inc: DocumentIncInput

    # sets the columns of the filtered rows to the given values
    _set: DocumentSetInput

    # filter the rows which have to be updated
    where: DocumentBoolExp!
  ): DocumentMutationResponse

  # update single row of the table: "document"
  updateDocumentByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: DocumentIncInput

    # sets the columns of the filtered rows to the given values
    _set: DocumentSetInput
    pkColumns: DocumentPkColumnsInput!
  ): Document

  # update multiples rows of table: "document"
  updateDocumentMany(
    # updates to execute, in order
    updates: [DocumentUpdates!]!
  ): [DocumentMutationResponse]

  # update data of the table: "event"
  updateEvent(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: EventAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: EventDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: EventDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: EventDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: EventIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: EventPrependInput

    # sets the columns of the filtered rows to the given values
    _set: EventSetInput

    # filter the rows which have to be updated
    where: EventBoolExp!
  ): EventMutationResponse

  # update data of the table: "event_approval"
  updateEventApproval(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalSetInput

    # filter the rows which have to be updated
    where: EventApprovalBoolExp!
  ): EventApprovalMutationResponse

  # update single row of the table: "event_approval"
  updateEventApprovalByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalSetInput
    pkColumns: EventApprovalPkColumnsInput!
  ): EventApproval

  # update multiples rows of table: "event_approval"
  updateEventApprovalMany(
    # updates to execute, in order
    updates: [EventApprovalUpdates!]!
  ): [EventApprovalMutationResponse]

  # update data of the table: "event_approval_step"
  updateEventApprovalStep(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalStepIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalStepSetInput

    # filter the rows which have to be updated
    where: EventApprovalStepBoolExp!
  ): EventApprovalStepMutationResponse

  # update single row of the table: "event_approval_step"
  updateEventApprovalStepByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalStepIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalStepSetInput
    pkColumns: EventApprovalStepPkColumnsInput!
  ): EventApprovalStep

  # update multiples rows of table: "event_approval_step"
  updateEventApprovalStepMany(
    # updates to execute, in order
    updates: [EventApprovalStepUpdates!]!
  ): [EventApprovalStepMutationResponse]

  # update data of the table: "event_approval_step_notifiees"
  updateEventApprovalStepNotifiees(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalStepNotifieesIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalStepNotifieesSetInput

    # filter the rows which have to be updated
    where: EventApprovalStepNotifieesBoolExp!
  ): EventApprovalStepNotifieesMutationResponse

  # update single row of the table: "event_approval_step_notifiees"
  updateEventApprovalStepNotifieesByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalStepNotifieesIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalStepNotifieesSetInput
    pkColumns: EventApprovalStepNotifieesPkColumnsInput!
  ): EventApprovalStepNotifiees

  # update multiples rows of table: "event_approval_step_notifiees"
  updateEventApprovalStepNotifieesMany(
    # updates to execute, in order
    updates: [EventApprovalStepNotifieesUpdates!]!
  ): [EventApprovalStepNotifieesMutationResponse]

  # update data of the table: "event_approval_step_validators"
  updateEventApprovalStepValidators(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalStepValidatorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalStepValidatorsSetInput

    # filter the rows which have to be updated
    where: EventApprovalStepValidatorsBoolExp!
  ): EventApprovalStepValidatorsMutationResponse

  # update single row of the table: "event_approval_step_validators"
  updateEventApprovalStepValidatorsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventApprovalStepValidatorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventApprovalStepValidatorsSetInput
    pkColumns: EventApprovalStepValidatorsPkColumnsInput!
  ): EventApprovalStepValidators

  # update multiples rows of table: "event_approval_step_validators"
  updateEventApprovalStepValidatorsMany(
    # updates to execute, in order
    updates: [EventApprovalStepValidatorsUpdates!]!
  ): [EventApprovalStepValidatorsMutationResponse]

  # update single row of the table: "event"
  updateEventByPk(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: EventAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: EventDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: EventDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: EventDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: EventIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: EventPrependInput

    # sets the columns of the filtered rows to the given values
    _set: EventSetInput
    pkColumns: EventPkColumnsInput!
  ): Event

  # update data of the table: "event_join"
  updateEventJoin(
    # increments the numeric columns with given value of the filtered values
    _inc: EventJoinIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventJoinSetInput

    # filter the rows which have to be updated
    where: EventJoinBoolExp!
  ): EventJoinMutationResponse

  # update single row of the table: "event_join"
  updateEventJoinByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventJoinIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventJoinSetInput
    pkColumns: EventJoinPkColumnsInput!
  ): EventJoin

  # update multiples rows of table: "event_join"
  updateEventJoinMany(
    # updates to execute, in order
    updates: [EventJoinUpdates!]!
  ): [EventJoinMutationResponse]

  # update data of the table: "event_manage"
  updateEventManage(
    # increments the numeric columns with given value of the filtered values
    _inc: EventManageIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventManageSetInput

    # filter the rows which have to be updated
    where: EventManageBoolExp!
  ): EventManageMutationResponse

  # update single row of the table: "event_manage"
  updateEventManageByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventManageIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventManageSetInput
    pkColumns: EventManagePkColumnsInput!
  ): EventManage

  # update multiples rows of table: "event_manage"
  updateEventManageMany(
    # updates to execute, in order
    updates: [EventManageUpdates!]!
  ): [EventManageMutationResponse]

  # update multiples rows of table: "event"
  updateEventMany(
    # updates to execute, in order
    updates: [EventUpdates!]!
  ): [EventMutationResponse]

  # update data of the table: "event_supervisors"
  updateEventSupervisors(
    # increments the numeric columns with given value of the filtered values
    _inc: EventSupervisorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventSupervisorsSetInput

    # filter the rows which have to be updated
    where: EventSupervisorsBoolExp!
  ): EventSupervisorsMutationResponse

  # update single row of the table: "event_supervisors"
  updateEventSupervisorsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventSupervisorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventSupervisorsSetInput
    pkColumns: EventSupervisorsPkColumnsInput!
  ): EventSupervisors

  # update multiples rows of table: "event_supervisors"
  updateEventSupervisorsMany(
    # updates to execute, in order
    updates: [EventSupervisorsUpdates!]!
  ): [EventSupervisorsMutationResponse]

  # update data of the table: "event_tags"
  updateEventTags(
    # increments the numeric columns with given value of the filtered values
    _inc: EventTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventTagsSetInput

    # filter the rows which have to be updated
    where: EventTagsBoolExp!
  ): EventTagsMutationResponse

  # update single row of the table: "event_tags"
  updateEventTagsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: EventTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: EventTagsSetInput
    pkColumns: EventTagsPkColumnsInput!
  ): EventTags

  # update multiples rows of table: "event_tags"
  updateEventTagsMany(
    # updates to execute, in order
    updates: [EventTagsUpdates!]!
  ): [EventTagsMutationResponse]

  # update data of the table: "expense"
  updateExpense(
    # increments the numeric columns with given value of the filtered values
    _inc: ExpenseIncInput

    # sets the columns of the filtered rows to the given values
    _set: ExpenseSetInput

    # filter the rows which have to be updated
    where: ExpenseBoolExp!
  ): ExpenseMutationResponse

  # update single row of the table: "expense"
  updateExpenseByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ExpenseIncInput

    # sets the columns of the filtered rows to the given values
    _set: ExpenseSetInput
    pkColumns: ExpensePkColumnsInput!
  ): Expense

  # update data of the table: "expense_item"
  updateExpenseItem(
    # increments the numeric columns with given value of the filtered values
    _inc: ExpenseItemIncInput

    # sets the columns of the filtered rows to the given values
    _set: ExpenseItemSetInput

    # filter the rows which have to be updated
    where: ExpenseItemBoolExp!
  ): ExpenseItemMutationResponse

  # update data of the table: "expense_item_attachments"
  updateExpenseItemAttachments(
    # increments the numeric columns with given value of the filtered values
    _inc: ExpenseItemAttachmentsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ExpenseItemAttachmentsSetInput

    # filter the rows which have to be updated
    where: ExpenseItemAttachmentsBoolExp!
  ): ExpenseItemAttachmentsMutationResponse

  # update single row of the table: "expense_item_attachments"
  updateExpenseItemAttachmentsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ExpenseItemAttachmentsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ExpenseItemAttachmentsSetInput
    pkColumns: ExpenseItemAttachmentsPkColumnsInput!
  ): ExpenseItemAttachments

  # update multiples rows of table: "expense_item_attachments"
  updateExpenseItemAttachmentsMany(
    # updates to execute, in order
    updates: [ExpenseItemAttachmentsUpdates!]!
  ): [ExpenseItemAttachmentsMutationResponse]

  # update single row of the table: "expense_item"
  updateExpenseItemByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ExpenseItemIncInput

    # sets the columns of the filtered rows to the given values
    _set: ExpenseItemSetInput
    pkColumns: ExpenseItemPkColumnsInput!
  ): ExpenseItem

  # update multiples rows of table: "expense_item"
  updateExpenseItemMany(
    # updates to execute, in order
    updates: [ExpenseItemUpdates!]!
  ): [ExpenseItemMutationResponse]

  # update multiples rows of table: "expense"
  updateExpenseMany(
    # updates to execute, in order
    updates: [ExpenseUpdates!]!
  ): [ExpenseMutationResponse]

  # update data of the table: "favorite"
  updateFavorite(
    # increments the numeric columns with given value of the filtered values
    _inc: FavoriteIncInput

    # sets the columns of the filtered rows to the given values
    _set: FavoriteSetInput

    # filter the rows which have to be updated
    where: FavoriteBoolExp!
  ): FavoriteMutationResponse

  # update single row of the table: "favorite"
  updateFavoriteByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: FavoriteIncInput

    # sets the columns of the filtered rows to the given values
    _set: FavoriteSetInput
    pkColumns: FavoritePkColumnsInput!
  ): Favorite

  # update multiples rows of table: "favorite"
  updateFavoriteMany(
    # updates to execute, in order
    updates: [FavoriteUpdates!]!
  ): [FavoriteMutationResponse]

  # update data of the table: "file_upload"
  updateFileUpload(
    # increments the numeric columns with given value of the filtered values
    _inc: FileUploadIncInput

    # sets the columns of the filtered rows to the given values
    _set: FileUploadSetInput

    # filter the rows which have to be updated
    where: FileUploadBoolExp!
  ): FileUploadMutationResponse

  # update single row of the table: "file_upload"
  updateFileUploadByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: FileUploadIncInput

    # sets the columns of the filtered rows to the given values
    _set: FileUploadSetInput
    pkColumns: FileUploadPkColumnsInput!
  ): FileUpload

  # update multiples rows of table: "file_upload"
  updateFileUploadMany(
    # updates to execute, in order
    updates: [FileUploadUpdates!]!
  ): [FileUploadMutationResponse]

  # update data of the table: "finance"
  updateFinance(
    # increments the numeric columns with given value of the filtered values
    _inc: FinanceIncInput

    # sets the columns of the filtered rows to the given values
    _set: FinanceSetInput

    # filter the rows which have to be updated
    where: FinanceBoolExp!
  ): FinanceMutationResponse

  # update data of the table: "finance_attachments"
  updateFinanceAttachments(
    # increments the numeric columns with given value of the filtered values
    _inc: FinanceAttachmentsIncInput

    # sets the columns of the filtered rows to the given values
    _set: FinanceAttachmentsSetInput

    # filter the rows which have to be updated
    where: FinanceAttachmentsBoolExp!
  ): FinanceAttachmentsMutationResponse

  # update single row of the table: "finance_attachments"
  updateFinanceAttachmentsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: FinanceAttachmentsIncInput

    # sets the columns of the filtered rows to the given values
    _set: FinanceAttachmentsSetInput
    pkColumns: FinanceAttachmentsPkColumnsInput!
  ): FinanceAttachments

  # update multiples rows of table: "finance_attachments"
  updateFinanceAttachmentsMany(
    # updates to execute, in order
    updates: [FinanceAttachmentsUpdates!]!
  ): [FinanceAttachmentsMutationResponse]

  # update single row of the table: "finance"
  updateFinanceByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: FinanceIncInput

    # sets the columns of the filtered rows to the given values
    _set: FinanceSetInput
    pkColumns: FinancePkColumnsInput!
  ): Finance

  # update multiples rows of table: "finance"
  updateFinanceMany(
    # updates to execute, in order
    updates: [FinanceUpdates!]!
  ): [FinanceMutationResponse]

  # update data of the table: "follow"
  updateFollow(
    # increments the numeric columns with given value of the filtered values
    _inc: FollowIncInput

    # sets the columns of the filtered rows to the given values
    _set: FollowSetInput

    # filter the rows which have to be updated
    where: FollowBoolExp!
  ): FollowMutationResponse

  # update single row of the table: "follow"
  updateFollowByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: FollowIncInput

    # sets the columns of the filtered rows to the given values
    _set: FollowSetInput
    pkColumns: FollowPkColumnsInput!
  ): Follow

  # update multiples rows of table: "follow"
  updateFollowMany(
    # updates to execute, in order
    updates: [FollowUpdates!]!
  ): [FollowMutationResponse]

  # update data of the table: "form"
  updateForm(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: FormAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: FormDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: FormDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: FormDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: FormIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: FormPrependInput

    # sets the columns of the filtered rows to the given values
    _set: FormSetInput

    # filter the rows which have to be updated
    where: FormBoolExp!
  ): FormMutationResponse

  # update single row of the table: "form"
  updateFormByPk(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: FormAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: FormDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: FormDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: FormDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: FormIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: FormPrependInput

    # sets the columns of the filtered rows to the given values
    _set: FormSetInput
    pkColumns: FormPkColumnsInput!
  ): Form

  # update multiples rows of table: "form"
  updateFormMany(
    # updates to execute, in order
    updates: [FormUpdates!]!
  ): [FormMutationResponse]

  # update data of the table: "form_submission"
  updateFormSubmission(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: FormSubmissionAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: FormSubmissionDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: FormSubmissionDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: FormSubmissionDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: FormSubmissionIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: FormSubmissionPrependInput

    # sets the columns of the filtered rows to the given values
    _set: FormSubmissionSetInput

    # filter the rows which have to be updated
    where: FormSubmissionBoolExp!
  ): FormSubmissionMutationResponse

  # update single row of the table: "form_submission"
  updateFormSubmissionByPk(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: FormSubmissionAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: FormSubmissionDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: FormSubmissionDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: FormSubmissionDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: FormSubmissionIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: FormSubmissionPrependInput

    # sets the columns of the filtered rows to the given values
    _set: FormSubmissionSetInput
    pkColumns: FormSubmissionPkColumnsInput!
  ): FormSubmission

  # update multiples rows of table: "form_submission"
  updateFormSubmissionMany(
    # updates to execute, in order
    updates: [FormSubmissionUpdates!]!
  ): [FormSubmissionMutationResponse]

  # update data of the table: "individual"
  updateIndividual(
    # increments the numeric columns with given value of the filtered values
    _inc: IndividualIncInput

    # sets the columns of the filtered rows to the given values
    _set: IndividualSetInput

    # filter the rows which have to be updated
    where: IndividualBoolExp!
  ): IndividualMutationResponse

  # update single row of the table: "individual"
  updateIndividualByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: IndividualIncInput

    # sets the columns of the filtered rows to the given values
    _set: IndividualSetInput
    pkColumns: IndividualPkColumnsInput!
  ): Individual

  # update multiples rows of table: "individual"
  updateIndividualMany(
    # updates to execute, in order
    updates: [IndividualUpdates!]!
  ): [IndividualMutationResponse]

  # update data of the table: "issue"
  updateIssue(
    # increments the numeric columns with given value of the filtered values
    _inc: IssueIncInput

    # sets the columns of the filtered rows to the given values
    _set: IssueSetInput

    # filter the rows which have to be updated
    where: IssueBoolExp!
  ): IssueMutationResponse

  # update single row of the table: "issue"
  updateIssueByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: IssueIncInput

    # sets the columns of the filtered rows to the given values
    _set: IssueSetInput
    pkColumns: IssuePkColumnsInput!
  ): Issue

  # update data of the table: "issue_contributors"
  updateIssueContributors(
    # increments the numeric columns with given value of the filtered values
    _inc: IssueContributorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: IssueContributorsSetInput

    # filter the rows which have to be updated
    where: IssueContributorsBoolExp!
  ): IssueContributorsMutationResponse

  # update single row of the table: "issue_contributors"
  updateIssueContributorsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: IssueContributorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: IssueContributorsSetInput
    pkColumns: IssueContributorsPkColumnsInput!
  ): IssueContributors

  # update multiples rows of table: "issue_contributors"
  updateIssueContributorsMany(
    # updates to execute, in order
    updates: [IssueContributorsUpdates!]!
  ): [IssueContributorsMutationResponse]

  # update multiples rows of table: "issue"
  updateIssueMany(
    # updates to execute, in order
    updates: [IssueUpdates!]!
  ): [IssueMutationResponse]

  # update data of the table: "issue_tags"
  updateIssueTags(
    # increments the numeric columns with given value of the filtered values
    _inc: IssueTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: IssueTagsSetInput

    # filter the rows which have to be updated
    where: IssueTagsBoolExp!
  ): IssueTagsMutationResponse

  # update single row of the table: "issue_tags"
  updateIssueTagsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: IssueTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: IssueTagsSetInput
    pkColumns: IssueTagsPkColumnsInput!
  ): IssueTags

  # update multiples rows of table: "issue_tags"
  updateIssueTagsMany(
    # updates to execute, in order
    updates: [IssueTagsUpdates!]!
  ): [IssueTagsMutationResponse]

  # update data of the table: "legal_unit"
  updateLegalUnit(
    # increments the numeric columns with given value of the filtered values
    _inc: LegalUnitIncInput

    # sets the columns of the filtered rows to the given values
    _set: LegalUnitSetInput

    # filter the rows which have to be updated
    where: LegalUnitBoolExp!
  ): LegalUnitMutationResponse

  # update single row of the table: "legal_unit"
  updateLegalUnitByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: LegalUnitIncInput

    # sets the columns of the filtered rows to the given values
    _set: LegalUnitSetInput
    pkColumns: LegalUnitPkColumnsInput!
  ): LegalUnit

  # update multiples rows of table: "legal_unit"
  updateLegalUnitMany(
    # updates to execute, in order
    updates: [LegalUnitUpdates!]!
  ): [LegalUnitMutationResponse]

  # update data of the table: "mission"
  updateMission(
    # increments the numeric columns with given value of the filtered values
    _inc: MissionIncInput

    # sets the columns of the filtered rows to the given values
    _set: MissionSetInput

    # filter the rows which have to be updated
    where: MissionBoolExp!
  ): MissionMutationResponse

  # update single row of the table: "mission"
  updateMissionByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: MissionIncInput

    # sets the columns of the filtered rows to the given values
    _set: MissionSetInput
    pkColumns: MissionPkColumnsInput!
  ): Mission

  # update data of the table: "mission_join"
  updateMissionJoin(
    # increments the numeric columns with given value of the filtered values
    _inc: MissionJoinIncInput

    # sets the columns of the filtered rows to the given values
    _set: MissionJoinSetInput

    # filter the rows which have to be updated
    where: MissionJoinBoolExp!
  ): MissionJoinMutationResponse

  # update single row of the table: "mission_join"
  updateMissionJoinByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: MissionJoinIncInput

    # sets the columns of the filtered rows to the given values
    _set: MissionJoinSetInput
    pkColumns: MissionJoinPkColumnsInput!
  ): MissionJoin

  # update multiples rows of table: "mission_join"
  updateMissionJoinMany(
    # updates to execute, in order
    updates: [MissionJoinUpdates!]!
  ): [MissionJoinMutationResponse]

  # update multiples rows of table: "mission"
  updateMissionMany(
    # updates to execute, in order
    updates: [MissionUpdates!]!
  ): [MissionMutationResponse]

  # update data of the table: "pole"
  updatePole(
    # increments the numeric columns with given value of the filtered values
    _inc: PoleIncInput

    # sets the columns of the filtered rows to the given values
    _set: PoleSetInput

    # filter the rows which have to be updated
    where: PoleBoolExp!
  ): PoleMutationResponse

  # update single row of the table: "pole"
  updatePoleByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: PoleIncInput

    # sets the columns of the filtered rows to the given values
    _set: PoleSetInput
    pkColumns: PolePkColumnsInput!
  ): Pole

  # update multiples rows of table: "pole"
  updatePoleMany(
    # updates to execute, in order
    updates: [PoleUpdates!]!
  ): [PoleMutationResponse]

  # update data of the table: "project"
  updateProject(
    # increments the numeric columns with given value of the filtered values
    _inc: ProjectIncInput

    # sets the columns of the filtered rows to the given values
    _set: ProjectSetInput

    # filter the rows which have to be updated
    where: ProjectBoolExp!
  ): ProjectMutationResponse

  # update single row of the table: "project"
  updateProjectByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ProjectIncInput

    # sets the columns of the filtered rows to the given values
    _set: ProjectSetInput
    pkColumns: ProjectPkColumnsInput!
  ): Project

  # update multiples rows of table: "project"
  updateProjectMany(
    # updates to execute, in order
    updates: [ProjectUpdates!]!
  ): [ProjectMutationResponse]

  # update data of the table: "project_supervisors"
  updateProjectSupervisors(
    # increments the numeric columns with given value of the filtered values
    _inc: ProjectSupervisorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ProjectSupervisorsSetInput

    # filter the rows which have to be updated
    where: ProjectSupervisorsBoolExp!
  ): ProjectSupervisorsMutationResponse

  # update single row of the table: "project_supervisors"
  updateProjectSupervisorsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ProjectSupervisorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ProjectSupervisorsSetInput
    pkColumns: ProjectSupervisorsPkColumnsInput!
  ): ProjectSupervisors

  # update multiples rows of table: "project_supervisors"
  updateProjectSupervisorsMany(
    # updates to execute, in order
    updates: [ProjectSupervisorsUpdates!]!
  ): [ProjectSupervisorsMutationResponse]

  # update data of the table: "project_tags"
  updateProjectTags(
    # increments the numeric columns with given value of the filtered values
    _inc: ProjectTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ProjectTagsSetInput

    # filter the rows which have to be updated
    where: ProjectTagsBoolExp!
  ): ProjectTagsMutationResponse

  # update single row of the table: "project_tags"
  updateProjectTagsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ProjectTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ProjectTagsSetInput
    pkColumns: ProjectTagsPkColumnsInput!
  ): ProjectTags

  # update multiples rows of table: "project_tags"
  updateProjectTagsMany(
    # updates to execute, in order
    updates: [ProjectTagsUpdates!]!
  ): [ProjectTagsMutationResponse]

  # update data of the table: "reaction"
  updateReaction(
    # increments the numeric columns with given value of the filtered values
    _inc: ReactionIncInput

    # sets the columns of the filtered rows to the given values
    _set: ReactionSetInput

    # filter the rows which have to be updated
    where: ReactionBoolExp!
  ): ReactionMutationResponse

  # update single row of the table: "reaction"
  updateReactionByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ReactionIncInput

    # sets the columns of the filtered rows to the given values
    _set: ReactionSetInput
    pkColumns: ReactionPkColumnsInput!
  ): Reaction

  # update multiples rows of table: "reaction"
  updateReactionMany(
    # updates to execute, in order
    updates: [ReactionUpdates!]!
  ): [ReactionMutationResponse]

  # update data of the table: "report"
  updateReport(
    # increments the numeric columns with given value of the filtered values
    _inc: ReportIncInput

    # sets the columns of the filtered rows to the given values
    _set: ReportSetInput

    # filter the rows which have to be updated
    where: ReportBoolExp!
  ): ReportMutationResponse

  # update single row of the table: "report"
  updateReportByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ReportIncInput

    # sets the columns of the filtered rows to the given values
    _set: ReportSetInput
    pkColumns: ReportPkColumnsInput!
  ): Report

  # update multiples rows of table: "report"
  updateReportMany(
    # updates to execute, in order
    updates: [ReportUpdates!]!
  ): [ReportMutationResponse]

  # update data of the table: "role"
  updateRole(
    # increments the numeric columns with given value of the filtered values
    _inc: RoleIncInput

    # sets the columns of the filtered rows to the given values
    _set: RoleSetInput

    # filter the rows which have to be updated
    where: RoleBoolExp!
  ): RoleMutationResponse

  # update single row of the table: "role"
  updateRoleByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: RoleIncInput

    # sets the columns of the filtered rows to the given values
    _set: RoleSetInput
    pkColumns: RolePkColumnsInput!
  ): Role

  # update multiples rows of table: "role"
  updateRoleMany(
    # updates to execute, in order
    updates: [RoleUpdates!]!
  ): [RoleMutationResponse]

  # update data of the table: "session"
  updateSession(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: SessionAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: SessionDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: SessionDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: SessionDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: SessionIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: SessionPrependInput

    # sets the columns of the filtered rows to the given values
    _set: SessionSetInput

    # filter the rows which have to be updated
    where: SessionBoolExp!
  ): SessionMutationResponse

  # update single row of the table: "session"
  updateSessionByPk(
    # append existing jsonb value of filtered columns with new jsonb value
    _append: SessionAppendInput

    # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    _deleteAtPath: SessionDeleteAtPathInput

    # delete the array element with specified index (negative integers count from
    # the end). throws an error if top level container is not an array
    _deleteElem: SessionDeleteElemInput

    # delete key/value pair or string element. key/value pairs are matched based on their key value
    _deleteKey: SessionDeleteKeyInput

    # increments the numeric columns with given value of the filtered values
    _inc: SessionIncInput

    # prepend existing jsonb value of filtered columns with new jsonb value
    _prepend: SessionPrependInput

    # sets the columns of the filtered rows to the given values
    _set: SessionSetInput
    pkColumns: SessionPkColumnsInput!
  ): Session

  # update multiples rows of table: "session"
  updateSessionMany(
    # updates to execute, in order
    updates: [SessionUpdates!]!
  ): [SessionMutationResponse]

  # update data of the table: "shortcut"
  updateShortcut(
    # increments the numeric columns with given value of the filtered values
    _inc: ShortcutIncInput

    # sets the columns of the filtered rows to the given values
    _set: ShortcutSetInput

    # filter the rows which have to be updated
    where: ShortcutBoolExp!
  ): ShortcutMutationResponse

  # update single row of the table: "shortcut"
  updateShortcutByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ShortcutIncInput

    # sets the columns of the filtered rows to the given values
    _set: ShortcutSetInput
    pkColumns: ShortcutPkColumnsInput!
  ): Shortcut

  # update multiples rows of table: "shortcut"
  updateShortcutMany(
    # updates to execute, in order
    updates: [ShortcutUpdates!]!
  ): [ShortcutMutationResponse]

  # update data of the table: "social"
  updateSocial(
    # increments the numeric columns with given value of the filtered values
    _inc: SocialIncInput

    # sets the columns of the filtered rows to the given values
    _set: SocialSetInput

    # filter the rows which have to be updated
    where: SocialBoolExp!
  ): SocialMutationResponse

  # update single row of the table: "social"
  updateSocialByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: SocialIncInput

    # sets the columns of the filtered rows to the given values
    _set: SocialSetInput
    pkColumns: SocialPkColumnsInput!
  ): Social

  # update multiples rows of table: "social"
  updateSocialMany(
    # updates to execute, in order
    updates: [SocialUpdates!]!
  ): [SocialMutationResponse]

  # update data of the table: "subject"
  updateSubject(
    # increments the numeric columns with given value of the filtered values
    _inc: SubjectIncInput

    # sets the columns of the filtered rows to the given values
    _set: SubjectSetInput

    # filter the rows which have to be updated
    where: SubjectBoolExp!
  ): SubjectMutationResponse

  # update single row of the table: "subject"
  updateSubjectByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: SubjectIncInput

    # sets the columns of the filtered rows to the given values
    _set: SubjectSetInput
    pkColumns: SubjectPkColumnsInput!
  ): Subject

  # update data of the table: "subject_class_groups"
  updateSubjectClassGroups(
    # increments the numeric columns with given value of the filtered values
    _inc: SubjectClassGroupsIncInput

    # sets the columns of the filtered rows to the given values
    _set: SubjectClassGroupsSetInput

    # filter the rows which have to be updated
    where: SubjectClassGroupsBoolExp!
  ): SubjectClassGroupsMutationResponse

  # update single row of the table: "subject_class_groups"
  updateSubjectClassGroupsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: SubjectClassGroupsIncInput

    # sets the columns of the filtered rows to the given values
    _set: SubjectClassGroupsSetInput
    pkColumns: SubjectClassGroupsPkColumnsInput!
  ): SubjectClassGroups

  # update multiples rows of table: "subject_class_groups"
  updateSubjectClassGroupsMany(
    # updates to execute, in order
    updates: [SubjectClassGroupsUpdates!]!
  ): [SubjectClassGroupsMutationResponse]

  # update multiples rows of table: "subject"
  updateSubjectMany(
    # updates to execute, in order
    updates: [SubjectUpdates!]!
  ): [SubjectMutationResponse]

  # update data of the table: "tag"
  updateTag(
    # increments the numeric columns with given value of the filtered values
    _inc: TagIncInput

    # sets the columns of the filtered rows to the given values
    _set: TagSetInput

    # filter the rows which have to be updated
    where: TagBoolExp!
  ): TagMutationResponse

  # update single row of the table: "tag"
  updateTagByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TagIncInput

    # sets the columns of the filtered rows to the given values
    _set: TagSetInput
    pkColumns: TagPkColumnsInput!
  ): Tag

  # update multiples rows of table: "tag"
  updateTagMany(
    # updates to execute, in order
    updates: [TagUpdates!]!
  ): [TagMutationResponse]

  # update data of the table: "team"
  updateTeam(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamSetInput

    # filter the rows which have to be updated
    where: TeamBoolExp!
  ): TeamMutationResponse

  # update single row of the table: "team"
  updateTeamByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamSetInput
    pkColumns: TeamPkColumnsInput!
  ): Team

  # update data of the table: "team_events"
  updateTeamEvents(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamEventsIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamEventsSetInput

    # filter the rows which have to be updated
    where: TeamEventsBoolExp!
  ): TeamEventsMutationResponse

  # update single row of the table: "team_events"
  updateTeamEventsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamEventsIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamEventsSetInput
    pkColumns: TeamEventsPkColumnsInput!
  ): TeamEvents

  # update multiples rows of table: "team_events"
  updateTeamEventsMany(
    # updates to execute, in order
    updates: [TeamEventsUpdates!]!
  ): [TeamEventsMutationResponse]

  # update data of the table: "team_join"
  updateTeamJoin(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamJoinIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamJoinSetInput

    # filter the rows which have to be updated
    where: TeamJoinBoolExp!
  ): TeamJoinMutationResponse

  # update single row of the table: "team_join"
  updateTeamJoinByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamJoinIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamJoinSetInput
    pkColumns: TeamJoinPkColumnsInput!
  ): TeamJoin

  # update multiples rows of table: "team_join"
  updateTeamJoinMany(
    # updates to execute, in order
    updates: [TeamJoinUpdates!]!
  ): [TeamJoinMutationResponse]

  # update multiples rows of table: "team"
  updateTeamMany(
    # updates to execute, in order
    updates: [TeamUpdates!]!
  ): [TeamMutationResponse]

  # update data of the table: "team_member"
  updateTeamMember(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamMemberIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamMemberSetInput

    # filter the rows which have to be updated
    where: TeamMemberBoolExp!
  ): TeamMemberMutationResponse

  # update single row of the table: "team_member"
  updateTeamMemberByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamMemberIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamMemberSetInput
    pkColumns: TeamMemberPkColumnsInput!
  ): TeamMember

  # update multiples rows of table: "team_member"
  updateTeamMemberMany(
    # updates to execute, in order
    updates: [TeamMemberUpdates!]!
  ): [TeamMemberMutationResponse]

  # update data of the table: "team_member_roles"
  updateTeamMemberRoles(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamMemberRolesIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamMemberRolesSetInput

    # filter the rows which have to be updated
    where: TeamMemberRolesBoolExp!
  ): TeamMemberRolesMutationResponse

  # update single row of the table: "team_member_roles"
  updateTeamMemberRolesByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamMemberRolesIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamMemberRolesSetInput
    pkColumns: TeamMemberRolesPkColumnsInput!
  ): TeamMemberRoles

  # update multiples rows of table: "team_member_roles"
  updateTeamMemberRolesMany(
    # updates to execute, in order
    updates: [TeamMemberRolesUpdates!]!
  ): [TeamMemberRolesMutationResponse]

  # update data of the table: "team_metric"
  updateTeamMetric(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamMetricIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamMetricSetInput

    # filter the rows which have to be updated
    where: TeamMetricBoolExp!
  ): TeamMetricMutationResponse

  # update single row of the table: "team_metric"
  updateTeamMetricByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TeamMetricIncInput

    # sets the columns of the filtered rows to the given values
    _set: TeamMetricSetInput
    pkColumns: TeamMetricPkColumnsInput!
  ): TeamMetric

  # update multiples rows of table: "team_metric"
  updateTeamMetricMany(
    # updates to execute, in order
    updates: [TeamMetricUpdates!]!
  ): [TeamMetricMutationResponse]

  # update data of the table: "tenant"
  updateTenant(
    # increments the numeric columns with given value of the filtered values
    _inc: TenantIncInput

    # sets the columns of the filtered rows to the given values
    _set: TenantSetInput

    # filter the rows which have to be updated
    where: TenantBoolExp!
  ): TenantMutationResponse

  # update single row of the table: "tenant"
  updateTenantByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: TenantIncInput

    # sets the columns of the filtered rows to the given values
    _set: TenantSetInput
    pkColumns: TenantPkColumnsInput!
  ): Tenant

  # update multiples rows of table: "tenant"
  updateTenantMany(
    # updates to execute, in order
    updates: [TenantUpdates!]!
  ): [TenantMutationResponse]

  # update data of the table: "thread"
  updateThread(
    # increments the numeric columns with given value of the filtered values
    _inc: ThreadIncInput

    # sets the columns of the filtered rows to the given values
    _set: ThreadSetInput

    # filter the rows which have to be updated
    where: ThreadBoolExp!
  ): ThreadMutationResponse

  # update single row of the table: "thread"
  updateThreadByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ThreadIncInput

    # sets the columns of the filtered rows to the given values
    _set: ThreadSetInput
    pkColumns: ThreadPkColumnsInput!
  ): Thread

  # update data of the table: "thread_contributors"
  updateThreadContributors(
    # increments the numeric columns with given value of the filtered values
    _inc: ThreadContributorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ThreadContributorsSetInput

    # filter the rows which have to be updated
    where: ThreadContributorsBoolExp!
  ): ThreadContributorsMutationResponse

  # update single row of the table: "thread_contributors"
  updateThreadContributorsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ThreadContributorsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ThreadContributorsSetInput
    pkColumns: ThreadContributorsPkColumnsInput!
  ): ThreadContributors

  # update multiples rows of table: "thread_contributors"
  updateThreadContributorsMany(
    # updates to execute, in order
    updates: [ThreadContributorsUpdates!]!
  ): [ThreadContributorsMutationResponse]

  # update multiples rows of table: "thread"
  updateThreadMany(
    # updates to execute, in order
    updates: [ThreadUpdates!]!
  ): [ThreadMutationResponse]

  # update data of the table: "thread_tags"
  updateThreadTags(
    # increments the numeric columns with given value of the filtered values
    _inc: ThreadTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ThreadTagsSetInput

    # filter the rows which have to be updated
    where: ThreadTagsBoolExp!
  ): ThreadTagsMutationResponse

  # update single row of the table: "thread_tags"
  updateThreadTagsByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ThreadTagsIncInput

    # sets the columns of the filtered rows to the given values
    _set: ThreadTagsSetInput
    pkColumns: ThreadTagsPkColumnsInput!
  ): ThreadTags

  # update multiples rows of table: "thread_tags"
  updateThreadTagsMany(
    # updates to execute, in order
    updates: [ThreadTagsUpdates!]!
  ): [ThreadTagsMutationResponse]

  # update data of the table: "user_info"
  updateUserInfo(
    # increments the numeric columns with given value of the filtered values
    _inc: UserInfoIncInput

    # sets the columns of the filtered rows to the given values
    _set: UserInfoSetInput

    # filter the rows which have to be updated
    where: UserInfoBoolExp!
  ): UserInfoMutationResponse

  # update single row of the table: "user_info"
  updateUserInfoByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: UserInfoIncInput

    # sets the columns of the filtered rows to the given values
    _set: UserInfoSetInput
    pkColumns: UserInfoPkColumnsInput!
  ): UserInfo

  # update multiples rows of table: "user_info"
  updateUserInfoMany(
    # updates to execute, in order
    updates: [UserInfoUpdates!]!
  ): [UserInfoMutationResponse]

  # update data of the table: "validation"
  updateValidation(
    # increments the numeric columns with given value of the filtered values
    _inc: ValidationIncInput

    # sets the columns of the filtered rows to the given values
    _set: ValidationSetInput

    # filter the rows which have to be updated
    where: ValidationBoolExp!
  ): ValidationMutationResponse

  # update single row of the table: "validation"
  updateValidationByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: ValidationIncInput

    # sets the columns of the filtered rows to the given values
    _set: ValidationSetInput
    pkColumns: ValidationPkColumnsInput!
  ): Validation

  # update multiples rows of table: "validation"
  updateValidationMany(
    # updates to execute, in order
    updates: [ValidationUpdates!]!
  ): [ValidationMutationResponse]

  # update data of the table: "vote"
  updateVote(
    # increments the numeric columns with given value of the filtered values
    _inc: VoteIncInput

    # sets the columns of the filtered rows to the given values
    _set: VoteSetInput

    # filter the rows which have to be updated
    where: VoteBoolExp!
  ): VoteMutationResponse

  # update single row of the table: "vote"
  updateVoteByPk(
    # increments the numeric columns with given value of the filtered values
    _inc: VoteIncInput

    # sets the columns of the filtered rows to the given values
    _set: VoteSetInput
    pkColumns: VotePkColumnsInput!
  ): Vote

  # update multiples rows of table: "vote"
  updateVoteMany(
    # updates to execute, in order
    updates: [VoteUpdates!]!
  ): [VoteMutationResponse]
}

# column ordering options
enum OrderBy {
  # in ascending order, nulls last
  ASC

  # in ascending order, nulls first
  ASC_NULLS_FIRST

  # in ascending order, nulls last
  ASC_NULLS_LAST

  # in descending order, nulls first
  DESC

  # in descending order, nulls first
  DESC_NULLS_FIRST

  # in descending order, nulls last
  DESC_NULLS_LAST
}

# columns and relationships of "pole"
type Pole {
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!
  required: Boolean!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An array relationship
  teamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  teamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "pole"
type PoleAggregate {
  aggregate: PoleAggregateFields
  nodes: [Pole!]!
}

input PoleAggregateBoolExp {
  bool_and: poleAggregateBoolExpBool_and
  bool_or: poleAggregateBoolExpBool_or
  count: poleAggregateBoolExpCount
}

input poleAggregateBoolExpBool_and {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpBool_or {
  arguments: PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: PoleBoolExp
  predicate: BooleanComparisonExp!
}

input poleAggregateBoolExpCount {
  arguments: [PoleSelectColumn!]
  distinct: Boolean
  filter: PoleBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "pole"
type PoleAggregateFields {
  avg: PoleAvgFields
  count(columns: [PoleSelectColumn!], distinct: Boolean): Int!
  max: PoleMaxFields
  min: PoleMinFields
  stddev: PoleStddevFields
  stddevPop: PoleStddevPopFields
  stddevSamp: PoleStddevSampFields
  sum: PoleSumFields
  varPop: PoleVarPopFields
  varSamp: PoleVarSampFields
  variance: PoleVarianceFields
}

# order by aggregate values of table "pole"
input PoleAggregateOrderBy {
  avg: PoleAvgOrderBy
  count: OrderBy
  max: PoleMaxOrderBy
  min: PoleMinOrderBy
  stddev: PoleStddevOrderBy
  stddevPop: PoleStddevPopOrderBy
  stddevSamp: PoleStddevSampOrderBy
  sum: PoleSumOrderBy
  varPop: PoleVarPopOrderBy
  varSamp: PoleVarSampOrderBy
  variance: PoleVarianceOrderBy
}

# input type for inserting array relation for remote table "pole"
input PoleArrRelInsertInput {
  data: [PoleInsertInput!]!

  # upsert condition
  onConflict: PoleOnConflict
}

# aggregate avg on columns
type PoleAvgFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "pole"
input PoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "pole". All fields are combined with a logical 'AND'.
input PoleBoolExp {
  _and: [PoleBoolExp!]
  _not: PoleBoolExp
  _or: [PoleBoolExp!]
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  required: BooleanComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "pole"
enum PoleConstraint {
  # unique or primary key constraint on columns "id"
  pole_pkey
}

# input type for incrementing numeric columns in table "pole"
input PoleIncInput {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "pole"
input PoleInsertInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  required: Boolean
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type PoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

# order by max() on columns of table "pole"
input PoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type PoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  teamId: bigint
  tenantId: bigint
}

# order by min() on columns of table "pole"
input PoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "pole"
type PoleMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Pole!]!
}

# input type for inserting object relation for remote table "pole"
input PoleObjRelInsertInput {
  data: PoleInsertInput!

  # upsert condition
  onConflict: PoleOnConflict
}

# on_conflict condition type for table "pole"
input PoleOnConflict {
  constraint: PoleConstraint!
  updateColumns: [PoleUpdateColumn!]! = []
  where: PoleBoolExp
}

# Ordering options when selecting data from "pole".
input PoleOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  required: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: pole
input PolePkColumnsInput {
  id: bigint!
}

# select columns of table "pole"
enum PoleSelectColumn {
  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  required

  # column name
  teamId

  # column name
  tenantId
}

# select "poleAggregateBoolExpBool_andArgumentsColumns" columns of table "pole"
enum PoleSelectColumnPoleAggregateBoolExpBool_andArgumentsColumns {
  # column name
  required
}

# select "poleAggregateBoolExpBool_orArgumentsColumns" columns of table "pole"
enum PoleSelectColumnPoleAggregateBoolExpBool_orArgumentsColumns {
  # column name
  required
}

# input type for updating data in table "pole"
input PoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  required: Boolean
  teamId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type PoleStddevFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "pole"
input PoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type PoleStddevPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "pole"
input PoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type PoleStddevSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "pole"
input PoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "pole"
input PoleStreamCursorInput {
  # Stream column input with initial value
  initialValue: PoleStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input PoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  name: String
  required: Boolean
  teamId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type PoleSumFields {
  createdById: bigint
  id: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "pole"
input PoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "pole"
enum PoleUpdateColumn {
  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  required

  # column name
  teamId

  # column name
  tenantId
}

input PoleUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: PoleIncInput

  # sets the columns of the filtered rows to the given values
  _set: PoleSetInput

  # filter the rows which have to be updated
  where: PoleBoolExp!
}

# aggregate variance on columns
type PoleVarianceFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "pole"
input PoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type PoleVarPopFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "pole"
input PoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type PoleVarSampFields {
  createdById: Float
  id: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "pole"
input PoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "project"
type Project {
  # An array relationship
  actions(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # An aggregate relationship
  actionsAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!
  budget: Float!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String

  # An array relationship
  events(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An aggregate relationship
  eventsAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # An object relationship
  fileUpload: FileUpload

  # An array relationship
  finances(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # An aggregate relationship
  financesAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint

  # An object relationship
  individual: Individual
  isPrivate: Boolean!
  isTemplate: Boolean!

  # An array relationship
  missionJoins(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # An aggregate relationship
  missionJoinsAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!

  # An array relationship
  missions(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # An aggregate relationship
  missionsAggregate(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): MissionAggregate!
  name: String!

  # An array relationship
  projectSupervisors(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  # An aggregate relationship
  projectSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!

  # An array relationship
  projectTags(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  # An aggregate relationship
  projectTagsAggregate(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!
  regularEventInterval: String!
  slug: String!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "project"
type ProjectAggregate {
  aggregate: ProjectAggregateFields
  nodes: [Project!]!
}

input ProjectAggregateBoolExp {
  bool_and: projectAggregateBoolExpBool_and
  bool_or: projectAggregateBoolExpBool_or
  count: projectAggregateBoolExpCount
}

input projectAggregateBoolExpBool_and {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpBool_or {
  arguments: ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: BooleanComparisonExp!
}

input projectAggregateBoolExpCount {
  arguments: [ProjectSelectColumn!]
  distinct: Boolean
  filter: ProjectBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "project"
type ProjectAggregateFields {
  avg: ProjectAvgFields
  count(columns: [ProjectSelectColumn!], distinct: Boolean): Int!
  max: ProjectMaxFields
  min: ProjectMinFields
  stddev: ProjectStddevFields
  stddevPop: ProjectStddevPopFields
  stddevSamp: ProjectStddevSampFields
  sum: ProjectSumFields
  varPop: ProjectVarPopFields
  varSamp: ProjectVarSampFields
  variance: ProjectVarianceFields
}

# order by aggregate values of table "project"
input ProjectAggregateOrderBy {
  avg: ProjectAvgOrderBy
  count: OrderBy
  max: ProjectMaxOrderBy
  min: ProjectMinOrderBy
  stddev: ProjectStddevOrderBy
  stddevPop: ProjectStddevPopOrderBy
  stddevSamp: ProjectStddevSampOrderBy
  sum: ProjectSumOrderBy
  varPop: ProjectVarPopOrderBy
  varSamp: ProjectVarSampOrderBy
  variance: ProjectVarianceOrderBy
}

# input type for inserting array relation for remote table "project"
input ProjectArrRelInsertInput {
  data: [ProjectInsertInput!]!

  # upsert condition
  onConflict: ProjectOnConflict
}

# aggregate avg on columns
type ProjectAvgFields {
  budget: Float
  createdById: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "project"
input ProjectAvgOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "project". All fields are combined with a logical 'AND'.
input ProjectBoolExp {
  _and: [ProjectBoolExp!]
  _not: ProjectBoolExp
  _or: [ProjectBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  budget: FloatComparisonExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  fileUpload: FileUploadBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  isPrivate: BooleanComparisonExp
  isTemplate: BooleanComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  name: StringComparisonExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  regularEventInterval: StringComparisonExp
  slug: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "project"
enum ProjectConstraint {
  # unique or primary key constraint on columns "id"
  project_pkey
}

# input type for incrementing numeric columns in table "project"
input ProjectIncInput {
  budget: Float
  createdById: bigint
  id: bigint
  imageId: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "project"
input ProjectInsertInput {
  actions: ActionArrRelInsertInput
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  events: EventArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  finances: FinanceArrRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  isPrivate: Boolean
  isTemplate: Boolean
  missionJoins: MissionJoinArrRelInsertInput
  missions: MissionArrRelInsertInput
  name: String
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  projectTags: ProjectTagsArrRelInsertInput
  regularEventInterval: String
  slug: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type ProjectMaxFields {
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

# order by max() on columns of table "project"
input ProjectMaxOrderBy {
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type ProjectMinFields {
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

# order by min() on columns of table "project"
input ProjectMinOrderBy {
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "project"
type ProjectMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Project!]!
}

# input type for inserting object relation for remote table "project"
input ProjectObjRelInsertInput {
  data: ProjectInsertInput!

  # upsert condition
  onConflict: ProjectOnConflict
}

# on_conflict condition type for table "project"
input ProjectOnConflict {
  constraint: ProjectConstraint!
  updateColumns: [ProjectUpdateColumn!]! = []
  where: ProjectBoolExp
}

# Ordering options when selecting data from "project".
input ProjectOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  budget: OrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventsAggregate: EventAggregateOrderBy
  fileUpload: FileUploadOrderBy
  financesAggregate: FinanceAggregateOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  isPrivate: OrderBy
  isTemplate: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  missionsAggregate: MissionAggregateOrderBy
  name: OrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  regularEventInterval: OrderBy
  slug: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: project
input ProjectPkColumnsInput {
  id: bigint!
}

# select columns of table "project"
enum ProjectSelectColumn {
  # column name
  budget

  # column name
  color

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  isPrivate

  # column name
  isTemplate

  # column name
  name

  # column name
  regularEventInterval

  # column name
  slug

  # column name
  teamId

  # column name
  tenantId
}

# select "projectAggregateBoolExpBool_andArgumentsColumns" columns of table "project"
enum ProjectSelectColumnProjectAggregateBoolExpBool_andArgumentsColumns {
  # column name
  isPrivate

  # column name
  isTemplate
}

# select "projectAggregateBoolExpBool_orArgumentsColumns" columns of table "project"
enum ProjectSelectColumnProjectAggregateBoolExpBool_orArgumentsColumns {
  # column name
  isPrivate

  # column name
  isTemplate
}

# input type for updating data in table "project"
input ProjectSetInput {
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type ProjectStddevFields {
  budget: Float
  createdById: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "project"
input ProjectStddevOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ProjectStddevPopFields {
  budget: Float
  createdById: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "project"
input ProjectStddevPopOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ProjectStddevSampFields {
  budget: Float
  createdById: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "project"
input ProjectStddevSampOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "project"
input ProjectStreamCursorInput {
  # Stream column input with initial value
  initialValue: ProjectStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ProjectStreamCursorValueInput {
  budget: Float
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  isPrivate: Boolean
  isTemplate: Boolean
  name: String
  regularEventInterval: String
  slug: String
  teamId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type ProjectSumFields {
  budget: Float
  createdById: bigint
  id: bigint
  imageId: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "project"
input ProjectSumOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "project_supervisors"
type ProjectSupervisors {
  # An object relationship
  project: Project!
  projectId: bigint!

  # An object relationship
  teamMember: TeamMember!
  teamMemberId: bigint!
}

# aggregated selection of "project_supervisors"
type ProjectSupervisorsAggregate {
  aggregate: ProjectSupervisorsAggregateFields
  nodes: [ProjectSupervisors!]!
}

input ProjectSupervisorsAggregateBoolExp {
  count: projectSupervisorsAggregateBoolExpCount
}

input projectSupervisorsAggregateBoolExpCount {
  arguments: [ProjectSupervisorsSelectColumn!]
  distinct: Boolean
  filter: ProjectSupervisorsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "project_supervisors"
type ProjectSupervisorsAggregateFields {
  avg: ProjectSupervisorsAvgFields
  count(columns: [ProjectSupervisorsSelectColumn!], distinct: Boolean): Int!
  max: ProjectSupervisorsMaxFields
  min: ProjectSupervisorsMinFields
  stddev: ProjectSupervisorsStddevFields
  stddevPop: ProjectSupervisorsStddevPopFields
  stddevSamp: ProjectSupervisorsStddevSampFields
  sum: ProjectSupervisorsSumFields
  varPop: ProjectSupervisorsVarPopFields
  varSamp: ProjectSupervisorsVarSampFields
  variance: ProjectSupervisorsVarianceFields
}

# order by aggregate values of table "project_supervisors"
input ProjectSupervisorsAggregateOrderBy {
  avg: ProjectSupervisorsAvgOrderBy
  count: OrderBy
  max: ProjectSupervisorsMaxOrderBy
  min: ProjectSupervisorsMinOrderBy
  stddev: ProjectSupervisorsStddevOrderBy
  stddevPop: ProjectSupervisorsStddevPopOrderBy
  stddevSamp: ProjectSupervisorsStddevSampOrderBy
  sum: ProjectSupervisorsSumOrderBy
  varPop: ProjectSupervisorsVarPopOrderBy
  varSamp: ProjectSupervisorsVarSampOrderBy
  variance: ProjectSupervisorsVarianceOrderBy
}

# input type for inserting array relation for remote table "project_supervisors"
input ProjectSupervisorsArrRelInsertInput {
  data: [ProjectSupervisorsInsertInput!]!

  # upsert condition
  onConflict: ProjectSupervisorsOnConflict
}

# aggregate avg on columns
type ProjectSupervisorsAvgFields {
  projectId: Float
  teamMemberId: Float
}

# order by avg() on columns of table "project_supervisors"
input ProjectSupervisorsAvgOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# Boolean expression to filter rows from the table "project_supervisors". All fields are combined with a logical 'AND'.
input ProjectSupervisorsBoolExp {
  _and: [ProjectSupervisorsBoolExp!]
  _not: ProjectSupervisorsBoolExp
  _or: [ProjectSupervisorsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

# unique or primary key constraints on table "project_supervisors"
enum ProjectSupervisorsConstraint {
  # unique or primary key constraint on columns "project_id", "team_member_id"
  project_supervisors_pkey
}

# input type for incrementing numeric columns in table "project_supervisors"
input ProjectSupervisorsIncInput {
  projectId: bigint
  teamMemberId: bigint
}

# input type for inserting data into table "project_supervisors"
input ProjectSupervisorsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

# aggregate max on columns
type ProjectSupervisorsMaxFields {
  projectId: bigint
  teamMemberId: bigint
}

# order by max() on columns of table "project_supervisors"
input ProjectSupervisorsMaxOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# aggregate min on columns
type ProjectSupervisorsMinFields {
  projectId: bigint
  teamMemberId: bigint
}

# order by min() on columns of table "project_supervisors"
input ProjectSupervisorsMinOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# response of any mutation on the table "project_supervisors"
type ProjectSupervisorsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ProjectSupervisors!]!
}

# on_conflict condition type for table "project_supervisors"
input ProjectSupervisorsOnConflict {
  constraint: ProjectSupervisorsConstraint!
  updateColumns: [ProjectSupervisorsUpdateColumn!]! = []
  where: ProjectSupervisorsBoolExp
}

# Ordering options when selecting data from "project_supervisors".
input ProjectSupervisorsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

# primary key columns input for table: project_supervisors
input ProjectSupervisorsPkColumnsInput {
  projectId: bigint!
  teamMemberId: bigint!
}

# select columns of table "project_supervisors"
enum ProjectSupervisorsSelectColumn {
  # column name
  projectId

  # column name
  teamMemberId
}

# input type for updating data in table "project_supervisors"
input ProjectSupervisorsSetInput {
  projectId: bigint
  teamMemberId: bigint
}

# aggregate stddev on columns
type ProjectSupervisorsStddevFields {
  projectId: Float
  teamMemberId: Float
}

# order by stddev() on columns of table "project_supervisors"
input ProjectSupervisorsStddevOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# aggregate stddevPop on columns
type ProjectSupervisorsStddevPopFields {
  projectId: Float
  teamMemberId: Float
}

# order by stddevPop() on columns of table "project_supervisors"
input ProjectSupervisorsStddevPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# aggregate stddevSamp on columns
type ProjectSupervisorsStddevSampFields {
  projectId: Float
  teamMemberId: Float
}

# order by stddevSamp() on columns of table "project_supervisors"
input ProjectSupervisorsStddevSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# Streaming cursor of the table "project_supervisors"
input ProjectSupervisorsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ProjectSupervisorsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ProjectSupervisorsStreamCursorValueInput {
  projectId: bigint
  teamMemberId: bigint
}

# aggregate sum on columns
type ProjectSupervisorsSumFields {
  projectId: bigint
  teamMemberId: bigint
}

# order by sum() on columns of table "project_supervisors"
input ProjectSupervisorsSumOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# update columns of table "project_supervisors"
enum ProjectSupervisorsUpdateColumn {
  # column name
  projectId

  # column name
  teamMemberId
}

input ProjectSupervisorsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ProjectSupervisorsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ProjectSupervisorsSetInput

  # filter the rows which have to be updated
  where: ProjectSupervisorsBoolExp!
}

# aggregate variance on columns
type ProjectSupervisorsVarianceFields {
  projectId: Float
  teamMemberId: Float
}

# order by variance() on columns of table "project_supervisors"
input ProjectSupervisorsVarianceOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# aggregate varPop on columns
type ProjectSupervisorsVarPopFields {
  projectId: Float
  teamMemberId: Float
}

# order by varPop() on columns of table "project_supervisors"
input ProjectSupervisorsVarPopOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# aggregate varSamp on columns
type ProjectSupervisorsVarSampFields {
  projectId: Float
  teamMemberId: Float
}

# order by varSamp() on columns of table "project_supervisors"
input ProjectSupervisorsVarSampOrderBy {
  projectId: OrderBy
  teamMemberId: OrderBy
}

# columns and relationships of "project_tags"
type ProjectTags {
  # An object relationship
  project: Project!
  projectId: bigint!

  # An object relationship
  tag: Tag!
  tagId: bigint!
}

# aggregated selection of "project_tags"
type ProjectTagsAggregate {
  aggregate: ProjectTagsAggregateFields
  nodes: [ProjectTags!]!
}

input ProjectTagsAggregateBoolExp {
  count: projectTagsAggregateBoolExpCount
}

input projectTagsAggregateBoolExpCount {
  arguments: [ProjectTagsSelectColumn!]
  distinct: Boolean
  filter: ProjectTagsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "project_tags"
type ProjectTagsAggregateFields {
  avg: ProjectTagsAvgFields
  count(columns: [ProjectTagsSelectColumn!], distinct: Boolean): Int!
  max: ProjectTagsMaxFields
  min: ProjectTagsMinFields
  stddev: ProjectTagsStddevFields
  stddevPop: ProjectTagsStddevPopFields
  stddevSamp: ProjectTagsStddevSampFields
  sum: ProjectTagsSumFields
  varPop: ProjectTagsVarPopFields
  varSamp: ProjectTagsVarSampFields
  variance: ProjectTagsVarianceFields
}

# order by aggregate values of table "project_tags"
input ProjectTagsAggregateOrderBy {
  avg: ProjectTagsAvgOrderBy
  count: OrderBy
  max: ProjectTagsMaxOrderBy
  min: ProjectTagsMinOrderBy
  stddev: ProjectTagsStddevOrderBy
  stddevPop: ProjectTagsStddevPopOrderBy
  stddevSamp: ProjectTagsStddevSampOrderBy
  sum: ProjectTagsSumOrderBy
  varPop: ProjectTagsVarPopOrderBy
  varSamp: ProjectTagsVarSampOrderBy
  variance: ProjectTagsVarianceOrderBy
}

# input type for inserting array relation for remote table "project_tags"
input ProjectTagsArrRelInsertInput {
  data: [ProjectTagsInsertInput!]!

  # upsert condition
  onConflict: ProjectTagsOnConflict
}

# aggregate avg on columns
type ProjectTagsAvgFields {
  projectId: Float
  tagId: Float
}

# order by avg() on columns of table "project_tags"
input ProjectTagsAvgOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# Boolean expression to filter rows from the table "project_tags". All fields are combined with a logical 'AND'.
input ProjectTagsBoolExp {
  _and: [ProjectTagsBoolExp!]
  _not: ProjectTagsBoolExp
  _or: [ProjectTagsBoolExp!]
  project: ProjectBoolExp
  projectId: BigintComparisonExp
  tag: TagBoolExp
  tagId: BigintComparisonExp
}

# unique or primary key constraints on table "project_tags"
enum ProjectTagsConstraint {
  # unique or primary key constraint on columns "project_id", "tag_id"
  project_tags_pkey
}

# input type for incrementing numeric columns in table "project_tags"
input ProjectTagsIncInput {
  projectId: bigint
  tagId: bigint
}

# input type for inserting data into table "project_tags"
input ProjectTagsInsertInput {
  project: ProjectObjRelInsertInput
  projectId: bigint
  tag: TagObjRelInsertInput
  tagId: bigint
}

# aggregate max on columns
type ProjectTagsMaxFields {
  projectId: bigint
  tagId: bigint
}

# order by max() on columns of table "project_tags"
input ProjectTagsMaxOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# aggregate min on columns
type ProjectTagsMinFields {
  projectId: bigint
  tagId: bigint
}

# order by min() on columns of table "project_tags"
input ProjectTagsMinOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# response of any mutation on the table "project_tags"
type ProjectTagsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ProjectTags!]!
}

# on_conflict condition type for table "project_tags"
input ProjectTagsOnConflict {
  constraint: ProjectTagsConstraint!
  updateColumns: [ProjectTagsUpdateColumn!]! = []
  where: ProjectTagsBoolExp
}

# Ordering options when selecting data from "project_tags".
input ProjectTagsOrderBy {
  project: ProjectOrderBy
  projectId: OrderBy
  tag: TagOrderBy
  tagId: OrderBy
}

# primary key columns input for table: project_tags
input ProjectTagsPkColumnsInput {
  projectId: bigint!
  tagId: bigint!
}

# select columns of table "project_tags"
enum ProjectTagsSelectColumn {
  # column name
  projectId

  # column name
  tagId
}

# input type for updating data in table "project_tags"
input ProjectTagsSetInput {
  projectId: bigint
  tagId: bigint
}

# aggregate stddev on columns
type ProjectTagsStddevFields {
  projectId: Float
  tagId: Float
}

# order by stddev() on columns of table "project_tags"
input ProjectTagsStddevOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# aggregate stddevPop on columns
type ProjectTagsStddevPopFields {
  projectId: Float
  tagId: Float
}

# order by stddevPop() on columns of table "project_tags"
input ProjectTagsStddevPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# aggregate stddevSamp on columns
type ProjectTagsStddevSampFields {
  projectId: Float
  tagId: Float
}

# order by stddevSamp() on columns of table "project_tags"
input ProjectTagsStddevSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# Streaming cursor of the table "project_tags"
input ProjectTagsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ProjectTagsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ProjectTagsStreamCursorValueInput {
  projectId: bigint
  tagId: bigint
}

# aggregate sum on columns
type ProjectTagsSumFields {
  projectId: bigint
  tagId: bigint
}

# order by sum() on columns of table "project_tags"
input ProjectTagsSumOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# update columns of table "project_tags"
enum ProjectTagsUpdateColumn {
  # column name
  projectId

  # column name
  tagId
}

input ProjectTagsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ProjectTagsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ProjectTagsSetInput

  # filter the rows which have to be updated
  where: ProjectTagsBoolExp!
}

# aggregate variance on columns
type ProjectTagsVarianceFields {
  projectId: Float
  tagId: Float
}

# order by variance() on columns of table "project_tags"
input ProjectTagsVarianceOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# aggregate varPop on columns
type ProjectTagsVarPopFields {
  projectId: Float
  tagId: Float
}

# order by varPop() on columns of table "project_tags"
input ProjectTagsVarPopOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# aggregate varSamp on columns
type ProjectTagsVarSampFields {
  projectId: Float
  tagId: Float
}

# order by varSamp() on columns of table "project_tags"
input ProjectTagsVarSampOrderBy {
  projectId: OrderBy
  tagId: OrderBy
}

# update columns of table "project"
enum ProjectUpdateColumn {
  # column name
  budget

  # column name
  color

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  isPrivate

  # column name
  isTemplate

  # column name
  name

  # column name
  regularEventInterval

  # column name
  slug

  # column name
  teamId

  # column name
  tenantId
}

input ProjectUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ProjectIncInput

  # sets the columns of the filtered rows to the given values
  _set: ProjectSetInput

  # filter the rows which have to be updated
  where: ProjectBoolExp!
}

# aggregate variance on columns
type ProjectVarianceFields {
  budget: Float
  createdById: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "project"
input ProjectVarianceOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ProjectVarPopFields {
  budget: Float
  createdById: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "project"
input ProjectVarPopOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ProjectVarSampFields {
  budget: Float
  createdById: Float
  id: Float
  imageId: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "project"
input ProjectVarSampOrderBy {
  budget: OrderBy
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

type Query {
  # fetch data from the table: "action"
  action(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # fetch aggregated fields from the table: "action"
  actionAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!

  # fetch data from the table: "action" using primary key columns
  actionByPk(id: bigint!): Action

  # fetch data from the table: "actor"
  actor(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): [Actor!]!

  # fetch data from the table: "actor_address"
  actorAddress(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  # fetch aggregated fields from the table: "actor_address"
  actorAddressAggregate(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  # fetch data from the table: "actor_address" using primary key columns
  actorAddressByPk(id: bigint!): ActorAddress

  # fetch aggregated fields from the table: "actor"
  actorAggregate(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): ActorAggregate!

  # fetch data from the table: "actor_bank_info"
  actorBankInfo(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  # fetch aggregated fields from the table: "actor_bank_info"
  actorBankInfoAggregate(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  # fetch data from the table: "actor_bank_info" using primary key columns
  actorBankInfoByPk(id: bigint!): ActorBankInfo

  # fetch data from the table: "actor" using primary key columns
  actorByPk(id: bigint!): Actor

  # fetch data from the table: "actor_image"
  actorImage(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): [ActorImage!]!

  # fetch aggregated fields from the table: "actor_image"
  actorImageAggregate(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  # fetch data from the table: "actor_image" using primary key columns
  actorImageByPk(id: bigint!): ActorImage

  # An array relationship
  actorTags(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  # An aggregate relationship
  actorTagsAggregate(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!

  # fetch data from the table: "actor_tags" using primary key columns
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags

  # fetch data from the table: "bot_info"
  botInfo(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): [BotInfo!]!

  # fetch aggregated fields from the table: "bot_info"
  botInfoAggregate(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  # fetch data from the table: "bot_info" using primary key columns
  botInfoByPk(id: bigint!): BotInfo

  # fetch data from the table: "campus"
  campus(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): [Campus!]!

  # fetch aggregated fields from the table: "campus"
  campusAggregate(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): CampusAggregate!

  # fetch data from the table: "campus" using primary key columns
  campusByPk(id: bigint!): Campus

  # fetch data from the table: "canteen"
  canteen(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): [Canteen!]!

  # fetch aggregated fields from the table: "canteen"
  canteenAggregate(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): CanteenAggregate!

  # fetch data from the table: "canteen" using primary key columns
  canteenByPk(id: bigint!): Canteen

  # fetch data from the table: "canteen_food"
  canteenFood(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  # fetch aggregated fields from the table: "canteen_food"
  canteenFoodAggregate(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  # fetch data from the table: "canteen_food" using primary key columns
  canteenFoodByPk(id: bigint!): CanteenFood

  # fetch data from the table: "canteen_menu"
  canteenMenu(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  # fetch aggregated fields from the table: "canteen_menu"
  canteenMenuAggregate(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  # fetch data from the table: "canteen_menu" using primary key columns
  canteenMenuByPk(id: bigint!): CanteenMenu

  # fetch data from the table: "class_group"
  classGroup(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  # fetch aggregated fields from the table: "class_group"
  classGroupAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  # fetch data from the table: "class_group" using primary key columns
  classGroupByPk(id: bigint!): ClassGroup

  # fetch data from the table: "class_group_teacher"
  classGroupTeacher(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  # fetch aggregated fields from the table: "class_group_teacher"
  classGroupTeacherAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  # fetch data from the table: "class_group_teacher" using primary key columns
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher

  # An array relationship
  classGroupTeacherSubjects(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  # An aggregate relationship
  classGroupTeacherSubjectsAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!

  # fetch data from the table: "class_group_teacher_subjects" using primary key columns
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects

  # fetch data from the table: "cohort"
  cohort(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): [Cohort!]!

  # fetch aggregated fields from the table: "cohort"
  cohortAggregate(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): CohortAggregate!

  # fetch data from the table: "cohort" using primary key columns
  cohortByPk(id: bigint!): Cohort

  # fetch data from the table: "content"
  content(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # fetch aggregated fields from the table: "content"
  contentAggregate(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): ContentAggregate!

  # An array relationship
  contentAttachments(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  # An aggregate relationship
  contentAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!

  # fetch data from the table: "content_attachments" using primary key columns
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments

  # fetch data from the table: "content" using primary key columns
  contentByPk(id: bigint!): Content

  # fetch data from the table: "document"
  document(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): [Document!]!

  # fetch aggregated fields from the table: "document"
  documentAggregate(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): DocumentAggregate!

  # fetch data from the table: "document" using primary key columns
  documentByPk(id: bigint!): Document

  # fetch data from the table: "event"
  event(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # fetch aggregated fields from the table: "event"
  eventAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # fetch data from the table: "event_approval"
  eventApproval(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  # fetch aggregated fields from the table: "event_approval"
  eventApprovalAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  # fetch data from the table: "event_approval" using primary key columns
  eventApprovalByPk(id: bigint!): EventApproval

  # fetch data from the table: "event_approval_step"
  eventApprovalStep(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  # fetch aggregated fields from the table: "event_approval_step"
  eventApprovalStepAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  # fetch data from the table: "event_approval_step" using primary key columns
  eventApprovalStepByPk(id: bigint!): EventApprovalStep

  # An array relationship
  eventApprovalStepNotifiees(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  # An aggregate relationship
  eventApprovalStepNotifieesAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  # fetch data from the table: "event_approval_step_notifiees" using primary key columns
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees

  # An array relationship
  eventApprovalStepValidators(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  # An aggregate relationship
  eventApprovalStepValidatorsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  # fetch data from the table: "event_approval_step_validators" using primary key columns
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators

  # fetch data from the table: "event" using primary key columns
  eventByPk(id: bigint!): Event

  # fetch data from the table: "event_join"
  eventJoin(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # fetch aggregated fields from the table: "event_join"
  eventJoinAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # fetch data from the table: "event_join" using primary key columns
  eventJoinByPk(id: bigint!): EventJoin

  # fetch data from the table: "event_manage"
  eventManage(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): [EventManage!]!

  # fetch aggregated fields from the table: "event_manage"
  eventManageAggregate(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): EventManageAggregate!

  # fetch data from the table: "event_manage" using primary key columns
  eventManageByPk(id: bigint!): EventManage

  # An array relationship
  eventSupervisors(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): [EventSupervisors!]!

  # An aggregate relationship
  eventSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): EventSupervisorsAggregate!

  # fetch data from the table: "event_supervisors" using primary key columns
  eventSupervisorsByPk(eventId: bigint!, userInfoId: bigint!): EventSupervisors

  # An array relationship
  eventTags(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): [EventTags!]!

  # An aggregate relationship
  eventTagsAggregate(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  # fetch data from the table: "event_tags" using primary key columns
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags

  # fetch data from the table: "expense"
  expense(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # fetch aggregated fields from the table: "expense"
  expenseAggregate(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  # fetch data from the table: "expense" using primary key columns
  expenseByPk(id: bigint!): Expense

  # fetch data from the table: "expense_item"
  expenseItem(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): [ExpenseItem!]!

  # fetch aggregated fields from the table: "expense_item"
  expenseItemAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): ExpenseItemAggregate!

  # An array relationship
  expenseItemAttachments(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): [ExpenseItemAttachments!]!

  # An aggregate relationship
  expenseItemAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): ExpenseItemAttachmentsAggregate!

  # fetch data from the table: "expense_item_attachments" using primary key columns
  expenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments

  # fetch data from the table: "expense_item" using primary key columns
  expenseItemByPk(id: bigint!): ExpenseItem

  # fetch data from the table: "favorite"
  favorite(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): [Favorite!]!

  # fetch aggregated fields from the table: "favorite"
  favoriteAggregate(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  # fetch data from the table: "favorite" using primary key columns
  favoriteByPk(id: bigint!): Favorite

  # fetch data from the table: "file_upload"
  fileUpload(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): [FileUpload!]!

  # fetch aggregated fields from the table: "file_upload"
  fileUploadAggregate(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  # fetch data from the table: "file_upload" using primary key columns
  fileUploadByPk(id: bigint!): FileUpload

  # fetch data from the table: "finance"
  finance(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # fetch aggregated fields from the table: "finance"
  financeAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!

  # An array relationship
  financeAttachments(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): [FinanceAttachments!]!

  # An aggregate relationship
  financeAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): FinanceAttachmentsAggregate!

  # fetch data from the table: "finance_attachments" using primary key columns
  financeAttachmentsByPk(fileUploadId: bigint!, financeId: bigint!): FinanceAttachments

  # fetch data from the table: "finance" using primary key columns
  financeByPk(id: bigint!): Finance

  # fetch data from the table: "follow"
  follow(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): [Follow!]!

  # fetch aggregated fields from the table: "follow"
  followAggregate(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): FollowAggregate!

  # fetch data from the table: "follow" using primary key columns
  followByPk(id: bigint!): Follow

  # fetch data from the table: "form"
  form(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): [Form!]!

  # fetch aggregated fields from the table: "form"
  formAggregate(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): FormAggregate!

  # fetch data from the table: "form" using primary key columns
  formByPk(id: bigint!): Form

  # fetch data from the table: "form_submission"
  formSubmission(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  # fetch aggregated fields from the table: "form_submission"
  formSubmissionAggregate(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  # fetch data from the table: "form_submission" using primary key columns
  formSubmissionByPk(id: bigint!): FormSubmission

  # fetch data from the table: "individual"
  individual(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): [Individual!]!

  # fetch aggregated fields from the table: "individual"
  individualAggregate(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): IndividualAggregate!

  # fetch data from the table: "individual" using primary key columns
  individualByPk(id: bigint!): Individual

  # fetch data from the table: "issue"
  issue(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): [Issue!]!

  # fetch aggregated fields from the table: "issue"
  issueAggregate(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): IssueAggregate!

  # fetch data from the table: "issue" using primary key columns
  issueByPk(id: bigint!): Issue

  # An array relationship
  issueContributors(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): [IssueContributors!]!

  # An aggregate relationship
  issueContributorsAggregate(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): IssueContributorsAggregate!

  # fetch data from the table: "issue_contributors" using primary key columns
  issueContributorsByPk(individualId: bigint!, issueId: bigint!): IssueContributors

  # An array relationship
  issueTags(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): [IssueTags!]!

  # An aggregate relationship
  issueTagsAggregate(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): IssueTagsAggregate!

  # fetch data from the table: "issue_tags" using primary key columns
  issueTagsByPk(issueId: bigint!, tagId: bigint!): IssueTags

  # fetch data from the table: "legal_unit"
  legalUnit(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): [LegalUnit!]!

  # fetch aggregated fields from the table: "legal_unit"
  legalUnitAggregate(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): LegalUnitAggregate!

  # fetch data from the table: "legal_unit" using primary key columns
  legalUnitByPk(id: bigint!): LegalUnit

  # fetch data from the table: "mission"
  mission(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # fetch aggregated fields from the table: "mission"
  missionAggregate(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): MissionAggregate!

  # fetch data from the table: "mission" using primary key columns
  missionByPk(id: bigint!): Mission

  # fetch data from the table: "mission_join"
  missionJoin(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # fetch aggregated fields from the table: "mission_join"
  missionJoinAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!

  # fetch data from the table: "mission_join" using primary key columns
  missionJoinByPk(id: bigint!): MissionJoin

  # fetch data from the table: "pole"
  pole(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): [Pole!]!

  # fetch aggregated fields from the table: "pole"
  poleAggregate(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): PoleAggregate!

  # fetch data from the table: "pole" using primary key columns
  poleByPk(id: bigint!): Pole

  # fetch data from the table: "project"
  project(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): [Project!]!

  # fetch aggregated fields from the table: "project"
  projectAggregate(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): ProjectAggregate!

  # fetch data from the table: "project" using primary key columns
  projectByPk(id: bigint!): Project

  # An array relationship
  projectSupervisors(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  # An aggregate relationship
  projectSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!

  # fetch data from the table: "project_supervisors" using primary key columns
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors

  # An array relationship
  projectTags(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  # An aggregate relationship
  projectTagsAggregate(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!

  # fetch data from the table: "project_tags" using primary key columns
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags

  # fetch data from the table: "reaction"
  reaction(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): [Reaction!]!

  # fetch aggregated fields from the table: "reaction"
  reactionAggregate(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): ReactionAggregate!

  # fetch data from the table: "reaction" using primary key columns
  reactionByPk(id: bigint!): Reaction

  # fetch data from the table: "report"
  report(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): [Report!]!

  # fetch aggregated fields from the table: "report"
  reportAggregate(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): ReportAggregate!

  # fetch data from the table: "report" using primary key columns
  reportByPk(id: bigint!): Report

  # fetch data from the table: "role"
  role(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): [Role!]!

  # fetch aggregated fields from the table: "role"
  roleAggregate(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): RoleAggregate!

  # fetch data from the table: "role" using primary key columns
  roleByPk(id: bigint!): Role

  # fetch data from the table: "session"
  session(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): [Session!]!

  # fetch aggregated fields from the table: "session"
  sessionAggregate(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): SessionAggregate!

  # fetch data from the table: "session" using primary key columns
  sessionByPk(id: bigint!): Session

  # fetch data from the table: "shortcut"
  shortcut(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): [Shortcut!]!

  # fetch aggregated fields from the table: "shortcut"
  shortcutAggregate(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  # fetch data from the table: "shortcut" using primary key columns
  shortcutByPk(id: bigint!): Shortcut

  # fetch data from the table: "social"
  social(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): [Social!]!

  # fetch aggregated fields from the table: "social"
  socialAggregate(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): SocialAggregate!

  # fetch data from the table: "social" using primary key columns
  socialByPk(id: bigint!): Social

  # fetch data from the table: "subject"
  subject(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): [Subject!]!

  # fetch aggregated fields from the table: "subject"
  subjectAggregate(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): SubjectAggregate!

  # fetch data from the table: "subject" using primary key columns
  subjectByPk(id: bigint!): Subject

  # An array relationship
  subjectClassGroups(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  # An aggregate relationship
  subjectClassGroupsAggregate(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  # fetch data from the table: "subject_class_groups" using primary key columns
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups

  # fetch data from the table: "tag"
  tag(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): [Tag!]!

  # fetch aggregated fields from the table: "tag"
  tagAggregate(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): TagAggregate!

  # fetch data from the table: "tag" using primary key columns
  tagByPk(id: bigint!): Tag

  # fetch data from the table: "team"
  team(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): [Team!]!

  # fetch aggregated fields from the table: "team"
  teamAggregate(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): TeamAggregate!

  # fetch data from the table: "team" using primary key columns
  teamByPk(id: bigint!): Team

  # An array relationship
  teamEvents(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  # An aggregate relationship
  teamEventsAggregate(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  # fetch data from the table: "team_events" using primary key columns
  teamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents

  # fetch data from the table: "team_join"
  teamJoin(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # fetch aggregated fields from the table: "team_join"
  teamJoinAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # fetch data from the table: "team_join" using primary key columns
  teamJoinByPk(id: bigint!): TeamJoin

  # fetch data from the table: "team_member"
  teamMember(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  # fetch aggregated fields from the table: "team_member"
  teamMemberAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  # fetch data from the table: "team_member" using primary key columns
  teamMemberByPk(id: bigint!): TeamMember

  # An array relationship
  teamMemberRoles(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  # An aggregate relationship
  teamMemberRolesAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  # fetch data from the table: "team_member_roles" using primary key columns
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles

  # fetch data from the table: "team_metric"
  teamMetric(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  # fetch aggregated fields from the table: "team_metric"
  teamMetricAggregate(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  # fetch data from the table: "team_metric" using primary key columns
  teamMetricByPk(id: bigint!): TeamMetric

  # fetch data from the table: "tenant"
  tenant(
    # distinct select on columns
    distinctOn: [TenantSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TenantOrderBy!]

    # filter the rows returned
    where: TenantBoolExp
  ): [Tenant!]!

  # fetch aggregated fields from the table: "tenant"
  tenantAggregate(
    # distinct select on columns
    distinctOn: [TenantSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TenantOrderBy!]

    # filter the rows returned
    where: TenantBoolExp
  ): TenantAggregate!

  # fetch data from the table: "tenant" using primary key columns
  tenantByPk(id: bigint!): Tenant

  # fetch data from the table: "thread"
  thread(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): [Thread!]!

  # fetch aggregated fields from the table: "thread"
  threadAggregate(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): ThreadAggregate!

  # fetch data from the table: "thread" using primary key columns
  threadByPk(id: bigint!): Thread

  # An array relationship
  threadContributors(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): [ThreadContributors!]!

  # An aggregate relationship
  threadContributorsAggregate(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): ThreadContributorsAggregate!

  # fetch data from the table: "thread_contributors" using primary key columns
  threadContributorsByPk(individualId: bigint!, threadId: bigint!): ThreadContributors

  # An array relationship
  threadTags(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): [ThreadTags!]!

  # An aggregate relationship
  threadTagsAggregate(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): ThreadTagsAggregate!

  # fetch data from the table: "thread_tags" using primary key columns
  threadTagsByPk(tagId: bigint!, threadId: bigint!): ThreadTags

  # fetch data from the table: "user_info"
  userInfo(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): [UserInfo!]!

  # fetch aggregated fields from the table: "user_info"
  userInfoAggregate(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  # fetch data from the table: "user_info" using primary key columns
  userInfoByPk(id: bigint!): UserInfo

  # fetch data from the table: "validation"
  validation(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): [Validation!]!

  # fetch aggregated fields from the table: "validation"
  validationAggregate(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): ValidationAggregate!

  # fetch data from the table: "validation" using primary key columns
  validationByPk(id: bigint!): Validation

  # fetch data from the table: "vote"
  vote(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): [Vote!]!

  # fetch aggregated fields from the table: "vote"
  voteAggregate(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): VoteAggregate!

  # fetch data from the table: "vote" using primary key columns
  voteByPk(id: bigint!): Vote
}

# columns and relationships of "reaction"
type Reaction {
  # An object relationship
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  lastActiveDate: timestamptz
  reactionType: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "reaction"
type ReactionAggregate {
  aggregate: ReactionAggregateFields
  nodes: [Reaction!]!
}

input ReactionAggregateBoolExp {
  count: reactionAggregateBoolExpCount
}

input reactionAggregateBoolExpCount {
  arguments: [ReactionSelectColumn!]
  distinct: Boolean
  filter: ReactionBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "reaction"
type ReactionAggregateFields {
  avg: ReactionAvgFields
  count(columns: [ReactionSelectColumn!], distinct: Boolean): Int!
  max: ReactionMaxFields
  min: ReactionMinFields
  stddev: ReactionStddevFields
  stddevPop: ReactionStddevPopFields
  stddevSamp: ReactionStddevSampFields
  sum: ReactionSumFields
  varPop: ReactionVarPopFields
  varSamp: ReactionVarSampFields
  variance: ReactionVarianceFields
}

# order by aggregate values of table "reaction"
input ReactionAggregateOrderBy {
  avg: ReactionAvgOrderBy
  count: OrderBy
  max: ReactionMaxOrderBy
  min: ReactionMinOrderBy
  stddev: ReactionStddevOrderBy
  stddevPop: ReactionStddevPopOrderBy
  stddevSamp: ReactionStddevSampOrderBy
  sum: ReactionSumOrderBy
  varPop: ReactionVarPopOrderBy
  varSamp: ReactionVarSampOrderBy
  variance: ReactionVarianceOrderBy
}

# input type for inserting array relation for remote table "reaction"
input ReactionArrRelInsertInput {
  data: [ReactionInsertInput!]!

  # upsert condition
  onConflict: ReactionOnConflict
}

# aggregate avg on columns
type ReactionAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "reaction"
input ReactionAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "reaction". All fields are combined with a logical 'AND'.
input ReactionBoolExp {
  _and: [ReactionBoolExp!]
  _not: ReactionBoolExp
  _or: [ReactionBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  reactionType: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "reaction"
enum ReactionConstraint {
  # unique or primary key constraint on columns "id"
  reaction_pkey
}

# input type for incrementing numeric columns in table "reaction"
input ReactionIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "reaction"
input ReactionInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  reactionType: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type ReactionMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

# order by max() on columns of table "reaction"
input ReactionMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type ReactionMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

# order by min() on columns of table "reaction"
input ReactionMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "reaction"
type ReactionMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Reaction!]!
}

# on_conflict condition type for table "reaction"
input ReactionOnConflict {
  constraint: ReactionConstraint!
  updateColumns: [ReactionUpdateColumn!]! = []
  where: ReactionBoolExp
}

# Ordering options when selecting data from "reaction".
input ReactionOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  reactionType: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: reaction
input ReactionPkColumnsInput {
  id: bigint!
}

# select columns of table "reaction"
enum ReactionSelectColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  reactionType

  # column name
  tenantId
}

# input type for updating data in table "reaction"
input ReactionSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

# aggregate stddev on columns
type ReactionStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "reaction"
input ReactionStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ReactionStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "reaction"
input ReactionStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ReactionStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "reaction"
input ReactionStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "reaction"
input ReactionStreamCursorInput {
  # Stream column input with initial value
  initialValue: ReactionStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ReactionStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reactionType: String
  tenantId: bigint
}

# aggregate sum on columns
type ReactionSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "reaction"
input ReactionSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "reaction"
enum ReactionUpdateColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  reactionType

  # column name
  tenantId
}

input ReactionUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ReactionIncInput

  # sets the columns of the filtered rows to the given values
  _set: ReactionSetInput

  # filter the rows which have to be updated
  where: ReactionBoolExp!
}

# aggregate variance on columns
type ReactionVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "reaction"
input ReactionVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ReactionVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "reaction"
input ReactionVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ReactionVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "reaction"
input ReactionVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "report"
type Report {
  # An object relationship
  actor: Actor
  actorId: bigint

  # An object relationship
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  lastActiveDate: timestamptz
  reason: String

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

# aggregated selection of "report"
type ReportAggregate {
  aggregate: ReportAggregateFields
  nodes: [Report!]!
}

input ReportAggregateBoolExp {
  count: reportAggregateBoolExpCount
}

input reportAggregateBoolExpCount {
  arguments: [ReportSelectColumn!]
  distinct: Boolean
  filter: ReportBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "report"
type ReportAggregateFields {
  avg: ReportAvgFields
  count(columns: [ReportSelectColumn!], distinct: Boolean): Int!
  max: ReportMaxFields
  min: ReportMinFields
  stddev: ReportStddevFields
  stddevPop: ReportStddevPopFields
  stddevSamp: ReportStddevSampFields
  sum: ReportSumFields
  varPop: ReportVarPopFields
  varSamp: ReportVarSampFields
  variance: ReportVarianceFields
}

# order by aggregate values of table "report"
input ReportAggregateOrderBy {
  avg: ReportAvgOrderBy
  count: OrderBy
  max: ReportMaxOrderBy
  min: ReportMinOrderBy
  stddev: ReportStddevOrderBy
  stddevPop: ReportStddevPopOrderBy
  stddevSamp: ReportStddevSampOrderBy
  sum: ReportSumOrderBy
  varPop: ReportVarPopOrderBy
  varSamp: ReportVarSampOrderBy
  variance: ReportVarianceOrderBy
}

# input type for inserting array relation for remote table "report"
input ReportArrRelInsertInput {
  data: [ReportInsertInput!]!

  # upsert condition
  onConflict: ReportOnConflict
}

# aggregate avg on columns
type ReportAvgFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "report"
input ReportAvgOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "report". All fields are combined with a logical 'AND'.
input ReportBoolExp {
  _and: [ReportBoolExp!]
  _not: ReportBoolExp
  _or: [ReportBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  reason: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

# unique or primary key constraints on table "report"
enum ReportConstraint {
  # unique or primary key constraint on columns "id"
  report_pkey
}

# input type for incrementing numeric columns in table "report"
input ReportIncInput {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "report"
input ReportInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  reason: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

# aggregate max on columns
type ReportMaxFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

# order by max() on columns of table "report"
input ReportMaxOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type ReportMinFields {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

# order by min() on columns of table "report"
input ReportMinOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "report"
type ReportMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Report!]!
}

# on_conflict condition type for table "report"
input ReportOnConflict {
  constraint: ReportConstraint!
  updateColumns: [ReportUpdateColumn!]! = []
  where: ReportBoolExp
}

# Ordering options when selecting data from "report".
input ReportOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  reason: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

# primary key columns input for table: report
input ReportPkColumnsInput {
  id: bigint!
}

# select columns of table "report"
enum ReportSelectColumn {
  # column name
  actorId

  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  reason

  # column name
  tenantId

  # column name
  type
}

# input type for updating data in table "report"
input ReportSetInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type ReportStddevFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "report"
input ReportStddevOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ReportStddevPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "report"
input ReportStddevPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ReportStddevSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "report"
input ReportStddevSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "report"
input ReportStreamCursorInput {
  # Stream column input with initial value
  initialValue: ReportStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ReportStreamCursorValueInput {
  actorId: bigint
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  reason: String
  tenantId: bigint
  type: String
}

# aggregate sum on columns
type ReportSumFields {
  actorId: bigint
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "report"
input ReportSumOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "report"
enum ReportUpdateColumn {
  # column name
  actorId

  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  reason

  # column name
  tenantId

  # column name
  type
}

input ReportUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ReportIncInput

  # sets the columns of the filtered rows to the given values
  _set: ReportSetInput

  # filter the rows which have to be updated
  where: ReportBoolExp!
}

# aggregate variance on columns
type ReportVarianceFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "report"
input ReportVarianceOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ReportVarPopFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "report"
input ReportVarPopOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ReportVarSampFields {
  actorId: Float
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "report"
input ReportVarSampOrderBy {
  actorId: OrderBy
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "role"
type Role {
  # An array relationship
  askedTeamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  askedTeamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!
  category: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  isRequired: Boolean!
  name: String!
  permissions: Int!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An array relationship
  teamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  teamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # An array relationship
  teamMemberRoles(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  # An aggregate relationship
  teamMemberRolesAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

# aggregated selection of "role"
type RoleAggregate {
  aggregate: RoleAggregateFields
  nodes: [Role!]!
}

input RoleAggregateBoolExp {
  bool_and: roleAggregateBoolExpBool_and
  bool_or: roleAggregateBoolExpBool_or
  count: roleAggregateBoolExpCount
}

input roleAggregateBoolExpBool_and {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpBool_or {
  arguments: RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: RoleBoolExp
  predicate: BooleanComparisonExp!
}

input roleAggregateBoolExpCount {
  arguments: [RoleSelectColumn!]
  distinct: Boolean
  filter: RoleBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "role"
type RoleAggregateFields {
  avg: RoleAvgFields
  count(columns: [RoleSelectColumn!], distinct: Boolean): Int!
  max: RoleMaxFields
  min: RoleMinFields
  stddev: RoleStddevFields
  stddevPop: RoleStddevPopFields
  stddevSamp: RoleStddevSampFields
  sum: RoleSumFields
  varPop: RoleVarPopFields
  varSamp: RoleVarSampFields
  variance: RoleVarianceFields
}

# order by aggregate values of table "role"
input RoleAggregateOrderBy {
  avg: RoleAvgOrderBy
  count: OrderBy
  max: RoleMaxOrderBy
  min: RoleMinOrderBy
  stddev: RoleStddevOrderBy
  stddevPop: RoleStddevPopOrderBy
  stddevSamp: RoleStddevSampOrderBy
  sum: RoleSumOrderBy
  varPop: RoleVarPopOrderBy
  varSamp: RoleVarSampOrderBy
  variance: RoleVarianceOrderBy
}

# input type for inserting array relation for remote table "role"
input RoleArrRelInsertInput {
  data: [RoleInsertInput!]!

  # upsert condition
  onConflict: RoleOnConflict
}

# aggregate avg on columns
type RoleAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "role"
input RoleAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "role". All fields are combined with a logical 'AND'.
input RoleBoolExp {
  _and: [RoleBoolExp!]
  _not: RoleBoolExp
  _or: [RoleBoolExp!]
  askedTeamJoins: TeamJoinBoolExp
  askedTeamJoinsAggregate: TeamJoinAggregateBoolExp
  category: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  isRequired: BooleanComparisonExp
  name: StringComparisonExp
  permissions: IntComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

# unique or primary key constraints on table "role"
enum RoleConstraint {
  # unique or primary key constraint on columns "id"
  role_pkey
}

# input type for incrementing numeric columns in table "role"
input RoleIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "role"
input RoleInsertInput {
  askedTeamJoins: TeamJoinArrRelInsertInput
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  isRequired: Boolean
  name: String
  permissions: Int
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

# aggregate max on columns
type RoleMaxFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

# order by max() on columns of table "role"
input RoleMaxOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type RoleMinFields {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

# order by min() on columns of table "role"
input RoleMinOrderBy {
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "role"
type RoleMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Role!]!
}

# input type for inserting object relation for remote table "role"
input RoleObjRelInsertInput {
  data: RoleInsertInput!

  # upsert condition
  onConflict: RoleOnConflict
}

# on_conflict condition type for table "role"
input RoleOnConflict {
  constraint: RoleConstraint!
  updateColumns: [RoleUpdateColumn!]! = []
  where: RoleBoolExp
}

# Ordering options when selecting data from "role".
input RoleOrderBy {
  askedTeamJoinsAggregate: TeamJoinAggregateOrderBy
  category: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  isRequired: OrderBy
  name: OrderBy
  permissions: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

# primary key columns input for table: role
input RolePkColumnsInput {
  id: bigint!
}

# select columns of table "role"
enum RoleSelectColumn {
  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  isRequired

  # column name
  name

  # column name
  permissions

  # column name
  teamId

  # column name
  tenantId

  # column name
  type
}

# select "roleAggregateBoolExpBool_andArgumentsColumns" columns of table "role"
enum RoleSelectColumnRoleAggregateBoolExpBool_andArgumentsColumns {
  # column name
  isRequired
}

# select "roleAggregateBoolExpBool_orArgumentsColumns" columns of table "role"
enum RoleSelectColumnRoleAggregateBoolExpBool_orArgumentsColumns {
  # column name
  isRequired
}

# input type for updating data in table "role"
input RoleSetInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isRequired: Boolean
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type RoleStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "role"
input RoleStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type RoleStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "role"
input RoleStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type RoleStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "role"
input RoleStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "role"
input RoleStreamCursorInput {
  # Stream column input with initial value
  initialValue: RoleStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input RoleStreamCursorValueInput {
  category: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  isRequired: Boolean
  name: String
  permissions: Int
  teamId: bigint
  tenantId: bigint
  type: String
}

# aggregate sum on columns
type RoleSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "role"
input RoleSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "role"
enum RoleUpdateColumn {
  # column name
  category

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  isRequired

  # column name
  name

  # column name
  permissions

  # column name
  teamId

  # column name
  tenantId

  # column name
  type
}

input RoleUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: RoleIncInput

  # sets the columns of the filtered rows to the given values
  _set: RoleSetInput

  # filter the rows which have to be updated
  where: RoleBoolExp!
}

# aggregate variance on columns
type RoleVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "role"
input RoleVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type RoleVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "role"
input RoleVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type RoleVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "role"
input RoleVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "session"
type Session {
  clientType: String!
  country: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  ip: String!
  lastActivityAt: timestamptz!
  lastIssuedAt: timestamptz!
  refreshTokenHash: String!
  revokedAt: timestamptz

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  tokenFamily: String!
  userAgent(
    # JSON select path
    path: String
  ): jsonb!
  userId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "session"
type SessionAggregate {
  aggregate: SessionAggregateFields
  nodes: [Session!]!
}

input SessionAggregateBoolExp {
  count: sessionAggregateBoolExpCount
}

input sessionAggregateBoolExpCount {
  arguments: [SessionSelectColumn!]
  distinct: Boolean
  filter: SessionBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "session"
type SessionAggregateFields {
  avg: SessionAvgFields
  count(columns: [SessionSelectColumn!], distinct: Boolean): Int!
  max: SessionMaxFields
  min: SessionMinFields
  stddev: SessionStddevFields
  stddevPop: SessionStddevPopFields
  stddevSamp: SessionStddevSampFields
  sum: SessionSumFields
  varPop: SessionVarPopFields
  varSamp: SessionVarSampFields
  variance: SessionVarianceFields
}

# order by aggregate values of table "session"
input SessionAggregateOrderBy {
  avg: SessionAvgOrderBy
  count: OrderBy
  max: SessionMaxOrderBy
  min: SessionMinOrderBy
  stddev: SessionStddevOrderBy
  stddevPop: SessionStddevPopOrderBy
  stddevSamp: SessionStddevSampOrderBy
  sum: SessionSumOrderBy
  varPop: SessionVarPopOrderBy
  varSamp: SessionVarSampOrderBy
  variance: SessionVarianceOrderBy
}

# append existing jsonb value of filtered columns with new jsonb value
input SessionAppendInput {
  userAgent: jsonb
}

# input type for inserting array relation for remote table "session"
input SessionArrRelInsertInput {
  data: [SessionInsertInput!]!

  # upsert condition
  onConflict: SessionOnConflict
}

# aggregate avg on columns
type SessionAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by avg() on columns of table "session"
input SessionAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Boolean expression to filter rows from the table "session". All fields are combined with a logical 'AND'.
input SessionBoolExp {
  _and: [SessionBoolExp!]
  _not: SessionBoolExp
  _or: [SessionBoolExp!]
  clientType: StringComparisonExp
  country: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  expiredAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  ip: StringComparisonExp
  lastActivityAt: TimestamptzComparisonExp
  lastIssuedAt: TimestamptzComparisonExp
  refreshTokenHash: StringComparisonExp
  revokedAt: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  tokenFamily: StringComparisonExp
  userAgent: JsonbComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "session"
enum SessionConstraint {
  # unique or primary key constraint on columns "id"
  session_pkey
}

# delete the field or element with specified path (for JSON arrays, negative integers count from the end)
input SessionDeleteAtPathInput {
  userAgent: [String!]
}

# delete the array element with specified index (negative integers count from the
# end). throws an error if top level container is not an array
input SessionDeleteElemInput {
  userAgent: Int
}

# delete key/value pair or string element. key/value pairs are matched based on their key value
input SessionDeleteKeyInput {
  userAgent: String
}

# input type for incrementing numeric columns in table "session"
input SessionIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

# input type for inserting data into table "session"
input SessionInsertInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type SessionMaxFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

# order by max() on columns of table "session"
input SessionMaxOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

# aggregate min on columns
type SessionMinFields {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userId: bigint
}

# order by min() on columns of table "session"
input SessionMinOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userId: OrderBy
}

# response of any mutation on the table "session"
type SessionMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Session!]!
}

# on_conflict condition type for table "session"
input SessionOnConflict {
  constraint: SessionConstraint!
  updateColumns: [SessionUpdateColumn!]! = []
  where: SessionBoolExp
}

# Ordering options when selecting data from "session".
input SessionOrderBy {
  clientType: OrderBy
  country: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  expiredAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  ip: OrderBy
  lastActivityAt: OrderBy
  lastIssuedAt: OrderBy
  refreshTokenHash: OrderBy
  revokedAt: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  tokenFamily: OrderBy
  userAgent: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: session
input SessionPkColumnsInput {
  id: bigint!
}

# prepend existing jsonb value of filtered columns with new jsonb value
input SessionPrependInput {
  userAgent: jsonb
}

# select columns of table "session"
enum SessionSelectColumn {
  # column name
  clientType

  # column name
  country

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  expiredAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  ip

  # column name
  lastActivityAt

  # column name
  lastIssuedAt

  # column name
  refreshTokenHash

  # column name
  revokedAt

  # column name
  tenantId

  # column name
  tokenFamily

  # column name
  userAgent

  # column name
  userId
}

# input type for updating data in table "session"
input SessionSetInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

# aggregate stddev on columns
type SessionStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddev() on columns of table "session"
input SessionStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevPop on columns
type SessionStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddevPop() on columns of table "session"
input SessionStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevSamp on columns
type SessionStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by stddevSamp() on columns of table "session"
input SessionStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Streaming cursor of the table "session"
input SessionStreamCursorInput {
  # Stream column input with initial value
  initialValue: SessionStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input SessionStreamCursorValueInput {
  clientType: String
  country: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  expiredAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  ip: String
  lastActivityAt: timestamptz
  lastIssuedAt: timestamptz
  refreshTokenHash: String
  revokedAt: timestamptz
  tenantId: bigint
  tokenFamily: String
  userAgent: jsonb
  userId: bigint
}

# aggregate sum on columns
type SessionSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
  userId: bigint
}

# order by sum() on columns of table "session"
input SessionSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# update columns of table "session"
enum SessionUpdateColumn {
  # column name
  clientType

  # column name
  country

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  expiredAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  ip

  # column name
  lastActivityAt

  # column name
  lastIssuedAt

  # column name
  refreshTokenHash

  # column name
  revokedAt

  # column name
  tenantId

  # column name
  tokenFamily

  # column name
  userAgent

  # column name
  userId
}

input SessionUpdates {
  # append existing jsonb value of filtered columns with new jsonb value
  _append: SessionAppendInput

  # delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  _deleteAtPath: SessionDeleteAtPathInput

  # delete the array element with specified index (negative integers count from
  # the end). throws an error if top level container is not an array
  _deleteElem: SessionDeleteElemInput

  # delete key/value pair or string element. key/value pairs are matched based on their key value
  _deleteKey: SessionDeleteKeyInput

  # increments the numeric columns with given value of the filtered values
  _inc: SessionIncInput

  # prepend existing jsonb value of filtered columns with new jsonb value
  _prepend: SessionPrependInput

  # sets the columns of the filtered rows to the given values
  _set: SessionSetInput

  # filter the rows which have to be updated
  where: SessionBoolExp!
}

# aggregate variance on columns
type SessionVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by variance() on columns of table "session"
input SessionVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varPop on columns
type SessionVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by varPop() on columns of table "session"
input SessionVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varSamp on columns
type SessionVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
  userId: Float
}

# order by varSamp() on columns of table "session"
input SessionVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# columns and relationships of "shortcut"
type Shortcut {
  # An object relationship
  actor: Actor!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  targetActorId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  userId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "shortcut"
type ShortcutAggregate {
  aggregate: ShortcutAggregateFields
  nodes: [Shortcut!]!
}

input ShortcutAggregateBoolExp {
  count: shortcutAggregateBoolExpCount
}

input shortcutAggregateBoolExpCount {
  arguments: [ShortcutSelectColumn!]
  distinct: Boolean
  filter: ShortcutBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "shortcut"
type ShortcutAggregateFields {
  avg: ShortcutAvgFields
  count(columns: [ShortcutSelectColumn!], distinct: Boolean): Int!
  max: ShortcutMaxFields
  min: ShortcutMinFields
  stddev: ShortcutStddevFields
  stddevPop: ShortcutStddevPopFields
  stddevSamp: ShortcutStddevSampFields
  sum: ShortcutSumFields
  varPop: ShortcutVarPopFields
  varSamp: ShortcutVarSampFields
  variance: ShortcutVarianceFields
}

# order by aggregate values of table "shortcut"
input ShortcutAggregateOrderBy {
  avg: ShortcutAvgOrderBy
  count: OrderBy
  max: ShortcutMaxOrderBy
  min: ShortcutMinOrderBy
  stddev: ShortcutStddevOrderBy
  stddevPop: ShortcutStddevPopOrderBy
  stddevSamp: ShortcutStddevSampOrderBy
  sum: ShortcutSumOrderBy
  varPop: ShortcutVarPopOrderBy
  varSamp: ShortcutVarSampOrderBy
  variance: ShortcutVarianceOrderBy
}

# input type for inserting array relation for remote table "shortcut"
input ShortcutArrRelInsertInput {
  data: [ShortcutInsertInput!]!

  # upsert condition
  onConflict: ShortcutOnConflict
}

# aggregate avg on columns
type ShortcutAvgFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

# order by avg() on columns of table "shortcut"
input ShortcutAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Boolean expression to filter rows from the table "shortcut". All fields are combined with a logical 'AND'.
input ShortcutBoolExp {
  _and: [ShortcutBoolExp!]
  _not: ShortcutBoolExp
  _or: [ShortcutBoolExp!]
  actor: ActorBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  targetActorId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "shortcut"
enum ShortcutConstraint {
  # unique or primary key constraint on columns "id"
  shortcut_pkey
}

# input type for incrementing numeric columns in table "shortcut"
input ShortcutIncInput {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

# input type for inserting data into table "shortcut"
input ShortcutInsertInput {
  actor: ActorObjRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  targetActorId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type ShortcutMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

# order by max() on columns of table "shortcut"
input ShortcutMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

# aggregate min on columns
type ShortcutMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

# order by min() on columns of table "shortcut"
input ShortcutMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
}

# response of any mutation on the table "shortcut"
type ShortcutMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Shortcut!]!
}

# on_conflict condition type for table "shortcut"
input ShortcutOnConflict {
  constraint: ShortcutConstraint!
  updateColumns: [ShortcutUpdateColumn!]! = []
  where: ShortcutBoolExp
}

# Ordering options when selecting data from "shortcut".
input ShortcutOrderBy {
  actor: ActorOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  targetActorId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: shortcut
input ShortcutPkColumnsInput {
  id: bigint!
}

# select columns of table "shortcut"
enum ShortcutSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  targetActorId

  # column name
  tenantId

  # column name
  type

  # column name
  userId
}

# input type for updating data in table "shortcut"
input ShortcutSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

# aggregate stddev on columns
type ShortcutStddevFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

# order by stddev() on columns of table "shortcut"
input ShortcutStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevPop on columns
type ShortcutStddevPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

# order by stddevPop() on columns of table "shortcut"
input ShortcutStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevSamp on columns
type ShortcutStddevSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

# order by stddevSamp() on columns of table "shortcut"
input ShortcutStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Streaming cursor of the table "shortcut"
input ShortcutStreamCursorInput {
  # Stream column input with initial value
  initialValue: ShortcutStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ShortcutStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  type: String
  userId: bigint
}

# aggregate sum on columns
type ShortcutSumFields {
  createdById: bigint
  id: bigint
  targetActorId: bigint
  tenantId: bigint
  userId: bigint
}

# order by sum() on columns of table "shortcut"
input ShortcutSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# update columns of table "shortcut"
enum ShortcutUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  targetActorId

  # column name
  tenantId

  # column name
  type

  # column name
  userId
}

input ShortcutUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ShortcutIncInput

  # sets the columns of the filtered rows to the given values
  _set: ShortcutSetInput

  # filter the rows which have to be updated
  where: ShortcutBoolExp!
}

# aggregate variance on columns
type ShortcutVarianceFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

# order by variance() on columns of table "shortcut"
input ShortcutVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varPop on columns
type ShortcutVarPopFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

# order by varPop() on columns of table "shortcut"
input ShortcutVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varSamp on columns
type ShortcutVarSampFields {
  createdById: Float
  id: Float
  targetActorId: Float
  tenantId: Float
  userId: Float
}

# order by varSamp() on columns of table "shortcut"
input ShortcutVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  targetActorId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

scalar smallint

# Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
input SmallintComparisonExp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _isNull: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

# columns and relationships of "social"
type Social {
  # An object relationship
  actor: Actor!
  actorId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  order: smallint!
  pseudo: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  url: String!
}

# aggregated selection of "social"
type SocialAggregate {
  aggregate: SocialAggregateFields
  nodes: [Social!]!
}

input SocialAggregateBoolExp {
  count: socialAggregateBoolExpCount
}

input socialAggregateBoolExpCount {
  arguments: [SocialSelectColumn!]
  distinct: Boolean
  filter: SocialBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "social"
type SocialAggregateFields {
  avg: SocialAvgFields
  count(columns: [SocialSelectColumn!], distinct: Boolean): Int!
  max: SocialMaxFields
  min: SocialMinFields
  stddev: SocialStddevFields
  stddevPop: SocialStddevPopFields
  stddevSamp: SocialStddevSampFields
  sum: SocialSumFields
  varPop: SocialVarPopFields
  varSamp: SocialVarSampFields
  variance: SocialVarianceFields
}

# order by aggregate values of table "social"
input SocialAggregateOrderBy {
  avg: SocialAvgOrderBy
  count: OrderBy
  max: SocialMaxOrderBy
  min: SocialMinOrderBy
  stddev: SocialStddevOrderBy
  stddevPop: SocialStddevPopOrderBy
  stddevSamp: SocialStddevSampOrderBy
  sum: SocialSumOrderBy
  varPop: SocialVarPopOrderBy
  varSamp: SocialVarSampOrderBy
  variance: SocialVarianceOrderBy
}

# input type for inserting array relation for remote table "social"
input SocialArrRelInsertInput {
  data: [SocialInsertInput!]!

  # upsert condition
  onConflict: SocialOnConflict
}

# aggregate avg on columns
type SocialAvgFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by avg() on columns of table "social"
input SocialAvgOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "social". All fields are combined with a logical 'AND'.
input SocialBoolExp {
  _and: [SocialBoolExp!]
  _not: SocialBoolExp
  _or: [SocialBoolExp!]
  actor: ActorBoolExp
  actorId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  order: SmallintComparisonExp
  pseudo: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  url: StringComparisonExp
}

# unique or primary key constraints on table "social"
enum SocialConstraint {
  # unique or primary key constraint on columns "id"
  social_pkey
}

# input type for incrementing numeric columns in table "social"
input SocialIncInput {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

# input type for inserting data into table "social"
input SocialInsertInput {
  actor: ActorObjRelInsertInput
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  order: smallint
  pseudo: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  url: String
}

# aggregate max on columns
type SocialMaxFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# order by max() on columns of table "social"
input SocialMaxOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# aggregate min on columns
type SocialMinFields {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# order by min() on columns of table "social"
input SocialMinOrderBy {
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  order: OrderBy
  pseudo: OrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# response of any mutation on the table "social"
type SocialMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Social!]!
}

# on_conflict condition type for table "social"
input SocialOnConflict {
  constraint: SocialConstraint!
  updateColumns: [SocialUpdateColumn!]! = []
  where: SocialBoolExp
}

# Ordering options when selecting data from "social".
input SocialOrderBy {
  actor: ActorOrderBy
  actorId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  order: OrderBy
  pseudo: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  url: OrderBy
}

# primary key columns input for table: social
input SocialPkColumnsInput {
  id: bigint!
}

# select columns of table "social"
enum SocialSelectColumn {
  # column name
  actorId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  order

  # column name
  pseudo

  # column name
  tenantId

  # column name
  type

  # column name
  url
}

# input type for updating data in table "social"
input SocialSetInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# aggregate stddev on columns
type SocialStddevFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by stddev() on columns of table "social"
input SocialStddevOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type SocialStddevPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "social"
input SocialStddevPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type SocialStddevSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "social"
input SocialStddevSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "social"
input SocialStreamCursorInput {
  # Stream column input with initial value
  initialValue: SocialStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input SocialStreamCursorValueInput {
  actorId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  order: smallint
  pseudo: String
  tenantId: bigint
  type: String
  url: String
}

# aggregate sum on columns
type SocialSumFields {
  actorId: bigint
  createdById: bigint
  id: bigint
  order: smallint
  tenantId: bigint
}

# order by sum() on columns of table "social"
input SocialSumOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# update columns of table "social"
enum SocialUpdateColumn {
  # column name
  actorId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  order

  # column name
  pseudo

  # column name
  tenantId

  # column name
  type

  # column name
  url
}

input SocialUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: SocialIncInput

  # sets the columns of the filtered rows to the given values
  _set: SocialSetInput

  # filter the rows which have to be updated
  where: SocialBoolExp!
}

# aggregate variance on columns
type SocialVarianceFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by variance() on columns of table "social"
input SocialVarianceOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type SocialVarPopFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by varPop() on columns of table "social"
input SocialVarPopOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type SocialVarSampFields {
  actorId: Float
  createdById: Float
  id: Float
  order: Float
  tenantId: Float
}

# order by varSamp() on columns of table "social"
input SocialVarSampOrderBy {
  actorId: OrderBy
  createdById: OrderBy
  id: OrderBy
  order: OrderBy
  tenantId: OrderBy
}

# Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  # does the column match the given case-insensitive pattern
  _ilike: String
  _in: [String!]

  # does the column match the given POSIX regular expression, case insensitive
  _iregex: String
  _isNull: Boolean

  # does the column match the given pattern
  _like: String
  _lt: String
  _lte: String
  _neq: String

  # does the column NOT match the given case-insensitive pattern
  _nilike: String
  _nin: [String!]

  # does the column NOT match the given POSIX regular expression, case insensitive
  _niregex: String

  # does the column NOT match the given pattern
  _nlike: String

  # does the column NOT match the given POSIX regular expression, case sensitive
  _nregex: String

  # does the column NOT match the given SQL regular expression
  _nsimilar: String

  # does the column match the given POSIX regular expression, case sensitive
  _regex: String

  # does the column match the given SQL regular expression
  _similar: String
}

# columns and relationships of "subject"
type Subject {
  # An array relationship
  classGroupTeacherSubjects(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  # An aggregate relationship
  classGroupTeacherSubjectsAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!
  code: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String

  # An array relationship
  documents(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): [Document!]!

  # An aggregate relationship
  documentsAggregate(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): DocumentAggregate!
  englishName: String
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  lastActiveDate: timestamptz
  name: String!

  # An array relationship
  subjectClassGroups(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  # An aggregate relationship
  subjectClassGroupsAggregate(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

# aggregated selection of "subject"
type SubjectAggregate {
  aggregate: SubjectAggregateFields
  nodes: [Subject!]!
}

input SubjectAggregateBoolExp {
  count: subjectAggregateBoolExpCount
}

input subjectAggregateBoolExpCount {
  arguments: [SubjectSelectColumn!]
  distinct: Boolean
  filter: SubjectBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "subject"
type SubjectAggregateFields {
  avg: SubjectAvgFields
  count(columns: [SubjectSelectColumn!], distinct: Boolean): Int!
  max: SubjectMaxFields
  min: SubjectMinFields
  stddev: SubjectStddevFields
  stddevPop: SubjectStddevPopFields
  stddevSamp: SubjectStddevSampFields
  sum: SubjectSumFields
  varPop: SubjectVarPopFields
  varSamp: SubjectVarSampFields
  variance: SubjectVarianceFields
}

# order by aggregate values of table "subject"
input SubjectAggregateOrderBy {
  avg: SubjectAvgOrderBy
  count: OrderBy
  max: SubjectMaxOrderBy
  min: SubjectMinOrderBy
  stddev: SubjectStddevOrderBy
  stddevPop: SubjectStddevPopOrderBy
  stddevSamp: SubjectStddevSampOrderBy
  sum: SubjectSumOrderBy
  varPop: SubjectVarPopOrderBy
  varSamp: SubjectVarSampOrderBy
  variance: SubjectVarianceOrderBy
}

# input type for inserting array relation for remote table "subject"
input SubjectArrRelInsertInput {
  data: [SubjectInsertInput!]!

  # upsert condition
  onConflict: SubjectOnConflict
}

# aggregate avg on columns
type SubjectAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "subject"
input SubjectAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "subject". All fields are combined with a logical 'AND'.
input SubjectBoolExp {
  _and: [SubjectBoolExp!]
  _not: SubjectBoolExp
  _or: [SubjectBoolExp!]
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsBoolExp
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateBoolExp
  code: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  englishName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  name: StringComparisonExp
  subjectClassGroups: SubjectClassGroupsBoolExp
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

# columns and relationships of "subject_class_groups"
type SubjectClassGroups {
  # An object relationship
  classGroup: ClassGroup!
  classGroupId: bigint!

  # An object relationship
  subject: Subject!
  subjectId: bigint!
}

# aggregated selection of "subject_class_groups"
type SubjectClassGroupsAggregate {
  aggregate: SubjectClassGroupsAggregateFields
  nodes: [SubjectClassGroups!]!
}

input SubjectClassGroupsAggregateBoolExp {
  count: subjectClassGroupsAggregateBoolExpCount
}

input subjectClassGroupsAggregateBoolExpCount {
  arguments: [SubjectClassGroupsSelectColumn!]
  distinct: Boolean
  filter: SubjectClassGroupsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "subject_class_groups"
type SubjectClassGroupsAggregateFields {
  avg: SubjectClassGroupsAvgFields
  count(columns: [SubjectClassGroupsSelectColumn!], distinct: Boolean): Int!
  max: SubjectClassGroupsMaxFields
  min: SubjectClassGroupsMinFields
  stddev: SubjectClassGroupsStddevFields
  stddevPop: SubjectClassGroupsStddevPopFields
  stddevSamp: SubjectClassGroupsStddevSampFields
  sum: SubjectClassGroupsSumFields
  varPop: SubjectClassGroupsVarPopFields
  varSamp: SubjectClassGroupsVarSampFields
  variance: SubjectClassGroupsVarianceFields
}

# order by aggregate values of table "subject_class_groups"
input SubjectClassGroupsAggregateOrderBy {
  avg: SubjectClassGroupsAvgOrderBy
  count: OrderBy
  max: SubjectClassGroupsMaxOrderBy
  min: SubjectClassGroupsMinOrderBy
  stddev: SubjectClassGroupsStddevOrderBy
  stddevPop: SubjectClassGroupsStddevPopOrderBy
  stddevSamp: SubjectClassGroupsStddevSampOrderBy
  sum: SubjectClassGroupsSumOrderBy
  varPop: SubjectClassGroupsVarPopOrderBy
  varSamp: SubjectClassGroupsVarSampOrderBy
  variance: SubjectClassGroupsVarianceOrderBy
}

# input type for inserting array relation for remote table "subject_class_groups"
input SubjectClassGroupsArrRelInsertInput {
  data: [SubjectClassGroupsInsertInput!]!

  # upsert condition
  onConflict: SubjectClassGroupsOnConflict
}

# aggregate avg on columns
type SubjectClassGroupsAvgFields {
  classGroupId: Float
  subjectId: Float
}

# order by avg() on columns of table "subject_class_groups"
input SubjectClassGroupsAvgOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# Boolean expression to filter rows from the table "subject_class_groups". All fields are combined with a logical 'AND'.
input SubjectClassGroupsBoolExp {
  _and: [SubjectClassGroupsBoolExp!]
  _not: SubjectClassGroupsBoolExp
  _or: [SubjectClassGroupsBoolExp!]
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  subject: SubjectBoolExp
  subjectId: BigintComparisonExp
}

# unique or primary key constraints on table "subject_class_groups"
enum SubjectClassGroupsConstraint {
  # unique or primary key constraint on columns "class_group_id", "subject_id"
  subject_class_groups_pkey
}

# input type for incrementing numeric columns in table "subject_class_groups"
input SubjectClassGroupsIncInput {
  classGroupId: bigint
  subjectId: bigint
}

# input type for inserting data into table "subject_class_groups"
input SubjectClassGroupsInsertInput {
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  subject: SubjectObjRelInsertInput
  subjectId: bigint
}

# aggregate max on columns
type SubjectClassGroupsMaxFields {
  classGroupId: bigint
  subjectId: bigint
}

# order by max() on columns of table "subject_class_groups"
input SubjectClassGroupsMaxOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# aggregate min on columns
type SubjectClassGroupsMinFields {
  classGroupId: bigint
  subjectId: bigint
}

# order by min() on columns of table "subject_class_groups"
input SubjectClassGroupsMinOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# response of any mutation on the table "subject_class_groups"
type SubjectClassGroupsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [SubjectClassGroups!]!
}

# on_conflict condition type for table "subject_class_groups"
input SubjectClassGroupsOnConflict {
  constraint: SubjectClassGroupsConstraint!
  updateColumns: [SubjectClassGroupsUpdateColumn!]! = []
  where: SubjectClassGroupsBoolExp
}

# Ordering options when selecting data from "subject_class_groups".
input SubjectClassGroupsOrderBy {
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  subject: SubjectOrderBy
  subjectId: OrderBy
}

# primary key columns input for table: subject_class_groups
input SubjectClassGroupsPkColumnsInput {
  classGroupId: bigint!
  subjectId: bigint!
}

# select columns of table "subject_class_groups"
enum SubjectClassGroupsSelectColumn {
  # column name
  classGroupId

  # column name
  subjectId
}

# input type for updating data in table "subject_class_groups"
input SubjectClassGroupsSetInput {
  classGroupId: bigint
  subjectId: bigint
}

# aggregate stddev on columns
type SubjectClassGroupsStddevFields {
  classGroupId: Float
  subjectId: Float
}

# order by stddev() on columns of table "subject_class_groups"
input SubjectClassGroupsStddevOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# aggregate stddevPop on columns
type SubjectClassGroupsStddevPopFields {
  classGroupId: Float
  subjectId: Float
}

# order by stddevPop() on columns of table "subject_class_groups"
input SubjectClassGroupsStddevPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# aggregate stddevSamp on columns
type SubjectClassGroupsStddevSampFields {
  classGroupId: Float
  subjectId: Float
}

# order by stddevSamp() on columns of table "subject_class_groups"
input SubjectClassGroupsStddevSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# Streaming cursor of the table "subject_class_groups"
input SubjectClassGroupsStreamCursorInput {
  # Stream column input with initial value
  initialValue: SubjectClassGroupsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input SubjectClassGroupsStreamCursorValueInput {
  classGroupId: bigint
  subjectId: bigint
}

# aggregate sum on columns
type SubjectClassGroupsSumFields {
  classGroupId: bigint
  subjectId: bigint
}

# order by sum() on columns of table "subject_class_groups"
input SubjectClassGroupsSumOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# update columns of table "subject_class_groups"
enum SubjectClassGroupsUpdateColumn {
  # column name
  classGroupId

  # column name
  subjectId
}

input SubjectClassGroupsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: SubjectClassGroupsIncInput

  # sets the columns of the filtered rows to the given values
  _set: SubjectClassGroupsSetInput

  # filter the rows which have to be updated
  where: SubjectClassGroupsBoolExp!
}

# aggregate variance on columns
type SubjectClassGroupsVarianceFields {
  classGroupId: Float
  subjectId: Float
}

# order by variance() on columns of table "subject_class_groups"
input SubjectClassGroupsVarianceOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# aggregate varPop on columns
type SubjectClassGroupsVarPopFields {
  classGroupId: Float
  subjectId: Float
}

# order by varPop() on columns of table "subject_class_groups"
input SubjectClassGroupsVarPopOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# aggregate varSamp on columns
type SubjectClassGroupsVarSampFields {
  classGroupId: Float
  subjectId: Float
}

# order by varSamp() on columns of table "subject_class_groups"
input SubjectClassGroupsVarSampOrderBy {
  classGroupId: OrderBy
  subjectId: OrderBy
}

# unique or primary key constraints on table "subject"
enum SubjectConstraint {
  # unique or primary key constraint on columns "id"
  subject_pkey
}

# input type for incrementing numeric columns in table "subject"
input SubjectIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "subject"
input SubjectInsertInput {
  classGroupTeacherSubjects: ClassGroupTeacherSubjectsArrRelInsertInput
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  documents: DocumentArrRelInsertInput
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  name: String
  subjectClassGroups: SubjectClassGroupsArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

# aggregate max on columns
type SubjectMaxFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

# order by max() on columns of table "subject"
input SubjectMaxOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type SubjectMinFields {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

# order by min() on columns of table "subject"
input SubjectMinOrderBy {
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "subject"
type SubjectMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Subject!]!
}

# input type for inserting object relation for remote table "subject"
input SubjectObjRelInsertInput {
  data: SubjectInsertInput!

  # upsert condition
  onConflict: SubjectOnConflict
}

# on_conflict condition type for table "subject"
input SubjectOnConflict {
  constraint: SubjectConstraint!
  updateColumns: [SubjectUpdateColumn!]! = []
  where: SubjectBoolExp
}

# Ordering options when selecting data from "subject".
input SubjectOrderBy {
  classGroupTeacherSubjectsAggregate: ClassGroupTeacherSubjectsAggregateOrderBy
  code: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  englishName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  name: OrderBy
  subjectClassGroupsAggregate: SubjectClassGroupsAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

# primary key columns input for table: subject
input SubjectPkColumnsInput {
  id: bigint!
}

# select columns of table "subject"
enum SubjectSelectColumn {
  # column name
  code

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  englishName

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  name

  # column name
  tenantId

  # column name
  type
}

# input type for updating data in table "subject"
input SubjectSetInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type SubjectStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "subject"
input SubjectStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type SubjectStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "subject"
input SubjectStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type SubjectStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "subject"
input SubjectStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "subject"
input SubjectStreamCursorInput {
  # Stream column input with initial value
  initialValue: SubjectStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input SubjectStreamCursorValueInput {
  code: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  englishName: String
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  name: String
  tenantId: bigint
  type: String
}

# aggregate sum on columns
type SubjectSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "subject"
input SubjectSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "subject"
enum SubjectUpdateColumn {
  # column name
  code

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  englishName

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  name

  # column name
  tenantId

  # column name
  type
}

input SubjectUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: SubjectIncInput

  # sets the columns of the filtered rows to the given values
  _set: SubjectSetInput

  # filter the rows which have to be updated
  where: SubjectBoolExp!
}

# aggregate variance on columns
type SubjectVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "subject"
input SubjectVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type SubjectVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "subject"
input SubjectVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type SubjectVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "subject"
input SubjectVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

type Subscription {
  # fetch data from the table: "action"
  action(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # fetch aggregated fields from the table: "action"
  actionAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!

  # fetch data from the table: "action" using primary key columns
  actionByPk(id: bigint!): Action

  # fetch data from the table in a streaming manner: "action"
  actionStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ActionStreamCursorInput]!

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # fetch data from the table: "actor"
  actor(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): [Actor!]!

  # fetch data from the table: "actor_address"
  actorAddress(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  # fetch aggregated fields from the table: "actor_address"
  actorAddressAggregate(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  # fetch data from the table: "actor_address" using primary key columns
  actorAddressByPk(id: bigint!): ActorAddress

  # fetch data from the table in a streaming manner: "actor_address"
  actorAddressStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ActorAddressStreamCursorInput]!

    # filter the rows returned
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  # fetch aggregated fields from the table: "actor"
  actorAggregate(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): ActorAggregate!

  # fetch data from the table: "actor_bank_info"
  actorBankInfo(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  # fetch aggregated fields from the table: "actor_bank_info"
  actorBankInfoAggregate(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  # fetch data from the table: "actor_bank_info" using primary key columns
  actorBankInfoByPk(id: bigint!): ActorBankInfo

  # fetch data from the table in a streaming manner: "actor_bank_info"
  actorBankInfoStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ActorBankInfoStreamCursorInput]!

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  # fetch data from the table: "actor" using primary key columns
  actorByPk(id: bigint!): Actor

  # fetch data from the table: "actor_image"
  actorImage(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): [ActorImage!]!

  # fetch aggregated fields from the table: "actor_image"
  actorImageAggregate(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  # fetch data from the table: "actor_image" using primary key columns
  actorImageByPk(id: bigint!): ActorImage

  # fetch data from the table in a streaming manner: "actor_image"
  actorImageStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ActorImageStreamCursorInput]!

    # filter the rows returned
    where: ActorImageBoolExp
  ): [ActorImage!]!

  # fetch data from the table in a streaming manner: "actor"
  actorStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ActorStreamCursorInput]!

    # filter the rows returned
    where: ActorBoolExp
  ): [Actor!]!

  # An array relationship
  actorTags(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  # An aggregate relationship
  actorTagsAggregate(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!

  # fetch data from the table: "actor_tags" using primary key columns
  actorTagsByPk(actorId: bigint!, tagId: bigint!): ActorTags

  # fetch data from the table in a streaming manner: "actor_tags"
  actorTagsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ActorTagsStreamCursorInput]!

    # filter the rows returned
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  # fetch data from the table: "bot_info"
  botInfo(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): [BotInfo!]!

  # fetch aggregated fields from the table: "bot_info"
  botInfoAggregate(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  # fetch data from the table: "bot_info" using primary key columns
  botInfoByPk(id: bigint!): BotInfo

  # fetch data from the table in a streaming manner: "bot_info"
  botInfoStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [BotInfoStreamCursorInput]!

    # filter the rows returned
    where: BotInfoBoolExp
  ): [BotInfo!]!

  # fetch data from the table: "campus"
  campus(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): [Campus!]!

  # fetch aggregated fields from the table: "campus"
  campusAggregate(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): CampusAggregate!

  # fetch data from the table: "campus" using primary key columns
  campusByPk(id: bigint!): Campus

  # fetch data from the table in a streaming manner: "campus"
  campusStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [CampusStreamCursorInput]!

    # filter the rows returned
    where: CampusBoolExp
  ): [Campus!]!

  # fetch data from the table: "canteen"
  canteen(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): [Canteen!]!

  # fetch aggregated fields from the table: "canteen"
  canteenAggregate(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): CanteenAggregate!

  # fetch data from the table: "canteen" using primary key columns
  canteenByPk(id: bigint!): Canteen

  # fetch data from the table: "canteen_food"
  canteenFood(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  # fetch aggregated fields from the table: "canteen_food"
  canteenFoodAggregate(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  # fetch data from the table: "canteen_food" using primary key columns
  canteenFoodByPk(id: bigint!): CanteenFood

  # fetch data from the table in a streaming manner: "canteen_food"
  canteenFoodStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [CanteenFoodStreamCursorInput]!

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  # fetch data from the table: "canteen_menu"
  canteenMenu(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  # fetch aggregated fields from the table: "canteen_menu"
  canteenMenuAggregate(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  # fetch data from the table: "canteen_menu" using primary key columns
  canteenMenuByPk(id: bigint!): CanteenMenu

  # fetch data from the table in a streaming manner: "canteen_menu"
  canteenMenuStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [CanteenMenuStreamCursorInput]!

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  # fetch data from the table in a streaming manner: "canteen"
  canteenStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [CanteenStreamCursorInput]!

    # filter the rows returned
    where: CanteenBoolExp
  ): [Canteen!]!

  # fetch data from the table: "class_group"
  classGroup(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  # fetch aggregated fields from the table: "class_group"
  classGroupAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  # fetch data from the table: "class_group" using primary key columns
  classGroupByPk(id: bigint!): ClassGroup

  # fetch data from the table in a streaming manner: "class_group"
  classGroupStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ClassGroupStreamCursorInput]!

    # filter the rows returned
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  # fetch data from the table: "class_group_teacher"
  classGroupTeacher(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  # fetch aggregated fields from the table: "class_group_teacher"
  classGroupTeacherAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  # fetch data from the table: "class_group_teacher" using primary key columns
  classGroupTeacherByPk(id: bigint!): ClassGroupTeacher

  # fetch data from the table in a streaming manner: "class_group_teacher"
  classGroupTeacherStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ClassGroupTeacherStreamCursorInput]!

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  # An array relationship
  classGroupTeacherSubjects(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  # An aggregate relationship
  classGroupTeacherSubjectsAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSubjectsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherSubjectsOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): ClassGroupTeacherSubjectsAggregate!

  # fetch data from the table: "class_group_teacher_subjects" using primary key columns
  classGroupTeacherSubjectsByPk(classGroupTeacherId: bigint!, subjectId: bigint!): ClassGroupTeacherSubjects

  # fetch data from the table in a streaming manner: "class_group_teacher_subjects"
  classGroupTeacherSubjectsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ClassGroupTeacherSubjectsStreamCursorInput]!

    # filter the rows returned
    where: ClassGroupTeacherSubjectsBoolExp
  ): [ClassGroupTeacherSubjects!]!

  # fetch data from the table: "cohort"
  cohort(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): [Cohort!]!

  # fetch aggregated fields from the table: "cohort"
  cohortAggregate(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): CohortAggregate!

  # fetch data from the table: "cohort" using primary key columns
  cohortByPk(id: bigint!): Cohort

  # fetch data from the table in a streaming manner: "cohort"
  cohortStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [CohortStreamCursorInput]!

    # filter the rows returned
    where: CohortBoolExp
  ): [Cohort!]!

  # fetch data from the table: "content"
  content(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # fetch aggregated fields from the table: "content"
  contentAggregate(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): ContentAggregate!

  # An array relationship
  contentAttachments(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  # An aggregate relationship
  contentAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ContentAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentAttachmentsOrderBy!]

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): ContentAttachmentsAggregate!

  # fetch data from the table: "content_attachments" using primary key columns
  contentAttachmentsByPk(contentId: bigint!, fileUploadId: bigint!): ContentAttachments

  # fetch data from the table in a streaming manner: "content_attachments"
  contentAttachmentsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ContentAttachmentsStreamCursorInput]!

    # filter the rows returned
    where: ContentAttachmentsBoolExp
  ): [ContentAttachments!]!

  # fetch data from the table: "content" using primary key columns
  contentByPk(id: bigint!): Content

  # fetch data from the table in a streaming manner: "content"
  contentStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ContentStreamCursorInput]!

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # fetch data from the table: "document"
  document(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): [Document!]!

  # fetch aggregated fields from the table: "document"
  documentAggregate(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): DocumentAggregate!

  # fetch data from the table: "document" using primary key columns
  documentByPk(id: bigint!): Document

  # fetch data from the table in a streaming manner: "document"
  documentStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [DocumentStreamCursorInput]!

    # filter the rows returned
    where: DocumentBoolExp
  ): [Document!]!

  # fetch data from the table: "event"
  event(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # fetch aggregated fields from the table: "event"
  eventAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # fetch data from the table: "event_approval"
  eventApproval(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  # fetch aggregated fields from the table: "event_approval"
  eventApprovalAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  # fetch data from the table: "event_approval" using primary key columns
  eventApprovalByPk(id: bigint!): EventApproval

  # fetch data from the table: "event_approval_step"
  eventApprovalStep(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  # fetch aggregated fields from the table: "event_approval_step"
  eventApprovalStepAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  # fetch data from the table: "event_approval_step" using primary key columns
  eventApprovalStepByPk(id: bigint!): EventApprovalStep

  # An array relationship
  eventApprovalStepNotifiees(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  # An aggregate relationship
  eventApprovalStepNotifieesAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepNotifieesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepNotifieesOrderBy!]

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): EventApprovalStepNotifieesAggregate!

  # fetch data from the table: "event_approval_step_notifiees" using primary key columns
  eventApprovalStepNotifieesByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepNotifiees

  # fetch data from the table in a streaming manner: "event_approval_step_notifiees"
  eventApprovalStepNotifieesStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventApprovalStepNotifieesStreamCursorInput]!

    # filter the rows returned
    where: EventApprovalStepNotifieesBoolExp
  ): [EventApprovalStepNotifiees!]!

  # fetch data from the table in a streaming manner: "event_approval_step"
  eventApprovalStepStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventApprovalStepStreamCursorInput]!

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  # An array relationship
  eventApprovalStepValidators(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  # An aggregate relationship
  eventApprovalStepValidatorsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepValidatorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepValidatorsOrderBy!]

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): EventApprovalStepValidatorsAggregate!

  # fetch data from the table: "event_approval_step_validators" using primary key columns
  eventApprovalStepValidatorsByPk(eventApprovalStepId: bigint!, individualId: bigint!): EventApprovalStepValidators

  # fetch data from the table in a streaming manner: "event_approval_step_validators"
  eventApprovalStepValidatorsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventApprovalStepValidatorsStreamCursorInput]!

    # filter the rows returned
    where: EventApprovalStepValidatorsBoolExp
  ): [EventApprovalStepValidators!]!

  # fetch data from the table in a streaming manner: "event_approval"
  eventApprovalStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventApprovalStreamCursorInput]!

    # filter the rows returned
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  # fetch data from the table: "event" using primary key columns
  eventByPk(id: bigint!): Event

  # fetch data from the table: "event_join"
  eventJoin(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # fetch aggregated fields from the table: "event_join"
  eventJoinAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # fetch data from the table: "event_join" using primary key columns
  eventJoinByPk(id: bigint!): EventJoin

  # fetch data from the table in a streaming manner: "event_join"
  eventJoinStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventJoinStreamCursorInput]!

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # fetch data from the table: "event_manage"
  eventManage(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): [EventManage!]!

  # fetch aggregated fields from the table: "event_manage"
  eventManageAggregate(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): EventManageAggregate!

  # fetch data from the table: "event_manage" using primary key columns
  eventManageByPk(id: bigint!): EventManage

  # fetch data from the table in a streaming manner: "event_manage"
  eventManageStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventManageStreamCursorInput]!

    # filter the rows returned
    where: EventManageBoolExp
  ): [EventManage!]!

  # fetch data from the table in a streaming manner: "event"
  eventStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventStreamCursorInput]!

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An array relationship
  eventSupervisors(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): [EventSupervisors!]!

  # An aggregate relationship
  eventSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): EventSupervisorsAggregate!

  # fetch data from the table: "event_supervisors" using primary key columns
  eventSupervisorsByPk(eventId: bigint!, userInfoId: bigint!): EventSupervisors

  # fetch data from the table in a streaming manner: "event_supervisors"
  eventSupervisorsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventSupervisorsStreamCursorInput]!

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): [EventSupervisors!]!

  # An array relationship
  eventTags(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): [EventTags!]!

  # An aggregate relationship
  eventTagsAggregate(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  # fetch data from the table: "event_tags" using primary key columns
  eventTagsByPk(eventId: bigint!, tagId: bigint!): EventTags

  # fetch data from the table in a streaming manner: "event_tags"
  eventTagsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [EventTagsStreamCursorInput]!

    # filter the rows returned
    where: EventTagsBoolExp
  ): [EventTags!]!

  # fetch data from the table: "expense"
  expense(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # fetch aggregated fields from the table: "expense"
  expenseAggregate(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  # fetch data from the table: "expense" using primary key columns
  expenseByPk(id: bigint!): Expense

  # fetch data from the table: "expense_item"
  expenseItem(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): [ExpenseItem!]!

  # fetch aggregated fields from the table: "expense_item"
  expenseItemAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): ExpenseItemAggregate!

  # An array relationship
  expenseItemAttachments(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): [ExpenseItemAttachments!]!

  # An aggregate relationship
  expenseItemAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemAttachmentsOrderBy!]

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): ExpenseItemAttachmentsAggregate!

  # fetch data from the table: "expense_item_attachments" using primary key columns
  expenseItemAttachmentsByPk(expenseItemId: bigint!, fileUploadId: bigint!): ExpenseItemAttachments

  # fetch data from the table in a streaming manner: "expense_item_attachments"
  expenseItemAttachmentsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ExpenseItemAttachmentsStreamCursorInput]!

    # filter the rows returned
    where: ExpenseItemAttachmentsBoolExp
  ): [ExpenseItemAttachments!]!

  # fetch data from the table: "expense_item" using primary key columns
  expenseItemByPk(id: bigint!): ExpenseItem

  # fetch data from the table in a streaming manner: "expense_item"
  expenseItemStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ExpenseItemStreamCursorInput]!

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): [ExpenseItem!]!

  # fetch data from the table in a streaming manner: "expense"
  expenseStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ExpenseStreamCursorInput]!

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # fetch data from the table: "favorite"
  favorite(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): [Favorite!]!

  # fetch aggregated fields from the table: "favorite"
  favoriteAggregate(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  # fetch data from the table: "favorite" using primary key columns
  favoriteByPk(id: bigint!): Favorite

  # fetch data from the table in a streaming manner: "favorite"
  favoriteStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [FavoriteStreamCursorInput]!

    # filter the rows returned
    where: FavoriteBoolExp
  ): [Favorite!]!

  # fetch data from the table: "file_upload"
  fileUpload(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): [FileUpload!]!

  # fetch aggregated fields from the table: "file_upload"
  fileUploadAggregate(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  # fetch data from the table: "file_upload" using primary key columns
  fileUploadByPk(id: bigint!): FileUpload

  # fetch data from the table in a streaming manner: "file_upload"
  fileUploadStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [FileUploadStreamCursorInput]!

    # filter the rows returned
    where: FileUploadBoolExp
  ): [FileUpload!]!

  # fetch data from the table: "finance"
  finance(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # fetch aggregated fields from the table: "finance"
  financeAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!

  # An array relationship
  financeAttachments(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): [FinanceAttachments!]!

  # An aggregate relationship
  financeAttachmentsAggregate(
    # distinct select on columns
    distinctOn: [FinanceAttachmentsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceAttachmentsOrderBy!]

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): FinanceAttachmentsAggregate!

  # fetch data from the table: "finance_attachments" using primary key columns
  financeAttachmentsByPk(fileUploadId: bigint!, financeId: bigint!): FinanceAttachments

  # fetch data from the table in a streaming manner: "finance_attachments"
  financeAttachmentsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [FinanceAttachmentsStreamCursorInput]!

    # filter the rows returned
    where: FinanceAttachmentsBoolExp
  ): [FinanceAttachments!]!

  # fetch data from the table: "finance" using primary key columns
  financeByPk(id: bigint!): Finance

  # fetch data from the table in a streaming manner: "finance"
  financeStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [FinanceStreamCursorInput]!

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # fetch data from the table: "follow"
  follow(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): [Follow!]!

  # fetch aggregated fields from the table: "follow"
  followAggregate(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): FollowAggregate!

  # fetch data from the table: "follow" using primary key columns
  followByPk(id: bigint!): Follow

  # fetch data from the table in a streaming manner: "follow"
  followStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [FollowStreamCursorInput]!

    # filter the rows returned
    where: FollowBoolExp
  ): [Follow!]!

  # fetch data from the table: "form"
  form(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): [Form!]!

  # fetch aggregated fields from the table: "form"
  formAggregate(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): FormAggregate!

  # fetch data from the table: "form" using primary key columns
  formByPk(id: bigint!): Form

  # fetch data from the table in a streaming manner: "form"
  formStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [FormStreamCursorInput]!

    # filter the rows returned
    where: FormBoolExp
  ): [Form!]!

  # fetch data from the table: "form_submission"
  formSubmission(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  # fetch aggregated fields from the table: "form_submission"
  formSubmissionAggregate(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  # fetch data from the table: "form_submission" using primary key columns
  formSubmissionByPk(id: bigint!): FormSubmission

  # fetch data from the table in a streaming manner: "form_submission"
  formSubmissionStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [FormSubmissionStreamCursorInput]!

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  # fetch data from the table: "individual"
  individual(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): [Individual!]!

  # fetch aggregated fields from the table: "individual"
  individualAggregate(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): IndividualAggregate!

  # fetch data from the table: "individual" using primary key columns
  individualByPk(id: bigint!): Individual

  # fetch data from the table in a streaming manner: "individual"
  individualStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [IndividualStreamCursorInput]!

    # filter the rows returned
    where: IndividualBoolExp
  ): [Individual!]!

  # fetch data from the table: "issue"
  issue(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): [Issue!]!

  # fetch aggregated fields from the table: "issue"
  issueAggregate(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): IssueAggregate!

  # fetch data from the table: "issue" using primary key columns
  issueByPk(id: bigint!): Issue

  # An array relationship
  issueContributors(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): [IssueContributors!]!

  # An aggregate relationship
  issueContributorsAggregate(
    # distinct select on columns
    distinctOn: [IssueContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueContributorsOrderBy!]

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): IssueContributorsAggregate!

  # fetch data from the table: "issue_contributors" using primary key columns
  issueContributorsByPk(individualId: bigint!, issueId: bigint!): IssueContributors

  # fetch data from the table in a streaming manner: "issue_contributors"
  issueContributorsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [IssueContributorsStreamCursorInput]!

    # filter the rows returned
    where: IssueContributorsBoolExp
  ): [IssueContributors!]!

  # fetch data from the table in a streaming manner: "issue"
  issueStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [IssueStreamCursorInput]!

    # filter the rows returned
    where: IssueBoolExp
  ): [Issue!]!

  # An array relationship
  issueTags(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): [IssueTags!]!

  # An aggregate relationship
  issueTagsAggregate(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): IssueTagsAggregate!

  # fetch data from the table: "issue_tags" using primary key columns
  issueTagsByPk(issueId: bigint!, tagId: bigint!): IssueTags

  # fetch data from the table in a streaming manner: "issue_tags"
  issueTagsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [IssueTagsStreamCursorInput]!

    # filter the rows returned
    where: IssueTagsBoolExp
  ): [IssueTags!]!

  # fetch data from the table: "legal_unit"
  legalUnit(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): [LegalUnit!]!

  # fetch aggregated fields from the table: "legal_unit"
  legalUnitAggregate(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): LegalUnitAggregate!

  # fetch data from the table: "legal_unit" using primary key columns
  legalUnitByPk(id: bigint!): LegalUnit

  # fetch data from the table in a streaming manner: "legal_unit"
  legalUnitStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [LegalUnitStreamCursorInput]!

    # filter the rows returned
    where: LegalUnitBoolExp
  ): [LegalUnit!]!

  # fetch data from the table: "mission"
  mission(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # fetch aggregated fields from the table: "mission"
  missionAggregate(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): MissionAggregate!

  # fetch data from the table: "mission" using primary key columns
  missionByPk(id: bigint!): Mission

  # fetch data from the table: "mission_join"
  missionJoin(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # fetch aggregated fields from the table: "mission_join"
  missionJoinAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!

  # fetch data from the table: "mission_join" using primary key columns
  missionJoinByPk(id: bigint!): MissionJoin

  # fetch data from the table in a streaming manner: "mission_join"
  missionJoinStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [MissionJoinStreamCursorInput]!

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # fetch data from the table in a streaming manner: "mission"
  missionStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [MissionStreamCursorInput]!

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # fetch data from the table: "pole"
  pole(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): [Pole!]!

  # fetch aggregated fields from the table: "pole"
  poleAggregate(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): PoleAggregate!

  # fetch data from the table: "pole" using primary key columns
  poleByPk(id: bigint!): Pole

  # fetch data from the table in a streaming manner: "pole"
  poleStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [PoleStreamCursorInput]!

    # filter the rows returned
    where: PoleBoolExp
  ): [Pole!]!

  # fetch data from the table: "project"
  project(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): [Project!]!

  # fetch aggregated fields from the table: "project"
  projectAggregate(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): ProjectAggregate!

  # fetch data from the table: "project" using primary key columns
  projectByPk(id: bigint!): Project

  # fetch data from the table in a streaming manner: "project"
  projectStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ProjectStreamCursorInput]!

    # filter the rows returned
    where: ProjectBoolExp
  ): [Project!]!

  # An array relationship
  projectSupervisors(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  # An aggregate relationship
  projectSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!

  # fetch data from the table: "project_supervisors" using primary key columns
  projectSupervisorsByPk(projectId: bigint!, teamMemberId: bigint!): ProjectSupervisors

  # fetch data from the table in a streaming manner: "project_supervisors"
  projectSupervisorsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ProjectSupervisorsStreamCursorInput]!

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  # An array relationship
  projectTags(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  # An aggregate relationship
  projectTagsAggregate(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!

  # fetch data from the table: "project_tags" using primary key columns
  projectTagsByPk(projectId: bigint!, tagId: bigint!): ProjectTags

  # fetch data from the table in a streaming manner: "project_tags"
  projectTagsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ProjectTagsStreamCursorInput]!

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  # fetch data from the table: "reaction"
  reaction(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): [Reaction!]!

  # fetch aggregated fields from the table: "reaction"
  reactionAggregate(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): ReactionAggregate!

  # fetch data from the table: "reaction" using primary key columns
  reactionByPk(id: bigint!): Reaction

  # fetch data from the table in a streaming manner: "reaction"
  reactionStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ReactionStreamCursorInput]!

    # filter the rows returned
    where: ReactionBoolExp
  ): [Reaction!]!

  # fetch data from the table: "report"
  report(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): [Report!]!

  # fetch aggregated fields from the table: "report"
  reportAggregate(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): ReportAggregate!

  # fetch data from the table: "report" using primary key columns
  reportByPk(id: bigint!): Report

  # fetch data from the table in a streaming manner: "report"
  reportStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ReportStreamCursorInput]!

    # filter the rows returned
    where: ReportBoolExp
  ): [Report!]!

  # fetch data from the table: "role"
  role(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): [Role!]!

  # fetch aggregated fields from the table: "role"
  roleAggregate(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): RoleAggregate!

  # fetch data from the table: "role" using primary key columns
  roleByPk(id: bigint!): Role

  # fetch data from the table in a streaming manner: "role"
  roleStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [RoleStreamCursorInput]!

    # filter the rows returned
    where: RoleBoolExp
  ): [Role!]!

  # fetch data from the table: "session"
  session(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): [Session!]!

  # fetch aggregated fields from the table: "session"
  sessionAggregate(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): SessionAggregate!

  # fetch data from the table: "session" using primary key columns
  sessionByPk(id: bigint!): Session

  # fetch data from the table in a streaming manner: "session"
  sessionStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [SessionStreamCursorInput]!

    # filter the rows returned
    where: SessionBoolExp
  ): [Session!]!

  # fetch data from the table: "shortcut"
  shortcut(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): [Shortcut!]!

  # fetch aggregated fields from the table: "shortcut"
  shortcutAggregate(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  # fetch data from the table: "shortcut" using primary key columns
  shortcutByPk(id: bigint!): Shortcut

  # fetch data from the table in a streaming manner: "shortcut"
  shortcutStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ShortcutStreamCursorInput]!

    # filter the rows returned
    where: ShortcutBoolExp
  ): [Shortcut!]!

  # fetch data from the table: "social"
  social(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): [Social!]!

  # fetch aggregated fields from the table: "social"
  socialAggregate(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): SocialAggregate!

  # fetch data from the table: "social" using primary key columns
  socialByPk(id: bigint!): Social

  # fetch data from the table in a streaming manner: "social"
  socialStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [SocialStreamCursorInput]!

    # filter the rows returned
    where: SocialBoolExp
  ): [Social!]!

  # fetch data from the table: "subject"
  subject(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): [Subject!]!

  # fetch aggregated fields from the table: "subject"
  subjectAggregate(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): SubjectAggregate!

  # fetch data from the table: "subject" using primary key columns
  subjectByPk(id: bigint!): Subject

  # An array relationship
  subjectClassGroups(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  # An aggregate relationship
  subjectClassGroupsAggregate(
    # distinct select on columns
    distinctOn: [SubjectClassGroupsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectClassGroupsOrderBy!]

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): SubjectClassGroupsAggregate!

  # fetch data from the table: "subject_class_groups" using primary key columns
  subjectClassGroupsByPk(classGroupId: bigint!, subjectId: bigint!): SubjectClassGroups

  # fetch data from the table in a streaming manner: "subject_class_groups"
  subjectClassGroupsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [SubjectClassGroupsStreamCursorInput]!

    # filter the rows returned
    where: SubjectClassGroupsBoolExp
  ): [SubjectClassGroups!]!

  # fetch data from the table in a streaming manner: "subject"
  subjectStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [SubjectStreamCursorInput]!

    # filter the rows returned
    where: SubjectBoolExp
  ): [Subject!]!

  # fetch data from the table: "tag"
  tag(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): [Tag!]!

  # fetch aggregated fields from the table: "tag"
  tagAggregate(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): TagAggregate!

  # fetch data from the table: "tag" using primary key columns
  tagByPk(id: bigint!): Tag

  # fetch data from the table in a streaming manner: "tag"
  tagStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TagStreamCursorInput]!

    # filter the rows returned
    where: TagBoolExp
  ): [Tag!]!

  # fetch data from the table: "team"
  team(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): [Team!]!

  # fetch aggregated fields from the table: "team"
  teamAggregate(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): TeamAggregate!

  # fetch data from the table: "team" using primary key columns
  teamByPk(id: bigint!): Team

  # An array relationship
  teamEvents(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  # An aggregate relationship
  teamEventsAggregate(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  # fetch data from the table: "team_events" using primary key columns
  teamEventsByPk(eventId: bigint!, teamId: bigint!): TeamEvents

  # fetch data from the table in a streaming manner: "team_events"
  teamEventsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TeamEventsStreamCursorInput]!

    # filter the rows returned
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  # fetch data from the table: "team_join"
  teamJoin(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # fetch aggregated fields from the table: "team_join"
  teamJoinAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # fetch data from the table: "team_join" using primary key columns
  teamJoinByPk(id: bigint!): TeamJoin

  # fetch data from the table in a streaming manner: "team_join"
  teamJoinStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TeamJoinStreamCursorInput]!

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # fetch data from the table: "team_member"
  teamMember(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  # fetch aggregated fields from the table: "team_member"
  teamMemberAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  # fetch data from the table: "team_member" using primary key columns
  teamMemberByPk(id: bigint!): TeamMember

  # An array relationship
  teamMemberRoles(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  # An aggregate relationship
  teamMemberRolesAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  # fetch data from the table: "team_member_roles" using primary key columns
  teamMemberRolesByPk(roleId: bigint!, teamMemberId: bigint!): TeamMemberRoles

  # fetch data from the table in a streaming manner: "team_member_roles"
  teamMemberRolesStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TeamMemberRolesStreamCursorInput]!

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  # fetch data from the table in a streaming manner: "team_member"
  teamMemberStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TeamMemberStreamCursorInput]!

    # filter the rows returned
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  # fetch data from the table: "team_metric"
  teamMetric(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  # fetch aggregated fields from the table: "team_metric"
  teamMetricAggregate(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  # fetch data from the table: "team_metric" using primary key columns
  teamMetricByPk(id: bigint!): TeamMetric

  # fetch data from the table in a streaming manner: "team_metric"
  teamMetricStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TeamMetricStreamCursorInput]!

    # filter the rows returned
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  # fetch data from the table in a streaming manner: "team"
  teamStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TeamStreamCursorInput]!

    # filter the rows returned
    where: TeamBoolExp
  ): [Team!]!

  # fetch data from the table: "tenant"
  tenant(
    # distinct select on columns
    distinctOn: [TenantSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TenantOrderBy!]

    # filter the rows returned
    where: TenantBoolExp
  ): [Tenant!]!

  # fetch aggregated fields from the table: "tenant"
  tenantAggregate(
    # distinct select on columns
    distinctOn: [TenantSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TenantOrderBy!]

    # filter the rows returned
    where: TenantBoolExp
  ): TenantAggregate!

  # fetch data from the table: "tenant" using primary key columns
  tenantByPk(id: bigint!): Tenant

  # fetch data from the table in a streaming manner: "tenant"
  tenantStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [TenantStreamCursorInput]!

    # filter the rows returned
    where: TenantBoolExp
  ): [Tenant!]!

  # fetch data from the table: "thread"
  thread(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): [Thread!]!

  # fetch aggregated fields from the table: "thread"
  threadAggregate(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): ThreadAggregate!

  # fetch data from the table: "thread" using primary key columns
  threadByPk(id: bigint!): Thread

  # An array relationship
  threadContributors(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): [ThreadContributors!]!

  # An aggregate relationship
  threadContributorsAggregate(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): ThreadContributorsAggregate!

  # fetch data from the table: "thread_contributors" using primary key columns
  threadContributorsByPk(individualId: bigint!, threadId: bigint!): ThreadContributors

  # fetch data from the table in a streaming manner: "thread_contributors"
  threadContributorsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ThreadContributorsStreamCursorInput]!

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): [ThreadContributors!]!

  # fetch data from the table in a streaming manner: "thread"
  threadStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ThreadStreamCursorInput]!

    # filter the rows returned
    where: ThreadBoolExp
  ): [Thread!]!

  # An array relationship
  threadTags(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): [ThreadTags!]!

  # An aggregate relationship
  threadTagsAggregate(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): ThreadTagsAggregate!

  # fetch data from the table: "thread_tags" using primary key columns
  threadTagsByPk(tagId: bigint!, threadId: bigint!): ThreadTags

  # fetch data from the table in a streaming manner: "thread_tags"
  threadTagsStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ThreadTagsStreamCursorInput]!

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): [ThreadTags!]!

  # fetch data from the table: "user_info"
  userInfo(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): [UserInfo!]!

  # fetch aggregated fields from the table: "user_info"
  userInfoAggregate(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  # fetch data from the table: "user_info" using primary key columns
  userInfoByPk(id: bigint!): UserInfo

  # fetch data from the table in a streaming manner: "user_info"
  userInfoStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [UserInfoStreamCursorInput]!

    # filter the rows returned
    where: UserInfoBoolExp
  ): [UserInfo!]!

  # fetch data from the table: "validation"
  validation(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): [Validation!]!

  # fetch aggregated fields from the table: "validation"
  validationAggregate(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): ValidationAggregate!

  # fetch data from the table: "validation" using primary key columns
  validationByPk(id: bigint!): Validation

  # fetch data from the table in a streaming manner: "validation"
  validationStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [ValidationStreamCursorInput]!

    # filter the rows returned
    where: ValidationBoolExp
  ): [Validation!]!

  # fetch data from the table: "vote"
  vote(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): [Vote!]!

  # fetch aggregated fields from the table: "vote"
  voteAggregate(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): VoteAggregate!

  # fetch data from the table: "vote" using primary key columns
  voteByPk(id: bigint!): Vote

  # fetch data from the table in a streaming manner: "vote"
  voteStream(
    # maximum number of rows returned in a single batch
    batchSize: Int!

    # cursor to stream the results returned by the query
    cursor: [VoteStreamCursorInput]!

    # filter the rows returned
    where: VoteBoolExp
  ): [Vote!]!
}

# columns and relationships of "tag"
type Tag {
  # An array relationship
  actorTags(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): [ActorTags!]!

  # An aggregate relationship
  actorTagsAggregate(
    # distinct select on columns
    distinctOn: [ActorTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorTagsOrderBy!]

    # filter the rows returned
    where: ActorTagsBoolExp
  ): ActorTagsAggregate!
  color: String!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  description: String!

  # An array relationship
  eventTags(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): [EventTags!]!

  # An aggregate relationship
  eventTagsAggregate(
    # distinct select on columns
    distinctOn: [EventTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventTagsOrderBy!]

    # filter the rows returned
    where: EventTagsBoolExp
  ): EventTagsAggregate!

  # An object relationship
  fileUpload: FileUpload
  hiddenAt: timestamptz
  id: bigint!
  imageId: bigint

  # An object relationship
  individual: Individual

  # An array relationship
  issueTags(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): [IssueTags!]!

  # An aggregate relationship
  issueTagsAggregate(
    # distinct select on columns
    distinctOn: [IssueTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueTagsOrderBy!]

    # filter the rows returned
    where: IssueTagsBoolExp
  ): IssueTagsAggregate!
  name: String!

  # An array relationship
  projectTags(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): [ProjectTags!]!

  # An aggregate relationship
  projectTagsAggregate(
    # distinct select on columns
    distinctOn: [ProjectTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectTagsOrderBy!]

    # filter the rows returned
    where: ProjectTagsBoolExp
  ): ProjectTagsAggregate!
  slug: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!

  # An array relationship
  threadTags(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): [ThreadTags!]!

  # An aggregate relationship
  threadTagsAggregate(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): ThreadTagsAggregate!
  type: String!
}

# aggregated selection of "tag"
type TagAggregate {
  aggregate: TagAggregateFields
  nodes: [Tag!]!
}

input TagAggregateBoolExp {
  count: tagAggregateBoolExpCount
}

input tagAggregateBoolExpCount {
  arguments: [TagSelectColumn!]
  distinct: Boolean
  filter: TagBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "tag"
type TagAggregateFields {
  avg: TagAvgFields
  count(columns: [TagSelectColumn!], distinct: Boolean): Int!
  max: TagMaxFields
  min: TagMinFields
  stddev: TagStddevFields
  stddevPop: TagStddevPopFields
  stddevSamp: TagStddevSampFields
  sum: TagSumFields
  varPop: TagVarPopFields
  varSamp: TagVarSampFields
  variance: TagVarianceFields
}

# order by aggregate values of table "tag"
input TagAggregateOrderBy {
  avg: TagAvgOrderBy
  count: OrderBy
  max: TagMaxOrderBy
  min: TagMinOrderBy
  stddev: TagStddevOrderBy
  stddevPop: TagStddevPopOrderBy
  stddevSamp: TagStddevSampOrderBy
  sum: TagSumOrderBy
  varPop: TagVarPopOrderBy
  varSamp: TagVarSampOrderBy
  variance: TagVarianceOrderBy
}

# input type for inserting array relation for remote table "tag"
input TagArrRelInsertInput {
  data: [TagInsertInput!]!

  # upsert condition
  onConflict: TagOnConflict
}

# aggregate avg on columns
type TagAvgFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by avg() on columns of table "tag"
input TagAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'.
input TagBoolExp {
  _and: [TagBoolExp!]
  _not: TagBoolExp
  _or: [TagBoolExp!]
  actorTags: ActorTagsBoolExp
  actorTagsAggregate: ActorTagsAggregateBoolExp
  color: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  description: StringComparisonExp
  eventTags: EventTagsBoolExp
  eventTagsAggregate: EventTagsAggregateBoolExp
  fileUpload: FileUploadBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  imageId: BigintComparisonExp
  individual: IndividualBoolExp
  issueTags: IssueTagsBoolExp
  issueTagsAggregate: IssueTagsAggregateBoolExp
  name: StringComparisonExp
  projectTags: ProjectTagsBoolExp
  projectTagsAggregate: ProjectTagsAggregateBoolExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  threadTags: ThreadTagsBoolExp
  threadTagsAggregate: ThreadTagsAggregateBoolExp
  type: StringComparisonExp
}

# unique or primary key constraints on table "tag"
enum TagConstraint {
  # unique or primary key constraint on columns "id"
  tag_pkey
}

# input type for incrementing numeric columns in table "tag"
input TagIncInput {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

# input type for inserting data into table "tag"
input TagInsertInput {
  actorTags: ActorTagsArrRelInsertInput
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  eventTags: EventTagsArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  individual: IndividualObjRelInsertInput
  issueTags: IssueTagsArrRelInsertInput
  name: String
  projectTags: ProjectTagsArrRelInsertInput
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  threadTags: ThreadTagsArrRelInsertInput
  type: String
}

# aggregate max on columns
type TagMaxFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

# order by max() on columns of table "tag"
input TagMaxOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type TagMinFields {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

# order by min() on columns of table "tag"
input TagMinOrderBy {
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "tag"
type TagMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Tag!]!
}

# input type for inserting object relation for remote table "tag"
input TagObjRelInsertInput {
  data: TagInsertInput!

  # upsert condition
  onConflict: TagOnConflict
}

# on_conflict condition type for table "tag"
input TagOnConflict {
  constraint: TagConstraint!
  updateColumns: [TagUpdateColumn!]! = []
  where: TagBoolExp
}

# Ordering options when selecting data from "tag".
input TagOrderBy {
  actorTagsAggregate: ActorTagsAggregateOrderBy
  color: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  description: OrderBy
  eventTagsAggregate: EventTagsAggregateOrderBy
  fileUpload: FileUploadOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  imageId: OrderBy
  individual: IndividualOrderBy
  issueTagsAggregate: IssueTagsAggregateOrderBy
  name: OrderBy
  projectTagsAggregate: ProjectTagsAggregateOrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  threadTagsAggregate: ThreadTagsAggregateOrderBy
  type: OrderBy
}

# primary key columns input for table: tag
input TagPkColumnsInput {
  id: bigint!
}

# select columns of table "tag"
enum TagSelectColumn {
  # column name
  color

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  name

  # column name
  slug

  # column name
  tenantId

  # column name
  type
}

# input type for updating data in table "tag"
input TagSetInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type TagStddevFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by stddev() on columns of table "tag"
input TagStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type TagStddevPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "tag"
input TagStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type TagStddevSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "tag"
input TagStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "tag"
input TagStreamCursorInput {
  # Stream column input with initial value
  initialValue: TagStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TagStreamCursorValueInput {
  color: String
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  description: String
  hiddenAt: timestamptz
  id: bigint
  imageId: bigint
  name: String
  slug: String
  tenantId: bigint
  type: String
}

# aggregate sum on columns
type TagSumFields {
  createdById: bigint
  id: bigint
  imageId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "tag"
input TagSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# update columns of table "tag"
enum TagUpdateColumn {
  # column name
  color

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  description

  # column name
  hiddenAt

  # column name
  id

  # column name
  imageId

  # column name
  name

  # column name
  slug

  # column name
  tenantId

  # column name
  type
}

input TagUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TagIncInput

  # sets the columns of the filtered rows to the given values
  _set: TagSetInput

  # filter the rows which have to be updated
  where: TagBoolExp!
}

# aggregate variance on columns
type TagVarianceFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by variance() on columns of table "tag"
input TagVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type TagVarPopFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by varPop() on columns of table "tag"
input TagVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type TagVarSampFields {
  createdById: Float
  id: Float
  imageId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "tag"
input TagVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  imageId: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "team"
type Team {
  # An array relationship
  actions(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # An aggregate relationship
  actionsAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!

  # An object relationship
  actor: Actor

  # An object relationship
  canteen: Canteen
  canteenId: bigint

  # An object relationship
  classGroup: ClassGroup
  classGroupId: bigint

  # An object relationship
  cohort: Cohort
  cohortId: bigint

  # An array relationship
  contents(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # An aggregate relationship
  contentsAggregate(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  currentFinance: Float!
  deletedAt: timestamptz
  directorsCategoryName: String!

  # An array relationship
  documents(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): [Document!]!

  # An aggregate relationship
  documentsAggregate(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): DocumentAggregate!

  # An array relationship
  eventManages(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): [EventManage!]!

  # An aggregate relationship
  eventManagesAggregate(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): EventManageAggregate!

  # An object relationship
  fileUpload: FileUpload

  # An array relationship
  finances(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # An aggregate relationship
  financesAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!

  # An object relationship
  form: Form
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  managersCategoryName: String!
  membersCategoryName: String!
  membershipFees: Int!

  # An array relationship
  missions(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # An aggregate relationship
  missionsAggregate(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): MissionAggregate!
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint

  # An array relationship
  poles(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): [Pole!]!

  # An aggregate relationship
  polesAggregate(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): PoleAggregate!

  # An array relationship
  projects(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): [Project!]!

  # An aggregate relationship
  projectsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): ProjectAggregate!

  # An array relationship
  roles(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): [Role!]!

  # An aggregate relationship
  rolesAggregate(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): RoleAggregate!

  # An object relationship
  team: Team

  # An array relationship
  teamEvents(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): [TeamEvents!]!

  # An aggregate relationship
  teamEventsAggregate(
    # distinct select on columns
    distinctOn: [TeamEventsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamEventsOrderBy!]

    # filter the rows returned
    where: TeamEventsBoolExp
  ): TeamEventsAggregate!

  # An array relationship
  teamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  teamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # An array relationship
  teamMembers(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  # An aggregate relationship
  teamMembersAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  # An array relationship
  teams(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): [Team!]!

  # An aggregate relationship
  teamsAggregate(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): TeamAggregate!

  # An object relationship
  tenant: Tenant!

  # An object relationship
  tenantById: Tenant
  tenantId: bigint!
  type: String!
  videoId: bigint
}

# aggregated selection of "team"
type TeamAggregate {
  aggregate: TeamAggregateFields
  nodes: [Team!]!
}

input TeamAggregateBoolExp {
  count: teamAggregateBoolExpCount
}

input teamAggregateBoolExpCount {
  arguments: [TeamSelectColumn!]
  distinct: Boolean
  filter: TeamBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "team"
type TeamAggregateFields {
  avg: TeamAvgFields
  count(columns: [TeamSelectColumn!], distinct: Boolean): Int!
  max: TeamMaxFields
  min: TeamMinFields
  stddev: TeamStddevFields
  stddevPop: TeamStddevPopFields
  stddevSamp: TeamStddevSampFields
  sum: TeamSumFields
  varPop: TeamVarPopFields
  varSamp: TeamVarSampFields
  variance: TeamVarianceFields
}

# order by aggregate values of table "team"
input TeamAggregateOrderBy {
  avg: TeamAvgOrderBy
  count: OrderBy
  max: TeamMaxOrderBy
  min: TeamMinOrderBy
  stddev: TeamStddevOrderBy
  stddevPop: TeamStddevPopOrderBy
  stddevSamp: TeamStddevSampOrderBy
  sum: TeamSumOrderBy
  varPop: TeamVarPopOrderBy
  varSamp: TeamVarSampOrderBy
  variance: TeamVarianceOrderBy
}

# input type for inserting array relation for remote table "team"
input TeamArrRelInsertInput {
  data: [TeamInsertInput!]!

  # upsert condition
  onConflict: TeamOnConflict
}

# aggregate avg on columns
type TeamAvgFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

# order by avg() on columns of table "team"
input TeamAvgOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# Boolean expression to filter rows from the table "team". All fields are combined with a logical 'AND'.
input TeamBoolExp {
  _and: [TeamBoolExp!]
  _not: TeamBoolExp
  _or: [TeamBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actor: ActorBoolExp
  canteen: CanteenBoolExp
  canteenId: BigintComparisonExp
  classGroup: ClassGroupBoolExp
  classGroupId: BigintComparisonExp
  cohort: CohortBoolExp
  cohortId: BigintComparisonExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  currentFinance: FloatComparisonExp
  deletedAt: TimestamptzComparisonExp
  directorsCategoryName: StringComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  eventManages: EventManageBoolExp
  eventManagesAggregate: EventManageAggregateBoolExp
  fileUpload: FileUploadBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  form: FormBoolExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  managersCategoryName: StringComparisonExp
  membersCategoryName: StringComparisonExp
  membershipFees: IntComparisonExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  originalCreationDay: SmallintComparisonExp
  originalCreationMonth: SmallintComparisonExp
  originalCreationYear: SmallintComparisonExp
  parentId: BigintComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  team: TeamBoolExp
  teamEvents: TeamEventsBoolExp
  teamEventsAggregate: TeamEventsAggregateBoolExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  tenant: TenantBoolExp
  tenantById: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  videoId: BigintComparisonExp
}

# unique or primary key constraints on table "team"
enum TeamConstraint {
  # unique or primary key constraint on columns "canteen_id"
  team_canteen_id_unique

  # unique or primary key constraint on columns "class_group_id"
  team_class_group_id_unique

  # unique or primary key constraint on columns "cohort_id"
  team_cohort_id_unique

  # unique or primary key constraint on columns "id"
  team_pkey
}

# columns and relationships of "team_events"
type TeamEvents {
  # An object relationship
  event: Event!
  eventId: bigint!

  # An object relationship
  team: Team!
  teamId: bigint!
}

# aggregated selection of "team_events"
type TeamEventsAggregate {
  aggregate: TeamEventsAggregateFields
  nodes: [TeamEvents!]!
}

input TeamEventsAggregateBoolExp {
  count: teamEventsAggregateBoolExpCount
}

input teamEventsAggregateBoolExpCount {
  arguments: [TeamEventsSelectColumn!]
  distinct: Boolean
  filter: TeamEventsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "team_events"
type TeamEventsAggregateFields {
  avg: TeamEventsAvgFields
  count(columns: [TeamEventsSelectColumn!], distinct: Boolean): Int!
  max: TeamEventsMaxFields
  min: TeamEventsMinFields
  stddev: TeamEventsStddevFields
  stddevPop: TeamEventsStddevPopFields
  stddevSamp: TeamEventsStddevSampFields
  sum: TeamEventsSumFields
  varPop: TeamEventsVarPopFields
  varSamp: TeamEventsVarSampFields
  variance: TeamEventsVarianceFields
}

# order by aggregate values of table "team_events"
input TeamEventsAggregateOrderBy {
  avg: TeamEventsAvgOrderBy
  count: OrderBy
  max: TeamEventsMaxOrderBy
  min: TeamEventsMinOrderBy
  stddev: TeamEventsStddevOrderBy
  stddevPop: TeamEventsStddevPopOrderBy
  stddevSamp: TeamEventsStddevSampOrderBy
  sum: TeamEventsSumOrderBy
  varPop: TeamEventsVarPopOrderBy
  varSamp: TeamEventsVarSampOrderBy
  variance: TeamEventsVarianceOrderBy
}

# input type for inserting array relation for remote table "team_events"
input TeamEventsArrRelInsertInput {
  data: [TeamEventsInsertInput!]!

  # upsert condition
  onConflict: TeamEventsOnConflict
}

# aggregate avg on columns
type TeamEventsAvgFields {
  eventId: Float
  teamId: Float
}

# order by avg() on columns of table "team_events"
input TeamEventsAvgOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# Boolean expression to filter rows from the table "team_events". All fields are combined with a logical 'AND'.
input TeamEventsBoolExp {
  _and: [TeamEventsBoolExp!]
  _not: TeamEventsBoolExp
  _or: [TeamEventsBoolExp!]
  event: EventBoolExp
  eventId: BigintComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
}

# unique or primary key constraints on table "team_events"
enum TeamEventsConstraint {
  # unique or primary key constraint on columns "event_id", "team_id"
  team_events_pkey
}

# input type for incrementing numeric columns in table "team_events"
input TeamEventsIncInput {
  eventId: bigint
  teamId: bigint
}

# input type for inserting data into table "team_events"
input TeamEventsInsertInput {
  event: EventObjRelInsertInput
  eventId: bigint
  team: TeamObjRelInsertInput
  teamId: bigint
}

# aggregate max on columns
type TeamEventsMaxFields {
  eventId: bigint
  teamId: bigint
}

# order by max() on columns of table "team_events"
input TeamEventsMaxOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# aggregate min on columns
type TeamEventsMinFields {
  eventId: bigint
  teamId: bigint
}

# order by min() on columns of table "team_events"
input TeamEventsMinOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# response of any mutation on the table "team_events"
type TeamEventsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [TeamEvents!]!
}

# on_conflict condition type for table "team_events"
input TeamEventsOnConflict {
  constraint: TeamEventsConstraint!
  updateColumns: [TeamEventsUpdateColumn!]! = []
  where: TeamEventsBoolExp
}

# Ordering options when selecting data from "team_events".
input TeamEventsOrderBy {
  event: EventOrderBy
  eventId: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
}

# primary key columns input for table: team_events
input TeamEventsPkColumnsInput {
  eventId: bigint!
  teamId: bigint!
}

# select columns of table "team_events"
enum TeamEventsSelectColumn {
  # column name
  eventId

  # column name
  teamId
}

# input type for updating data in table "team_events"
input TeamEventsSetInput {
  eventId: bigint
  teamId: bigint
}

# aggregate stddev on columns
type TeamEventsStddevFields {
  eventId: Float
  teamId: Float
}

# order by stddev() on columns of table "team_events"
input TeamEventsStddevOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# aggregate stddevPop on columns
type TeamEventsStddevPopFields {
  eventId: Float
  teamId: Float
}

# order by stddevPop() on columns of table "team_events"
input TeamEventsStddevPopOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# aggregate stddevSamp on columns
type TeamEventsStddevSampFields {
  eventId: Float
  teamId: Float
}

# order by stddevSamp() on columns of table "team_events"
input TeamEventsStddevSampOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# Streaming cursor of the table "team_events"
input TeamEventsStreamCursorInput {
  # Stream column input with initial value
  initialValue: TeamEventsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TeamEventsStreamCursorValueInput {
  eventId: bigint
  teamId: bigint
}

# aggregate sum on columns
type TeamEventsSumFields {
  eventId: bigint
  teamId: bigint
}

# order by sum() on columns of table "team_events"
input TeamEventsSumOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# update columns of table "team_events"
enum TeamEventsUpdateColumn {
  # column name
  eventId

  # column name
  teamId
}

input TeamEventsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TeamEventsIncInput

  # sets the columns of the filtered rows to the given values
  _set: TeamEventsSetInput

  # filter the rows which have to be updated
  where: TeamEventsBoolExp!
}

# aggregate variance on columns
type TeamEventsVarianceFields {
  eventId: Float
  teamId: Float
}

# order by variance() on columns of table "team_events"
input TeamEventsVarianceOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# aggregate varPop on columns
type TeamEventsVarPopFields {
  eventId: Float
  teamId: Float
}

# order by varPop() on columns of table "team_events"
input TeamEventsVarPopOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# aggregate varSamp on columns
type TeamEventsVarSampFields {
  eventId: Float
  teamId: Float
}

# order by varSamp() on columns of table "team_events"
input TeamEventsVarSampOrderBy {
  eventId: OrderBy
  teamId: OrderBy
}

# input type for incrementing numeric columns in table "team"
input TeamIncInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  currentFinance: Float
  id: bigint
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  videoId: bigint
}

# input type for inserting data into table "team"
input TeamInsertInput {
  actions: ActionArrRelInsertInput
  actor: ActorObjRelInsertInput
  canteen: CanteenObjRelInsertInput
  canteenId: bigint
  classGroup: ClassGroupObjRelInsertInput
  classGroupId: bigint
  cohort: CohortObjRelInsertInput
  cohortId: bigint
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  documents: DocumentArrRelInsertInput
  eventManages: EventManageArrRelInsertInput
  fileUpload: FileUploadObjRelInsertInput
  finances: FinanceArrRelInsertInput
  form: FormObjRelInsertInput
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  missions: MissionArrRelInsertInput
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  poles: PoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  roles: RoleArrRelInsertInput
  team: TeamObjRelInsertInput
  teamEvents: TeamEventsArrRelInsertInput
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teams: TeamArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantById: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  videoId: bigint
}

# columns and relationships of "team_join"
type TeamJoin {
  # An object relationship
  askedRole: Role!
  askedRoleId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An object relationship
  formSubmission: FormSubmission
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  individualBySettledById: Individual
  joinerId: bigint!

  # An object relationship
  pole: Pole
  receivedPoleId: bigint

  # An object relationship
  receivedRole: Role
  receivedRoleId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "team_join"
type TeamJoinAggregate {
  aggregate: TeamJoinAggregateFields
  nodes: [TeamJoin!]!
}

input TeamJoinAggregateBoolExp {
  count: teamJoinAggregateBoolExpCount
}

input teamJoinAggregateBoolExpCount {
  arguments: [TeamJoinSelectColumn!]
  distinct: Boolean
  filter: TeamJoinBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "team_join"
type TeamJoinAggregateFields {
  avg: TeamJoinAvgFields
  count(columns: [TeamJoinSelectColumn!], distinct: Boolean): Int!
  max: TeamJoinMaxFields
  min: TeamJoinMinFields
  stddev: TeamJoinStddevFields
  stddevPop: TeamJoinStddevPopFields
  stddevSamp: TeamJoinStddevSampFields
  sum: TeamJoinSumFields
  varPop: TeamJoinVarPopFields
  varSamp: TeamJoinVarSampFields
  variance: TeamJoinVarianceFields
}

# order by aggregate values of table "team_join"
input TeamJoinAggregateOrderBy {
  avg: TeamJoinAvgOrderBy
  count: OrderBy
  max: TeamJoinMaxOrderBy
  min: TeamJoinMinOrderBy
  stddev: TeamJoinStddevOrderBy
  stddevPop: TeamJoinStddevPopOrderBy
  stddevSamp: TeamJoinStddevSampOrderBy
  sum: TeamJoinSumOrderBy
  varPop: TeamJoinVarPopOrderBy
  varSamp: TeamJoinVarSampOrderBy
  variance: TeamJoinVarianceOrderBy
}

# input type for inserting array relation for remote table "team_join"
input TeamJoinArrRelInsertInput {
  data: [TeamJoinInsertInput!]!

  # upsert condition
  onConflict: TeamJoinOnConflict
}

# aggregate avg on columns
type TeamJoinAvgFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  receivedPoleId: Float
  receivedRoleId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
}

# order by avg() on columns of table "team_join"
input TeamJoinAvgOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "team_join". All fields are combined with a logical 'AND'.
input TeamJoinBoolExp {
  _and: [TeamJoinBoolExp!]
  _not: TeamJoinBoolExp
  _or: [TeamJoinBoolExp!]
  askedRole: RoleBoolExp
  askedRoleId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  formSubmission: FormSubmissionBoolExp
  formSubmissionId: BigintComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualBySettledById: IndividualBoolExp
  joinerId: BigintComparisonExp
  pole: PoleBoolExp
  receivedPoleId: BigintComparisonExp
  receivedRole: RoleBoolExp
  receivedRoleId: BigintComparisonExp
  settledAt: TimestamptzComparisonExp
  settledById: BigintComparisonExp
  state: StringComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "team_join"
enum TeamJoinConstraint {
  # unique or primary key constraint on columns "id"
  team_join_pkey
}

# input type for incrementing numeric columns in table "team_join"
input TeamJoinIncInput {
  askedRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  settledById: bigint
  teamId: bigint
  tenantId: bigint
}

# input type for inserting data into table "team_join"
input TeamJoinInsertInput {
  askedRole: RoleObjRelInsertInput
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmission: FormSubmissionObjRelInsertInput
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualBySettledById: IndividualObjRelInsertInput
  joinerId: bigint
  pole: PoleObjRelInsertInput
  receivedPoleId: bigint
  receivedRole: RoleObjRelInsertInput
  receivedRoleId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  team: TeamObjRelInsertInput
  teamId: bigint
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type TeamJoinMaxFields {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# order by max() on columns of table "team_join"
input TeamJoinMaxOrderBy {
  askedRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type TeamJoinMinFields {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# order by min() on columns of table "team_join"
input TeamJoinMinOrderBy {
  askedRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "team_join"
type TeamJoinMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [TeamJoin!]!
}

# on_conflict condition type for table "team_join"
input TeamJoinOnConflict {
  constraint: TeamJoinConstraint!
  updateColumns: [TeamJoinUpdateColumn!]! = []
  where: TeamJoinBoolExp
}

# Ordering options when selecting data from "team_join".
input TeamJoinOrderBy {
  askedRole: RoleOrderBy
  askedRoleId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  formSubmission: FormSubmissionOrderBy
  formSubmissionId: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualBySettledById: IndividualOrderBy
  joinerId: OrderBy
  pole: PoleOrderBy
  receivedPoleId: OrderBy
  receivedRole: RoleOrderBy
  receivedRoleId: OrderBy
  settledAt: OrderBy
  settledById: OrderBy
  state: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: team_join
input TeamJoinPkColumnsInput {
  id: bigint!
}

# select columns of table "team_join"
enum TeamJoinSelectColumn {
  # column name
  askedRoleId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  formSubmissionId

  # column name
  hiddenAt

  # column name
  id

  # column name
  joinerId

  # column name
  receivedPoleId

  # column name
  receivedRoleId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  teamId

  # column name
  tenantId
}

# input type for updating data in table "team_join"
input TeamJoinSetInput {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# aggregate stddev on columns
type TeamJoinStddevFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  receivedPoleId: Float
  receivedRoleId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
}

# order by stddev() on columns of table "team_join"
input TeamJoinStddevOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type TeamJoinStddevPopFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  receivedPoleId: Float
  receivedRoleId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "team_join"
input TeamJoinStddevPopOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type TeamJoinStddevSampFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  receivedPoleId: Float
  receivedRoleId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "team_join"
input TeamJoinStddevSampOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "team_join"
input TeamJoinStreamCursorInput {
  # Stream column input with initial value
  initialValue: TeamJoinStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TeamJoinStreamCursorValueInput {
  askedRoleId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  formSubmissionId: bigint
  hiddenAt: timestamptz
  id: bigint
  joinerId: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  settledAt: timestamptz
  settledById: bigint
  state: String
  teamId: bigint
  tenantId: bigint
}

# aggregate sum on columns
type TeamJoinSumFields {
  askedRoleId: bigint
  createdById: bigint
  formSubmissionId: bigint
  id: bigint
  joinerId: bigint
  receivedPoleId: bigint
  receivedRoleId: bigint
  settledById: bigint
  teamId: bigint
  tenantId: bigint
}

# order by sum() on columns of table "team_join"
input TeamJoinSumOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# update columns of table "team_join"
enum TeamJoinUpdateColumn {
  # column name
  askedRoleId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  formSubmissionId

  # column name
  hiddenAt

  # column name
  id

  # column name
  joinerId

  # column name
  receivedPoleId

  # column name
  receivedRoleId

  # column name
  settledAt

  # column name
  settledById

  # column name
  state

  # column name
  teamId

  # column name
  tenantId
}

input TeamJoinUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TeamJoinIncInput

  # sets the columns of the filtered rows to the given values
  _set: TeamJoinSetInput

  # filter the rows which have to be updated
  where: TeamJoinBoolExp!
}

# aggregate variance on columns
type TeamJoinVarianceFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  receivedPoleId: Float
  receivedRoleId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
}

# order by variance() on columns of table "team_join"
input TeamJoinVarianceOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type TeamJoinVarPopFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  receivedPoleId: Float
  receivedRoleId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
}

# order by varPop() on columns of table "team_join"
input TeamJoinVarPopOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type TeamJoinVarSampFields {
  askedRoleId: Float
  createdById: Float
  formSubmissionId: Float
  id: Float
  joinerId: Float
  receivedPoleId: Float
  receivedRoleId: Float
  settledById: Float
  teamId: Float
  tenantId: Float
}

# order by varSamp() on columns of table "team_join"
input TeamJoinVarSampOrderBy {
  askedRoleId: OrderBy
  createdById: OrderBy
  formSubmissionId: OrderBy
  id: OrderBy
  joinerId: OrderBy
  receivedPoleId: OrderBy
  receivedRoleId: OrderBy
  settledById: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
}

# aggregate max on columns
type TeamMaxFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

# order by max() on columns of table "team"
input TeamMaxOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

# columns and relationships of "team_member"
type TeamMember {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  permissions: Int!

  # An array relationship
  projectSupervisors(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): [ProjectSupervisors!]!

  # An aggregate relationship
  projectSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectSupervisorsOrderBy!]

    # filter the rows returned
    where: ProjectSupervisorsBoolExp
  ): ProjectSupervisorsAggregate!
  startDate: timestamptz!

  # An object relationship
  team: Team!
  teamId: bigint!

  # An array relationship
  teamMemberRoles(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): [TeamMemberRoles!]!

  # An aggregate relationship
  teamMemberRolesAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberRolesSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberRolesOrderBy!]

    # filter the rows returned
    where: TeamMemberRolesBoolExp
  ): TeamMemberRolesAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  userId: bigint!

  # An object relationship
  userInfo: UserInfo!
}

# aggregated selection of "team_member"
type TeamMemberAggregate {
  aggregate: TeamMemberAggregateFields
  nodes: [TeamMember!]!
}

input TeamMemberAggregateBoolExp {
  count: teamMemberAggregateBoolExpCount
}

input teamMemberAggregateBoolExpCount {
  arguments: [TeamMemberSelectColumn!]
  distinct: Boolean
  filter: TeamMemberBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "team_member"
type TeamMemberAggregateFields {
  avg: TeamMemberAvgFields
  count(columns: [TeamMemberSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberMaxFields
  min: TeamMemberMinFields
  stddev: TeamMemberStddevFields
  stddevPop: TeamMemberStddevPopFields
  stddevSamp: TeamMemberStddevSampFields
  sum: TeamMemberSumFields
  varPop: TeamMemberVarPopFields
  varSamp: TeamMemberVarSampFields
  variance: TeamMemberVarianceFields
}

# order by aggregate values of table "team_member"
input TeamMemberAggregateOrderBy {
  avg: TeamMemberAvgOrderBy
  count: OrderBy
  max: TeamMemberMaxOrderBy
  min: TeamMemberMinOrderBy
  stddev: TeamMemberStddevOrderBy
  stddevPop: TeamMemberStddevPopOrderBy
  stddevSamp: TeamMemberStddevSampOrderBy
  sum: TeamMemberSumOrderBy
  varPop: TeamMemberVarPopOrderBy
  varSamp: TeamMemberVarSampOrderBy
  variance: TeamMemberVarianceOrderBy
}

# input type for inserting array relation for remote table "team_member"
input TeamMemberArrRelInsertInput {
  data: [TeamMemberInsertInput!]!

  # upsert condition
  onConflict: TeamMemberOnConflict
}

# aggregate avg on columns
type TeamMemberAvgFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by avg() on columns of table "team_member"
input TeamMemberAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Boolean expression to filter rows from the table "team_member". All fields are combined with a logical 'AND'.
input TeamMemberBoolExp {
  _and: [TeamMemberBoolExp!]
  _not: TeamMemberBoolExp
  _or: [TeamMemberBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  endDate: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  permissions: IntComparisonExp
  projectSupervisors: ProjectSupervisorsBoolExp
  projectSupervisorsAggregate: ProjectSupervisorsAggregateBoolExp
  startDate: TimestamptzComparisonExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamMemberRoles: TeamMemberRolesBoolExp
  teamMemberRolesAggregate: TeamMemberRolesAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  userId: BigintComparisonExp
  userInfo: UserInfoBoolExp
}

# unique or primary key constraints on table "team_member"
enum TeamMemberConstraint {
  # unique or primary key constraint on columns "id"
  team_member_pkey
}

# input type for incrementing numeric columns in table "team_member"
input TeamMemberIncInput {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# input type for inserting data into table "team_member"
input TeamMemberInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  permissions: Int
  projectSupervisors: ProjectSupervisorsArrRelInsertInput
  startDate: timestamptz
  team: TeamObjRelInsertInput
  teamId: bigint
  teamMemberRoles: TeamMemberRolesArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  userId: bigint
  userInfo: UserInfoObjRelInsertInput
}

# aggregate max on columns
type TeamMemberMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# order by max() on columns of table "team_member"
input TeamMemberMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate min on columns
type TeamMemberMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# order by min() on columns of table "team_member"
input TeamMemberMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  permissions: OrderBy
  startDate: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# response of any mutation on the table "team_member"
type TeamMemberMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [TeamMember!]!
}

# input type for inserting object relation for remote table "team_member"
input TeamMemberObjRelInsertInput {
  data: TeamMemberInsertInput!

  # upsert condition
  onConflict: TeamMemberOnConflict
}

# on_conflict condition type for table "team_member"
input TeamMemberOnConflict {
  constraint: TeamMemberConstraint!
  updateColumns: [TeamMemberUpdateColumn!]! = []
  where: TeamMemberBoolExp
}

# Ordering options when selecting data from "team_member".
input TeamMemberOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  endDate: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  permissions: OrderBy
  projectSupervisorsAggregate: ProjectSupervisorsAggregateOrderBy
  startDate: OrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamMemberRolesAggregate: TeamMemberRolesAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  userId: OrderBy
  userInfo: UserInfoOrderBy
}

# primary key columns input for table: team_member
input TeamMemberPkColumnsInput {
  id: bigint!
}

# columns and relationships of "team_member_roles"
type TeamMemberRoles {
  # An object relationship
  role: Role!
  roleId: bigint!

  # An object relationship
  teamMember: TeamMember!
  teamMemberId: bigint!
}

# aggregated selection of "team_member_roles"
type TeamMemberRolesAggregate {
  aggregate: TeamMemberRolesAggregateFields
  nodes: [TeamMemberRoles!]!
}

input TeamMemberRolesAggregateBoolExp {
  count: teamMemberRolesAggregateBoolExpCount
}

input teamMemberRolesAggregateBoolExpCount {
  arguments: [TeamMemberRolesSelectColumn!]
  distinct: Boolean
  filter: TeamMemberRolesBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "team_member_roles"
type TeamMemberRolesAggregateFields {
  avg: TeamMemberRolesAvgFields
  count(columns: [TeamMemberRolesSelectColumn!], distinct: Boolean): Int!
  max: TeamMemberRolesMaxFields
  min: TeamMemberRolesMinFields
  stddev: TeamMemberRolesStddevFields
  stddevPop: TeamMemberRolesStddevPopFields
  stddevSamp: TeamMemberRolesStddevSampFields
  sum: TeamMemberRolesSumFields
  varPop: TeamMemberRolesVarPopFields
  varSamp: TeamMemberRolesVarSampFields
  variance: TeamMemberRolesVarianceFields
}

# order by aggregate values of table "team_member_roles"
input TeamMemberRolesAggregateOrderBy {
  avg: TeamMemberRolesAvgOrderBy
  count: OrderBy
  max: TeamMemberRolesMaxOrderBy
  min: TeamMemberRolesMinOrderBy
  stddev: TeamMemberRolesStddevOrderBy
  stddevPop: TeamMemberRolesStddevPopOrderBy
  stddevSamp: TeamMemberRolesStddevSampOrderBy
  sum: TeamMemberRolesSumOrderBy
  varPop: TeamMemberRolesVarPopOrderBy
  varSamp: TeamMemberRolesVarSampOrderBy
  variance: TeamMemberRolesVarianceOrderBy
}

# input type for inserting array relation for remote table "team_member_roles"
input TeamMemberRolesArrRelInsertInput {
  data: [TeamMemberRolesInsertInput!]!

  # upsert condition
  onConflict: TeamMemberRolesOnConflict
}

# aggregate avg on columns
type TeamMemberRolesAvgFields {
  roleId: Float
  teamMemberId: Float
}

# order by avg() on columns of table "team_member_roles"
input TeamMemberRolesAvgOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# Boolean expression to filter rows from the table "team_member_roles". All fields are combined with a logical 'AND'.
input TeamMemberRolesBoolExp {
  _and: [TeamMemberRolesBoolExp!]
  _not: TeamMemberRolesBoolExp
  _or: [TeamMemberRolesBoolExp!]
  role: RoleBoolExp
  roleId: BigintComparisonExp
  teamMember: TeamMemberBoolExp
  teamMemberId: BigintComparisonExp
}

# unique or primary key constraints on table "team_member_roles"
enum TeamMemberRolesConstraint {
  # unique or primary key constraint on columns "role_id", "team_member_id"
  team_member_roles_pkey
}

# input type for incrementing numeric columns in table "team_member_roles"
input TeamMemberRolesIncInput {
  roleId: bigint
  teamMemberId: bigint
}

# input type for inserting data into table "team_member_roles"
input TeamMemberRolesInsertInput {
  role: RoleObjRelInsertInput
  roleId: bigint
  teamMember: TeamMemberObjRelInsertInput
  teamMemberId: bigint
}

# aggregate max on columns
type TeamMemberRolesMaxFields {
  roleId: bigint
  teamMemberId: bigint
}

# order by max() on columns of table "team_member_roles"
input TeamMemberRolesMaxOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# aggregate min on columns
type TeamMemberRolesMinFields {
  roleId: bigint
  teamMemberId: bigint
}

# order by min() on columns of table "team_member_roles"
input TeamMemberRolesMinOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# response of any mutation on the table "team_member_roles"
type TeamMemberRolesMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [TeamMemberRoles!]!
}

# on_conflict condition type for table "team_member_roles"
input TeamMemberRolesOnConflict {
  constraint: TeamMemberRolesConstraint!
  updateColumns: [TeamMemberRolesUpdateColumn!]! = []
  where: TeamMemberRolesBoolExp
}

# Ordering options when selecting data from "team_member_roles".
input TeamMemberRolesOrderBy {
  role: RoleOrderBy
  roleId: OrderBy
  teamMember: TeamMemberOrderBy
  teamMemberId: OrderBy
}

# primary key columns input for table: team_member_roles
input TeamMemberRolesPkColumnsInput {
  roleId: bigint!
  teamMemberId: bigint!
}

# select columns of table "team_member_roles"
enum TeamMemberRolesSelectColumn {
  # column name
  roleId

  # column name
  teamMemberId
}

# input type for updating data in table "team_member_roles"
input TeamMemberRolesSetInput {
  roleId: bigint
  teamMemberId: bigint
}

# aggregate stddev on columns
type TeamMemberRolesStddevFields {
  roleId: Float
  teamMemberId: Float
}

# order by stddev() on columns of table "team_member_roles"
input TeamMemberRolesStddevOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# aggregate stddevPop on columns
type TeamMemberRolesStddevPopFields {
  roleId: Float
  teamMemberId: Float
}

# order by stddevPop() on columns of table "team_member_roles"
input TeamMemberRolesStddevPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# aggregate stddevSamp on columns
type TeamMemberRolesStddevSampFields {
  roleId: Float
  teamMemberId: Float
}

# order by stddevSamp() on columns of table "team_member_roles"
input TeamMemberRolesStddevSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# Streaming cursor of the table "team_member_roles"
input TeamMemberRolesStreamCursorInput {
  # Stream column input with initial value
  initialValue: TeamMemberRolesStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TeamMemberRolesStreamCursorValueInput {
  roleId: bigint
  teamMemberId: bigint
}

# aggregate sum on columns
type TeamMemberRolesSumFields {
  roleId: bigint
  teamMemberId: bigint
}

# order by sum() on columns of table "team_member_roles"
input TeamMemberRolesSumOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# update columns of table "team_member_roles"
enum TeamMemberRolesUpdateColumn {
  # column name
  roleId

  # column name
  teamMemberId
}

input TeamMemberRolesUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TeamMemberRolesIncInput

  # sets the columns of the filtered rows to the given values
  _set: TeamMemberRolesSetInput

  # filter the rows which have to be updated
  where: TeamMemberRolesBoolExp!
}

# aggregate variance on columns
type TeamMemberRolesVarianceFields {
  roleId: Float
  teamMemberId: Float
}

# order by variance() on columns of table "team_member_roles"
input TeamMemberRolesVarianceOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# aggregate varPop on columns
type TeamMemberRolesVarPopFields {
  roleId: Float
  teamMemberId: Float
}

# order by varPop() on columns of table "team_member_roles"
input TeamMemberRolesVarPopOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# aggregate varSamp on columns
type TeamMemberRolesVarSampFields {
  roleId: Float
  teamMemberId: Float
}

# order by varSamp() on columns of table "team_member_roles"
input TeamMemberRolesVarSampOrderBy {
  roleId: OrderBy
  teamMemberId: OrderBy
}

# select columns of table "team_member"
enum TeamMemberSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  endDate

  # column name
  hiddenAt

  # column name
  id

  # column name
  permissions

  # column name
  startDate

  # column name
  teamId

  # column name
  tenantId

  # column name
  userId
}

# input type for updating data in table "team_member"
input TeamMemberSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# aggregate stddev on columns
type TeamMemberStddevFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by stddev() on columns of table "team_member"
input TeamMemberStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevPop on columns
type TeamMemberStddevPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by stddevPop() on columns of table "team_member"
input TeamMemberStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate stddevSamp on columns
type TeamMemberStddevSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by stddevSamp() on columns of table "team_member"
input TeamMemberStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# Streaming cursor of the table "team_member"
input TeamMemberStreamCursorInput {
  # Stream column input with initial value
  initialValue: TeamMemberStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TeamMemberStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  endDate: timestamptz
  hiddenAt: timestamptz
  id: bigint
  permissions: Int
  startDate: timestamptz
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# aggregate sum on columns
type TeamMemberSumFields {
  createdById: bigint
  id: bigint
  permissions: Int
  teamId: bigint
  tenantId: bigint
  userId: bigint
}

# order by sum() on columns of table "team_member"
input TeamMemberSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# update columns of table "team_member"
enum TeamMemberUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  endDate

  # column name
  hiddenAt

  # column name
  id

  # column name
  permissions

  # column name
  startDate

  # column name
  teamId

  # column name
  tenantId

  # column name
  userId
}

input TeamMemberUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TeamMemberIncInput

  # sets the columns of the filtered rows to the given values
  _set: TeamMemberSetInput

  # filter the rows which have to be updated
  where: TeamMemberBoolExp!
}

# aggregate variance on columns
type TeamMemberVarianceFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by variance() on columns of table "team_member"
input TeamMemberVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varPop on columns
type TeamMemberVarPopFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by varPop() on columns of table "team_member"
input TeamMemberVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# aggregate varSamp on columns
type TeamMemberVarSampFields {
  createdById: Float
  id: Float
  permissions: Float
  teamId: Float
  tenantId: Float
  userId: Float
}

# order by varSamp() on columns of table "team_member"
input TeamMemberVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  permissions: OrderBy
  teamId: OrderBy
  tenantId: OrderBy
  userId: OrderBy
}

# columns and relationships of "team_metric"
type TeamMetric {
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
  value: String!
}

# aggregated selection of "team_metric"
type TeamMetricAggregate {
  aggregate: TeamMetricAggregateFields
  nodes: [TeamMetric!]!
}

input TeamMetricAggregateBoolExp {
  count: teamMetricAggregateBoolExpCount
}

input teamMetricAggregateBoolExpCount {
  arguments: [TeamMetricSelectColumn!]
  distinct: Boolean
  filter: TeamMetricBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "team_metric"
type TeamMetricAggregateFields {
  avg: TeamMetricAvgFields
  count(columns: [TeamMetricSelectColumn!], distinct: Boolean): Int!
  max: TeamMetricMaxFields
  min: TeamMetricMinFields
  stddev: TeamMetricStddevFields
  stddevPop: TeamMetricStddevPopFields
  stddevSamp: TeamMetricStddevSampFields
  sum: TeamMetricSumFields
  varPop: TeamMetricVarPopFields
  varSamp: TeamMetricVarSampFields
  variance: TeamMetricVarianceFields
}

# order by aggregate values of table "team_metric"
input TeamMetricAggregateOrderBy {
  avg: TeamMetricAvgOrderBy
  count: OrderBy
  max: TeamMetricMaxOrderBy
  min: TeamMetricMinOrderBy
  stddev: TeamMetricStddevOrderBy
  stddevPop: TeamMetricStddevPopOrderBy
  stddevSamp: TeamMetricStddevSampOrderBy
  sum: TeamMetricSumOrderBy
  varPop: TeamMetricVarPopOrderBy
  varSamp: TeamMetricVarSampOrderBy
  variance: TeamMetricVarianceOrderBy
}

# input type for inserting array relation for remote table "team_metric"
input TeamMetricArrRelInsertInput {
  data: [TeamMetricInsertInput!]!

  # upsert condition
  onConflict: TeamMetricOnConflict
}

# aggregate avg on columns
type TeamMetricAvgFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "team_metric"
input TeamMetricAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "team_metric". All fields are combined with a logical 'AND'.
input TeamMetricBoolExp {
  _and: [TeamMetricBoolExp!]
  _not: TeamMetricBoolExp
  _or: [TeamMetricBoolExp!]
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
  value: StringComparisonExp
}

# unique or primary key constraints on table "team_metric"
enum TeamMetricConstraint {
  # unique or primary key constraint on columns "id"
  team_metric_pkey
}

# input type for incrementing numeric columns in table "team_metric"
input TeamMetricIncInput {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "team_metric"
input TeamMetricInsertInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
  value: String
}

# aggregate max on columns
type TeamMetricMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

# order by max() on columns of table "team_metric"
input TeamMetricMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

# aggregate min on columns
type TeamMetricMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

# order by min() on columns of table "team_metric"
input TeamMetricMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

# response of any mutation on the table "team_metric"
type TeamMetricMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [TeamMetric!]!
}

# on_conflict condition type for table "team_metric"
input TeamMetricOnConflict {
  constraint: TeamMetricConstraint!
  updateColumns: [TeamMetricUpdateColumn!]! = []
  where: TeamMetricBoolExp
}

# Ordering options when selecting data from "team_metric".
input TeamMetricOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  value: OrderBy
}

# primary key columns input for table: team_metric
input TeamMetricPkColumnsInput {
  id: bigint!
}

# select columns of table "team_metric"
enum TeamMetricSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId

  # column name
  type

  # column name
  value
}

# input type for updating data in table "team_metric"
input TeamMetricSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

# aggregate stddev on columns
type TeamMetricStddevFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "team_metric"
input TeamMetricStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type TeamMetricStddevPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "team_metric"
input TeamMetricStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type TeamMetricStddevSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "team_metric"
input TeamMetricStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "team_metric"
input TeamMetricStreamCursorInput {
  # Stream column input with initial value
  initialValue: TeamMetricStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TeamMetricStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  tenantId: bigint
  type: String
  value: String
}

# aggregate sum on columns
type TeamMetricSumFields {
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "team_metric"
input TeamMetricSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "team_metric"
enum TeamMetricUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  tenantId

  # column name
  type

  # column name
  value
}

input TeamMetricUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TeamMetricIncInput

  # sets the columns of the filtered rows to the given values
  _set: TeamMetricSetInput

  # filter the rows which have to be updated
  where: TeamMetricBoolExp!
}

# aggregate variance on columns
type TeamMetricVarianceFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "team_metric"
input TeamMetricVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type TeamMetricVarPopFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "team_metric"
input TeamMetricVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type TeamMetricVarSampFields {
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "team_metric"
input TeamMetricVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type TeamMinFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

# order by min() on columns of table "team"
input TeamMinOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

# response of any mutation on the table "team"
type TeamMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Team!]!
}

# input type for inserting object relation for remote table "team"
input TeamObjRelInsertInput {
  data: TeamInsertInput!

  # upsert condition
  onConflict: TeamOnConflict
}

# on_conflict condition type for table "team"
input TeamOnConflict {
  constraint: TeamConstraint!
  updateColumns: [TeamUpdateColumn!]! = []
  where: TeamBoolExp
}

# Ordering options when selecting data from "team".
input TeamOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actor: ActorOrderBy
  canteen: CanteenOrderBy
  canteenId: OrderBy
  classGroup: ClassGroupOrderBy
  classGroupId: OrderBy
  cohort: CohortOrderBy
  cohortId: OrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  deletedAt: OrderBy
  directorsCategoryName: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  eventManagesAggregate: EventManageAggregateOrderBy
  fileUpload: FileUploadOrderBy
  financesAggregate: FinanceAggregateOrderBy
  form: FormOrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  managersCategoryName: OrderBy
  membersCategoryName: OrderBy
  membershipFees: OrderBy
  missionsAggregate: MissionAggregateOrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  team: TeamOrderBy
  teamEventsAggregate: TeamEventsAggregateOrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  tenant: TenantOrderBy
  tenantById: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
  videoId: OrderBy
}

# primary key columns input for table: team
input TeamPkColumnsInput {
  id: bigint!
}

# select columns of table "team"
enum TeamSelectColumn {
  # column name
  canteenId

  # column name
  classGroupId

  # column name
  cohortId

  # column name
  createdAt

  # column name
  createdById

  # column name
  currentFinance

  # column name
  deletedAt

  # column name
  directorsCategoryName

  # column name
  hiddenAt

  # column name
  id

  # column name
  managersCategoryName

  # column name
  membersCategoryName

  # column name
  membershipFees

  # column name
  originalCreationDay

  # column name
  originalCreationMonth

  # column name
  originalCreationYear

  # column name
  parentId

  # column name
  tenantId

  # column name
  type

  # column name
  videoId
}

# input type for updating data in table "team"
input TeamSetInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

# aggregate stddev on columns
type TeamStddevFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

# order by stddev() on columns of table "team"
input TeamStddevOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# aggregate stddevPop on columns
type TeamStddevPopFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

# order by stddevPop() on columns of table "team"
input TeamStddevPopOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# aggregate stddevSamp on columns
type TeamStddevSampFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

# order by stddevSamp() on columns of table "team"
input TeamStddevSampOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# Streaming cursor of the table "team"
input TeamStreamCursorInput {
  # Stream column input with initial value
  initialValue: TeamStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TeamStreamCursorValueInput {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdAt: timestamptz
  createdById: bigint
  currentFinance: Float
  deletedAt: timestamptz
  directorsCategoryName: String
  hiddenAt: timestamptz
  id: bigint
  managersCategoryName: String
  membersCategoryName: String
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  type: String
  videoId: bigint
}

# aggregate sum on columns
type TeamSumFields {
  canteenId: bigint
  classGroupId: bigint
  cohortId: bigint
  createdById: bigint
  currentFinance: Float
  id: bigint
  membershipFees: Int
  originalCreationDay: smallint
  originalCreationMonth: smallint
  originalCreationYear: smallint
  parentId: bigint
  tenantId: bigint
  videoId: bigint
}

# order by sum() on columns of table "team"
input TeamSumOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# update columns of table "team"
enum TeamUpdateColumn {
  # column name
  canteenId

  # column name
  classGroupId

  # column name
  cohortId

  # column name
  createdAt

  # column name
  createdById

  # column name
  currentFinance

  # column name
  deletedAt

  # column name
  directorsCategoryName

  # column name
  hiddenAt

  # column name
  id

  # column name
  managersCategoryName

  # column name
  membersCategoryName

  # column name
  membershipFees

  # column name
  originalCreationDay

  # column name
  originalCreationMonth

  # column name
  originalCreationYear

  # column name
  parentId

  # column name
  tenantId

  # column name
  type

  # column name
  videoId
}

input TeamUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TeamIncInput

  # sets the columns of the filtered rows to the given values
  _set: TeamSetInput

  # filter the rows which have to be updated
  where: TeamBoolExp!
}

# aggregate variance on columns
type TeamVarianceFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

# order by variance() on columns of table "team"
input TeamVarianceOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# aggregate varPop on columns
type TeamVarPopFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

# order by varPop() on columns of table "team"
input TeamVarPopOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# aggregate varSamp on columns
type TeamVarSampFields {
  canteenId: Float
  classGroupId: Float
  cohortId: Float
  createdById: Float
  currentFinance: Float
  id: Float
  membershipFees: Float
  originalCreationDay: Float
  originalCreationMonth: Float
  originalCreationYear: Float
  parentId: Float
  tenantId: Float
  videoId: Float
}

# order by varSamp() on columns of table "team"
input TeamVarSampOrderBy {
  canteenId: OrderBy
  classGroupId: OrderBy
  cohortId: OrderBy
  createdById: OrderBy
  currentFinance: OrderBy
  id: OrderBy
  membershipFees: OrderBy
  originalCreationDay: OrderBy
  originalCreationMonth: OrderBy
  originalCreationYear: OrderBy
  parentId: OrderBy
  tenantId: OrderBy
  videoId: OrderBy
}

# columns and relationships of "tenant"
type Tenant {
  # An array relationship
  actions(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # An aggregate relationship
  actionsAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!

  # An array relationship
  actorAddresses(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): [ActorAddress!]!

  # An aggregate relationship
  actorAddressesAggregate(
    # distinct select on columns
    distinctOn: [ActorAddressSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorAddressOrderBy!]

    # filter the rows returned
    where: ActorAddressBoolExp
  ): ActorAddressAggregate!

  # An array relationship
  actorBankInfos(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): [ActorBankInfo!]!

  # An aggregate relationship
  actorBankInfosAggregate(
    # distinct select on columns
    distinctOn: [ActorBankInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorBankInfoOrderBy!]

    # filter the rows returned
    where: ActorBankInfoBoolExp
  ): ActorBankInfoAggregate!

  # An array relationship
  actorImages(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): [ActorImage!]!

  # An aggregate relationship
  actorImagesAggregate(
    # distinct select on columns
    distinctOn: [ActorImageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorImageOrderBy!]

    # filter the rows returned
    where: ActorImageBoolExp
  ): ActorImageAggregate!

  # An array relationship
  actors(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): [Actor!]!

  # An aggregate relationship
  actorsAggregate(
    # distinct select on columns
    distinctOn: [ActorSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActorOrderBy!]

    # filter the rows returned
    where: ActorBoolExp
  ): ActorAggregate!

  # An array relationship
  botInfos(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): [BotInfo!]!

  # An aggregate relationship
  botInfosAggregate(
    # distinct select on columns
    distinctOn: [BotInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [BotInfoOrderBy!]

    # filter the rows returned
    where: BotInfoBoolExp
  ): BotInfoAggregate!

  # An array relationship
  campuses(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): [Campus!]!

  # An aggregate relationship
  campusesAggregate(
    # distinct select on columns
    distinctOn: [CampusSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CampusOrderBy!]

    # filter the rows returned
    where: CampusBoolExp
  ): CampusAggregate!

  # An array relationship
  canteenFoods(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): [CanteenFood!]!

  # An aggregate relationship
  canteenFoodsAggregate(
    # distinct select on columns
    distinctOn: [CanteenFoodSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenFoodOrderBy!]

    # filter the rows returned
    where: CanteenFoodBoolExp
  ): CanteenFoodAggregate!

  # An array relationship
  canteenMenus(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): [CanteenMenu!]!

  # An aggregate relationship
  canteenMenusAggregate(
    # distinct select on columns
    distinctOn: [CanteenMenuSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenMenuOrderBy!]

    # filter the rows returned
    where: CanteenMenuBoolExp
  ): CanteenMenuAggregate!

  # An array relationship
  canteens(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): [Canteen!]!

  # An aggregate relationship
  canteensAggregate(
    # distinct select on columns
    distinctOn: [CanteenSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CanteenOrderBy!]

    # filter the rows returned
    where: CanteenBoolExp
  ): CanteenAggregate!

  # An array relationship
  classGroupTeachers(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  # An aggregate relationship
  classGroupTeachersAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!

  # An array relationship
  classGroups(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): [ClassGroup!]!

  # An aggregate relationship
  classGroupsAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupOrderBy!]

    # filter the rows returned
    where: ClassGroupBoolExp
  ): ClassGroupAggregate!

  # An array relationship
  cohorts(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): [Cohort!]!

  # An aggregate relationship
  cohortsAggregate(
    # distinct select on columns
    distinctOn: [CohortSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [CohortOrderBy!]

    # filter the rows returned
    where: CohortBoolExp
  ): CohortAggregate!

  # An array relationship
  contents(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): [Content!]!

  # An aggregate relationship
  contentsAggregate(
    # distinct select on columns
    distinctOn: [ContentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ContentOrderBy!]

    # filter the rows returned
    where: ContentBoolExp
  ): ContentAggregate!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz

  # An array relationship
  documents(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): [Document!]!

  # An aggregate relationship
  documentsAggregate(
    # distinct select on columns
    distinctOn: [DocumentSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [DocumentOrderBy!]

    # filter the rows returned
    where: DocumentBoolExp
  ): DocumentAggregate!
  domain: String!

  # An array relationship
  eventApprovalSteps(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): [EventApprovalStep!]!

  # An aggregate relationship
  eventApprovalStepsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalStepSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalStepOrderBy!]

    # filter the rows returned
    where: EventApprovalStepBoolExp
  ): EventApprovalStepAggregate!

  # An array relationship
  eventApprovals(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): [EventApproval!]!

  # An aggregate relationship
  eventApprovalsAggregate(
    # distinct select on columns
    distinctOn: [EventApprovalSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventApprovalOrderBy!]

    # filter the rows returned
    where: EventApprovalBoolExp
  ): EventApprovalAggregate!

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An array relationship
  eventManages(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): [EventManage!]!

  # An aggregate relationship
  eventManagesAggregate(
    # distinct select on columns
    distinctOn: [EventManageSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventManageOrderBy!]

    # filter the rows returned
    where: EventManageBoolExp
  ): EventManageAggregate!
  eventValidationFormId: bigint

  # An array relationship
  events(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): [Event!]!

  # An aggregate relationship
  eventsAggregate(
    # distinct select on columns
    distinctOn: [EventSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventOrderBy!]

    # filter the rows returned
    where: EventBoolExp
  ): EventAggregate!

  # An array relationship
  expenseItems(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): [ExpenseItem!]!

  # An aggregate relationship
  expenseItemsAggregate(
    # distinct select on columns
    distinctOn: [ExpenseItemSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseItemOrderBy!]

    # filter the rows returned
    where: ExpenseItemBoolExp
  ): ExpenseItemAggregate!

  # An array relationship
  expenses(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): [Expense!]!

  # An aggregate relationship
  expensesAggregate(
    # distinct select on columns
    distinctOn: [ExpenseSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ExpenseOrderBy!]

    # filter the rows returned
    where: ExpenseBoolExp
  ): ExpenseAggregate!

  # An array relationship
  favorites(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): [Favorite!]!

  # An aggregate relationship
  favoritesAggregate(
    # distinct select on columns
    distinctOn: [FavoriteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FavoriteOrderBy!]

    # filter the rows returned
    where: FavoriteBoolExp
  ): FavoriteAggregate!

  # An array relationship
  fileUploads(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): [FileUpload!]!

  # An aggregate relationship
  fileUploadsAggregate(
    # distinct select on columns
    distinctOn: [FileUploadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FileUploadOrderBy!]

    # filter the rows returned
    where: FileUploadBoolExp
  ): FileUploadAggregate!

  # An array relationship
  finances(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): [Finance!]!

  # An aggregate relationship
  financesAggregate(
    # distinct select on columns
    distinctOn: [FinanceSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FinanceOrderBy!]

    # filter the rows returned
    where: FinanceBoolExp
  ): FinanceAggregate!

  # An array relationship
  follows(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): [Follow!]!

  # An aggregate relationship
  followsAggregate(
    # distinct select on columns
    distinctOn: [FollowSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FollowOrderBy!]

    # filter the rows returned
    where: FollowBoolExp
  ): FollowAggregate!

  # An object relationship
  form: Form

  # An array relationship
  formSubmissions(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): [FormSubmission!]!

  # An aggregate relationship
  formSubmissionsAggregate(
    # distinct select on columns
    distinctOn: [FormSubmissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormSubmissionOrderBy!]

    # filter the rows returned
    where: FormSubmissionBoolExp
  ): FormSubmissionAggregate!

  # An array relationship
  forms(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): [Form!]!

  # An aggregate relationship
  formsAggregate(
    # distinct select on columns
    distinctOn: [FormSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [FormOrderBy!]

    # filter the rows returned
    where: FormBoolExp
  ): FormAggregate!
  id: bigint!

  # An object relationship
  individual: Individual

  # An array relationship
  individuals(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): [Individual!]!

  # An aggregate relationship
  individualsAggregate(
    # distinct select on columns
    distinctOn: [IndividualSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IndividualOrderBy!]

    # filter the rows returned
    where: IndividualBoolExp
  ): IndividualAggregate!

  # An array relationship
  issues(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): [Issue!]!

  # An aggregate relationship
  issuesAggregate(
    # distinct select on columns
    distinctOn: [IssueSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [IssueOrderBy!]

    # filter the rows returned
    where: IssueBoolExp
  ): IssueAggregate!

  # An array relationship
  legalUnits(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): [LegalUnit!]!

  # An aggregate relationship
  legalUnitsAggregate(
    # distinct select on columns
    distinctOn: [LegalUnitSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [LegalUnitOrderBy!]

    # filter the rows returned
    where: LegalUnitBoolExp
  ): LegalUnitAggregate!

  # An array relationship
  missionJoins(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # An aggregate relationship
  missionJoinsAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!

  # An array relationship
  missions(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): [Mission!]!

  # An aggregate relationship
  missionsAggregate(
    # distinct select on columns
    distinctOn: [MissionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionOrderBy!]

    # filter the rows returned
    where: MissionBoolExp
  ): MissionAggregate!
  name: String!
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean!
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String!

  # An array relationship
  poles(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): [Pole!]!

  # An aggregate relationship
  polesAggregate(
    # distinct select on columns
    distinctOn: [PoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [PoleOrderBy!]

    # filter the rows returned
    where: PoleBoolExp
  ): PoleAggregate!

  # An array relationship
  projects(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): [Project!]!

  # An aggregate relationship
  projectsAggregate(
    # distinct select on columns
    distinctOn: [ProjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ProjectOrderBy!]

    # filter the rows returned
    where: ProjectBoolExp
  ): ProjectAggregate!

  # An array relationship
  reactions(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): [Reaction!]!

  # An aggregate relationship
  reactionsAggregate(
    # distinct select on columns
    distinctOn: [ReactionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReactionOrderBy!]

    # filter the rows returned
    where: ReactionBoolExp
  ): ReactionAggregate!

  # An array relationship
  reports(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): [Report!]!

  # An aggregate relationship
  reportsAggregate(
    # distinct select on columns
    distinctOn: [ReportSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ReportOrderBy!]

    # filter the rows returned
    where: ReportBoolExp
  ): ReportAggregate!

  # An array relationship
  roles(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): [Role!]!

  # An aggregate relationship
  rolesAggregate(
    # distinct select on columns
    distinctOn: [RoleSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [RoleOrderBy!]

    # filter the rows returned
    where: RoleBoolExp
  ): RoleAggregate!

  # An array relationship
  sessions(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): [Session!]!

  # An aggregate relationship
  sessionsAggregate(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): SessionAggregate!

  # An array relationship
  shortcuts(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): [Shortcut!]!

  # An aggregate relationship
  shortcutsAggregate(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): ShortcutAggregate!

  # An array relationship
  socials(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): [Social!]!

  # An aggregate relationship
  socialsAggregate(
    # distinct select on columns
    distinctOn: [SocialSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SocialOrderBy!]

    # filter the rows returned
    where: SocialBoolExp
  ): SocialAggregate!

  # An array relationship
  subjects(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): [Subject!]!

  # An aggregate relationship
  subjectsAggregate(
    # distinct select on columns
    distinctOn: [SubjectSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SubjectOrderBy!]

    # filter the rows returned
    where: SubjectBoolExp
  ): SubjectAggregate!

  # An array relationship
  tags(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): [Tag!]!

  # An aggregate relationship
  tagsAggregate(
    # distinct select on columns
    distinctOn: [TagSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TagOrderBy!]

    # filter the rows returned
    where: TagBoolExp
  ): TagAggregate!

  # An object relationship
  team: Team
  teamId: bigint

  # An array relationship
  teamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  teamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # An array relationship
  teamMembers(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  # An aggregate relationship
  teamMembersAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  # An array relationship
  teamMetrics(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): [TeamMetric!]!

  # An aggregate relationship
  teamMetricsAggregate(
    # distinct select on columns
    distinctOn: [TeamMetricSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMetricOrderBy!]

    # filter the rows returned
    where: TeamMetricBoolExp
  ): TeamMetricAggregate!

  # An array relationship
  teams(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): [Team!]!

  # An aggregate relationship
  teamsAggregate(
    # distinct select on columns
    distinctOn: [TeamSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamOrderBy!]

    # filter the rows returned
    where: TeamBoolExp
  ): TeamAggregate!

  # An array relationship
  threads(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): [Thread!]!

  # An aggregate relationship
  threadsAggregate(
    # distinct select on columns
    distinctOn: [ThreadSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadOrderBy!]

    # filter the rows returned
    where: ThreadBoolExp
  ): ThreadAggregate!

  # An array relationship
  userInfos(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): [UserInfo!]!

  # An aggregate relationship
  userInfosAggregate(
    # distinct select on columns
    distinctOn: [UserInfoSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [UserInfoOrderBy!]

    # filter the rows returned
    where: UserInfoBoolExp
  ): UserInfoAggregate!

  # An array relationship
  validations(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): [Validation!]!

  # An aggregate relationship
  validationsAggregate(
    # distinct select on columns
    distinctOn: [ValidationSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ValidationOrderBy!]

    # filter the rows returned
    where: ValidationBoolExp
  ): ValidationAggregate!

  # An array relationship
  votes(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): [Vote!]!

  # An aggregate relationship
  votesAggregate(
    # distinct select on columns
    distinctOn: [VoteSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [VoteOrderBy!]

    # filter the rows returned
    where: VoteBoolExp
  ): VoteAggregate!
}

# aggregated selection of "tenant"
type TenantAggregate {
  aggregate: TenantAggregateFields
  nodes: [Tenant!]!
}

input TenantAggregateBoolExp {
  bool_and: tenantAggregateBoolExpBool_and
  bool_or: tenantAggregateBoolExpBool_or
  count: tenantAggregateBoolExpCount
}

input tenantAggregateBoolExpBool_and {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpBool_or {
  arguments: TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TenantBoolExp
  predicate: BooleanComparisonExp!
}

input tenantAggregateBoolExpCount {
  arguments: [TenantSelectColumn!]
  distinct: Boolean
  filter: TenantBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "tenant"
type TenantAggregateFields {
  avg: TenantAvgFields
  count(columns: [TenantSelectColumn!], distinct: Boolean): Int!
  max: TenantMaxFields
  min: TenantMinFields
  stddev: TenantStddevFields
  stddevPop: TenantStddevPopFields
  stddevSamp: TenantStddevSampFields
  sum: TenantSumFields
  varPop: TenantVarPopFields
  varSamp: TenantVarSampFields
  variance: TenantVarianceFields
}

# order by aggregate values of table "tenant"
input TenantAggregateOrderBy {
  avg: TenantAvgOrderBy
  count: OrderBy
  max: TenantMaxOrderBy
  min: TenantMinOrderBy
  stddev: TenantStddevOrderBy
  stddevPop: TenantStddevPopOrderBy
  stddevSamp: TenantStddevSampOrderBy
  sum: TenantSumOrderBy
  varPop: TenantVarPopOrderBy
  varSamp: TenantVarSampOrderBy
  variance: TenantVarianceOrderBy
}

# input type for inserting array relation for remote table "tenant"
input TenantArrRelInsertInput {
  data: [TenantInsertInput!]!

  # upsert condition
  onConflict: TenantOnConflict
}

# aggregate avg on columns
type TenantAvgFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

# order by avg() on columns of table "tenant"
input TenantAvgOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# Boolean expression to filter rows from the table "tenant". All fields are combined with a logical 'AND'.
input TenantBoolExp {
  _and: [TenantBoolExp!]
  _not: TenantBoolExp
  _or: [TenantBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  actorAddresses: ActorAddressBoolExp
  actorAddressesAggregate: ActorAddressAggregateBoolExp
  actorBankInfos: ActorBankInfoBoolExp
  actorBankInfosAggregate: ActorBankInfoAggregateBoolExp
  actorImages: ActorImageBoolExp
  actorImagesAggregate: ActorImageAggregateBoolExp
  actors: ActorBoolExp
  actorsAggregate: ActorAggregateBoolExp
  botInfos: BotInfoBoolExp
  botInfosAggregate: BotInfoAggregateBoolExp
  campuses: CampusBoolExp
  campusesAggregate: CampusAggregateBoolExp
  canteenFoods: CanteenFoodBoolExp
  canteenFoodsAggregate: CanteenFoodAggregateBoolExp
  canteenMenus: CanteenMenuBoolExp
  canteenMenusAggregate: CanteenMenuAggregateBoolExp
  canteens: CanteenBoolExp
  canteensAggregate: CanteenAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  classGroups: ClassGroupBoolExp
  classGroupsAggregate: ClassGroupAggregateBoolExp
  cohorts: CohortBoolExp
  cohortsAggregate: CohortAggregateBoolExp
  contents: ContentBoolExp
  contentsAggregate: ContentAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  documents: DocumentBoolExp
  documentsAggregate: DocumentAggregateBoolExp
  domain: StringComparisonExp
  eventApprovalSteps: EventApprovalStepBoolExp
  eventApprovalStepsAggregate: EventApprovalStepAggregateBoolExp
  eventApprovals: EventApprovalBoolExp
  eventApprovalsAggregate: EventApprovalAggregateBoolExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventManages: EventManageBoolExp
  eventManagesAggregate: EventManageAggregateBoolExp
  eventValidationFormId: BigintComparisonExp
  events: EventBoolExp
  eventsAggregate: EventAggregateBoolExp
  expenseItems: ExpenseItemBoolExp
  expenseItemsAggregate: ExpenseItemAggregateBoolExp
  expenses: ExpenseBoolExp
  expensesAggregate: ExpenseAggregateBoolExp
  favorites: FavoriteBoolExp
  favoritesAggregate: FavoriteAggregateBoolExp
  fileUploads: FileUploadBoolExp
  fileUploadsAggregate: FileUploadAggregateBoolExp
  finances: FinanceBoolExp
  financesAggregate: FinanceAggregateBoolExp
  follows: FollowBoolExp
  followsAggregate: FollowAggregateBoolExp
  form: FormBoolExp
  formSubmissions: FormSubmissionBoolExp
  formSubmissionsAggregate: FormSubmissionAggregateBoolExp
  forms: FormBoolExp
  formsAggregate: FormAggregateBoolExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individuals: IndividualBoolExp
  individualsAggregate: IndividualAggregateBoolExp
  issues: IssueBoolExp
  issuesAggregate: IssueAggregateBoolExp
  legalUnits: LegalUnitBoolExp
  legalUnitsAggregate: LegalUnitAggregateBoolExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  missions: MissionBoolExp
  missionsAggregate: MissionAggregateBoolExp
  name: StringComparisonExp
  oidcInfoOidcCallbackUri: StringComparisonExp
  oidcInfoOidcClientId: StringComparisonExp
  oidcInfoOidcClientSecret: StringComparisonExp
  oidcInfoOidcDiscoveryUrl: StringComparisonExp
  oidcInfoOidcEnabled: BooleanComparisonExp
  oidcInfoOidcName: StringComparisonExp
  oidcInfoOidcScopes: StringComparisonExp
  pointName: StringComparisonExp
  poles: PoleBoolExp
  polesAggregate: PoleAggregateBoolExp
  projects: ProjectBoolExp
  projectsAggregate: ProjectAggregateBoolExp
  reactions: ReactionBoolExp
  reactionsAggregate: ReactionAggregateBoolExp
  reports: ReportBoolExp
  reportsAggregate: ReportAggregateBoolExp
  roles: RoleBoolExp
  rolesAggregate: RoleAggregateBoolExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  socials: SocialBoolExp
  socialsAggregate: SocialAggregateBoolExp
  subjects: SubjectBoolExp
  subjectsAggregate: SubjectAggregateBoolExp
  tags: TagBoolExp
  tagsAggregate: TagAggregateBoolExp
  team: TeamBoolExp
  teamId: BigintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  teamMetrics: TeamMetricBoolExp
  teamMetricsAggregate: TeamMetricAggregateBoolExp
  teams: TeamBoolExp
  teamsAggregate: TeamAggregateBoolExp
  threads: ThreadBoolExp
  threadsAggregate: ThreadAggregateBoolExp
  userInfos: UserInfoBoolExp
  userInfosAggregate: UserInfoAggregateBoolExp
  validations: ValidationBoolExp
  validationsAggregate: ValidationAggregateBoolExp
  votes: VoteBoolExp
  votesAggregate: VoteAggregateBoolExp
}

# unique or primary key constraints on table "tenant"
enum TenantConstraint {
  # unique or primary key constraint on columns "domain"
  tenant_domain_unique

  # unique or primary key constraint on columns "event_validation_form_id"
  tenant_event_validation_form_id_unique

  # unique or primary key constraint on columns "id"
  tenant_pkey

  # unique or primary key constraint on columns "team_id"
  tenant_team_id_unique
}

# input type for incrementing numeric columns in table "tenant"
input TenantIncInput {
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
  teamId: bigint
}

# input type for inserting data into table "tenant"
input TenantInsertInput {
  actions: ActionArrRelInsertInput
  actorAddresses: ActorAddressArrRelInsertInput
  actorBankInfos: ActorBankInfoArrRelInsertInput
  actorImages: ActorImageArrRelInsertInput
  actors: ActorArrRelInsertInput
  botInfos: BotInfoArrRelInsertInput
  campuses: CampusArrRelInsertInput
  canteenFoods: CanteenFoodArrRelInsertInput
  canteenMenus: CanteenMenuArrRelInsertInput
  canteens: CanteenArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  classGroups: ClassGroupArrRelInsertInput
  cohorts: CohortArrRelInsertInput
  contents: ContentArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  documents: DocumentArrRelInsertInput
  domain: String
  eventApprovalSteps: EventApprovalStepArrRelInsertInput
  eventApprovals: EventApprovalArrRelInsertInput
  eventJoins: EventJoinArrRelInsertInput
  eventManages: EventManageArrRelInsertInput
  eventValidationFormId: bigint
  events: EventArrRelInsertInput
  expenseItems: ExpenseItemArrRelInsertInput
  expenses: ExpenseArrRelInsertInput
  favorites: FavoriteArrRelInsertInput
  fileUploads: FileUploadArrRelInsertInput
  finances: FinanceArrRelInsertInput
  follows: FollowArrRelInsertInput
  form: FormObjRelInsertInput
  formSubmissions: FormSubmissionArrRelInsertInput
  forms: FormArrRelInsertInput
  id: bigint
  individual: IndividualObjRelInsertInput
  individuals: IndividualArrRelInsertInput
  issues: IssueArrRelInsertInput
  legalUnits: LegalUnitArrRelInsertInput
  missionJoins: MissionJoinArrRelInsertInput
  missions: MissionArrRelInsertInput
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  poles: PoleArrRelInsertInput
  projects: ProjectArrRelInsertInput
  reactions: ReactionArrRelInsertInput
  reports: ReportArrRelInsertInput
  roles: RoleArrRelInsertInput
  sessions: SessionArrRelInsertInput
  shortcuts: ShortcutArrRelInsertInput
  socials: SocialArrRelInsertInput
  subjects: SubjectArrRelInsertInput
  tags: TagArrRelInsertInput
  team: TeamObjRelInsertInput
  teamId: bigint
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  teamMetrics: TeamMetricArrRelInsertInput
  teams: TeamArrRelInsertInput
  threads: ThreadArrRelInsertInput
  userInfos: UserInfoArrRelInsertInput
  validations: ValidationArrRelInsertInput
  votes: VoteArrRelInsertInput
}

# aggregate max on columns
type TenantMaxFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

# order by max() on columns of table "tenant"
input TenantMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  teamId: OrderBy
}

# aggregate min on columns
type TenantMinFields {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

# order by min() on columns of table "tenant"
input TenantMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  domain: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  teamId: OrderBy
}

# response of any mutation on the table "tenant"
type TenantMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Tenant!]!
}

# input type for inserting object relation for remote table "tenant"
input TenantObjRelInsertInput {
  data: TenantInsertInput!

  # upsert condition
  onConflict: TenantOnConflict
}

# on_conflict condition type for table "tenant"
input TenantOnConflict {
  constraint: TenantConstraint!
  updateColumns: [TenantUpdateColumn!]! = []
  where: TenantBoolExp
}

# Ordering options when selecting data from "tenant".
input TenantOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  actorAddressesAggregate: ActorAddressAggregateOrderBy
  actorBankInfosAggregate: ActorBankInfoAggregateOrderBy
  actorImagesAggregate: ActorImageAggregateOrderBy
  actorsAggregate: ActorAggregateOrderBy
  botInfosAggregate: BotInfoAggregateOrderBy
  campusesAggregate: CampusAggregateOrderBy
  canteenFoodsAggregate: CanteenFoodAggregateOrderBy
  canteenMenusAggregate: CanteenMenuAggregateOrderBy
  canteensAggregate: CanteenAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  classGroupsAggregate: ClassGroupAggregateOrderBy
  cohortsAggregate: CohortAggregateOrderBy
  contentsAggregate: ContentAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  documentsAggregate: DocumentAggregateOrderBy
  domain: OrderBy
  eventApprovalStepsAggregate: EventApprovalStepAggregateOrderBy
  eventApprovalsAggregate: EventApprovalAggregateOrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventManagesAggregate: EventManageAggregateOrderBy
  eventValidationFormId: OrderBy
  eventsAggregate: EventAggregateOrderBy
  expenseItemsAggregate: ExpenseItemAggregateOrderBy
  expensesAggregate: ExpenseAggregateOrderBy
  favoritesAggregate: FavoriteAggregateOrderBy
  fileUploadsAggregate: FileUploadAggregateOrderBy
  financesAggregate: FinanceAggregateOrderBy
  followsAggregate: FollowAggregateOrderBy
  form: FormOrderBy
  formSubmissionsAggregate: FormSubmissionAggregateOrderBy
  formsAggregate: FormAggregateOrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualsAggregate: IndividualAggregateOrderBy
  issuesAggregate: IssueAggregateOrderBy
  legalUnitsAggregate: LegalUnitAggregateOrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  missionsAggregate: MissionAggregateOrderBy
  name: OrderBy
  oidcInfoOidcCallbackUri: OrderBy
  oidcInfoOidcClientId: OrderBy
  oidcInfoOidcClientSecret: OrderBy
  oidcInfoOidcDiscoveryUrl: OrderBy
  oidcInfoOidcEnabled: OrderBy
  oidcInfoOidcName: OrderBy
  oidcInfoOidcScopes: OrderBy
  pointName: OrderBy
  polesAggregate: PoleAggregateOrderBy
  projectsAggregate: ProjectAggregateOrderBy
  reactionsAggregate: ReactionAggregateOrderBy
  reportsAggregate: ReportAggregateOrderBy
  rolesAggregate: RoleAggregateOrderBy
  sessionsAggregate: SessionAggregateOrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  socialsAggregate: SocialAggregateOrderBy
  subjectsAggregate: SubjectAggregateOrderBy
  tagsAggregate: TagAggregateOrderBy
  team: TeamOrderBy
  teamId: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  teamMetricsAggregate: TeamMetricAggregateOrderBy
  teamsAggregate: TeamAggregateOrderBy
  threadsAggregate: ThreadAggregateOrderBy
  userInfosAggregate: UserInfoAggregateOrderBy
  validationsAggregate: ValidationAggregateOrderBy
  votesAggregate: VoteAggregateOrderBy
}

# primary key columns input for table: tenant
input TenantPkColumnsInput {
  id: bigint!
}

# select columns of table "tenant"
enum TenantSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  domain

  # column name
  eventValidationFormId

  # column name
  id

  # column name
  name

  # column name
  oidcInfoOidcCallbackUri

  # column name
  oidcInfoOidcClientId

  # column name
  oidcInfoOidcClientSecret

  # column name
  oidcInfoOidcDiscoveryUrl

  # column name
  oidcInfoOidcEnabled

  # column name
  oidcInfoOidcName

  # column name
  oidcInfoOidcScopes

  # column name
  pointName

  # column name
  teamId
}

# select "tenantAggregateBoolExpBool_andArgumentsColumns" columns of table "tenant"
enum TenantSelectColumnTenantAggregateBoolExpBool_andArgumentsColumns {
  # column name
  oidcInfoOidcEnabled
}

# select "tenantAggregateBoolExpBool_orArgumentsColumns" columns of table "tenant"
enum TenantSelectColumnTenantAggregateBoolExpBool_orArgumentsColumns {
  # column name
  oidcInfoOidcEnabled
}

# input type for updating data in table "tenant"
input TenantSetInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

# aggregate stddev on columns
type TenantStddevFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

# order by stddev() on columns of table "tenant"
input TenantStddevOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# aggregate stddevPop on columns
type TenantStddevPopFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

# order by stddevPop() on columns of table "tenant"
input TenantStddevPopOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# aggregate stddevSamp on columns
type TenantStddevSampFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

# order by stddevSamp() on columns of table "tenant"
input TenantStddevSampOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# Streaming cursor of the table "tenant"
input TenantStreamCursorInput {
  # Stream column input with initial value
  initialValue: TenantStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input TenantStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  domain: String
  eventValidationFormId: bigint
  id: bigint
  name: String
  oidcInfoOidcCallbackUri: String
  oidcInfoOidcClientId: String
  oidcInfoOidcClientSecret: String
  oidcInfoOidcDiscoveryUrl: String
  oidcInfoOidcEnabled: Boolean
  oidcInfoOidcName: String
  oidcInfoOidcScopes: String
  pointName: String
  teamId: bigint
}

# aggregate sum on columns
type TenantSumFields {
  createdById: bigint
  eventValidationFormId: bigint
  id: bigint
  teamId: bigint
}

# order by sum() on columns of table "tenant"
input TenantSumOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# update columns of table "tenant"
enum TenantUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  domain

  # column name
  eventValidationFormId

  # column name
  id

  # column name
  name

  # column name
  oidcInfoOidcCallbackUri

  # column name
  oidcInfoOidcClientId

  # column name
  oidcInfoOidcClientSecret

  # column name
  oidcInfoOidcDiscoveryUrl

  # column name
  oidcInfoOidcEnabled

  # column name
  oidcInfoOidcName

  # column name
  oidcInfoOidcScopes

  # column name
  pointName

  # column name
  teamId
}

input TenantUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: TenantIncInput

  # sets the columns of the filtered rows to the given values
  _set: TenantSetInput

  # filter the rows which have to be updated
  where: TenantBoolExp!
}

# aggregate variance on columns
type TenantVarianceFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

# order by variance() on columns of table "tenant"
input TenantVarianceOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# aggregate varPop on columns
type TenantVarPopFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

# order by varPop() on columns of table "tenant"
input TenantVarPopOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# aggregate varSamp on columns
type TenantVarSampFields {
  createdById: Float
  eventValidationFormId: Float
  id: Float
  teamId: Float
}

# order by varSamp() on columns of table "tenant"
input TenantVarSampOrderBy {
  createdById: OrderBy
  eventValidationFormId: OrderBy
  id: OrderBy
  teamId: OrderBy
}

# columns and relationships of "thread"
type Thread {
  # An object relationship
  content: Content!
  contentId: bigint!
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  name: String!
  slug: String!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!

  # An array relationship
  threadContributors(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): [ThreadContributors!]!

  # An aggregate relationship
  threadContributorsAggregate(
    # distinct select on columns
    distinctOn: [ThreadContributorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadContributorsOrderBy!]

    # filter the rows returned
    where: ThreadContributorsBoolExp
  ): ThreadContributorsAggregate!

  # An array relationship
  threadTags(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): [ThreadTags!]!

  # An aggregate relationship
  threadTagsAggregate(
    # distinct select on columns
    distinctOn: [ThreadTagsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ThreadTagsOrderBy!]

    # filter the rows returned
    where: ThreadTagsBoolExp
  ): ThreadTagsAggregate!
}

# aggregated selection of "thread"
type ThreadAggregate {
  aggregate: ThreadAggregateFields
  nodes: [Thread!]!
}

input ThreadAggregateBoolExp {
  count: threadAggregateBoolExpCount
}

input threadAggregateBoolExpCount {
  arguments: [ThreadSelectColumn!]
  distinct: Boolean
  filter: ThreadBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "thread"
type ThreadAggregateFields {
  avg: ThreadAvgFields
  count(columns: [ThreadSelectColumn!], distinct: Boolean): Int!
  max: ThreadMaxFields
  min: ThreadMinFields
  stddev: ThreadStddevFields
  stddevPop: ThreadStddevPopFields
  stddevSamp: ThreadStddevSampFields
  sum: ThreadSumFields
  varPop: ThreadVarPopFields
  varSamp: ThreadVarSampFields
  variance: ThreadVarianceFields
}

# order by aggregate values of table "thread"
input ThreadAggregateOrderBy {
  avg: ThreadAvgOrderBy
  count: OrderBy
  max: ThreadMaxOrderBy
  min: ThreadMinOrderBy
  stddev: ThreadStddevOrderBy
  stddevPop: ThreadStddevPopOrderBy
  stddevSamp: ThreadStddevSampOrderBy
  sum: ThreadSumOrderBy
  varPop: ThreadVarPopOrderBy
  varSamp: ThreadVarSampOrderBy
  variance: ThreadVarianceOrderBy
}

# input type for inserting array relation for remote table "thread"
input ThreadArrRelInsertInput {
  data: [ThreadInsertInput!]!

  # upsert condition
  onConflict: ThreadOnConflict
}

# aggregate avg on columns
type ThreadAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "thread"
input ThreadAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "thread". All fields are combined with a logical 'AND'.
input ThreadBoolExp {
  _and: [ThreadBoolExp!]
  _not: ThreadBoolExp
  _or: [ThreadBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  name: StringComparisonExp
  slug: StringComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  threadContributors: ThreadContributorsBoolExp
  threadContributorsAggregate: ThreadContributorsAggregateBoolExp
  threadTags: ThreadTagsBoolExp
  threadTagsAggregate: ThreadTagsAggregateBoolExp
}

# unique or primary key constraints on table "thread"
enum ThreadConstraint {
  # unique or primary key constraint on columns "content_id"
  thread_content_id_unique

  # unique or primary key constraint on columns "id"
  thread_pkey
}

# columns and relationships of "thread_contributors"
type ThreadContributors {
  # An object relationship
  individual: Individual!
  individualId: bigint!

  # An object relationship
  thread: Thread!
  threadId: bigint!
}

# aggregated selection of "thread_contributors"
type ThreadContributorsAggregate {
  aggregate: ThreadContributorsAggregateFields
  nodes: [ThreadContributors!]!
}

input ThreadContributorsAggregateBoolExp {
  count: threadContributorsAggregateBoolExpCount
}

input threadContributorsAggregateBoolExpCount {
  arguments: [ThreadContributorsSelectColumn!]
  distinct: Boolean
  filter: ThreadContributorsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "thread_contributors"
type ThreadContributorsAggregateFields {
  avg: ThreadContributorsAvgFields
  count(columns: [ThreadContributorsSelectColumn!], distinct: Boolean): Int!
  max: ThreadContributorsMaxFields
  min: ThreadContributorsMinFields
  stddev: ThreadContributorsStddevFields
  stddevPop: ThreadContributorsStddevPopFields
  stddevSamp: ThreadContributorsStddevSampFields
  sum: ThreadContributorsSumFields
  varPop: ThreadContributorsVarPopFields
  varSamp: ThreadContributorsVarSampFields
  variance: ThreadContributorsVarianceFields
}

# order by aggregate values of table "thread_contributors"
input ThreadContributorsAggregateOrderBy {
  avg: ThreadContributorsAvgOrderBy
  count: OrderBy
  max: ThreadContributorsMaxOrderBy
  min: ThreadContributorsMinOrderBy
  stddev: ThreadContributorsStddevOrderBy
  stddevPop: ThreadContributorsStddevPopOrderBy
  stddevSamp: ThreadContributorsStddevSampOrderBy
  sum: ThreadContributorsSumOrderBy
  varPop: ThreadContributorsVarPopOrderBy
  varSamp: ThreadContributorsVarSampOrderBy
  variance: ThreadContributorsVarianceOrderBy
}

# input type for inserting array relation for remote table "thread_contributors"
input ThreadContributorsArrRelInsertInput {
  data: [ThreadContributorsInsertInput!]!

  # upsert condition
  onConflict: ThreadContributorsOnConflict
}

# aggregate avg on columns
type ThreadContributorsAvgFields {
  individualId: Float
  threadId: Float
}

# order by avg() on columns of table "thread_contributors"
input ThreadContributorsAvgOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# Boolean expression to filter rows from the table "thread_contributors". All fields are combined with a logical 'AND'.
input ThreadContributorsBoolExp {
  _and: [ThreadContributorsBoolExp!]
  _not: ThreadContributorsBoolExp
  _or: [ThreadContributorsBoolExp!]
  individual: IndividualBoolExp
  individualId: BigintComparisonExp
  thread: ThreadBoolExp
  threadId: BigintComparisonExp
}

# unique or primary key constraints on table "thread_contributors"
enum ThreadContributorsConstraint {
  # unique or primary key constraint on columns "individual_id", "thread_id"
  thread_contributors_pkey
}

# input type for incrementing numeric columns in table "thread_contributors"
input ThreadContributorsIncInput {
  individualId: bigint
  threadId: bigint
}

# input type for inserting data into table "thread_contributors"
input ThreadContributorsInsertInput {
  individual: IndividualObjRelInsertInput
  individualId: bigint
  thread: ThreadObjRelInsertInput
  threadId: bigint
}

# aggregate max on columns
type ThreadContributorsMaxFields {
  individualId: bigint
  threadId: bigint
}

# order by max() on columns of table "thread_contributors"
input ThreadContributorsMaxOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# aggregate min on columns
type ThreadContributorsMinFields {
  individualId: bigint
  threadId: bigint
}

# order by min() on columns of table "thread_contributors"
input ThreadContributorsMinOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# response of any mutation on the table "thread_contributors"
type ThreadContributorsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ThreadContributors!]!
}

# on_conflict condition type for table "thread_contributors"
input ThreadContributorsOnConflict {
  constraint: ThreadContributorsConstraint!
  updateColumns: [ThreadContributorsUpdateColumn!]! = []
  where: ThreadContributorsBoolExp
}

# Ordering options when selecting data from "thread_contributors".
input ThreadContributorsOrderBy {
  individual: IndividualOrderBy
  individualId: OrderBy
  thread: ThreadOrderBy
  threadId: OrderBy
}

# primary key columns input for table: thread_contributors
input ThreadContributorsPkColumnsInput {
  individualId: bigint!
  threadId: bigint!
}

# select columns of table "thread_contributors"
enum ThreadContributorsSelectColumn {
  # column name
  individualId

  # column name
  threadId
}

# input type for updating data in table "thread_contributors"
input ThreadContributorsSetInput {
  individualId: bigint
  threadId: bigint
}

# aggregate stddev on columns
type ThreadContributorsStddevFields {
  individualId: Float
  threadId: Float
}

# order by stddev() on columns of table "thread_contributors"
input ThreadContributorsStddevOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# aggregate stddevPop on columns
type ThreadContributorsStddevPopFields {
  individualId: Float
  threadId: Float
}

# order by stddevPop() on columns of table "thread_contributors"
input ThreadContributorsStddevPopOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# aggregate stddevSamp on columns
type ThreadContributorsStddevSampFields {
  individualId: Float
  threadId: Float
}

# order by stddevSamp() on columns of table "thread_contributors"
input ThreadContributorsStddevSampOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# Streaming cursor of the table "thread_contributors"
input ThreadContributorsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ThreadContributorsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ThreadContributorsStreamCursorValueInput {
  individualId: bigint
  threadId: bigint
}

# aggregate sum on columns
type ThreadContributorsSumFields {
  individualId: bigint
  threadId: bigint
}

# order by sum() on columns of table "thread_contributors"
input ThreadContributorsSumOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# update columns of table "thread_contributors"
enum ThreadContributorsUpdateColumn {
  # column name
  individualId

  # column name
  threadId
}

input ThreadContributorsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ThreadContributorsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ThreadContributorsSetInput

  # filter the rows which have to be updated
  where: ThreadContributorsBoolExp!
}

# aggregate variance on columns
type ThreadContributorsVarianceFields {
  individualId: Float
  threadId: Float
}

# order by variance() on columns of table "thread_contributors"
input ThreadContributorsVarianceOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# aggregate varPop on columns
type ThreadContributorsVarPopFields {
  individualId: Float
  threadId: Float
}

# order by varPop() on columns of table "thread_contributors"
input ThreadContributorsVarPopOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# aggregate varSamp on columns
type ThreadContributorsVarSampFields {
  individualId: Float
  threadId: Float
}

# order by varSamp() on columns of table "thread_contributors"
input ThreadContributorsVarSampOrderBy {
  individualId: OrderBy
  threadId: OrderBy
}

# input type for incrementing numeric columns in table "thread"
input ThreadIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "thread"
input ThreadInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  name: String
  slug: String
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  threadContributors: ThreadContributorsArrRelInsertInput
  threadTags: ThreadTagsArrRelInsertInput
}

# aggregate max on columns
type ThreadMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# order by max() on columns of table "thread"
input ThreadMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type ThreadMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# order by min() on columns of table "thread"
input ThreadMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  name: OrderBy
  slug: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "thread"
type ThreadMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Thread!]!
}

# input type for inserting object relation for remote table "thread"
input ThreadObjRelInsertInput {
  data: ThreadInsertInput!

  # upsert condition
  onConflict: ThreadOnConflict
}

# on_conflict condition type for table "thread"
input ThreadOnConflict {
  constraint: ThreadConstraint!
  updateColumns: [ThreadUpdateColumn!]! = []
  where: ThreadBoolExp
}

# Ordering options when selecting data from "thread".
input ThreadOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  name: OrderBy
  slug: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  threadContributorsAggregate: ThreadContributorsAggregateOrderBy
  threadTagsAggregate: ThreadTagsAggregateOrderBy
}

# primary key columns input for table: thread
input ThreadPkColumnsInput {
  id: bigint!
}

# select columns of table "thread"
enum ThreadSelectColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  slug

  # column name
  tenantId
}

# input type for updating data in table "thread"
input ThreadSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# aggregate stddev on columns
type ThreadStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "thread"
input ThreadStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ThreadStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "thread"
input ThreadStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ThreadStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "thread"
input ThreadStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "thread"
input ThreadStreamCursorInput {
  # Stream column input with initial value
  initialValue: ThreadStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ThreadStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  name: String
  slug: String
  tenantId: bigint
}

# aggregate sum on columns
type ThreadSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "thread"
input ThreadSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "thread_tags"
type ThreadTags {
  # An object relationship
  tag: Tag!
  tagId: bigint!

  # An object relationship
  thread: Thread!
  threadId: bigint!
}

# aggregated selection of "thread_tags"
type ThreadTagsAggregate {
  aggregate: ThreadTagsAggregateFields
  nodes: [ThreadTags!]!
}

input ThreadTagsAggregateBoolExp {
  count: threadTagsAggregateBoolExpCount
}

input threadTagsAggregateBoolExpCount {
  arguments: [ThreadTagsSelectColumn!]
  distinct: Boolean
  filter: ThreadTagsBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "thread_tags"
type ThreadTagsAggregateFields {
  avg: ThreadTagsAvgFields
  count(columns: [ThreadTagsSelectColumn!], distinct: Boolean): Int!
  max: ThreadTagsMaxFields
  min: ThreadTagsMinFields
  stddev: ThreadTagsStddevFields
  stddevPop: ThreadTagsStddevPopFields
  stddevSamp: ThreadTagsStddevSampFields
  sum: ThreadTagsSumFields
  varPop: ThreadTagsVarPopFields
  varSamp: ThreadTagsVarSampFields
  variance: ThreadTagsVarianceFields
}

# order by aggregate values of table "thread_tags"
input ThreadTagsAggregateOrderBy {
  avg: ThreadTagsAvgOrderBy
  count: OrderBy
  max: ThreadTagsMaxOrderBy
  min: ThreadTagsMinOrderBy
  stddev: ThreadTagsStddevOrderBy
  stddevPop: ThreadTagsStddevPopOrderBy
  stddevSamp: ThreadTagsStddevSampOrderBy
  sum: ThreadTagsSumOrderBy
  varPop: ThreadTagsVarPopOrderBy
  varSamp: ThreadTagsVarSampOrderBy
  variance: ThreadTagsVarianceOrderBy
}

# input type for inserting array relation for remote table "thread_tags"
input ThreadTagsArrRelInsertInput {
  data: [ThreadTagsInsertInput!]!

  # upsert condition
  onConflict: ThreadTagsOnConflict
}

# aggregate avg on columns
type ThreadTagsAvgFields {
  tagId: Float
  threadId: Float
}

# order by avg() on columns of table "thread_tags"
input ThreadTagsAvgOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# Boolean expression to filter rows from the table "thread_tags". All fields are combined with a logical 'AND'.
input ThreadTagsBoolExp {
  _and: [ThreadTagsBoolExp!]
  _not: ThreadTagsBoolExp
  _or: [ThreadTagsBoolExp!]
  tag: TagBoolExp
  tagId: BigintComparisonExp
  thread: ThreadBoolExp
  threadId: BigintComparisonExp
}

# unique or primary key constraints on table "thread_tags"
enum ThreadTagsConstraint {
  # unique or primary key constraint on columns "tag_id", "thread_id"
  thread_tags_pkey
}

# input type for incrementing numeric columns in table "thread_tags"
input ThreadTagsIncInput {
  tagId: bigint
  threadId: bigint
}

# input type for inserting data into table "thread_tags"
input ThreadTagsInsertInput {
  tag: TagObjRelInsertInput
  tagId: bigint
  thread: ThreadObjRelInsertInput
  threadId: bigint
}

# aggregate max on columns
type ThreadTagsMaxFields {
  tagId: bigint
  threadId: bigint
}

# order by max() on columns of table "thread_tags"
input ThreadTagsMaxOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# aggregate min on columns
type ThreadTagsMinFields {
  tagId: bigint
  threadId: bigint
}

# order by min() on columns of table "thread_tags"
input ThreadTagsMinOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# response of any mutation on the table "thread_tags"
type ThreadTagsMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [ThreadTags!]!
}

# on_conflict condition type for table "thread_tags"
input ThreadTagsOnConflict {
  constraint: ThreadTagsConstraint!
  updateColumns: [ThreadTagsUpdateColumn!]! = []
  where: ThreadTagsBoolExp
}

# Ordering options when selecting data from "thread_tags".
input ThreadTagsOrderBy {
  tag: TagOrderBy
  tagId: OrderBy
  thread: ThreadOrderBy
  threadId: OrderBy
}

# primary key columns input for table: thread_tags
input ThreadTagsPkColumnsInput {
  tagId: bigint!
  threadId: bigint!
}

# select columns of table "thread_tags"
enum ThreadTagsSelectColumn {
  # column name
  tagId

  # column name
  threadId
}

# input type for updating data in table "thread_tags"
input ThreadTagsSetInput {
  tagId: bigint
  threadId: bigint
}

# aggregate stddev on columns
type ThreadTagsStddevFields {
  tagId: Float
  threadId: Float
}

# order by stddev() on columns of table "thread_tags"
input ThreadTagsStddevOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# aggregate stddevPop on columns
type ThreadTagsStddevPopFields {
  tagId: Float
  threadId: Float
}

# order by stddevPop() on columns of table "thread_tags"
input ThreadTagsStddevPopOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# aggregate stddevSamp on columns
type ThreadTagsStddevSampFields {
  tagId: Float
  threadId: Float
}

# order by stddevSamp() on columns of table "thread_tags"
input ThreadTagsStddevSampOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# Streaming cursor of the table "thread_tags"
input ThreadTagsStreamCursorInput {
  # Stream column input with initial value
  initialValue: ThreadTagsStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ThreadTagsStreamCursorValueInput {
  tagId: bigint
  threadId: bigint
}

# aggregate sum on columns
type ThreadTagsSumFields {
  tagId: bigint
  threadId: bigint
}

# order by sum() on columns of table "thread_tags"
input ThreadTagsSumOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# update columns of table "thread_tags"
enum ThreadTagsUpdateColumn {
  # column name
  tagId

  # column name
  threadId
}

input ThreadTagsUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ThreadTagsIncInput

  # sets the columns of the filtered rows to the given values
  _set: ThreadTagsSetInput

  # filter the rows which have to be updated
  where: ThreadTagsBoolExp!
}

# aggregate variance on columns
type ThreadTagsVarianceFields {
  tagId: Float
  threadId: Float
}

# order by variance() on columns of table "thread_tags"
input ThreadTagsVarianceOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# aggregate varPop on columns
type ThreadTagsVarPopFields {
  tagId: Float
  threadId: Float
}

# order by varPop() on columns of table "thread_tags"
input ThreadTagsVarPopOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# aggregate varSamp on columns
type ThreadTagsVarSampFields {
  tagId: Float
  threadId: Float
}

# order by varSamp() on columns of table "thread_tags"
input ThreadTagsVarSampOrderBy {
  tagId: OrderBy
  threadId: OrderBy
}

# update columns of table "thread"
enum ThreadUpdateColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  name

  # column name
  slug

  # column name
  tenantId
}

input ThreadUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ThreadIncInput

  # sets the columns of the filtered rows to the given values
  _set: ThreadSetInput

  # filter the rows which have to be updated
  where: ThreadBoolExp!
}

# aggregate variance on columns
type ThreadVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "thread"
input ThreadVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ThreadVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "thread"
input ThreadVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ThreadVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "thread"
input ThreadVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

scalar timestamptz

# Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# columns and relationships of "user_info"
type UserInfo {
  # An array relationship
  actions(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): [Action!]!

  # An aggregate relationship
  actionsAggregate(
    # distinct select on columns
    distinctOn: [ActionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ActionOrderBy!]

    # filter the rows returned
    where: ActionBoolExp
  ): ActionAggregate!

  # An array relationship
  classGroupTeachers(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): [ClassGroupTeacher!]!

  # An aggregate relationship
  classGroupTeachersAggregate(
    # distinct select on columns
    distinctOn: [ClassGroupTeacherSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ClassGroupTeacherOrderBy!]

    # filter the rows returned
    where: ClassGroupTeacherBoolExp
  ): ClassGroupTeacherAggregate!
  createdAt: timestamptz!
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz

  # An array relationship
  eventJoins(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): [EventJoin!]!

  # An aggregate relationship
  eventJoinsAggregate(
    # distinct select on columns
    distinctOn: [EventJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventJoinOrderBy!]

    # filter the rows returned
    where: EventJoinBoolExp
  ): EventJoinAggregate!

  # An array relationship
  eventSupervisors(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): [EventSupervisors!]!

  # An aggregate relationship
  eventSupervisorsAggregate(
    # distinct select on columns
    distinctOn: [EventSupervisorsSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [EventSupervisorsOrderBy!]

    # filter the rows returned
    where: EventSupervisorsBoolExp
  ): EventSupervisorsAggregate!
  finishedIntroduction: Boolean!
  finishedOnboarding: Boolean!
  firstName: String!
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual

  # An object relationship
  individualById: Individual
  lastName: String!
  middleNames: _text!

  # An array relationship
  missionJoins(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): [MissionJoin!]!

  # An aggregate relationship
  missionJoinsAggregate(
    # distinct select on columns
    distinctOn: [MissionJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [MissionJoinOrderBy!]

    # filter the rows returned
    where: MissionJoinBoolExp
  ): MissionJoinAggregate!
  notificationSettingsAdminEventValidationApproved: smallint!
  notificationSettingsAdminEventValidationRejected: smallint!
  notificationSettingsAdminEventValidationStarted: smallint!
  notificationSettingsAdminEventValidationStep: smallint!
  notificationSettingsAdminReportCreated: smallint!
  notificationSettingsAdminRoleUpdated: smallint!
  notificationSettingsAdminTeamLegalFileUpdated: smallint!
  notificationSettingsAdminTeamSocialUpdated: smallint!
  notificationSettingsAdminThreadAssigned: smallint!
  notificationSettingsAdminThreadAssignedStale: smallint!
  notificationSettingsAdminThreadAssignedStaleThreshold: Int!
  notificationSettingsAdminThreadStale: smallint!
  notificationSettingsAdminThreadStaleThreshold: Int!
  notificationSettingsBadgeUnlocked: smallint!
  notificationSettingsBlogSubscribedUpdated: smallint!
  notificationSettingsContentRemoved: smallint!
  notificationSettingsEventCreated: smallint!
  notificationSettingsEventManagedApproved: smallint!
  notificationSettingsEventManagedRegistrationCreated: smallint!
  notificationSettingsEventManagedRejected: smallint!
  notificationSettingsEventSubscribedUpdated: smallint!
  notificationSettingsMentionned: smallint!
  notificationSettingsRoleUpdated: smallint!
  notificationSettingsTeamManagedEventUpdated: smallint!
  notificationSettingsTeamManagedFormUpdated: smallint!
  notificationSettingsTeamManagedMemberRoleUpdated: smallint!
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint!
  notificationSettingsTeamSubscribedEventCreated: smallint!
  notificationSettingsThreadSubscribedAnswered: smallint!
  notificationSettingsThreadSubscribedUpdated: smallint!

  # An array relationship
  sessions(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): [Session!]!

  # An aggregate relationship
  sessionsAggregate(
    # distinct select on columns
    distinctOn: [SessionSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [SessionOrderBy!]

    # filter the rows returned
    where: SessionBoolExp
  ): SessionAggregate!
  settingsDarkModeActivated: Boolean!
  settingsGdprEndOfLifeAnonymize: Boolean!
  settingsGdprEndOfLifeExport: Boolean!

  # An array relationship
  shortcuts(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): [Shortcut!]!

  # An aggregate relationship
  shortcutsAggregate(
    # distinct select on columns
    distinctOn: [ShortcutSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [ShortcutOrderBy!]

    # filter the rows returned
    where: ShortcutBoolExp
  ): ShortcutAggregate!
  statsActionStreak: smallint!
  statsCommentCount: smallint!
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int!
  statsPostCount: smallint!
  statsPostStreak: smallint!
  statsReplyCount: smallint!
  statsReplyStreak: smallint!
  statsUploadCount: smallint!

  # An array relationship
  teamJoins(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): [TeamJoin!]!

  # An aggregate relationship
  teamJoinsAggregate(
    # distinct select on columns
    distinctOn: [TeamJoinSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamJoinOrderBy!]

    # filter the rows returned
    where: TeamJoinBoolExp
  ): TeamJoinAggregate!

  # An array relationship
  teamMembers(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): [TeamMember!]!

  # An aggregate relationship
  teamMembersAggregate(
    # distinct select on columns
    distinctOn: [TeamMemberSelectColumn!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    orderBy: [TeamMemberOrderBy!]

    # filter the rows returned
    where: TeamMemberBoolExp
  ): TeamMemberAggregate!

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
}

# aggregated selection of "user_info"
type UserInfoAggregate {
  aggregate: UserInfoAggregateFields
  nodes: [UserInfo!]!
}

input UserInfoAggregateBoolExp {
  bool_and: userInfoAggregateBoolExpBool_and
  bool_or: userInfoAggregateBoolExpBool_or
  count: userInfoAggregateBoolExpCount
}

input userInfoAggregateBoolExpBool_and {
  arguments: UserInfoSelectColumnUserInfoAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: BooleanComparisonExp!
}

input userInfoAggregateBoolExpBool_or {
  arguments: UserInfoSelectColumnUserInfoAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: BooleanComparisonExp!
}

input userInfoAggregateBoolExpCount {
  arguments: [UserInfoSelectColumn!]
  distinct: Boolean
  filter: UserInfoBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "user_info"
type UserInfoAggregateFields {
  avg: UserInfoAvgFields
  count(columns: [UserInfoSelectColumn!], distinct: Boolean): Int!
  max: UserInfoMaxFields
  min: UserInfoMinFields
  stddev: UserInfoStddevFields
  stddevPop: UserInfoStddevPopFields
  stddevSamp: UserInfoStddevSampFields
  sum: UserInfoSumFields
  varPop: UserInfoVarPopFields
  varSamp: UserInfoVarSampFields
  variance: UserInfoVarianceFields
}

# order by aggregate values of table "user_info"
input UserInfoAggregateOrderBy {
  avg: UserInfoAvgOrderBy
  count: OrderBy
  max: UserInfoMaxOrderBy
  min: UserInfoMinOrderBy
  stddev: UserInfoStddevOrderBy
  stddevPop: UserInfoStddevPopOrderBy
  stddevSamp: UserInfoStddevSampOrderBy
  sum: UserInfoSumOrderBy
  varPop: UserInfoVarPopOrderBy
  varSamp: UserInfoVarSampOrderBy
  variance: UserInfoVarianceOrderBy
}

# input type for inserting array relation for remote table "user_info"
input UserInfoArrRelInsertInput {
  data: [UserInfoInsertInput!]!

  # upsert condition
  onConflict: UserInfoOnConflict
}

# aggregate avg on columns
type UserInfoAvgFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

# order by avg() on columns of table "user_info"
input UserInfoAvgOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "user_info". All fields are combined with a logical 'AND'.
input UserInfoBoolExp {
  _and: [UserInfoBoolExp!]
  _not: UserInfoBoolExp
  _or: [UserInfoBoolExp!]
  actions: ActionBoolExp
  actionsAggregate: ActionAggregateBoolExp
  classGroupTeachers: ClassGroupTeacherBoolExp
  classGroupTeachersAggregate: ClassGroupTeacherAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  customizationColor: StringComparisonExp
  customizationSignature: StringComparisonExp
  deletedAt: TimestamptzComparisonExp
  eventJoins: EventJoinBoolExp
  eventJoinsAggregate: EventJoinAggregateBoolExp
  eventSupervisors: EventSupervisorsBoolExp
  eventSupervisorsAggregate: EventSupervisorsAggregateBoolExp
  finishedIntroduction: BooleanComparisonExp
  finishedOnboarding: BooleanComparisonExp
  firstName: StringComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  individualById: IndividualBoolExp
  lastName: StringComparisonExp
  middleNames: _textComparisonExp
  missionJoins: MissionJoinBoolExp
  missionJoinsAggregate: MissionJoinAggregateBoolExp
  notificationSettingsAdminEventValidationApproved: SmallintComparisonExp
  notificationSettingsAdminEventValidationRejected: SmallintComparisonExp
  notificationSettingsAdminEventValidationStarted: SmallintComparisonExp
  notificationSettingsAdminEventValidationStep: SmallintComparisonExp
  notificationSettingsAdminReportCreated: SmallintComparisonExp
  notificationSettingsAdminRoleUpdated: SmallintComparisonExp
  notificationSettingsAdminTeamLegalFileUpdated: SmallintComparisonExp
  notificationSettingsAdminTeamSocialUpdated: SmallintComparisonExp
  notificationSettingsAdminThreadAssigned: SmallintComparisonExp
  notificationSettingsAdminThreadAssignedStale: SmallintComparisonExp
  notificationSettingsAdminThreadAssignedStaleThreshold: IntComparisonExp
  notificationSettingsAdminThreadStale: SmallintComparisonExp
  notificationSettingsAdminThreadStaleThreshold: IntComparisonExp
  notificationSettingsBadgeUnlocked: SmallintComparisonExp
  notificationSettingsBlogSubscribedUpdated: SmallintComparisonExp
  notificationSettingsContentRemoved: SmallintComparisonExp
  notificationSettingsEventCreated: SmallintComparisonExp
  notificationSettingsEventManagedApproved: SmallintComparisonExp
  notificationSettingsEventManagedRegistrationCreated: SmallintComparisonExp
  notificationSettingsEventManagedRejected: SmallintComparisonExp
  notificationSettingsEventSubscribedUpdated: SmallintComparisonExp
  notificationSettingsMentionned: SmallintComparisonExp
  notificationSettingsRoleUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedEventUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedFormUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedMemberRoleUpdated: SmallintComparisonExp
  notificationSettingsTeamManagedMembershipRequestUpdated: SmallintComparisonExp
  notificationSettingsTeamSubscribedEventCreated: SmallintComparisonExp
  notificationSettingsThreadSubscribedAnswered: SmallintComparisonExp
  notificationSettingsThreadSubscribedUpdated: SmallintComparisonExp
  sessions: SessionBoolExp
  sessionsAggregate: SessionAggregateBoolExp
  settingsDarkModeActivated: BooleanComparisonExp
  settingsGdprEndOfLifeAnonymize: BooleanComparisonExp
  settingsGdprEndOfLifeExport: BooleanComparisonExp
  shortcuts: ShortcutBoolExp
  shortcutsAggregate: ShortcutAggregateBoolExp
  statsActionStreak: SmallintComparisonExp
  statsCommentCount: SmallintComparisonExp
  statsLastActionAt: TimestamptzComparisonExp
  statsLastComment: TimestamptzComparisonExp
  statsLastPostAt: TimestamptzComparisonExp
  statsLastReplyAt: TimestamptzComparisonExp
  statsPoints: IntComparisonExp
  statsPostCount: SmallintComparisonExp
  statsPostStreak: SmallintComparisonExp
  statsReplyCount: SmallintComparisonExp
  statsReplyStreak: SmallintComparisonExp
  statsUploadCount: SmallintComparisonExp
  teamJoins: TeamJoinBoolExp
  teamJoinsAggregate: TeamJoinAggregateBoolExp
  teamMembers: TeamMemberBoolExp
  teamMembersAggregate: TeamMemberAggregateBoolExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
}

# unique or primary key constraints on table "user_info"
enum UserInfoConstraint {
  # unique or primary key constraint on columns "id"
  user_info_pkey
}

# input type for incrementing numeric columns in table "user_info"
input UserInfoIncInput {
  createdById: bigint
  id: bigint
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

# input type for inserting data into table "user_info"
input UserInfoInsertInput {
  actions: ActionArrRelInsertInput
  classGroupTeachers: ClassGroupTeacherArrRelInsertInput
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  eventJoins: EventJoinArrRelInsertInput
  eventSupervisors: EventSupervisorsArrRelInsertInput
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  individualById: IndividualObjRelInsertInput
  lastName: String
  middleNames: _text
  missionJoins: MissionJoinArrRelInsertInput
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  sessions: SessionArrRelInsertInput
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  shortcuts: ShortcutArrRelInsertInput
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  teamJoins: TeamJoinArrRelInsertInput
  teamMembers: TeamMemberArrRelInsertInput
  tenant: TenantObjRelInsertInput
  tenantId: bigint
}

# aggregate max on columns
type UserInfoMaxFields {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

# order by max() on columns of table "user_info"
input UserInfoMaxOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# aggregate min on columns
type UserInfoMinFields {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

# order by min() on columns of table "user_info"
input UserInfoMinOrderBy {
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastName: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# response of any mutation on the table "user_info"
type UserInfoMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [UserInfo!]!
}

# input type for inserting object relation for remote table "user_info"
input UserInfoObjRelInsertInput {
  data: UserInfoInsertInput!

  # upsert condition
  onConflict: UserInfoOnConflict
}

# on_conflict condition type for table "user_info"
input UserInfoOnConflict {
  constraint: UserInfoConstraint!
  updateColumns: [UserInfoUpdateColumn!]! = []
  where: UserInfoBoolExp
}

# Ordering options when selecting data from "user_info".
input UserInfoOrderBy {
  actionsAggregate: ActionAggregateOrderBy
  classGroupTeachersAggregate: ClassGroupTeacherAggregateOrderBy
  createdAt: OrderBy
  createdById: OrderBy
  customizationColor: OrderBy
  customizationSignature: OrderBy
  deletedAt: OrderBy
  eventJoinsAggregate: EventJoinAggregateOrderBy
  eventSupervisorsAggregate: EventSupervisorsAggregateOrderBy
  finishedIntroduction: OrderBy
  finishedOnboarding: OrderBy
  firstName: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  individualById: IndividualOrderBy
  lastName: OrderBy
  middleNames: OrderBy
  missionJoinsAggregate: MissionJoinAggregateOrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  sessionsAggregate: SessionAggregateOrderBy
  settingsDarkModeActivated: OrderBy
  settingsGdprEndOfLifeAnonymize: OrderBy
  settingsGdprEndOfLifeExport: OrderBy
  shortcutsAggregate: ShortcutAggregateOrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsLastActionAt: OrderBy
  statsLastComment: OrderBy
  statsLastPostAt: OrderBy
  statsLastReplyAt: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  teamJoinsAggregate: TeamJoinAggregateOrderBy
  teamMembersAggregate: TeamMemberAggregateOrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
}

# primary key columns input for table: user_info
input UserInfoPkColumnsInput {
  id: bigint!
}

# select columns of table "user_info"
enum UserInfoSelectColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  customizationColor

  # column name
  customizationSignature

  # column name
  deletedAt

  # column name
  finishedIntroduction

  # column name
  finishedOnboarding

  # column name
  firstName

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastName

  # column name
  middleNames

  # column name
  notificationSettingsAdminEventValidationApproved

  # column name
  notificationSettingsAdminEventValidationRejected

  # column name
  notificationSettingsAdminEventValidationStarted

  # column name
  notificationSettingsAdminEventValidationStep

  # column name
  notificationSettingsAdminReportCreated

  # column name
  notificationSettingsAdminRoleUpdated

  # column name
  notificationSettingsAdminTeamLegalFileUpdated

  # column name
  notificationSettingsAdminTeamSocialUpdated

  # column name
  notificationSettingsAdminThreadAssigned

  # column name
  notificationSettingsAdminThreadAssignedStale

  # column name
  notificationSettingsAdminThreadAssignedStaleThreshold

  # column name
  notificationSettingsAdminThreadStale

  # column name
  notificationSettingsAdminThreadStaleThreshold

  # column name
  notificationSettingsBadgeUnlocked

  # column name
  notificationSettingsBlogSubscribedUpdated

  # column name
  notificationSettingsContentRemoved

  # column name
  notificationSettingsEventCreated

  # column name
  notificationSettingsEventManagedApproved

  # column name
  notificationSettingsEventManagedRegistrationCreated

  # column name
  notificationSettingsEventManagedRejected

  # column name
  notificationSettingsEventSubscribedUpdated

  # column name
  notificationSettingsMentionned

  # column name
  notificationSettingsRoleUpdated

  # column name
  notificationSettingsTeamManagedEventUpdated

  # column name
  notificationSettingsTeamManagedFormUpdated

  # column name
  notificationSettingsTeamManagedMemberRoleUpdated

  # column name
  notificationSettingsTeamManagedMembershipRequestUpdated

  # column name
  notificationSettingsTeamSubscribedEventCreated

  # column name
  notificationSettingsThreadSubscribedAnswered

  # column name
  notificationSettingsThreadSubscribedUpdated

  # column name
  settingsDarkModeActivated

  # column name
  settingsGdprEndOfLifeAnonymize

  # column name
  settingsGdprEndOfLifeExport

  # column name
  statsActionStreak

  # column name
  statsCommentCount

  # column name
  statsLastActionAt

  # column name
  statsLastComment

  # column name
  statsLastPostAt

  # column name
  statsLastReplyAt

  # column name
  statsPoints

  # column name
  statsPostCount

  # column name
  statsPostStreak

  # column name
  statsReplyCount

  # column name
  statsReplyStreak

  # column name
  statsUploadCount

  # column name
  tenantId
}

# select "userInfoAggregateBoolExpBool_andArgumentsColumns" columns of table "user_info"
enum UserInfoSelectColumnUserInfoAggregateBoolExpBool_andArgumentsColumns {
  # column name
  finishedIntroduction

  # column name
  finishedOnboarding

  # column name
  settingsDarkModeActivated

  # column name
  settingsGdprEndOfLifeAnonymize

  # column name
  settingsGdprEndOfLifeExport
}

# select "userInfoAggregateBoolExpBool_orArgumentsColumns" columns of table "user_info"
enum UserInfoSelectColumnUserInfoAggregateBoolExpBool_orArgumentsColumns {
  # column name
  finishedIntroduction

  # column name
  finishedOnboarding

  # column name
  settingsDarkModeActivated

  # column name
  settingsGdprEndOfLifeAnonymize

  # column name
  settingsGdprEndOfLifeExport
}

# input type for updating data in table "user_info"
input UserInfoSetInput {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

# aggregate stddev on columns
type UserInfoStddevFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

# order by stddev() on columns of table "user_info"
input UserInfoStddevOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type UserInfoStddevPopFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "user_info"
input UserInfoStddevPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type UserInfoStddevSampFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "user_info"
input UserInfoStddevSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "user_info"
input UserInfoStreamCursorInput {
  # Stream column input with initial value
  initialValue: UserInfoStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input UserInfoStreamCursorValueInput {
  createdAt: timestamptz
  createdById: bigint
  customizationColor: String
  customizationSignature: String
  deletedAt: timestamptz
  finishedIntroduction: Boolean
  finishedOnboarding: Boolean
  firstName: String
  hiddenAt: timestamptz
  id: bigint
  lastName: String
  middleNames: _text
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  settingsDarkModeActivated: Boolean
  settingsGdprEndOfLifeAnonymize: Boolean
  settingsGdprEndOfLifeExport: Boolean
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsLastActionAt: timestamptz
  statsLastComment: timestamptz
  statsLastPostAt: timestamptz
  statsLastReplyAt: timestamptz
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

# aggregate sum on columns
type UserInfoSumFields {
  createdById: bigint
  id: bigint
  notificationSettingsAdminEventValidationApproved: smallint
  notificationSettingsAdminEventValidationRejected: smallint
  notificationSettingsAdminEventValidationStarted: smallint
  notificationSettingsAdminEventValidationStep: smallint
  notificationSettingsAdminReportCreated: smallint
  notificationSettingsAdminRoleUpdated: smallint
  notificationSettingsAdminTeamLegalFileUpdated: smallint
  notificationSettingsAdminTeamSocialUpdated: smallint
  notificationSettingsAdminThreadAssigned: smallint
  notificationSettingsAdminThreadAssignedStale: smallint
  notificationSettingsAdminThreadAssignedStaleThreshold: Int
  notificationSettingsAdminThreadStale: smallint
  notificationSettingsAdminThreadStaleThreshold: Int
  notificationSettingsBadgeUnlocked: smallint
  notificationSettingsBlogSubscribedUpdated: smallint
  notificationSettingsContentRemoved: smallint
  notificationSettingsEventCreated: smallint
  notificationSettingsEventManagedApproved: smallint
  notificationSettingsEventManagedRegistrationCreated: smallint
  notificationSettingsEventManagedRejected: smallint
  notificationSettingsEventSubscribedUpdated: smallint
  notificationSettingsMentionned: smallint
  notificationSettingsRoleUpdated: smallint
  notificationSettingsTeamManagedEventUpdated: smallint
  notificationSettingsTeamManagedFormUpdated: smallint
  notificationSettingsTeamManagedMemberRoleUpdated: smallint
  notificationSettingsTeamManagedMembershipRequestUpdated: smallint
  notificationSettingsTeamSubscribedEventCreated: smallint
  notificationSettingsThreadSubscribedAnswered: smallint
  notificationSettingsThreadSubscribedUpdated: smallint
  statsActionStreak: smallint
  statsCommentCount: smallint
  statsPoints: Int
  statsPostCount: smallint
  statsPostStreak: smallint
  statsReplyCount: smallint
  statsReplyStreak: smallint
  statsUploadCount: smallint
  tenantId: bigint
}

# order by sum() on columns of table "user_info"
input UserInfoSumOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# update columns of table "user_info"
enum UserInfoUpdateColumn {
  # column name
  createdAt

  # column name
  createdById

  # column name
  customizationColor

  # column name
  customizationSignature

  # column name
  deletedAt

  # column name
  finishedIntroduction

  # column name
  finishedOnboarding

  # column name
  firstName

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastName

  # column name
  middleNames

  # column name
  notificationSettingsAdminEventValidationApproved

  # column name
  notificationSettingsAdminEventValidationRejected

  # column name
  notificationSettingsAdminEventValidationStarted

  # column name
  notificationSettingsAdminEventValidationStep

  # column name
  notificationSettingsAdminReportCreated

  # column name
  notificationSettingsAdminRoleUpdated

  # column name
  notificationSettingsAdminTeamLegalFileUpdated

  # column name
  notificationSettingsAdminTeamSocialUpdated

  # column name
  notificationSettingsAdminThreadAssigned

  # column name
  notificationSettingsAdminThreadAssignedStale

  # column name
  notificationSettingsAdminThreadAssignedStaleThreshold

  # column name
  notificationSettingsAdminThreadStale

  # column name
  notificationSettingsAdminThreadStaleThreshold

  # column name
  notificationSettingsBadgeUnlocked

  # column name
  notificationSettingsBlogSubscribedUpdated

  # column name
  notificationSettingsContentRemoved

  # column name
  notificationSettingsEventCreated

  # column name
  notificationSettingsEventManagedApproved

  # column name
  notificationSettingsEventManagedRegistrationCreated

  # column name
  notificationSettingsEventManagedRejected

  # column name
  notificationSettingsEventSubscribedUpdated

  # column name
  notificationSettingsMentionned

  # column name
  notificationSettingsRoleUpdated

  # column name
  notificationSettingsTeamManagedEventUpdated

  # column name
  notificationSettingsTeamManagedFormUpdated

  # column name
  notificationSettingsTeamManagedMemberRoleUpdated

  # column name
  notificationSettingsTeamManagedMembershipRequestUpdated

  # column name
  notificationSettingsTeamSubscribedEventCreated

  # column name
  notificationSettingsThreadSubscribedAnswered

  # column name
  notificationSettingsThreadSubscribedUpdated

  # column name
  settingsDarkModeActivated

  # column name
  settingsGdprEndOfLifeAnonymize

  # column name
  settingsGdprEndOfLifeExport

  # column name
  statsActionStreak

  # column name
  statsCommentCount

  # column name
  statsLastActionAt

  # column name
  statsLastComment

  # column name
  statsLastPostAt

  # column name
  statsLastReplyAt

  # column name
  statsPoints

  # column name
  statsPostCount

  # column name
  statsPostStreak

  # column name
  statsReplyCount

  # column name
  statsReplyStreak

  # column name
  statsUploadCount

  # column name
  tenantId
}

input UserInfoUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: UserInfoIncInput

  # sets the columns of the filtered rows to the given values
  _set: UserInfoSetInput

  # filter the rows which have to be updated
  where: UserInfoBoolExp!
}

# aggregate variance on columns
type UserInfoVarianceFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

# order by variance() on columns of table "user_info"
input UserInfoVarianceOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type UserInfoVarPopFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

# order by varPop() on columns of table "user_info"
input UserInfoVarPopOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type UserInfoVarSampFields {
  createdById: Float
  id: Float
  notificationSettingsAdminEventValidationApproved: Float
  notificationSettingsAdminEventValidationRejected: Float
  notificationSettingsAdminEventValidationStarted: Float
  notificationSettingsAdminEventValidationStep: Float
  notificationSettingsAdminReportCreated: Float
  notificationSettingsAdminRoleUpdated: Float
  notificationSettingsAdminTeamLegalFileUpdated: Float
  notificationSettingsAdminTeamSocialUpdated: Float
  notificationSettingsAdminThreadAssigned: Float
  notificationSettingsAdminThreadAssignedStale: Float
  notificationSettingsAdminThreadAssignedStaleThreshold: Float
  notificationSettingsAdminThreadStale: Float
  notificationSettingsAdminThreadStaleThreshold: Float
  notificationSettingsBadgeUnlocked: Float
  notificationSettingsBlogSubscribedUpdated: Float
  notificationSettingsContentRemoved: Float
  notificationSettingsEventCreated: Float
  notificationSettingsEventManagedApproved: Float
  notificationSettingsEventManagedRegistrationCreated: Float
  notificationSettingsEventManagedRejected: Float
  notificationSettingsEventSubscribedUpdated: Float
  notificationSettingsMentionned: Float
  notificationSettingsRoleUpdated: Float
  notificationSettingsTeamManagedEventUpdated: Float
  notificationSettingsTeamManagedFormUpdated: Float
  notificationSettingsTeamManagedMemberRoleUpdated: Float
  notificationSettingsTeamManagedMembershipRequestUpdated: Float
  notificationSettingsTeamSubscribedEventCreated: Float
  notificationSettingsThreadSubscribedAnswered: Float
  notificationSettingsThreadSubscribedUpdated: Float
  statsActionStreak: Float
  statsCommentCount: Float
  statsPoints: Float
  statsPostCount: Float
  statsPostStreak: Float
  statsReplyCount: Float
  statsReplyStreak: Float
  statsUploadCount: Float
  tenantId: Float
}

# order by varSamp() on columns of table "user_info"
input UserInfoVarSampOrderBy {
  createdById: OrderBy
  id: OrderBy
  notificationSettingsAdminEventValidationApproved: OrderBy
  notificationSettingsAdminEventValidationRejected: OrderBy
  notificationSettingsAdminEventValidationStarted: OrderBy
  notificationSettingsAdminEventValidationStep: OrderBy
  notificationSettingsAdminReportCreated: OrderBy
  notificationSettingsAdminRoleUpdated: OrderBy
  notificationSettingsAdminTeamLegalFileUpdated: OrderBy
  notificationSettingsAdminTeamSocialUpdated: OrderBy
  notificationSettingsAdminThreadAssigned: OrderBy
  notificationSettingsAdminThreadAssignedStale: OrderBy
  notificationSettingsAdminThreadAssignedStaleThreshold: OrderBy
  notificationSettingsAdminThreadStale: OrderBy
  notificationSettingsAdminThreadStaleThreshold: OrderBy
  notificationSettingsBadgeUnlocked: OrderBy
  notificationSettingsBlogSubscribedUpdated: OrderBy
  notificationSettingsContentRemoved: OrderBy
  notificationSettingsEventCreated: OrderBy
  notificationSettingsEventManagedApproved: OrderBy
  notificationSettingsEventManagedRegistrationCreated: OrderBy
  notificationSettingsEventManagedRejected: OrderBy
  notificationSettingsEventSubscribedUpdated: OrderBy
  notificationSettingsMentionned: OrderBy
  notificationSettingsRoleUpdated: OrderBy
  notificationSettingsTeamManagedEventUpdated: OrderBy
  notificationSettingsTeamManagedFormUpdated: OrderBy
  notificationSettingsTeamManagedMemberRoleUpdated: OrderBy
  notificationSettingsTeamManagedMembershipRequestUpdated: OrderBy
  notificationSettingsTeamSubscribedEventCreated: OrderBy
  notificationSettingsThreadSubscribedAnswered: OrderBy
  notificationSettingsThreadSubscribedUpdated: OrderBy
  statsActionStreak: OrderBy
  statsCommentCount: OrderBy
  statsPoints: OrderBy
  statsPostCount: OrderBy
  statsPostStreak: OrderBy
  statsReplyCount: OrderBy
  statsReplyStreak: OrderBy
  statsUploadCount: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "validation"
type Validation {
  # An object relationship
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  lastActiveDate: timestamptz

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  type: String!
}

# aggregated selection of "validation"
type ValidationAggregate {
  aggregate: ValidationAggregateFields
  nodes: [Validation!]!
}

input ValidationAggregateBoolExp {
  count: validationAggregateBoolExpCount
}

input validationAggregateBoolExpCount {
  arguments: [ValidationSelectColumn!]
  distinct: Boolean
  filter: ValidationBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "validation"
type ValidationAggregateFields {
  avg: ValidationAvgFields
  count(columns: [ValidationSelectColumn!], distinct: Boolean): Int!
  max: ValidationMaxFields
  min: ValidationMinFields
  stddev: ValidationStddevFields
  stddevPop: ValidationStddevPopFields
  stddevSamp: ValidationStddevSampFields
  sum: ValidationSumFields
  varPop: ValidationVarPopFields
  varSamp: ValidationVarSampFields
  variance: ValidationVarianceFields
}

# order by aggregate values of table "validation"
input ValidationAggregateOrderBy {
  avg: ValidationAvgOrderBy
  count: OrderBy
  max: ValidationMaxOrderBy
  min: ValidationMinOrderBy
  stddev: ValidationStddevOrderBy
  stddevPop: ValidationStddevPopOrderBy
  stddevSamp: ValidationStddevSampOrderBy
  sum: ValidationSumOrderBy
  varPop: ValidationVarPopOrderBy
  varSamp: ValidationVarSampOrderBy
  variance: ValidationVarianceOrderBy
}

# input type for inserting array relation for remote table "validation"
input ValidationArrRelInsertInput {
  data: [ValidationInsertInput!]!

  # upsert condition
  onConflict: ValidationOnConflict
}

# aggregate avg on columns
type ValidationAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by avg() on columns of table "validation"
input ValidationAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Boolean expression to filter rows from the table "validation". All fields are combined with a logical 'AND'.
input ValidationBoolExp {
  _and: [ValidationBoolExp!]
  _not: ValidationBoolExp
  _or: [ValidationBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  type: StringComparisonExp
}

# unique or primary key constraints on table "validation"
enum ValidationConstraint {
  # unique or primary key constraint on columns "id"
  validation_pkey
}

# input type for incrementing numeric columns in table "validation"
input ValidationIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# input type for inserting data into table "validation"
input ValidationInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  type: String
}

# aggregate max on columns
type ValidationMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# order by max() on columns of table "validation"
input ValidationMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# aggregate min on columns
type ValidationMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# order by min() on columns of table "validation"
input ValidationMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  type: OrderBy
}

# response of any mutation on the table "validation"
type ValidationMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Validation!]!
}

# on_conflict condition type for table "validation"
input ValidationOnConflict {
  constraint: ValidationConstraint!
  updateColumns: [ValidationUpdateColumn!]! = []
  where: ValidationBoolExp
}

# Ordering options when selecting data from "validation".
input ValidationOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  type: OrderBy
}

# primary key columns input for table: validation
input ValidationPkColumnsInput {
  id: bigint!
}

# select columns of table "validation"
enum ValidationSelectColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  tenantId

  # column name
  type
}

# input type for updating data in table "validation"
input ValidationSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# aggregate stddev on columns
type ValidationStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddev() on columns of table "validation"
input ValidationStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevPop on columns
type ValidationStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevPop() on columns of table "validation"
input ValidationStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate stddevSamp on columns
type ValidationStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by stddevSamp() on columns of table "validation"
input ValidationStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# Streaming cursor of the table "validation"
input ValidationStreamCursorInput {
  # Stream column input with initial value
  initialValue: ValidationStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input ValidationStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  type: String
}

# aggregate sum on columns
type ValidationSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
}

# order by sum() on columns of table "validation"
input ValidationSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# update columns of table "validation"
enum ValidationUpdateColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  tenantId

  # column name
  type
}

input ValidationUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: ValidationIncInput

  # sets the columns of the filtered rows to the given values
  _set: ValidationSetInput

  # filter the rows which have to be updated
  where: ValidationBoolExp!
}

# aggregate variance on columns
type ValidationVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by variance() on columns of table "validation"
input ValidationVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varPop on columns
type ValidationVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varPop() on columns of table "validation"
input ValidationVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# aggregate varSamp on columns
type ValidationVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
}

# order by varSamp() on columns of table "validation"
input ValidationVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
}

# columns and relationships of "vote"
type Vote {
  # An object relationship
  content: Content
  contentId: bigint
  createdAt: timestamptz!
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint!

  # An object relationship
  individual: Individual
  lastActiveDate: timestamptz

  # An object relationship
  tenant: Tenant!
  tenantId: bigint!
  value: smallint!
}

# aggregated selection of "vote"
type VoteAggregate {
  aggregate: VoteAggregateFields
  nodes: [Vote!]!
}

input VoteAggregateBoolExp {
  count: voteAggregateBoolExpCount
}

input voteAggregateBoolExpCount {
  arguments: [VoteSelectColumn!]
  distinct: Boolean
  filter: VoteBoolExp
  predicate: IntComparisonExp!
}

# aggregate fields of "vote"
type VoteAggregateFields {
  avg: VoteAvgFields
  count(columns: [VoteSelectColumn!], distinct: Boolean): Int!
  max: VoteMaxFields
  min: VoteMinFields
  stddev: VoteStddevFields
  stddevPop: VoteStddevPopFields
  stddevSamp: VoteStddevSampFields
  sum: VoteSumFields
  varPop: VoteVarPopFields
  varSamp: VoteVarSampFields
  variance: VoteVarianceFields
}

# order by aggregate values of table "vote"
input VoteAggregateOrderBy {
  avg: VoteAvgOrderBy
  count: OrderBy
  max: VoteMaxOrderBy
  min: VoteMinOrderBy
  stddev: VoteStddevOrderBy
  stddevPop: VoteStddevPopOrderBy
  stddevSamp: VoteStddevSampOrderBy
  sum: VoteSumOrderBy
  varPop: VoteVarPopOrderBy
  varSamp: VoteVarSampOrderBy
  variance: VoteVarianceOrderBy
}

# input type for inserting array relation for remote table "vote"
input VoteArrRelInsertInput {
  data: [VoteInsertInput!]!

  # upsert condition
  onConflict: VoteOnConflict
}

# aggregate avg on columns
type VoteAvgFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

# order by avg() on columns of table "vote"
input VoteAvgOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# Boolean expression to filter rows from the table "vote". All fields are combined with a logical 'AND'.
input VoteBoolExp {
  _and: [VoteBoolExp!]
  _not: VoteBoolExp
  _or: [VoteBoolExp!]
  content: ContentBoolExp
  contentId: BigintComparisonExp
  createdAt: TimestamptzComparisonExp
  createdById: BigintComparisonExp
  deletedAt: TimestamptzComparisonExp
  hiddenAt: TimestamptzComparisonExp
  id: BigintComparisonExp
  individual: IndividualBoolExp
  lastActiveDate: TimestamptzComparisonExp
  tenant: TenantBoolExp
  tenantId: BigintComparisonExp
  value: SmallintComparisonExp
}

# unique or primary key constraints on table "vote"
enum VoteConstraint {
  # unique or primary key constraint on columns "id"
  vote_pkey
}

# input type for incrementing numeric columns in table "vote"
input VoteIncInput {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

# input type for inserting data into table "vote"
input VoteInsertInput {
  content: ContentObjRelInsertInput
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  individual: IndividualObjRelInsertInput
  lastActiveDate: timestamptz
  tenant: TenantObjRelInsertInput
  tenantId: bigint
  value: smallint
}

# aggregate max on columns
type VoteMaxFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

# order by max() on columns of table "vote"
input VoteMaxOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# aggregate min on columns
type VoteMinFields {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

# order by min() on columns of table "vote"
input VoteMinOrderBy {
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  lastActiveDate: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# response of any mutation on the table "vote"
type VoteMutationResponse {
  # number of rows affected by the mutation
  affectedRows: Int!

  # data from the rows affected by the mutation
  returning: [Vote!]!
}

# on_conflict condition type for table "vote"
input VoteOnConflict {
  constraint: VoteConstraint!
  updateColumns: [VoteUpdateColumn!]! = []
  where: VoteBoolExp
}

# Ordering options when selecting data from "vote".
input VoteOrderBy {
  content: ContentOrderBy
  contentId: OrderBy
  createdAt: OrderBy
  createdById: OrderBy
  deletedAt: OrderBy
  hiddenAt: OrderBy
  id: OrderBy
  individual: IndividualOrderBy
  lastActiveDate: OrderBy
  tenant: TenantOrderBy
  tenantId: OrderBy
  value: OrderBy
}

# primary key columns input for table: vote
input VotePkColumnsInput {
  id: bigint!
}

# select columns of table "vote"
enum VoteSelectColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  tenantId

  # column name
  value
}

# input type for updating data in table "vote"
input VoteSetInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

# aggregate stddev on columns
type VoteStddevFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

# order by stddev() on columns of table "vote"
input VoteStddevOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# aggregate stddevPop on columns
type VoteStddevPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

# order by stddevPop() on columns of table "vote"
input VoteStddevPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# aggregate stddevSamp on columns
type VoteStddevSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

# order by stddevSamp() on columns of table "vote"
input VoteStddevSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# Streaming cursor of the table "vote"
input VoteStreamCursorInput {
  # Stream column input with initial value
  initialValue: VoteStreamCursorValueInput!

  # cursor ordering
  ordering: CursorOrdering
}

# Initial value of the column from where the streaming should start
input VoteStreamCursorValueInput {
  contentId: bigint
  createdAt: timestamptz
  createdById: bigint
  deletedAt: timestamptz
  hiddenAt: timestamptz
  id: bigint
  lastActiveDate: timestamptz
  tenantId: bigint
  value: smallint
}

# aggregate sum on columns
type VoteSumFields {
  contentId: bigint
  createdById: bigint
  id: bigint
  tenantId: bigint
  value: smallint
}

# order by sum() on columns of table "vote"
input VoteSumOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# update columns of table "vote"
enum VoteUpdateColumn {
  # column name
  contentId

  # column name
  createdAt

  # column name
  createdById

  # column name
  deletedAt

  # column name
  hiddenAt

  # column name
  id

  # column name
  lastActiveDate

  # column name
  tenantId

  # column name
  value
}

input VoteUpdates {
  # increments the numeric columns with given value of the filtered values
  _inc: VoteIncInput

  # sets the columns of the filtered rows to the given values
  _set: VoteSetInput

  # filter the rows which have to be updated
  where: VoteBoolExp!
}

# aggregate variance on columns
type VoteVarianceFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

# order by variance() on columns of table "vote"
input VoteVarianceOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# aggregate varPop on columns
type VoteVarPopFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

# order by varPop() on columns of table "vote"
input VoteVarPopOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

# aggregate varSamp on columns
type VoteVarSampFields {
  contentId: Float
  createdById: Float
  id: Float
  tenantId: Float
  value: Float
}

# order by varSamp() on columns of table "vote"
input VoteVarSampOrderBy {
  contentId: OrderBy
  createdById: OrderBy
  id: OrderBy
  tenantId: OrderBy
  value: OrderBy
}

